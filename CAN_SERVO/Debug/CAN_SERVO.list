
CAN_SERVO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0d4  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800c2cc  0800c2cc  0000d2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c53c  0800c53c  0000e068  2**0
                  CONTENTS
  4 .ARM          00000008  0800c53c  0800c53c  0000d53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c544  0800c544  0000e068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c544  0800c544  0000d544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c548  0800c548  0000d548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800c54c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aec  20000068  0800c5b4  0000e068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b54  0800c5b4  0000eb54  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027cad  00000000  00000000  0000e09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fbe  00000000  00000000  00035d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002200  00000000  00000000  0003ad10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a38  00000000  00000000  0003cf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034170  00000000  00000000  0003e948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002950c  00000000  00000000  00072ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014c989  00000000  00000000  0009bfc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e894d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ce8  00000000  00000000  001e8990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001f2678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000068 	.word	0x20000068
 8000214:	00000000 	.word	0x00000000
 8000218:	0800c2b4 	.word	0x0800c2b4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000006c 	.word	0x2000006c
 8000234:	0800c2b4 	.word	0x0800c2b4

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_d2uiz>:
 80005b0:	004a      	lsls	r2, r1, #1
 80005b2:	d211      	bcs.n	80005d8 <__aeabi_d2uiz+0x28>
 80005b4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80005b8:	d211      	bcs.n	80005de <__aeabi_d2uiz+0x2e>
 80005ba:	d50d      	bpl.n	80005d8 <__aeabi_d2uiz+0x28>
 80005bc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80005c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005c4:	d40e      	bmi.n	80005e4 <__aeabi_d2uiz+0x34>
 80005c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005d2:	fa23 f002 	lsr.w	r0, r3, r2
 80005d6:	4770      	bx	lr
 80005d8:	f04f 0000 	mov.w	r0, #0
 80005dc:	4770      	bx	lr
 80005de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005e2:	d102      	bne.n	80005ea <__aeabi_d2uiz+0x3a>
 80005e4:	f04f 30ff 	mov.w	r0, #4294967295
 80005e8:	4770      	bx	lr
 80005ea:	f04f 0000 	mov.w	r0, #0
 80005ee:	4770      	bx	lr

080005f0 <__aeabi_uldivmod>:
 80005f0:	b953      	cbnz	r3, 8000608 <__aeabi_uldivmod+0x18>
 80005f2:	b94a      	cbnz	r2, 8000608 <__aeabi_uldivmod+0x18>
 80005f4:	2900      	cmp	r1, #0
 80005f6:	bf08      	it	eq
 80005f8:	2800      	cmpeq	r0, #0
 80005fa:	bf1c      	itt	ne
 80005fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000600:	f04f 30ff 	movne.w	r0, #4294967295
 8000604:	f000 b97e 	b.w	8000904 <__aeabi_idiv0>
 8000608:	f1ad 0c08 	sub.w	ip, sp, #8
 800060c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000610:	f000 f806 	bl	8000620 <__udivmoddi4>
 8000614:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr

08000620 <__udivmoddi4>:
 8000620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000624:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000626:	460c      	mov	r4, r1
 8000628:	2b00      	cmp	r3, #0
 800062a:	d14d      	bne.n	80006c8 <__udivmoddi4+0xa8>
 800062c:	428a      	cmp	r2, r1
 800062e:	460f      	mov	r7, r1
 8000630:	4684      	mov	ip, r0
 8000632:	4696      	mov	lr, r2
 8000634:	fab2 f382 	clz	r3, r2
 8000638:	d960      	bls.n	80006fc <__udivmoddi4+0xdc>
 800063a:	b14b      	cbz	r3, 8000650 <__udivmoddi4+0x30>
 800063c:	fa02 fe03 	lsl.w	lr, r2, r3
 8000640:	f1c3 0220 	rsb	r2, r3, #32
 8000644:	409f      	lsls	r7, r3
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f202 	lsr.w	r2, r0, r2
 800064e:	4317      	orrs	r7, r2
 8000650:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000654:	fa1f f48e 	uxth.w	r4, lr
 8000658:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800065c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000660:	fb06 7711 	mls	r7, r6, r1, r7
 8000664:	fb01 f004 	mul.w	r0, r1, r4
 8000668:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800066c:	4290      	cmp	r0, r2
 800066e:	d908      	bls.n	8000682 <__udivmoddi4+0x62>
 8000670:	eb1e 0202 	adds.w	r2, lr, r2
 8000674:	f101 37ff 	add.w	r7, r1, #4294967295
 8000678:	d202      	bcs.n	8000680 <__udivmoddi4+0x60>
 800067a:	4290      	cmp	r0, r2
 800067c:	f200 812d 	bhi.w	80008da <__udivmoddi4+0x2ba>
 8000680:	4639      	mov	r1, r7
 8000682:	1a12      	subs	r2, r2, r0
 8000684:	fa1f fc8c 	uxth.w	ip, ip
 8000688:	fbb2 f0f6 	udiv	r0, r2, r6
 800068c:	fb06 2210 	mls	r2, r6, r0, r2
 8000690:	fb00 f404 	mul.w	r4, r0, r4
 8000694:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000698:	4564      	cmp	r4, ip
 800069a:	d908      	bls.n	80006ae <__udivmoddi4+0x8e>
 800069c:	eb1e 0c0c 	adds.w	ip, lr, ip
 80006a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80006a4:	d202      	bcs.n	80006ac <__udivmoddi4+0x8c>
 80006a6:	4564      	cmp	r4, ip
 80006a8:	f200 811a 	bhi.w	80008e0 <__udivmoddi4+0x2c0>
 80006ac:	4610      	mov	r0, r2
 80006ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006b2:	ebac 0c04 	sub.w	ip, ip, r4
 80006b6:	2100      	movs	r1, #0
 80006b8:	b125      	cbz	r5, 80006c4 <__udivmoddi4+0xa4>
 80006ba:	fa2c f303 	lsr.w	r3, ip, r3
 80006be:	2200      	movs	r2, #0
 80006c0:	e9c5 3200 	strd	r3, r2, [r5]
 80006c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006c8:	428b      	cmp	r3, r1
 80006ca:	d905      	bls.n	80006d8 <__udivmoddi4+0xb8>
 80006cc:	b10d      	cbz	r5, 80006d2 <__udivmoddi4+0xb2>
 80006ce:	e9c5 0100 	strd	r0, r1, [r5]
 80006d2:	2100      	movs	r1, #0
 80006d4:	4608      	mov	r0, r1
 80006d6:	e7f5      	b.n	80006c4 <__udivmoddi4+0xa4>
 80006d8:	fab3 f183 	clz	r1, r3
 80006dc:	2900      	cmp	r1, #0
 80006de:	d14d      	bne.n	800077c <__udivmoddi4+0x15c>
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	f0c0 80f2 	bcc.w	80008ca <__udivmoddi4+0x2aa>
 80006e6:	4290      	cmp	r0, r2
 80006e8:	f080 80ef 	bcs.w	80008ca <__udivmoddi4+0x2aa>
 80006ec:	4606      	mov	r6, r0
 80006ee:	4623      	mov	r3, r4
 80006f0:	4608      	mov	r0, r1
 80006f2:	2d00      	cmp	r5, #0
 80006f4:	d0e6      	beq.n	80006c4 <__udivmoddi4+0xa4>
 80006f6:	e9c5 6300 	strd	r6, r3, [r5]
 80006fa:	e7e3      	b.n	80006c4 <__udivmoddi4+0xa4>
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	f040 80a2 	bne.w	8000846 <__udivmoddi4+0x226>
 8000702:	1a8a      	subs	r2, r1, r2
 8000704:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000708:	fa1f f68e 	uxth.w	r6, lr
 800070c:	2101      	movs	r1, #1
 800070e:	fbb2 f4f7 	udiv	r4, r2, r7
 8000712:	fb07 2014 	mls	r0, r7, r4, r2
 8000716:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800071a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800071e:	fb06 f004 	mul.w	r0, r6, r4
 8000722:	4290      	cmp	r0, r2
 8000724:	d90f      	bls.n	8000746 <__udivmoddi4+0x126>
 8000726:	eb1e 0202 	adds.w	r2, lr, r2
 800072a:	f104 38ff 	add.w	r8, r4, #4294967295
 800072e:	bf2c      	ite	cs
 8000730:	f04f 0901 	movcs.w	r9, #1
 8000734:	f04f 0900 	movcc.w	r9, #0
 8000738:	4290      	cmp	r0, r2
 800073a:	d903      	bls.n	8000744 <__udivmoddi4+0x124>
 800073c:	f1b9 0f00 	cmp.w	r9, #0
 8000740:	f000 80c8 	beq.w	80008d4 <__udivmoddi4+0x2b4>
 8000744:	4644      	mov	r4, r8
 8000746:	1a12      	subs	r2, r2, r0
 8000748:	fa1f fc8c 	uxth.w	ip, ip
 800074c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000750:	fb07 2210 	mls	r2, r7, r0, r2
 8000754:	fb00 f606 	mul.w	r6, r0, r6
 8000758:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800075c:	4566      	cmp	r6, ip
 800075e:	d908      	bls.n	8000772 <__udivmoddi4+0x152>
 8000760:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000764:	f100 32ff 	add.w	r2, r0, #4294967295
 8000768:	d202      	bcs.n	8000770 <__udivmoddi4+0x150>
 800076a:	4566      	cmp	r6, ip
 800076c:	f200 80bb 	bhi.w	80008e6 <__udivmoddi4+0x2c6>
 8000770:	4610      	mov	r0, r2
 8000772:	ebac 0c06 	sub.w	ip, ip, r6
 8000776:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800077a:	e79d      	b.n	80006b8 <__udivmoddi4+0x98>
 800077c:	f1c1 0620 	rsb	r6, r1, #32
 8000780:	408b      	lsls	r3, r1
 8000782:	fa04 fe01 	lsl.w	lr, r4, r1
 8000786:	fa22 f706 	lsr.w	r7, r2, r6
 800078a:	fa20 fc06 	lsr.w	ip, r0, r6
 800078e:	40f4      	lsrs	r4, r6
 8000790:	408a      	lsls	r2, r1
 8000792:	431f      	orrs	r7, r3
 8000794:	ea4e 030c 	orr.w	r3, lr, ip
 8000798:	fa00 fe01 	lsl.w	lr, r0, r1
 800079c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007a4:	fa1f fc87 	uxth.w	ip, r7
 80007a8:	fbb4 f0f8 	udiv	r0, r4, r8
 80007ac:	fb08 4410 	mls	r4, r8, r0, r4
 80007b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007b4:	fb00 f90c 	mul.w	r9, r0, ip
 80007b8:	45a1      	cmp	r9, r4
 80007ba:	d90e      	bls.n	80007da <__udivmoddi4+0x1ba>
 80007bc:	193c      	adds	r4, r7, r4
 80007be:	f100 3aff 	add.w	sl, r0, #4294967295
 80007c2:	bf2c      	ite	cs
 80007c4:	f04f 0b01 	movcs.w	fp, #1
 80007c8:	f04f 0b00 	movcc.w	fp, #0
 80007cc:	45a1      	cmp	r9, r4
 80007ce:	d903      	bls.n	80007d8 <__udivmoddi4+0x1b8>
 80007d0:	f1bb 0f00 	cmp.w	fp, #0
 80007d4:	f000 8093 	beq.w	80008fe <__udivmoddi4+0x2de>
 80007d8:	4650      	mov	r0, sl
 80007da:	eba4 0409 	sub.w	r4, r4, r9
 80007de:	fa1f f983 	uxth.w	r9, r3
 80007e2:	fbb4 f3f8 	udiv	r3, r4, r8
 80007e6:	fb08 4413 	mls	r4, r8, r3, r4
 80007ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80007ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007f2:	45a4      	cmp	ip, r4
 80007f4:	d906      	bls.n	8000804 <__udivmoddi4+0x1e4>
 80007f6:	193c      	adds	r4, r7, r4
 80007f8:	f103 38ff 	add.w	r8, r3, #4294967295
 80007fc:	d201      	bcs.n	8000802 <__udivmoddi4+0x1e2>
 80007fe:	45a4      	cmp	ip, r4
 8000800:	d87a      	bhi.n	80008f8 <__udivmoddi4+0x2d8>
 8000802:	4643      	mov	r3, r8
 8000804:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000808:	eba4 040c 	sub.w	r4, r4, ip
 800080c:	fba0 9802 	umull	r9, r8, r0, r2
 8000810:	4544      	cmp	r4, r8
 8000812:	46cc      	mov	ip, r9
 8000814:	4643      	mov	r3, r8
 8000816:	d302      	bcc.n	800081e <__udivmoddi4+0x1fe>
 8000818:	d106      	bne.n	8000828 <__udivmoddi4+0x208>
 800081a:	45ce      	cmp	lr, r9
 800081c:	d204      	bcs.n	8000828 <__udivmoddi4+0x208>
 800081e:	3801      	subs	r0, #1
 8000820:	ebb9 0c02 	subs.w	ip, r9, r2
 8000824:	eb68 0307 	sbc.w	r3, r8, r7
 8000828:	b15d      	cbz	r5, 8000842 <__udivmoddi4+0x222>
 800082a:	ebbe 020c 	subs.w	r2, lr, ip
 800082e:	eb64 0403 	sbc.w	r4, r4, r3
 8000832:	fa04 f606 	lsl.w	r6, r4, r6
 8000836:	fa22 f301 	lsr.w	r3, r2, r1
 800083a:	40cc      	lsrs	r4, r1
 800083c:	431e      	orrs	r6, r3
 800083e:	e9c5 6400 	strd	r6, r4, [r5]
 8000842:	2100      	movs	r1, #0
 8000844:	e73e      	b.n	80006c4 <__udivmoddi4+0xa4>
 8000846:	fa02 fe03 	lsl.w	lr, r2, r3
 800084a:	f1c3 0120 	rsb	r1, r3, #32
 800084e:	fa04 f203 	lsl.w	r2, r4, r3
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	40cc      	lsrs	r4, r1
 8000858:	ea4f 471e 	mov.w	r7, lr, lsr #16
 800085c:	fa20 f101 	lsr.w	r1, r0, r1
 8000860:	fa1f f68e 	uxth.w	r6, lr
 8000864:	fbb4 f0f7 	udiv	r0, r4, r7
 8000868:	430a      	orrs	r2, r1
 800086a:	fb07 4410 	mls	r4, r7, r0, r4
 800086e:	0c11      	lsrs	r1, r2, #16
 8000870:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000874:	fb00 f406 	mul.w	r4, r0, r6
 8000878:	428c      	cmp	r4, r1
 800087a:	d90e      	bls.n	800089a <__udivmoddi4+0x27a>
 800087c:	eb1e 0101 	adds.w	r1, lr, r1
 8000880:	f100 38ff 	add.w	r8, r0, #4294967295
 8000884:	bf2c      	ite	cs
 8000886:	f04f 0901 	movcs.w	r9, #1
 800088a:	f04f 0900 	movcc.w	r9, #0
 800088e:	428c      	cmp	r4, r1
 8000890:	d902      	bls.n	8000898 <__udivmoddi4+0x278>
 8000892:	f1b9 0f00 	cmp.w	r9, #0
 8000896:	d02c      	beq.n	80008f2 <__udivmoddi4+0x2d2>
 8000898:	4640      	mov	r0, r8
 800089a:	1b09      	subs	r1, r1, r4
 800089c:	b292      	uxth	r2, r2
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	fb07 1114 	mls	r1, r7, r4, r1
 80008a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008aa:	fb04 f106 	mul.w	r1, r4, r6
 80008ae:	4291      	cmp	r1, r2
 80008b0:	d907      	bls.n	80008c2 <__udivmoddi4+0x2a2>
 80008b2:	eb1e 0202 	adds.w	r2, lr, r2
 80008b6:	f104 38ff 	add.w	r8, r4, #4294967295
 80008ba:	d201      	bcs.n	80008c0 <__udivmoddi4+0x2a0>
 80008bc:	4291      	cmp	r1, r2
 80008be:	d815      	bhi.n	80008ec <__udivmoddi4+0x2cc>
 80008c0:	4644      	mov	r4, r8
 80008c2:	1a52      	subs	r2, r2, r1
 80008c4:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 80008c8:	e721      	b.n	800070e <__udivmoddi4+0xee>
 80008ca:	1a86      	subs	r6, r0, r2
 80008cc:	eb64 0303 	sbc.w	r3, r4, r3
 80008d0:	2001      	movs	r0, #1
 80008d2:	e70e      	b.n	80006f2 <__udivmoddi4+0xd2>
 80008d4:	3c02      	subs	r4, #2
 80008d6:	4472      	add	r2, lr
 80008d8:	e735      	b.n	8000746 <__udivmoddi4+0x126>
 80008da:	3902      	subs	r1, #2
 80008dc:	4472      	add	r2, lr
 80008de:	e6d0      	b.n	8000682 <__udivmoddi4+0x62>
 80008e0:	44f4      	add	ip, lr
 80008e2:	3802      	subs	r0, #2
 80008e4:	e6e3      	b.n	80006ae <__udivmoddi4+0x8e>
 80008e6:	44f4      	add	ip, lr
 80008e8:	3802      	subs	r0, #2
 80008ea:	e742      	b.n	8000772 <__udivmoddi4+0x152>
 80008ec:	3c02      	subs	r4, #2
 80008ee:	4472      	add	r2, lr
 80008f0:	e7e7      	b.n	80008c2 <__udivmoddi4+0x2a2>
 80008f2:	3802      	subs	r0, #2
 80008f4:	4471      	add	r1, lr
 80008f6:	e7d0      	b.n	800089a <__udivmoddi4+0x27a>
 80008f8:	3b02      	subs	r3, #2
 80008fa:	443c      	add	r4, r7
 80008fc:	e782      	b.n	8000804 <__udivmoddi4+0x1e4>
 80008fe:	3802      	subs	r0, #2
 8000900:	443c      	add	r4, r7
 8000902:	e76a      	b.n	80007da <__udivmoddi4+0x1ba>

08000904 <__aeabi_idiv0>:
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <canardInit>:
                void* mem_arena,
                size_t mem_arena_size,
                CanardOnTransferReception on_reception,
                CanardShouldAcceptTransfer should_accept,
                void* user_reference)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
 8000914:	603b      	str	r3, [r7, #0]
     * If your application fails here, make sure it's not built in 64-bit mode.
     * Refer to the design documentation for more info.
     */
    CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

    memset(out_ins, 0, sizeof(*out_ins));
 8000916:	222c      	movs	r2, #44	@ 0x2c
 8000918:	2100      	movs	r1, #0
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	f00a fed4 	bl	800b6c8 <memset>

    out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
    out_ins->on_reception = on_reception;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	609a      	str	r2, [r3, #8]
    out_ins->should_accept = should_accept;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	6a3a      	ldr	r2, [r7, #32]
 8000930:	605a      	str	r2, [r3, #4]
    out_ins->rx_states = NULL;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
    out_ins->tx_queue = NULL;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	@ 0x24
    out_ins->user_reference = user_reference;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000942:	629a      	str	r2, [r3, #40]	@ 0x28
#if CANARD_ENABLE_TAO_OPTION
    out_ins->tao_disabled = false;
#endif
    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	095b      	lsrs	r3, r3, #5
 8000948:	617b      	str	r3, [r7, #20]
    if (pool_capacity > 0xFFFFU)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000950:	d302      	bcc.n	8000958 <canardInit+0x50>
    {
        pool_capacity = 0xFFFFU;
 8000952:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000956:	617b      	str	r3, [r7, #20]
    }

    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	330c      	adds	r3, #12
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	b292      	uxth	r2, r2
 8000960:	68b9      	ldr	r1, [r7, #8]
 8000962:	4618      	mov	r0, r3
 8000964:	f001 ff6d 	bl	8002842 <initPoolAllocator>
}
 8000968:	bf00      	nop
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <canardSetLocalNodeID>:
    CANARD_ASSERT(ins != NULL);
    return ins->user_reference;
}

void canardSetLocalNodeID(CanardInstance* ins, uint8_t self_node_id)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);

    if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d109      	bne.n	8000998 <canardSetLocalNodeID+0x28>
 8000984:	78fb      	ldrb	r3, [r7, #3]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d006      	beq.n	8000998 <canardSetLocalNodeID+0x28>
        (self_node_id >= CANARD_MIN_NODE_ID) &&
        (self_node_id <= CANARD_MAX_NODE_ID))
 800098a:	f997 3003 	ldrsb.w	r3, [r7, #3]
        (self_node_id >= CANARD_MIN_NODE_ID) &&
 800098e:	2b00      	cmp	r3, #0
 8000990:	db02      	blt.n	8000998 <canardSetLocalNodeID+0x28>
    {
        ins->node_id = self_node_id;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	78fa      	ldrb	r2, [r7, #3]
 8000996:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        CANARD_ASSERT(false);
    }
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <canardGetLocalNodeID>:

uint8_t canardGetLocalNodeID(const CanardInstance* ins)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
    return ins->node_id;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	781b      	ldrb	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <canardBroadcast>:
#endif
#if CANARD_ENABLE_CANFD
                        ,bool canfd
#endif
)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08e      	sub	sp, #56	@ 0x38
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	e9c7 2300 	strd	r2, r3, [r7]
    // create transfer object
    CanardTxTransfer transfer_object = {
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	2228      	movs	r2, #40	@ 0x28
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f00a fe79 	bl	800b6c8 <memset>
 80009d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009da:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80009de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80009e2:	843b      	strh	r3, [r7, #32]
 80009e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80009e8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80009ec:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80009f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80009f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80009f8:	863b      	strh	r3, [r7, #48]	@ 0x30
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };

    return canardBroadcastObj(ins, &transfer_object);
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4619      	mov	r1, r3
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	f000 f805 	bl	8000a10 <canardBroadcastObj>
 8000a06:	4603      	mov	r3, r0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3738      	adds	r7, #56	@ 0x38
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <canardBroadcastObj>:

int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b087      	sub	sp, #28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d106      	bne.n	8000a30 <canardBroadcastObj+0x20>
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	8c1b      	ldrh	r3, [r3, #32]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d002      	beq.n	8000a30 <canardBroadcastObj+0x20>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000a2a:	f06f 0301 	mvn.w	r3, #1
 8000a2e:	e070      	b.n	8000b12 <canardBroadcastObj+0x102>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	7e1b      	ldrb	r3, [r3, #24]
 8000a34:	2b1f      	cmp	r3, #31
 8000a36:	d902      	bls.n	8000a3e <canardBroadcastObj+0x2e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000a38:	f06f 0301 	mvn.w	r3, #1
 8000a3c:	e069      	b.n	8000b12 <canardBroadcastObj+0x102>
    }

    uint32_t can_id = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0xFFFFU;
 8000a42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a46:	827b      	strh	r3, [r7, #18]

    if (canardGetLocalNodeID(ins) == 0)
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ffab 	bl	80009a4 <canardGetLocalNodeID>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d138      	bne.n	8000ac6 <canardBroadcastObj+0xb6>
    {
        if (transfer_object->payload_len > 7)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	8c1b      	ldrh	r3, [r3, #32]
 8000a58:	2b07      	cmp	r3, #7
 8000a5a:	d902      	bls.n	8000a62 <canardBroadcastObj+0x52>
        {
            return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000a5c:	f06f 0303 	mvn.w	r3, #3
 8000a60:	e057      	b.n	8000b12 <canardBroadcastObj+0x102>
        }

        static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

        if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	8a1a      	ldrh	r2, [r3, #16]
 8000a66:	4b2d      	ldr	r3, [pc, #180]	@ (8000b1c <canardBroadcastObj+0x10c>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	8a1b      	ldrh	r3, [r3, #16]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d002      	beq.n	8000a7c <canardBroadcastObj+0x6c>
        {
            return -CANARD_ERROR_INVALID_ARGUMENT;
 8000a76:	f06f 0301 	mvn.w	r3, #1
 8000a7a:	e04a      	b.n	8000b12 <canardBroadcastObj+0x102>
        }

        // anonymous transfer, random discriminator
        const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	69d9      	ldr	r1, [r3, #28]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	8c1b      	ldrh	r3, [r3, #32]
 8000a84:	461a      	mov	r2, r3
 8000a86:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000a8a:	f001 febd 	bl	8002808 <crcAdd>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8000a96:	4013      	ands	r3, r2
 8000a98:	823b      	strh	r3, [r7, #16]
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	7e1b      	ldrb	r3, [r3, #24]
 8000a9e:	061a      	lsls	r2, r3, #24
 8000aa0:	8a3b      	ldrh	r3, [r7, #16]
 8000aa2:	025b      	lsls	r3, r3, #9
 8000aa4:	431a      	orrs	r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	8a19      	ldrh	r1, [r3, #16]
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <canardBroadcastObj+0x10c>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	400b      	ands	r3, r1
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	021b      	lsls	r3, r3, #8
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000ab4:	ea42 0403 	orr.w	r4, r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff73 	bl	80009a4 <canardGetLocalNodeID>
 8000abe:	4603      	mov	r3, r0
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000ac0:	4323      	orrs	r3, r4
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	e012      	b.n	8000aec <canardBroadcastObj+0xdc>
    }
    else
    {
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	7e1b      	ldrb	r3, [r3, #24]
 8000aca:	061a      	lsls	r2, r3, #24
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	8a1b      	ldrh	r3, [r3, #16]
 8000ad0:	021b      	lsls	r3, r3, #8
 8000ad2:	ea42 0403 	orr.w	r4, r2, r3
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ff64 	bl	80009a4 <canardGetLocalNodeID>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4323      	orrs	r3, r4
 8000ae0:	617b      	str	r3, [r7, #20]
        crc = calculateCRC(transfer_object);
 8000ae2:	6838      	ldr	r0, [r7, #0]
 8000ae4:	f000 f84c 	bl	8000b80 <calculateCRC>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	827b      	strh	r3, [r7, #18]
    }

    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000aec:	8a7a      	ldrh	r2, [r7, #18]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	6979      	ldr	r1, [r7, #20]
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f001 f874 	bl	8001be0 <enqueueTxFrames>
 8000af8:	4603      	mov	r3, r0
 8000afa:	81fb      	strh	r3, [r7, #14]

    if (result > 0) {
 8000afc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	dd04      	ble.n	8000b0e <canardBroadcastObj+0xfe>
        incrementTransferID(transfer_object->inout_transfer_id);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fff4 	bl	8001af6 <incrementTransferID>
    }

    return result;
 8000b0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	371c      	adds	r7, #28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	0800c476 	.word	0x0800c476

08000b20 <canardBufferFromIdx>:
  CanardBufferBlock and CanartRxState structures to have the same size
  on 32 bit and 64 bit platforms, which allows for easier testing in
  simulator environments
 */
CANARD_INTERNAL CanardBufferBlock *canardBufferFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardBufferBlock *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardBufferBlock *)idx;
 8000b2a:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <canardBufferToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardBufferToIdx(CanardPoolAllocator* allocator, const CanardBufferBlock *buf)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)buf - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)buf;
 8000b42:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <canardRxFromIdx>:

CANARD_INTERNAL CanardRxState *canardRxFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardRxState *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardRxState *)idx;
 8000b5a:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <canardRxToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardRxToIdx(CanardPoolAllocator* allocator, const CanardRxState *rx)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)rx - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)rx;
 8000b72:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <calculateCRC>:

CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0xFFFFU;
 8000b88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b8c:	81fb      	strh	r3, [r7, #14]
#if CANARD_ENABLE_CANFD
    if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
        (transfer_object->payload_len > 63 && transfer_object->canfd))
#else
    if (transfer_object->payload_len > 7)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	8c1b      	ldrh	r3, [r3, #32]
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	d913      	bls.n	8000bbe <calculateCRC+0x3e>
#endif
    {
        crc = crcAddSignature(crc, transfer_object->data_type_signature);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000b9c:	89f9      	ldrh	r1, [r7, #14]
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	f001 fe03 	bl	80027aa <crcAddSignature>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	81fb      	strh	r3, [r7, #14]
        crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69d9      	ldr	r1, [r3, #28]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	8c1b      	ldrh	r3, [r3, #32]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	89fb      	ldrh	r3, [r7, #14]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f001 fe27 	bl	8002808 <crcAdd>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	81fb      	strh	r3, [r7, #14]
                crc = crcAddByte(crc, empty);
            }
        }
#endif
    }
    return crc;
 8000bbe:	89fb      	ldrh	r3, [r7, #14]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <canardRequestOrRespond>:
#endif
#if CANARD_ENABLE_CANFD
                               ,bool canfd
#endif
)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08e      	sub	sp, #56	@ 0x38
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	e9c7 2300 	strd	r2, r3, [r7]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	72fb      	strb	r3, [r7, #11]
    CanardTxTransfer transfer_object = {
        .data_type_signature = data_type_signature,
        .data_type_id = data_type_id,
        .inout_transfer_id = inout_transfer_id,
        .priority = priority,
        .transfer_type = kind == CanardRequest ? CanardTransferTypeRequest : CanardTransferTypeResponse,
 8000bd8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	bf0c      	ite	eq
 8000be0:	2301      	moveq	r3, #1
 8000be2:	2300      	movne	r3, #0
 8000be4:	b2db      	uxtb	r3, r3
    CanardTxTransfer transfer_object = {
 8000be6:	743b      	strb	r3, [r7, #16]
 8000be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bec:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000bf0:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	843b      	strh	r3, [r7, #32]
 8000bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bfc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000c00:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000c04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c08:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000c0c:	863b      	strh	r3, [r7, #48]	@ 0x30
#endif
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };
    return canardRequestOrRespondObj(ins, destination_node_id, &transfer_object);
 8000c0e:	f107 0210 	add.w	r2, r7, #16
 8000c12:	7afb      	ldrb	r3, [r7, #11]
 8000c14:	4619      	mov	r1, r3
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f000 f805 	bl	8000c26 <canardRequestOrRespondObj>
 8000c1c:	4603      	mov	r3, r0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3738      	adds	r7, #56	@ 0x38
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <canardRequestOrRespondObj>:

int16_t canardRequestOrRespondObj(CanardInstance* ins, uint8_t destination_node_id, CanardTxTransfer* transfer_object)
{
 8000c26:	b590      	push	{r4, r7, lr}
 8000c28:	b087      	sub	sp, #28
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	72fb      	strb	r3, [r7, #11]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69db      	ldr	r3, [r3, #28]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d106      	bne.n	8000c4a <canardRequestOrRespondObj+0x24>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	8c1b      	ldrh	r3, [r3, #32]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <canardRequestOrRespondObj+0x24>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000c44:	f06f 0301 	mvn.w	r3, #1
 8000c48:	e042      	b.n	8000cd0 <canardRequestOrRespondObj+0xaa>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	7e1b      	ldrb	r3, [r3, #24]
 8000c4e:	2b1f      	cmp	r3, #31
 8000c50:	d902      	bls.n	8000c58 <canardRequestOrRespondObj+0x32>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000c52:	f06f 0301 	mvn.w	r3, #1
 8000c56:	e03b      	b.n	8000cd0 <canardRequestOrRespondObj+0xaa>
    }
    if (canardGetLocalNodeID(ins) == 0)
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f7ff fea3 	bl	80009a4 <canardGetLocalNodeID>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <canardRequestOrRespondObj+0x44>
    {
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000c64:	f06f 0303 	mvn.w	r3, #3
 8000c68:	e032      	b.n	8000cd0 <canardRequestOrRespondObj+0xaa>
    }

    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7e1b      	ldrb	r3, [r3, #24]
 8000c6e:	061a      	lsls	r2, r3, #24
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	8a1b      	ldrh	r3, [r3, #16]
 8000c74:	041b      	lsls	r3, r3, #16
 8000c76:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	03db      	lsls	r3, r3, #15
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000c7e:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8000c80:	7afb      	ldrb	r3, [r7, #11]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	ea42 0403 	orr.w	r4, r2, r3
                            (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	f7ff fe8b 	bl	80009a4 <canardGetLocalNodeID>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4323      	orrs	r3, r4
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c96:	617b      	str	r3, [r7, #20]

    uint16_t crc = calculateCRC(transfer_object);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ff71 	bl	8000b80 <calculateCRC>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	827b      	strh	r3, [r7, #18]


    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000ca2:	8a7a      	ldrh	r2, [r7, #18]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6979      	ldr	r1, [r7, #20]
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f000 ff99 	bl	8001be0 <enqueueTxFrames>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	823b      	strh	r3, [r7, #16]

    if (result > 0 && transfer_object->transfer_type == CanardTransferTypeRequest)                      // Response Transfer ID must not be altered
 8000cb2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	dd08      	ble.n	8000ccc <canardRequestOrRespondObj+0xa6>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d104      	bne.n	8000ccc <canardRequestOrRespondObj+0xa6>
    {
        incrementTransferID(transfer_object->inout_transfer_id);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 ff15 	bl	8001af6 <incrementTransferID>
    }

    return result;
 8000ccc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	371c      	adds	r7, #28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd90      	pop	{r4, r7, pc}

08000cd8 <canardPeekTxQueue>:

CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
    if (ins->tx_queue == NULL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d101      	bne.n	8000cec <canardPeekTxQueue+0x14>
    {
        return NULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	e002      	b.n	8000cf2 <canardPeekTxQueue+0x1a>
    }
    return &ins->tx_queue->frame;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf0:	3304      	adds	r3, #4
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <canardPopTxQueue>:

void canardPopTxQueue(CanardInstance* ins)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = ins->tx_queue;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d0a:	60fb      	str	r3, [r7, #12]
    ins->tx_queue = item->next;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	625a      	str	r2, [r3, #36]	@ 0x24
    freeBlock(&ins->allocator, item);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	330c      	adds	r3, #12
 8000d18:	68f9      	ldr	r1, [r7, #12]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 fdf1 	bl	8002902 <freeBlock>
}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <canardHandleRxFrame>:

int16_t canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
{
 8000d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d2c:	b09f      	sub	sp, #124	@ 0x7c
 8000d2e:	af02      	add	r7, sp, #8
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	e9c7 2300 	strd	r2, r3, [r7]
    const CanardTransferType transfer_type = extractTransferType(frame->id);
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f001 f956 	bl	8001fee <extractTransferType>
 8000d42:	4603      	mov	r3, r0
 8000d44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8000d48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d007      	beq.n	8000d60 <canardHandleRxFrame+0x38>
                                        (uint8_t)CANARD_BROADCAST_NODE_ID :
                                        DEST_ID_FROM_ID(frame->id);
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	b2db      	uxtb	r3, r3
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8000d58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	e000      	b.n	8000d62 <canardHandleRxFrame+0x3a>
 8000d60:	2300      	movs	r3, #0
 8000d62:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    // TODO: This function should maintain statistics of transfer errors and such.

    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	da0f      	bge.n	8000d8e <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d109      	bne.n	8000d8e <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d103      	bne.n	8000d8e <canardHandleRxFrame+0x66>
        (frame->data_len < 1))
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	7b1b      	ldrb	r3, [r3, #12]
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d102      	bne.n	8000d94 <canardHandleRxFrame+0x6c>
    {
        return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 8000d8e:	f06f 0309 	mvn.w	r3, #9
 8000d92:	e361      	b.n	8001458 <canardHandleRxFrame+0x730>
    }

    if (transfer_type != CanardTransferTypeBroadcast &&
 8000d94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d00b      	beq.n	8000db4 <canardHandleRxFrame+0x8c>
        destination_node_id != canardGetLocalNodeID(ins))
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff fe01 	bl	80009a4 <canardGetLocalNodeID>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
    if (transfer_type != CanardTransferTypeBroadcast &&
 8000da6:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d002      	beq.n	8000db4 <canardHandleRxFrame+0x8c>
    {
        return -CANARD_ERROR_RX_WRONG_ADDRESS;
 8000dae:	f06f 030a 	mvn.w	r3, #10
 8000db2:	e351      	b.n	8001458 <canardHandleRxFrame+0x730>
    }

    const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	0e1b      	lsrs	r3, r3, #24
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	f003 031f 	and.w	r3, r3, #31
 8000dc0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000dce:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    const uint16_t data_type_id = extractDataType(frame->id);
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 f8e9 	bl	8001fae <extractDataType>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    const uint32_t transfer_descriptor =
            MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 8000de2:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000de6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000dea:	041b      	lsls	r3, r3, #16
 8000dec:	431a      	orrs	r2, r3
 8000dee:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000df2:	049b      	lsls	r3, r3, #18
 8000df4:	431a      	orrs	r2, r3
 8000df6:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000dfa:	065b      	lsls	r3, r3, #25
    const uint32_t transfer_descriptor =
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c

    const uint8_t tail_byte = frame->data[frame->data_len - 1];
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	7b1b      	ldrb	r3, [r3, #12]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	4413      	add	r3, r2
 8000e0a:	791b      	ldrb	r3, [r3, #4]
 8000e0c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    uint64_t data_type_signature = 0;
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    CanardRxState* rx_state = NULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if (IS_START_OF_TRANSFER(tail_byte))
 8000e20:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000e24:	09db      	lsrs	r3, r3, #7
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d01e      	beq.n	8000e6e <canardHandleRxFrame+0x146>
    {

        if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id))
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	685e      	ldr	r6, [r3, #4]
 8000e34:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 8000e38:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000e3c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000e40:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	4603      	mov	r3, r0
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	47b0      	blx	r6
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00a      	beq.n	8000e68 <canardHandleRxFrame+0x140>
        {
            rx_state = traverseRxStates(ins, transfer_descriptor);
 8000e52:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f001 f8ee 	bl	8002036 <traverseRxStates>
 8000e5a:	66f8      	str	r0, [r7, #108]	@ 0x6c

            if(rx_state == NULL)
 8000e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d110      	bne.n	8000e84 <canardHandleRxFrame+0x15c>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8000e62:	f06f 0302 	mvn.w	r3, #2
 8000e66:	e2f7      	b.n	8001458 <canardHandleRxFrame+0x730>
            }
        }
        else
        {
            return -CANARD_ERROR_RX_NOT_WANTED;
 8000e68:	f06f 030b 	mvn.w	r3, #11
 8000e6c:	e2f4      	b.n	8001458 <canardHandleRxFrame+0x730>
        }
    }
    else
    {
        rx_state = findRxState(ins, transfer_descriptor);
 8000e6e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f001 f90f 	bl	8002094 <findRxState>
 8000e76:	66f8      	str	r0, [r7, #108]	@ 0x6c

        if (rx_state == NULL)
 8000e78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d102      	bne.n	8000e84 <canardHandleRxFrame+0x15c>
        {
            return -CANARD_ERROR_RX_MISSED_START;
 8000e7e:	f06f 030c 	mvn.w	r3, #12
 8000e82:	e2e9      	b.n	8001458 <canardHandleRxFrame+0x730>
    }

    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above

    // Resolving the state flags:
    const bool not_initialized = rx_state->timestamp_usec == 0;
 8000e84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e86:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	bf0c      	ite	eq
 8000e90:	2301      	moveq	r3, #1
 8000e92:	2300      	movne	r3, #0
 8000e94:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 8000e98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e9a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ea2:	ebb0 0802 	subs.w	r8, r0, r2
 8000ea6:	eb61 0903 	sbc.w	r9, r1, r3
 8000eaa:	4ba9      	ldr	r3, [pc, #676]	@ (8001150 <canardHandleRxFrame+0x428>)
 8000eac:	4598      	cmp	r8, r3
 8000eae:	f179 0300 	sbcs.w	r3, r9, #0
 8000eb2:	bf2c      	ite	cs
 8000eb4:	2301      	movcs	r3, #1
 8000eb6:	2300      	movcc	r3, #0
 8000eb8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    const bool same_iface = frame->iface_id == rx_state->iface_id;
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	7b5a      	ldrb	r2, [r3, #13]
 8000ec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ec2:	7e9b      	ldrb	r3, [r3, #26]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	bf0c      	ite	eq
 8000ec8:	2301      	moveq	r3, #1
 8000eca:	2300      	movne	r3, #0
 8000ecc:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 8000ed0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000ed4:	09db      	lsrs	r3, r3, #7
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf14      	ite	ne
 8000ee0:	2301      	movne	r3, #1
 8000ee2:	2300      	moveq	r3, #0
 8000ee4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    const bool not_previous_tid =
        computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 8000ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000eea:	7ddb      	ldrb	r3, [r3, #23]
 8000eec:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000ef8:	f003 031f 	and.w	r3, r3, #31
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	4619      	mov	r1, r3
 8000f00:	4610      	mov	r0, r2
 8000f02:	f000 fdd9 	bl	8001ab8 <computeTransferIDForwardDistance>
 8000f06:	4603      	mov	r3, r0
    const bool not_previous_tid =
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	bfcc      	ite	gt
 8000f0c:	2301      	movgt	r3, #1
 8000f0e:	2300      	movle	r3, #0
 8000f10:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    const bool iface_switch_allowed = (timestamp_usec - rx_state->timestamp_usec) > IFACE_SWITCH_DELAY_USEC;
 8000f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f16:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f1e:	1a84      	subs	r4, r0, r2
 8000f20:	eb61 0503 	sbc.w	r5, r1, r3
 8000f24:	4b8b      	ldr	r3, [pc, #556]	@ (8001154 <canardHandleRxFrame+0x42c>)
 8000f26:	429c      	cmp	r4, r3
 8000f28:	f175 0300 	sbcs.w	r3, r5, #0
 8000f2c:	bf2c      	ite	cs
 8000f2e:	2301      	movcs	r3, #1
 8000f30:	2300      	movcc	r3, #0
 8000f32:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    const bool non_wrapped_tid = computeTransferIDForwardDistance(TRANSFER_ID_FROM_TAIL_BYTE(tail_byte), (uint8_t) rx_state->transfer_id) < (1 << (TRANSFER_ID_BIT_LEN-1));
 8000f36:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000f3a:	f003 031f 	and.w	r3, r3, #31
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f42:	7ddb      	ldrb	r3, [r3, #23]
 8000f44:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	f000 fdb3 	bl	8001ab8 <computeTransferIDForwardDistance>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	bfd4      	ite	le
 8000f58:	2301      	movle	r3, #1
 8000f5a:	2300      	movgt	r3, #0
 8000f5c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    const bool incomplete_frame = rx_state->buffer_blocks != CANARD_BUFFER_IDX_NONE;
 8000f60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	bf14      	ite	ne
 8000f68:	2301      	movne	r3, #1
 8000f6a:	2300      	moveq	r3, #0
 8000f6c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    const bool need_restart =
            (not_initialized) ||
            (tid_timed_out) ||
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8000f70:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d11f      	bne.n	8000fb8 <canardHandleRxFrame+0x290>
            (not_initialized) ||
 8000f78:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d11b      	bne.n	8000fb8 <canardHandleRxFrame+0x290>
            (tid_timed_out) ||
 8000f80:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00b      	beq.n	8000fa0 <canardHandleRxFrame+0x278>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8000f88:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d007      	beq.n	8000fa0 <canardHandleRxFrame+0x278>
 8000f90:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10f      	bne.n	8000fb8 <canardHandleRxFrame+0x290>
 8000f98:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d10b      	bne.n	8000fb8 <canardHandleRxFrame+0x290>
 8000fa0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d009      	beq.n	8000fbc <canardHandleRxFrame+0x294>
            (iface_switch_allowed && first_frame && non_wrapped_tid);
 8000fa8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <canardHandleRxFrame+0x294>
 8000fb0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <canardHandleRxFrame+0x294>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <canardHandleRxFrame+0x296>
 8000fbc:	2300      	movs	r3, #0
    const bool need_restart =
 8000fbe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8000fc2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

    if (need_restart)
 8000fce:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d02f      	beq.n	8001036 <canardHandleRxFrame+0x30e>
    {
        rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 8000fd6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000fda:	f003 031f 	and.w	r3, r3, #31
 8000fde:	b2d9      	uxtb	r1, r3
 8000fe0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000fe2:	7dd3      	ldrb	r3, [r2, #23]
 8000fe4:	f361 0386 	bfi	r3, r1, #2, #5
 8000fe8:	75d3      	strb	r3, [r2, #23]
        rx_state->next_toggle = 0;
 8000fea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000fec:	7dd3      	ldrb	r3, [r2, #23]
 8000fee:	f36f 13c7 	bfc	r3, #7, #1
 8000ff2:	75d3      	strb	r3, [r2, #23]
        releaseStatePayload(ins, rx_state);
 8000ff4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f001 f8b6 	bl	8002168 <releaseStatePayload>
        rx_state->iface_id = frame->iface_id;
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	7b5a      	ldrb	r2, [r3, #13]
 8001000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001002:	769a      	strb	r2, [r3, #26]
        if (!IS_START_OF_TRANSFER(tail_byte))
 8001004:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001008:	09db      	lsrs	r3, r3, #7
 800100a:	b2db      	uxtb	r3, r3
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d110      	bne.n	8001036 <canardHandleRxFrame+0x30e>
        {
            rx_state->transfer_id++;
 8001014:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001016:	7ddb      	ldrb	r3, [r3, #23]
 8001018:	f3c3 0384 	ubfx	r3, r3, #2, #5
 800101c:	b2db      	uxtb	r3, r3
 800101e:	3301      	adds	r3, #1
 8001020:	f003 031f 	and.w	r3, r3, #31
 8001024:	b2d9      	uxtb	r1, r3
 8001026:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001028:	7dd3      	ldrb	r3, [r2, #23]
 800102a:	f361 0386 	bfi	r3, r1, #2, #5
 800102e:	75d3      	strb	r3, [r2, #23]
            return -CANARD_ERROR_RX_MISSED_START;
 8001030:	f06f 030c 	mvn.w	r3, #12
 8001034:	e210      	b.n	8001458 <canardHandleRxFrame+0x730>
        }
    }

    if (frame->iface_id != rx_state->iface_id)
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	7b5a      	ldrb	r2, [r3, #13]
 800103a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800103c:	7e9b      	ldrb	r3, [r3, #26]
 800103e:	429a      	cmp	r2, r3
 8001040:	d001      	beq.n	8001046 <canardHandleRxFrame+0x31e>
    {
        // drop frame if coming from unexpected interface
        return CANARD_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e208      	b.n	8001458 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 8001046:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800104a:	09db      	lsrs	r3, r3, #7
 800104c:	b2db      	uxtb	r3, r3
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d041      	beq.n	80010da <canardHandleRxFrame+0x3b2>
 8001056:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800105a:	099b      	lsrs	r3, r3, #6
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d039      	beq.n	80010da <canardHandleRxFrame+0x3b2>
    {
        rx_state->timestamp_usec = timestamp_usec;
 8001066:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800106c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        CanardRxTransfer rx_transfer = {
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	2220      	movs	r2, #32
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00a fb25 	bl	800b6c8 <memset>
 800107e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001082:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = frame->data,
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	3304      	adds	r3, #4
        CanardRxTransfer rx_transfer = {
 800108a:	61bb      	str	r3, [r7, #24]
            .payload_len = (uint8_t)(frame->data_len - 1U),
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	7b1b      	ldrb	r3, [r3, #12]
 8001090:	3b01      	subs	r3, #1
 8001092:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8001094:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001096:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800109a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800109c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80010a0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 80010a4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80010a8:	f003 031f 	and.w	r3, r3, #31
 80010ac:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 80010ae:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80010b2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80010b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80010ba:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80010be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        ins->on_reception(ins, &rx_transfer);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f107 0210 	add.w	r2, r7, #16
 80010ca:	4611      	mov	r1, r2
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	4798      	blx	r3

        prepareForNextTransfer(rx_state);
 80010d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80010d2:	f000 ff4a 	bl	8001f6a <prepareForNextTransfer>
        return CANARD_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e1be      	b.n	8001458 <canardHandleRxFrame+0x730>
    }

    if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 80010da:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bf14      	ite	ne
 80010ea:	2301      	movne	r3, #1
 80010ec:	2300      	moveq	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010f4:	7ddb      	ldrb	r3, [r3, #23]
 80010f6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d002      	beq.n	8001106 <canardHandleRxFrame+0x3de>
    {
        return -CANARD_ERROR_RX_WRONG_TOGGLE;
 8001100:	f06f 030d 	mvn.w	r3, #13
 8001104:	e1a8      	b.n	8001458 <canardHandleRxFrame+0x730>
    }

    if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 8001106:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800110a:	f003 031f 	and.w	r3, r3, #31
 800110e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001110:	7dd2      	ldrb	r2, [r2, #23]
 8001112:	f3c2 0284 	ubfx	r2, r2, #2, #5
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	4293      	cmp	r3, r2
 800111a:	d002      	beq.n	8001122 <canardHandleRxFrame+0x3fa>
    {
        return -CANARD_ERROR_RX_UNEXPECTED_TID;
 800111c:	f06f 030e 	mvn.w	r3, #14
 8001120:	e19a      	b.n	8001458 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 8001122:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001126:	09db      	lsrs	r3, r3, #7
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d060      	beq.n	80011f4 <canardHandleRxFrame+0x4cc>
 8001132:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001136:	099b      	lsrs	r3, r3, #6
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d158      	bne.n	80011f4 <canardHandleRxFrame+0x4cc>
    {
        if (frame->data_len <= 3)
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	7b1b      	ldrb	r3, [r3, #12]
 8001146:	2b03      	cmp	r3, #3
 8001148:	d806      	bhi.n	8001158 <canardHandleRxFrame+0x430>
        {
            return -CANARD_ERROR_RX_SHORT_FRAME;
 800114a:	f06f 030f 	mvn.w	r3, #15
 800114e:	e183      	b.n	8001458 <canardHandleRxFrame+0x730>
 8001150:	001e8481 	.word	0x001e8481
 8001154:	000f4241 	.word	0x000f4241
        }

        // take off the crc and store the payload
        rx_state->timestamp_usec = timestamp_usec;
 8001158:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800115a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800115e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rx_state->payload_len = 0;
 8001162:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001164:	8ad3      	ldrh	r3, [r2, #22]
 8001166:	f36f 0309 	bfc	r3, #0, #10
 800116a:	82d3      	strh	r3, [r2, #22]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f103 000c 	add.w	r0, r3, #12
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	3304      	adds	r3, #4
 8001176:	1c9a      	adds	r2, r3, #2
                                                 (uint8_t) (frame->data_len - 3));
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 800117c:	3b03      	subs	r3, #3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001182:	f001 f825 	bl	80021d0 <bufferBlockPushBytes>
 8001186:	4603      	mov	r3, r0
 8001188:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if (ret < 0)
 800118c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001190:	2b00      	cmp	r3, #0
 8001192:	da09      	bge.n	80011a8 <canardHandleRxFrame+0x480>
        {
            releaseStatePayload(ins, rx_state);
 8001194:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 ffe6 	bl	8002168 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 800119c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800119e:	f000 fee4 	bl	8001f6a <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 80011a2:	f06f 0302 	mvn.w	r3, #2
 80011a6:	e157      	b.n	8001458 <canardHandleRxFrame+0x730>
        }
        rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	791b      	ldrb	r3, [r3, #4]
 80011ac:	461a      	mov	r2, r3
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	795b      	ldrb	r3, [r3, #5]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011bc:	831a      	strh	r2, [r3, #24]
        rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 80011be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80011c2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80011c6:	f001 faf0 	bl	80027aa <crcAddSignature>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011d0:	829a      	strh	r2, [r3, #20]
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80011d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011d4:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3304      	adds	r3, #4
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80011da:	1c99      	adds	r1, r3, #2
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	7b1b      	ldrb	r3, [r3, #12]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80011e4:	461a      	mov	r2, r3
 80011e6:	f001 fb0f 	bl	8002808 <crcAdd>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011f0:	829a      	strh	r2, [r3, #20]
    {
 80011f2:	e124      	b.n	800143e <canardHandleRxFrame+0x716>
    }
    else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 80011f4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80011f8:	09db      	lsrs	r3, r3, #7
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d133      	bne.n	800126c <canardHandleRxFrame+0x544>
 8001204:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001208:	099b      	lsrs	r3, r3, #6
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d12b      	bne.n	800126c <canardHandleRxFrame+0x544>
    {
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f103 000c 	add.w	r0, r3, #12
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1d1a      	adds	r2, r3, #4
                                                 (uint8_t) (frame->data_len - 1));
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8001222:	3b01      	subs	r3, #1
 8001224:	b2db      	uxtb	r3, r3
 8001226:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001228:	f000 ffd2 	bl	80021d0 <bufferBlockPushBytes>
 800122c:	4603      	mov	r3, r0
 800122e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (ret < 0)
 8001230:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8001234:	2b00      	cmp	r3, #0
 8001236:	da09      	bge.n	800124c <canardHandleRxFrame+0x524>
        {
            releaseStatePayload(ins, rx_state);
 8001238:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f000 ff94 	bl	8002168 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 8001240:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001242:	f000 fe92 	bl	8001f6a <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8001246:	f06f 0302 	mvn.w	r3, #2
 800124a:	e105      	b.n	8001458 <canardHandleRxFrame+0x730>
        }
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 800124c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800124e:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data, (uint8_t)(frame->data_len - 1));
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	1d19      	adds	r1, r3, #4
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	7b1b      	ldrb	r3, [r3, #12]
 8001258:	3b01      	subs	r3, #1
 800125a:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 800125c:	461a      	mov	r2, r3
 800125e:	f001 fad3 	bl	8002808 <crcAdd>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001268:	829a      	strh	r2, [r3, #20]
    {
 800126a:	e0e8      	b.n	800143e <canardHandleRxFrame+0x716>
    }
    else                                                                            // End of a multi-frame transfer
    {
        const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	7b1b      	ldrb	r3, [r3, #12]
 8001270:	3b01      	subs	r3, #1
 8001272:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

        uint8_t tail_offset = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

        if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 800127c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800127e:	8adb      	ldrh	r3, [r3, #22]
 8001280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001284:	b29b      	uxth	r3, r3
 8001286:	2b04      	cmp	r3, #4
 8001288:	d823      	bhi.n	80012d2 <canardHandleRxFrame+0x5aa>
        {
            // Copy the beginning of the frame into the head, point the tail pointer to the remainder
            for (size_t i = rx_state->payload_len;
 800128a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800128c:	8adb      	ldrh	r3, [r3, #22]
 800128e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001292:	b29b      	uxth	r3, r3
 8001294:	667b      	str	r3, [r7, #100]	@ 0x64
 8001296:	e012      	b.n	80012be <canardHandleRxFrame+0x596>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
                 i++, tail_offset++)
            {
                rx_state->buffer_head[i] = frame->data[tail_offset];
 8001298:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	4413      	add	r3, r2
 80012a0:	7919      	ldrb	r1, [r3, #4]
 80012a2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80012a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012a6:	4413      	add	r3, r2
 80012a8:	331b      	adds	r3, #27
 80012aa:	460a      	mov	r2, r1
 80012ac:	701a      	strb	r2, [r3, #0]
                 i++, tail_offset++)
 80012ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012b0:	3301      	adds	r3, #1
 80012b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80012b4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80012b8:	3301      	adds	r3, #1
 80012ba:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 80012be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d848      	bhi.n	8001356 <canardHandleRxFrame+0x62e>
 80012c4:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80012c8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d3e3      	bcc.n	8001298 <canardHandleRxFrame+0x570>
 80012d0:	e041      	b.n	8001356 <canardHandleRxFrame+0x62e>
            }
        }
        else
        {
            // Like above, except that the beginning goes into the last block of the storage
            CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f103 020c 	add.w	r2, r3, #12
 80012d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	4619      	mov	r1, r3
 80012de:	4610      	mov	r0, r2
 80012e0:	f7ff fc1e 	bl	8000b20 <canardBufferFromIdx>
 80012e4:	6638      	str	r0, [r7, #96]	@ 0x60
            if (block != NULL)
 80012e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d034      	beq.n	8001356 <canardHandleRxFrame+0x62e>
            {
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 80012ec:	2305      	movs	r3, #5
 80012ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 80012f0:	e005      	b.n	80012fe <canardHandleRxFrame+0x5d6>
                {
                    block = block->next;
 80012f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	663b      	str	r3, [r7, #96]	@ 0x60
                    offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 80012f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012fa:	331c      	adds	r3, #28
 80012fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 80012fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f5      	bne.n	80012f2 <canardHandleRxFrame+0x5ca>
                }
                CANARD_ASSERT(block != NULL);

                const size_t offset_within_block = rx_state->payload_len - offset;
 8001306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001308:	8adb      	ldrh	r3, [r3, #22]
 800130a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800130e:	b29b      	uxth	r3, r3
 8001310:	461a      	mov	r2, r3
 8001312:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	63bb      	str	r3, [r7, #56]	@ 0x38
                CANARD_ASSERT(offset_within_block <= CANARD_BUFFER_BLOCK_DATA_SIZE);

                for (size_t i = offset_within_block;
 8001318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800131a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800131c:	e012      	b.n	8001344 <canardHandleRxFrame+0x61c>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
                     i++, tail_offset++)
                {
                    block->data[i] = frame->data[tail_offset];
 800131e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	4413      	add	r3, r2
 8001326:	7919      	ldrb	r1, [r3, #4]
 8001328:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800132a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800132c:	4413      	add	r3, r2
 800132e:	3304      	adds	r3, #4
 8001330:	460a      	mov	r2, r1
 8001332:	701a      	strb	r2, [r3, #0]
                     i++, tail_offset++)
 8001334:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001336:	3301      	adds	r3, #1
 8001338:	65bb      	str	r3, [r7, #88]	@ 0x58
 800133a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800133e:	3301      	adds	r3, #1
 8001340:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 8001344:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001346:	2b1b      	cmp	r3, #27
 8001348:	d805      	bhi.n	8001356 <canardHandleRxFrame+0x62e>
 800134a:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800134e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001352:	429a      	cmp	r2, r3
 8001354:	d3e3      	bcc.n	800131e <canardHandleRxFrame+0x5f6>
                }
            }
        }

        CanardRxTransfer rx_transfer = {
 8001356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800135a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = rx_state->buffer_head,
 800135e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001360:	331b      	adds	r3, #27
        CanardRxTransfer rx_transfer = {
 8001362:	61bb      	str	r3, [r7, #24]
            .payload_middle = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks),
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f103 020c 	add.w	r2, r3, #12
 800136a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4619      	mov	r1, r3
 8001370:	4610      	mov	r0, r2
 8001372:	f7ff fbd5 	bl	8000b20 <canardBufferFromIdx>
 8001376:	4603      	mov	r3, r0
        CanardRxTransfer rx_transfer = {
 8001378:	61fb      	str	r3, [r7, #28]
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 800137a:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800137e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001382:	429a      	cmp	r2, r3
 8001384:	d205      	bcs.n	8001392 <canardHandleRxFrame+0x66a>
 8001386:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	3304      	adds	r3, #4
 8001390:	e000      	b.n	8001394 <canardHandleRxFrame+0x66c>
 8001392:	2300      	movs	r3, #0
        CanardRxTransfer rx_transfer = {
 8001394:	623b      	str	r3, [r7, #32]
            .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 8001396:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001398:	8adb      	ldrh	r3, [r3, #22]
 800139a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800139e:	b29b      	uxth	r3, r3
 80013a0:	461a      	mov	r2, r3
 80013a2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 80013ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80013ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80013b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80013b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80013b8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 80013bc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 80013c6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80013ca:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80013ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80013d2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80013d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        rx_state->buffer_blocks = CANARD_BUFFER_IDX_NONE;     // Block list ownership has been transferred to rx_transfer!
 80013da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]

        // CRC validation
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 80013e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013e2:	8a98      	ldrh	r0, [r3, #20]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	1d19      	adds	r1, r3, #4
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	7b1b      	ldrb	r3, [r3, #12]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	461a      	mov	r2, r3
 80013f0:	f001 fa0a 	bl	8002808 <crcAdd>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013fa:	829a      	strh	r2, [r3, #20]
        if (rx_state->calculated_crc == rx_state->payload_crc)
 80013fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013fe:	8a9a      	ldrh	r2, [r3, #20]
 8001400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001402:	8b1b      	ldrh	r3, [r3, #24]
 8001404:	429a      	cmp	r2, r3
 8001406:	d106      	bne.n	8001416 <canardHandleRxFrame+0x6ee>
        {
            ins->on_reception(ins, &rx_transfer);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f107 0210 	add.w	r2, r7, #16
 8001410:	4611      	mov	r1, r2
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	4798      	blx	r3
        }

        // Making sure the payload is released even if the application didn't bother with it
        canardReleaseRxTransferPayload(ins, &rx_transfer);
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	4619      	mov	r1, r3
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 fa93 	bl	8001948 <canardReleaseRxTransferPayload>
        prepareForNextTransfer(rx_state);
 8001422:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001424:	f000 fda1 	bl	8001f6a <prepareForNextTransfer>

        if (rx_state->calculated_crc == rx_state->payload_crc)
 8001428:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800142a:	8a9a      	ldrh	r2, [r3, #20]
 800142c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800142e:	8b1b      	ldrh	r3, [r3, #24]
 8001430:	429a      	cmp	r2, r3
 8001432:	d101      	bne.n	8001438 <canardHandleRxFrame+0x710>
        {
            return CANARD_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	e00f      	b.n	8001458 <canardHandleRxFrame+0x730>
        }
        else
        {
            return -CANARD_ERROR_RX_BAD_CRC;
 8001438:	f06f 0310 	mvn.w	r3, #16
 800143c:	e00c      	b.n	8001458 <canardHandleRxFrame+0x730>
        }
    }

    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 800143e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001440:	7ddb      	ldrb	r3, [r3, #23]
 8001442:	b25b      	sxtb	r3, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	09db      	lsrs	r3, r3, #7
 800144a:	b2d9      	uxtb	r1, r3
 800144c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800144e:	7dd3      	ldrb	r3, [r2, #23]
 8001450:	f361 13c7 	bfi	r3, r1, #7, #1
 8001454:	75d3      	strb	r3, [r2, #23]
    return CANARD_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3774      	adds	r7, #116	@ 0x74
 800145c:	46bd      	mov	sp, r7
 800145e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001462:	bf00      	nop

08001464 <canardCleanupStaleTransfers>:

void canardCleanupStaleTransfers(CanardInstance* ins, uint64_t current_time_usec)
{
 8001464:	b5b0      	push	{r4, r5, r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	e9c7 2300 	strd	r2, r3, [r7]
    CanardRxState* prev = ins->rx_states, * state = ins->rx_states;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	613b      	str	r3, [r7, #16]

    while (state != NULL)
 800147c:	e053      	b.n	8001526 <canardCleanupStaleTransfers+0xc2>
    {
        if ((current_time_usec - state->timestamp_usec) > TRANSFER_TIMEOUT_USEC)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001484:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001488:	1a84      	subs	r4, r0, r2
 800148a:	eb61 0503 	sbc.w	r5, r1, r3
 800148e:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <canardCleanupStaleTransfers+0xd4>)
 8001490:	429c      	cmp	r4, r3
 8001492:	f175 0300 	sbcs.w	r3, r5, #0
 8001496:	d33a      	bcc.n	800150e <canardCleanupStaleTransfers+0xaa>
        {
            if (state == ins->rx_states)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d11c      	bne.n	80014dc <canardCleanupStaleTransfers+0x78>
            {
                releaseStatePayload(ins, state);
 80014a2:	6939      	ldr	r1, [r7, #16]
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 fe5f 	bl	8002168 <releaseStatePayload>
                ins->rx_states = canardRxFromIdx(&ins->allocator, ins->rx_states->next);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f103 020c 	add.w	r2, r3, #12
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4619      	mov	r1, r3
 80014b8:	4610      	mov	r0, r2
 80014ba:	f7ff fb49 	bl	8000b50 <canardRxFromIdx>
 80014be:	4602      	mov	r2, r0
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	621a      	str	r2, [r3, #32]
                freeBlock(&ins->allocator, state);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	330c      	adds	r3, #12
 80014c8:	6939      	ldr	r1, [r7, #16]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 fa19 	bl	8002902 <freeBlock>
                state = ins->rx_states;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	613b      	str	r3, [r7, #16]
                prev = state;
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e024      	b.n	8001526 <canardCleanupStaleTransfers+0xc2>
            }
            else
            {
                releaseStatePayload(ins, state);
 80014dc:	6939      	ldr	r1, [r7, #16]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 fe42 	bl	8002168 <releaseStatePayload>
                prev->next = state->next;
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	601a      	str	r2, [r3, #0]
                freeBlock(&ins->allocator, state);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	330c      	adds	r3, #12
 80014f0:	6939      	ldr	r1, [r7, #16]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 fa05 	bl	8002902 <freeBlock>
                state = canardRxFromIdx(&ins->allocator, prev->next);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f103 020c 	add.w	r2, r3, #12
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4619      	mov	r1, r3
 8001504:	4610      	mov	r0, r2
 8001506:	f7ff fb23 	bl	8000b50 <canardRxFromIdx>
 800150a:	6138      	str	r0, [r7, #16]
 800150c:	e00b      	b.n	8001526 <canardCleanupStaleTransfers+0xc2>
            }
        }
        else
        {
            prev = state;
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	617b      	str	r3, [r7, #20]
            state = canardRxFromIdx(&ins->allocator, state->next);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f103 020c 	add.w	r2, r3, #12
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	4610      	mov	r0, r2
 8001520:	f7ff fb16 	bl	8000b50 <canardRxFromIdx>
 8001524:	6138      	str	r0, [r7, #16]
    while (state != NULL)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1a8      	bne.n	800147e <canardCleanupStaleTransfers+0x1a>
            prev_item = item;
            item = item->next;
        }
    }
#endif
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bdb0      	pop	{r4, r5, r7, pc}
 8001536:	bf00      	nop
 8001538:	001e8481 	.word	0x001e8481

0800153c <canardDecodeScalar>:
int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                           uint32_t bit_offset,
                           uint8_t bit_length,
                           bool value_is_signed,
                           void* out_value)
{
 800153c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001540:	b08d      	sub	sp, #52	@ 0x34
 8001542:	af00      	add	r7, sp, #0
 8001544:	61f8      	str	r0, [r7, #28]
 8001546:	61b9      	str	r1, [r7, #24]
 8001548:	4611      	mov	r1, r2
 800154a:	461a      	mov	r2, r3
 800154c:	460b      	mov	r3, r1
 800154e:	75fb      	strb	r3, [r7, #23]
 8001550:	4613      	mov	r3, r2
 8001552:	75bb      	strb	r3, [r7, #22]
    if (transfer == NULL || out_value == NULL)
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <canardDecodeScalar+0x24>
 800155a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <canardDecodeScalar+0x2a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001560:	f06f 0301 	mvn.w	r3, #1
 8001564:	e16e      	b.n	8001844 <canardDecodeScalar+0x308>
    }

    if (bit_length < 1 || bit_length > 64)
 8001566:	7dfb      	ldrb	r3, [r7, #23]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d002      	beq.n	8001572 <canardDecodeScalar+0x36>
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	2b40      	cmp	r3, #64	@ 0x40
 8001570:	d902      	bls.n	8001578 <canardDecodeScalar+0x3c>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001572:	f06f 0301 	mvn.w	r3, #1
 8001576:	e165      	b.n	8001844 <canardDecodeScalar+0x308>
    }

    if (bit_length == 1 && value_is_signed)
 8001578:	7dfb      	ldrb	r3, [r7, #23]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d105      	bne.n	800158a <canardDecodeScalar+0x4e>
 800157e:	7dbb      	ldrb	r3, [r7, #22]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <canardDecodeScalar+0x4e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001584:	f06f 0301 	mvn.w	r3, #1
 8001588:	e15c      	b.n	8001844 <canardDecodeScalar+0x308>
        uint64_t u64;
        int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));   // This is important
 800158a:	f107 0320 	add.w	r3, r7, #32
 800158e:	2208      	movs	r2, #8
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f00a f898 	bl	800b6c8 <memset>

    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	7dfa      	ldrb	r2, [r7, #23]
 800159e:	69b9      	ldr	r1, [r7, #24]
 80015a0:	69f8      	ldr	r0, [r7, #28]
 80015a2:	f000 ff9d 	bl	80024e0 <descatterTransferPayload>
 80015a6:	4603      	mov	r3, r0
 80015a8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (result <= 0)
 80015aa:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	dc02      	bgt.n	80015b8 <canardDecodeScalar+0x7c>
    {
        return result;
 80015b2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80015b6:	e145      	b.n	8001844 <canardDecodeScalar+0x308>
     * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
     * Extra most significant bits will be filled with zeroes, which is fine.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d018      	beq.n	80015f6 <canardDecodeScalar+0xba>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	08db      	lsrs	r3, r3, #3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	3320      	adds	r3, #32
 80015cc:	f107 0210 	add.w	r2, r7, #16
 80015d0:	4413      	add	r3, r2
 80015d2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80015d6:	461a      	mov	r2, r3
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	425b      	negs	r3, r3
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	411a      	asrs	r2, r3
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	08db      	lsrs	r3, r3, #3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	3320      	adds	r3, #32
 80015ec:	f107 0110 	add.w	r1, r7, #16
 80015f0:	440b      	add	r3, r1
 80015f2:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
     */
    uint8_t std_byte_length = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d103      	bne.n	800160a <canardDecodeScalar+0xce>
 8001602:	2301      	movs	r3, #1
 8001604:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001608:	e01e      	b.n	8001648 <canardDecodeScalar+0x10c>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	2b08      	cmp	r3, #8
 800160e:	d803      	bhi.n	8001618 <canardDecodeScalar+0xdc>
 8001610:	2301      	movs	r3, #1
 8001612:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001616:	e017      	b.n	8001648 <canardDecodeScalar+0x10c>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	2b10      	cmp	r3, #16
 800161c:	d803      	bhi.n	8001626 <canardDecodeScalar+0xea>
 800161e:	2302      	movs	r3, #2
 8001620:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001624:	e010      	b.n	8001648 <canardDecodeScalar+0x10c>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b20      	cmp	r3, #32
 800162a:	d803      	bhi.n	8001634 <canardDecodeScalar+0xf8>
 800162c:	2304      	movs	r3, #4
 800162e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001632:	e009      	b.n	8001648 <canardDecodeScalar+0x10c>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 8001634:	7dfb      	ldrb	r3, [r7, #23]
 8001636:	2b40      	cmp	r3, #64	@ 0x40
 8001638:	d803      	bhi.n	8001642 <canardDecodeScalar+0x106>
 800163a:	2308      	movs	r3, #8
 800163c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001640:	e002      	b.n	8001648 <canardDecodeScalar+0x10c>
    else
    {
        CANARD_ASSERT(false);
        return -CANARD_ERROR_INTERNAL;
 8001642:	f06f 0308 	mvn.w	r3, #8
 8001646:	e0fd      	b.n	8001844 <canardDecodeScalar+0x308>
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

    /*
     * Flipping the byte order if needed.
     */
    if (isBigEndian())
 8001648:	f001 f83f 	bl	80026ca <isBigEndian>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <canardDecodeScalar+0x126>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 8001652:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f001 f845 	bl	80026ec <swapByteOrder>

    /*
     * Extending the sign bit if needed. I miss templates.
     * Note that we operate on unsigned values in order to avoid undefined behaviors.
     */
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 8001662:	7dbb      	ldrb	r3, [r7, #22]
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 809b 	beq.w	80017a0 <canardDecodeScalar+0x264>
 800166a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800166e:	00da      	lsls	r2, r3, #3
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	429a      	cmp	r2, r3
 8001674:	f000 8094 	beq.w	80017a0 <canardDecodeScalar+0x264>
    {
        if (bit_length <= 8)
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	2b08      	cmp	r3, #8
 800167c:	d819      	bhi.n	80016b2 <canardDecodeScalar+0x176>
        {
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 800167e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001682:	461a      	mov	r2, r3
 8001684:	7dfb      	ldrb	r3, [r7, #23]
 8001686:	3b01      	subs	r3, #1
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 8085 	beq.w	80017a0 <canardDecodeScalar+0x264>
            {
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 8001696:	f897 2020 	ldrb.w	r2, [r7, #32]
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	2101      	movs	r1, #1
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	425b      	negs	r3, r3
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f887 3020 	strb.w	r3, [r7, #32]
 80016b0:	e076      	b.n	80017a0 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 16)
 80016b2:	7dfb      	ldrb	r3, [r7, #23]
 80016b4:	2b10      	cmp	r3, #16
 80016b6:	d815      	bhi.n	80016e4 <canardDecodeScalar+0x1a8>
        {
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 80016b8:	8c3b      	ldrh	r3, [r7, #32]
 80016ba:	461a      	mov	r2, r3
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	3b01      	subs	r3, #1
 80016c0:	fa22 f303 	lsr.w	r3, r2, r3
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d069      	beq.n	80017a0 <canardDecodeScalar+0x264>
            {
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 80016cc:	8c3a      	ldrh	r2, [r7, #32]
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
 80016d0:	2101      	movs	r1, #1
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	425b      	negs	r3, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4313      	orrs	r3, r2
 80016de:	b29b      	uxth	r3, r3
 80016e0:	843b      	strh	r3, [r7, #32]
 80016e2:	e05d      	b.n	80017a0 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 32)
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	2b20      	cmp	r3, #32
 80016e8:	d811      	bhi.n	800170e <canardDecodeScalar+0x1d2>
        {
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 80016ea:	6a3a      	ldr	r2, [r7, #32]
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d051      	beq.n	80017a0 <canardDecodeScalar+0x264>
            {
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 80016fc:	6a3a      	ldr	r2, [r7, #32]
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	2101      	movs	r1, #1
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	425b      	negs	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	623b      	str	r3, [r7, #32]
 800170c:	e048      	b.n	80017a0 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length < 64)   // Strictly less, this is not a typo
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	2b3f      	cmp	r3, #63	@ 0x3f
 8001712:	d842      	bhi.n	800179a <canardDecodeScalar+0x25e>
        {
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 8001714:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001718:	7df9      	ldrb	r1, [r7, #23]
 800171a:	1e48      	subs	r0, r1, #1
 800171c:	f1c0 0620 	rsb	r6, r0, #32
 8001720:	f1a0 0120 	sub.w	r1, r0, #32
 8001724:	fa22 f400 	lsr.w	r4, r2, r0
 8001728:	fa03 f606 	lsl.w	r6, r3, r6
 800172c:	4334      	orrs	r4, r6
 800172e:	fa23 f101 	lsr.w	r1, r3, r1
 8001732:	430c      	orrs	r4, r1
 8001734:	fa23 f500 	lsr.w	r5, r3, r0
 8001738:	f004 0301 	and.w	r3, r4, #1
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001746:	460b      	mov	r3, r1
 8001748:	4313      	orrs	r3, r2
 800174a:	d029      	beq.n	80017a0 <canardDecodeScalar+0x264>
            {
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 800174c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001750:	7df9      	ldrb	r1, [r7, #23]
 8001752:	f04f 0201 	mov.w	r2, #1
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	f1a1 0620 	sub.w	r6, r1, #32
 800175e:	f1c1 0020 	rsb	r0, r1, #32
 8001762:	fa03 f901 	lsl.w	r9, r3, r1
 8001766:	fa02 f606 	lsl.w	r6, r2, r6
 800176a:	ea49 0906 	orr.w	r9, r9, r6
 800176e:	fa22 f000 	lsr.w	r0, r2, r0
 8001772:	ea49 0900 	orr.w	r9, r9, r0
 8001776:	fa02 f801 	lsl.w	r8, r2, r1
 800177a:	2300      	movs	r3, #0
 800177c:	f1d8 0a00 	rsbs	sl, r8, #0
 8001780:	eb63 0b09 	sbc.w	fp, r3, r9
 8001784:	ea44 030a 	orr.w	r3, r4, sl
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	ea45 030b 	orr.w	r3, r5, fp
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001794:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8001798:	e002      	b.n	80017a0 <canardDecodeScalar+0x264>
            }
        }
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 800179a:	f06f 0308 	mvn.w	r3, #8
 800179e:	e051      	b.n	8001844 <canardDecodeScalar+0x308>
    }

    /*
     * Copying the result out.
     */
    if (value_is_signed)
 80017a0:	7dbb      	ldrb	r3, [r7, #22]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d022      	beq.n	80017ec <canardDecodeScalar+0x2b0>
    {
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d804      	bhi.n	80017b6 <canardDecodeScalar+0x27a>
 80017ac:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80017b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e044      	b.n	8001840 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	2b10      	cmp	r3, #16
 80017ba:	d804      	bhi.n	80017c6 <canardDecodeScalar+0x28a>
 80017bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80017c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017c2:	801a      	strh	r2, [r3, #0]
 80017c4:	e03c      	b.n	8001840 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 80017c6:	7dfb      	ldrb	r3, [r7, #23]
 80017c8:	2b20      	cmp	r3, #32
 80017ca:	d803      	bhi.n	80017d4 <canardDecodeScalar+0x298>
 80017cc:	6a3a      	ldr	r2, [r7, #32]
 80017ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	e035      	b.n	8001840 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	2b40      	cmp	r3, #64	@ 0x40
 80017d8:	d805      	bhi.n	80017e6 <canardDecodeScalar+0x2aa>
 80017da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017de:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80017e0:	e9c1 2300 	strd	r2, r3, [r1]
 80017e4:	e02c      	b.n	8001840 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 80017e6:	f06f 0308 	mvn.w	r3, #8
 80017ea:	e02b      	b.n	8001844 <canardDecodeScalar+0x308>
        }
    }
    else
    {
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d104      	bne.n	80017fc <canardDecodeScalar+0x2c0>
 80017f2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80017f8:	701a      	strb	r2, [r3, #0]
 80017fa:	e021      	b.n	8001840 <canardDecodeScalar+0x304>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d804      	bhi.n	800180c <canardDecodeScalar+0x2d0>
 8001802:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	e019      	b.n	8001840 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	2b10      	cmp	r3, #16
 8001810:	d803      	bhi.n	800181a <canardDecodeScalar+0x2de>
 8001812:	8c3a      	ldrh	r2, [r7, #32]
 8001814:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001816:	801a      	strh	r2, [r3, #0]
 8001818:	e012      	b.n	8001840 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	2b20      	cmp	r3, #32
 800181e:	d803      	bhi.n	8001828 <canardDecodeScalar+0x2ec>
 8001820:	6a3a      	ldr	r2, [r7, #32]
 8001822:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	e00b      	b.n	8001840 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 8001828:	7dfb      	ldrb	r3, [r7, #23]
 800182a:	2b40      	cmp	r3, #64	@ 0x40
 800182c:	d805      	bhi.n	800183a <canardDecodeScalar+0x2fe>
 800182e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001832:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001834:	e9c1 2300 	strd	r2, r3, [r1]
 8001838:	e002      	b.n	8001840 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 800183a:	f06f 0308 	mvn.w	r3, #8
 800183e:	e001      	b.n	8001844 <canardDecodeScalar+0x308>
        }
    }

    CANARD_ASSERT(result <= bit_length);
    CANARD_ASSERT(result > 0);
    return result;
 8001840:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
}
 8001844:	4618      	mov	r0, r3
 8001846:	3734      	adds	r7, #52	@ 0x34
 8001848:	46bd      	mov	sp, r7
 800184a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800184e <canardEncodeScalar>:

void canardEncodeScalar(void* destination,
                        uint32_t bit_offset,
                        uint8_t bit_length,
                        const void* value)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b08a      	sub	sp, #40	@ 0x28
 8001852:	af02      	add	r7, sp, #8
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	4613      	mov	r3, r2
 800185c:	71fb      	strb	r3, [r7, #7]
     * Maybe not the best solution, but it simplifies the API.
     */
    CANARD_ASSERT(destination != NULL);
    CANARD_ASSERT(value != NULL);

    if (bit_length > 64)
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b40      	cmp	r3, #64	@ 0x40
 8001862:	d901      	bls.n	8001868 <canardEncodeScalar+0x1a>
    {
        CANARD_ASSERT(false);
        bit_length = 64;
 8001864:	2340      	movs	r3, #64	@ 0x40
 8001866:	71fb      	strb	r3, [r7, #7]
    }

    if (bit_length < 1)
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <canardEncodeScalar+0x24>
    {
        CANARD_ASSERT(false);
        bit_length = 1;
 800186e:	2301      	movs	r3, #1
 8001870:	71fb      	strb	r3, [r7, #7]
        uint32_t u32;
        uint64_t u64;
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));
 8001872:	f107 0310 	add.w	r3, r7, #16
 8001876:	2208      	movs	r2, #8
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f009 ff24 	bl	800b6c8 <memset>

    uint8_t std_byte_length = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	77fb      	strb	r3, [r7, #31]

    // Extra most significant bits can be safely ignored here.
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d105      	bne.n	8001896 <canardEncodeScalar+0x48>
 800188a:	2301      	movs	r3, #1
 800188c:	77fb      	strb	r3, [r7, #31]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	743b      	strb	r3, [r7, #16]
 8001894:	e024      	b.n	80018e0 <canardEncodeScalar+0x92>
    else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2b08      	cmp	r3, #8
 800189a:	d805      	bhi.n	80018a8 <canardEncodeScalar+0x5a>
 800189c:	2301      	movs	r3, #1
 800189e:	77fb      	strb	r3, [r7, #31]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	743b      	strb	r3, [r7, #16]
 80018a6:	e01b      	b.n	80018e0 <canardEncodeScalar+0x92>
    else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	2b10      	cmp	r3, #16
 80018ac:	d805      	bhi.n	80018ba <canardEncodeScalar+0x6c>
 80018ae:	2302      	movs	r3, #2
 80018b0:	77fb      	strb	r3, [r7, #31]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	823b      	strh	r3, [r7, #16]
 80018b8:	e012      	b.n	80018e0 <canardEncodeScalar+0x92>
    else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	2b20      	cmp	r3, #32
 80018be:	d805      	bhi.n	80018cc <canardEncodeScalar+0x7e>
 80018c0:	2304      	movs	r3, #4
 80018c2:	77fb      	strb	r3, [r7, #31]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	e009      	b.n	80018e0 <canardEncodeScalar+0x92>
    else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	2b40      	cmp	r3, #64	@ 0x40
 80018d0:	d806      	bhi.n	80018e0 <canardEncodeScalar+0x92>
 80018d2:	2308      	movs	r3, #8
 80018d4:	77fb      	strb	r3, [r7, #31]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
            storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
        }
    }
#endif

    if (isBigEndian())
 80018e0:	f000 fef3 	bl	80026ca <isBigEndian>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d006      	beq.n	80018f8 <canardEncodeScalar+0xaa>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 80018ea:	7ffa      	ldrb	r2, [r7, #31]
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fefa 	bl	80026ec <swapByteOrder>
     * Extra least significant bits will be filled with zeroes, which is fine.
     * Extra most significant bits will be discarded here.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d014      	beq.n	800192e <canardEncodeScalar+0xe0>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	08db      	lsrs	r3, r3, #3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	3320      	adds	r3, #32
 800190c:	443b      	add	r3, r7
 800190e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001912:	461a      	mov	r2, r3
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	425b      	negs	r3, r3
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	409a      	lsls	r2, r3
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	08db      	lsrs	r3, r3, #3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	3320      	adds	r3, #32
 8001928:	443b      	add	r3, r7
 800192a:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Now, the storage contains properly serialized scalar. Copying it out.
     */
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 800192e:	79fa      	ldrb	r2, [r7, #7]
 8001930:	f107 0010 	add.w	r0, r7, #16
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2100      	movs	r1, #0
 800193c:	f000 fd59 	bl	80023f2 <copyBitArray>
}
 8001940:	bf00      	nop
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <canardReleaseRxTransferPayload>:

void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
    while (transfer->payload_middle != NULL)
 8001952:	e00f      	b.n	8001974 <canardReleaseRxTransferPayload+0x2c>
    {
        CanardBufferBlock* const temp = transfer->payload_middle->next;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]
        freeBlock(&ins->allocator, transfer->payload_middle);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f103 020c 	add.w	r2, r3, #12
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	4619      	mov	r1, r3
 8001968:	4610      	mov	r0, r2
 800196a:	f000 ffca 	bl	8002902 <freeBlock>
        transfer->payload_middle = temp;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	60da      	str	r2, [r3, #12]
    while (transfer->payload_middle != NULL)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1eb      	bne.n	8001954 <canardReleaseRxTransferPayload+0xc>
    }

    transfer->payload_middle = NULL;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2200      	movs	r2, #0
 8001980:	60da      	str	r2, [r3, #12]
    transfer->payload_head = NULL;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
    transfer->payload_tail = NULL;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
    transfer->payload_len = 0;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2200      	movs	r2, #0
 8001992:	829a      	strh	r2, [r3, #20]
}
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <canardConvertNativeFloatToFloat16>:
{
    return ins->allocator.statistics;
}

uint16_t canardConvertNativeFloatToFloat16(float value)
{
 800199c:	b480      	push	{r7}
 800199e:	b08b      	sub	sp, #44	@ 0x2c
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        uint32_t u;
        float f;
    };

    const union FP32 f32inf = { 255UL << 23U };
 80019a6:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 80019aa:	617b      	str	r3, [r7, #20]
    const union FP32 f16inf = { 31UL << 23U };
 80019ac:	f04f 6378 	mov.w	r3, #260046848	@ 0xf800000
 80019b0:	613b      	str	r3, [r7, #16]
    const union FP32 magic = { 15UL << 23U };
 80019b2:	f04f 63f0 	mov.w	r3, #125829120	@ 0x7800000
 80019b6:	60fb      	str	r3, [r7, #12]
    const uint32_t sign_mask = 0x80000000UL;
 80019b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80019bc:	623b      	str	r3, [r7, #32]
    const uint32_t round_mask = 0xFFFFF000UL;
 80019be:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <canardConvertNativeFloatToFloat16+0xa8>)
 80019c0:	61fb      	str	r3, [r7, #28]

    union FP32 in;
    in.f = value;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	60bb      	str	r3, [r7, #8]
    uint32_t sign = in.u & sign_mask;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	6a3a      	ldr	r2, [r7, #32]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
    in.u ^= sign;
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	4053      	eors	r3, r2
 80019d4:	60bb      	str	r3, [r7, #8]

    uint16_t out = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (in.u >= f32inf.u)
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d30a      	bcc.n	80019f8 <canardConvertNativeFloatToFloat16+0x5c>
    {
        out = (in.u > f32inf.u) ? (uint16_t)0x7FFFU : (uint16_t)0x7C00U;
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d902      	bls.n	80019f0 <canardConvertNativeFloatToFloat16+0x54>
 80019ea:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80019ee:	e001      	b.n	80019f4 <canardConvertNativeFloatToFloat16+0x58>
 80019f0:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 80019f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80019f6:	e018      	b.n	8001a2a <canardConvertNativeFloatToFloat16+0x8e>
    }
    else
    {
        in.u &= round_mask;
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
        in.f *= magic.f;
 8001a00:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a04:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0c:	edc7 7a02 	vstr	s15, [r7, #8]
        in.u -= round_mask;
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	60bb      	str	r3, [r7, #8]
        if (in.u > f16inf.u)
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d901      	bls.n	8001a24 <canardConvertNativeFloatToFloat16+0x88>
        {
            in.u = f16inf.u;
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	60bb      	str	r3, [r7, #8]
        }
        out = (uint16_t)(in.u >> 13U);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	0b5b      	lsrs	r3, r3, #13
 8001a28:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    out |= (uint16_t)(sign >> 16U);
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	0c1b      	lsrs	r3, r3, #16
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a32:	4313      	orrs	r3, r2
 8001a34:	84fb      	strh	r3, [r7, #38]	@ 0x26

    return out;
 8001a36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	372c      	adds	r7, #44	@ 0x2c
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	fffff000 	.word	0xfffff000

08001a48 <canardConvertFloat16ToNativeFloat>:

float canardConvertFloat16ToNativeFloat(uint16_t value)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
    {
        uint32_t u;
        float f;
    };

    const union FP32 magic = { (254UL - 15UL) << 23U };
 8001a52:	f04f 43ef 	mov.w	r3, #2004877312	@ 0x77800000
 8001a56:	617b      	str	r3, [r7, #20]
    const union FP32 was_inf_nan = { (127UL + 16UL) << 23U };
 8001a58:	f04f 438f 	mov.w	r3, #1199570944	@ 0x47800000
 8001a5c:	613b      	str	r3, [r7, #16]
    union FP32 out;

    out.u = (value & 0x7FFFU) << 13U;
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	035a      	lsls	r2, r3, #13
 8001a62:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <canardConvertFloat16ToNativeFloat+0x6c>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
    out.f *= magic.f;
 8001a68:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a74:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.f >= was_inf_nan.f)
 8001a78:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	db03      	blt.n	8001a92 <canardConvertFloat16ToNativeFloat+0x4a>
    {
        out.u |= 255UL << 23U;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f043 43ff 	orr.w	r3, r3, #2139095040	@ 0x7f800000
 8001a90:	60fb      	str	r3, [r7, #12]
    }
    out.u |= (value & 0x8000UL) << 16U;
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	041b      	lsls	r3, r3, #16
 8001a98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]

    return out.f;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	ee07 3a90 	vmov	s15, r3
}
 8001aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	0fffe000 	.word	0x0fffe000

08001ab8 <computeTransferIDForwardDistance>:

/*
 * Internal (static functions)
 */
CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460a      	mov	r2, r1
 8001ac2:	71fb      	strb	r3, [r7, #7]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	71bb      	strb	r3, [r7, #6]
    int16_t d = (int16_t)(a - b);
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	79bb      	ldrb	r3, [r7, #6]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	81fb      	strh	r3, [r7, #14]
    if (d < 0)
 8001ad6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da03      	bge.n	8001ae6 <computeTransferIDForwardDistance+0x2e>
    {
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 8001ade:	89fb      	ldrh	r3, [r7, #14]
 8001ae0:	3320      	adds	r3, #32
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	81fb      	strh	r3, [r7, #14]
    }
    return d;
 8001ae6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <incrementTransferID>:

CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(transfer_id != NULL);

    (*transfer_id)++;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	3301      	adds	r3, #1
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	701a      	strb	r2, [r3, #0]
    if (*transfer_id >= 32)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b1f      	cmp	r3, #31
 8001b10:	d902      	bls.n	8001b18 <incrementTransferID+0x22>
    {
        *transfer_id = 0;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
    }
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <dlcToDataLength>:

CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	80fb      	strh	r3, [r7, #6]
    /*
    Data Length Code      9  10  11  12  13  14  15
    Number of data bytes 12  16  20  24  32  48  64
    */
    if (dlc <= 8) {
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d801      	bhi.n	8001b38 <dlcToDataLength+0x14>
        return dlc;
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	e01e      	b.n	8001b76 <dlcToDataLength+0x52>
    } else if (dlc == 9) {
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	2b09      	cmp	r3, #9
 8001b3c:	d101      	bne.n	8001b42 <dlcToDataLength+0x1e>
        return 12;
 8001b3e:	230c      	movs	r3, #12
 8001b40:	e019      	b.n	8001b76 <dlcToDataLength+0x52>
    } else if (dlc == 10) {
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	2b0a      	cmp	r3, #10
 8001b46:	d101      	bne.n	8001b4c <dlcToDataLength+0x28>
        return 16;
 8001b48:	2310      	movs	r3, #16
 8001b4a:	e014      	b.n	8001b76 <dlcToDataLength+0x52>
    } else if (dlc == 11) {
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	2b0b      	cmp	r3, #11
 8001b50:	d101      	bne.n	8001b56 <dlcToDataLength+0x32>
        return 20;
 8001b52:	2314      	movs	r3, #20
 8001b54:	e00f      	b.n	8001b76 <dlcToDataLength+0x52>
    } else if (dlc == 12) {
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	2b0c      	cmp	r3, #12
 8001b5a:	d101      	bne.n	8001b60 <dlcToDataLength+0x3c>
        return 24;
 8001b5c:	2318      	movs	r3, #24
 8001b5e:	e00a      	b.n	8001b76 <dlcToDataLength+0x52>
    } else if (dlc == 13) {
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	2b0d      	cmp	r3, #13
 8001b64:	d101      	bne.n	8001b6a <dlcToDataLength+0x46>
        return 32;
 8001b66:	2320      	movs	r3, #32
 8001b68:	e005      	b.n	8001b76 <dlcToDataLength+0x52>
    } else if (dlc == 14) {
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	2b0e      	cmp	r3, #14
 8001b6e:	d101      	bne.n	8001b74 <dlcToDataLength+0x50>
        return 48;
 8001b70:	2330      	movs	r3, #48	@ 0x30
 8001b72:	e000      	b.n	8001b76 <dlcToDataLength+0x52>
    }
    return 64;
 8001b74:	2340      	movs	r3, #64	@ 0x40
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <dataLengthToDlc>:

CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	80fb      	strh	r3, [r7, #6]
    if (data_length <= 8) {
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d801      	bhi.n	8001b96 <dataLengthToDlc+0x14>
        return data_length;
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	e01e      	b.n	8001bd4 <dataLengthToDlc+0x52>
    } else if (data_length <= 12) {
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	d801      	bhi.n	8001ba0 <dataLengthToDlc+0x1e>
        return 9;
 8001b9c:	2309      	movs	r3, #9
 8001b9e:	e019      	b.n	8001bd4 <dataLengthToDlc+0x52>
    } else if (data_length <= 16) {
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	2b10      	cmp	r3, #16
 8001ba4:	d801      	bhi.n	8001baa <dataLengthToDlc+0x28>
        return 10;
 8001ba6:	230a      	movs	r3, #10
 8001ba8:	e014      	b.n	8001bd4 <dataLengthToDlc+0x52>
    } else if (data_length <= 20) {
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	2b14      	cmp	r3, #20
 8001bae:	d801      	bhi.n	8001bb4 <dataLengthToDlc+0x32>
        return 11;
 8001bb0:	230b      	movs	r3, #11
 8001bb2:	e00f      	b.n	8001bd4 <dataLengthToDlc+0x52>
    } else if (data_length <= 24) {
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	2b18      	cmp	r3, #24
 8001bb8:	d801      	bhi.n	8001bbe <dataLengthToDlc+0x3c>
        return 12;
 8001bba:	230c      	movs	r3, #12
 8001bbc:	e00a      	b.n	8001bd4 <dataLengthToDlc+0x52>
    } else if (data_length <= 32) {
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	2b20      	cmp	r3, #32
 8001bc2:	d801      	bhi.n	8001bc8 <dataLengthToDlc+0x46>
        return 13;
 8001bc4:	230d      	movs	r3, #13
 8001bc6:	e005      	b.n	8001bd4 <dataLengthToDlc+0x52>
    } else if (data_length <= 48) {
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	2b30      	cmp	r3, #48	@ 0x30
 8001bcc:	d801      	bhi.n	8001bd2 <dataLengthToDlc+0x50>
        return 14;
 8001bce:	230e      	movs	r3, #14
 8001bd0:	e000      	b.n	8001bd4 <dataLengthToDlc+0x52>
    }
    return 15;
 8001bd2:	230f      	movs	r3, #15
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <enqueueTxFrames>:
CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                        uint32_t can_id,
                                        uint16_t crc,
                                        CanardTxTransfer* transfer
)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	@ 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	4613      	mov	r3, r2
 8001bee:	80fb      	strh	r3, [r7, #6]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

    if (transfer->inout_transfer_id == NULL)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <enqueueTxFrames+0x1e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001bf8:	f06f 0301 	mvn.w	r3, #1
 8001bfc:	e0f9      	b.n	8001df2 <enqueueTxFrames+0x212>
    }

    if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	8c1b      	ldrh	r3, [r3, #32]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d006      	beq.n	8001c14 <enqueueTxFrames+0x34>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d102      	bne.n	8001c14 <enqueueTxFrames+0x34>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001c0e:	f06f 0301 	mvn.w	r3, #1
 8001c12:	e0ee      	b.n	8001df2 <enqueueTxFrames+0x212>
    }

    int16_t result = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	84fb      	strh	r3, [r7, #38]	@ 0x26
#if CANARD_ENABLE_CANFD
    uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
#else
    uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	77fb      	strb	r3, [r7, #31]
#endif
    if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	8c1a      	ldrh	r2, [r3, #32]
 8001c20:	7ffb      	ldrb	r3, [r7, #31]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d24b      	bcs.n	8001cc0 <enqueueTxFrames+0xe0>
    {
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	330c      	adds	r3, #12
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 f929 	bl	8001e84 <createTxItem>
 8001c32:	6178      	str	r0, [r7, #20]
        if (queue_item == NULL)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d102      	bne.n	8001c40 <enqueueTxFrames+0x60>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8001c3a:	f06f 0302 	mvn.w	r3, #2
 8001c3e:	e0d8      	b.n	8001df2 <enqueueTxFrames+0x212>
        }

        memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f103 0008 	add.w	r0, r3, #8
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	69d9      	ldr	r1, [r3, #28]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	8c1b      	ldrh	r3, [r3, #32]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f009 fdd5 	bl	800b7fe <memcpy>

        transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	8c1b      	ldrh	r3, [r3, #32]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff90 	bl	8001b82 <dataLengthToDlc>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff5d 	bl	8001b24 <dlcToDataLength>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	841a      	strh	r2, [r3, #32]
        queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	8c1b      	ldrh	r3, [r3, #32]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	741a      	strb	r2, [r3, #16]
        queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	8c12      	ldrh	r2, [r2, #32]
 8001c92:	4611      	mov	r1, r2
 8001c94:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	440b      	add	r3, r1
 8001c9e:	721a      	strb	r2, [r3, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	605a      	str	r2, [r3, #4]
        queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
        queue_item->frame.canfd = transfer->canfd;
#endif
        pushTxQueue(ins, queue_item);
 8001caa:	6979      	ldr	r1, [r7, #20]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f8a4 	bl	8001dfa <pushTxQueue>
        result++;
 8001cb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001cbe:	e096      	b.n	8001dee <enqueueTxFrames+0x20e>
    }
    else                                                                    // Multi frame transfer
    {
        uint16_t data_index = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
        uint8_t toggle = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint8_t sot_eot = 0x80;
 8001cca:	2380      	movs	r3, #128	@ 0x80
 8001ccc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        CanardTxQueueItem* queue_item = NULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]

        while (transfer->payload_len - data_index != 0)
 8001cd4:	e085      	b.n	8001de2 <enqueueTxFrames+0x202>
        {
            queue_item = createTxItem(&ins->allocator);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	330c      	adds	r3, #12
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f8d2 	bl	8001e84 <createTxItem>
 8001ce0:	61b8      	str	r0, [r7, #24]
            if (queue_item == NULL)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <enqueueTxFrames+0x10e>
            {
                CANARD_ASSERT(false);
                return -CANARD_ERROR_OUT_OF_MEMORY;          // TODO: Purge all frames enqueued so far
 8001ce8:	f06f 0302 	mvn.w	r3, #2
 8001cec:	e081      	b.n	8001df2 <enqueueTxFrames+0x212>
            }

            uint16_t i = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	843b      	strh	r3, [r7, #32]
            if (data_index == 0)
 8001cf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10c      	bne.n	8001d12 <enqueueTxFrames+0x132>
            {
                // add crc
                queue_item->frame.data[0] = (uint8_t) (crc);
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	721a      	strb	r2, [r3, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	725a      	strb	r2, [r3, #9]
                i = 2;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	843b      	strh	r3, [r7, #32]
 8001d10:	e012      	b.n	8001d38 <enqueueTxFrames+0x158>
            }
            else
            {
                i = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	843b      	strh	r3, [r7, #32]
            }

            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8001d16:	e00f      	b.n	8001d38 <enqueueTxFrames+0x158>
            {
                queue_item->frame.data[i] = transfer->payload[data_index];
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	69da      	ldr	r2, [r3, #28]
 8001d1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d1e:	441a      	add	r2, r3
 8001d20:	8c3b      	ldrh	r3, [r7, #32]
 8001d22:	7811      	ldrb	r1, [r2, #0]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4413      	add	r3, r2
 8001d28:	460a      	mov	r2, r1
 8001d2a:	721a      	strb	r2, [r3, #8]
            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8001d2c:	8c3b      	ldrh	r3, [r7, #32]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	843b      	strh	r3, [r7, #32]
 8001d32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d34:	3301      	adds	r3, #1
 8001d36:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001d38:	8c3a      	ldrh	r2, [r7, #32]
 8001d3a:	7ffb      	ldrb	r3, [r7, #31]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	da04      	bge.n	8001d4c <enqueueTxFrames+0x16c>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	8c1b      	ldrh	r3, [r3, #32]
 8001d46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d3e5      	bcc.n	8001d18 <enqueueTxFrames+0x138>
            }
            // tail byte
            sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	8c1b      	ldrh	r3, [r3, #32]
 8001d50:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d002      	beq.n	8001d5c <enqueueTxFrames+0x17c>
 8001d56:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001d5a:	e000      	b.n	8001d5e <enqueueTxFrames+0x17e>
 8001d5c:	2340      	movs	r3, #64	@ 0x40
 8001d5e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            
            i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 8001d62:	8c3b      	ldrh	r3, [r7, #32]
 8001d64:	3301      	adds	r3, #1
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff0a 	bl	8001b82 <dataLengthToDlc>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fed7 	bl	8001b24 <dlcToDataLength>
 8001d76:	4603      	mov	r3, r0
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	843b      	strh	r3, [r7, #32]
            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 8001d7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d80:	015b      	lsls	r3, r3, #5
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b2d9      	uxtb	r1, r3
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	f003 031f 	and.w	r3, r3, #31
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	8c3b      	ldrh	r3, [r7, #32]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	b2d1      	uxtb	r1, r2
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4413      	add	r3, r2
 8001da2:	460a      	mov	r2, r1
 8001da4:	721a      	strb	r2, [r3, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	605a      	str	r2, [r3, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 8001db0:	8c3b      	ldrh	r3, [r7, #32]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	3301      	adds	r3, #1
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	741a      	strb	r2, [r3, #16]
            queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
            queue_item->frame.canfd = transfer->canfd;
#endif
            pushTxQueue(ins, queue_item);
 8001dbc:	69b9      	ldr	r1, [r7, #24]
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f000 f81b 	bl	8001dfa <pushTxQueue>

            result++;
 8001dc4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	84fb      	strh	r3, [r7, #38]	@ 0x26
            toggle ^= 1;
 8001dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001dd4:	f083 0301 	eor.w	r3, r3, #1
 8001dd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            sot_eot = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        while (transfer->payload_len - data_index != 0)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	8c1b      	ldrh	r3, [r3, #32]
 8001de6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001de8:	429a      	cmp	r2, r3
 8001dea:	f47f af74 	bne.w	8001cd6 <enqueueTxFrames+0xf6>
        }
    }

    return result;
 8001dee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3728      	adds	r7, #40	@ 0x28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <pushTxQueue>:

/**
 * Puts frame on on the TX queue. Higher priority placed first
 */
CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b084      	sub	sp, #16
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

    if (ins->tx_queue == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d103      	bne.n	8001e14 <pushTxQueue+0x1a>
    {
        ins->tx_queue = item;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	625a      	str	r2, [r3, #36]	@ 0x24
        return;
 8001e12:	e034      	b.n	8001e7e <pushTxQueue+0x84>
    }

    CanardTxQueueItem* queue = ins->tx_queue;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	60fb      	str	r3, [r7, #12]
    CanardTxQueueItem* previous = ins->tx_queue;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	60bb      	str	r3, [r7, #8]

    while (queue != NULL)
 8001e20:	e02a      	b.n	8001e78 <pushTxQueue+0x7e>
    {
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	f000 f840 	bl	8001eb2 <isPriorityHigher>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d012      	beq.n	8001e5e <pushTxQueue+0x64>
        {
            if (queue == ins->tx_queue)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d106      	bne.n	8001e50 <pushTxQueue+0x56>
            {
                item->next = queue;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	601a      	str	r2, [r3, #0]
                ins->tx_queue = item;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24
            else
            {
                previous->next = item;
                item->next = queue;
            }
            return;
 8001e4e:	e016      	b.n	8001e7e <pushTxQueue+0x84>
                previous->next = item;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	601a      	str	r2, [r3, #0]
                item->next = queue;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	601a      	str	r2, [r3, #0]
            return;
 8001e5c:	e00f      	b.n	8001e7e <pushTxQueue+0x84>
        }
        else
        {
            if (queue->next == NULL)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d103      	bne.n	8001e6e <pushTxQueue+0x74>
            {
                queue->next = item;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	601a      	str	r2, [r3, #0]
                return;
 8001e6c:	e007      	b.n	8001e7e <pushTxQueue+0x84>
            }
            else
            {
                previous = queue;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	60bb      	str	r3, [r7, #8]
                queue = queue->next;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]
    while (queue != NULL)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1d1      	bne.n	8001e22 <pushTxQueue+0x28>
            }
        }
    }
}
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <createTxItem>:

/**
 * Creates new tx queue item from allocator
 */
CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fd0f 	bl	80028b0 <allocateBlock>
 8001e92:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <createTxItem+0x1a>
    {
        return NULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e005      	b.n	8001eaa <createTxItem+0x26>
    }
    memset(item, 0, sizeof(*item));
 8001e9e:	2214      	movs	r2, #20
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f009 fc10 	bl	800b6c8 <memset>
    return item;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <isPriorityHigher>:

/**
 * Returns true if priority of rhs is higher than id
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b089      	sub	sp, #36	@ 0x24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
    const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001ec2:	61fb      	str	r3, [r7, #28]
    const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001eca:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	0fdb      	lsrs	r3, r3, #31
 8001ed0:	75fb      	strb	r3, [r7, #23]
    const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	0fdb      	lsrs	r3, r3, #31
 8001ed6:	75bb      	strb	r3, [r7, #22]
    if (ext != rhs_ext)
 8001ed8:	7dfa      	ldrb	r2, [r7, #23]
 8001eda:	7dbb      	ldrb	r3, [r7, #22]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d01d      	beq.n	8001f1c <isPriorityHigher+0x6a>
    {
        uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <isPriorityHigher+0x3a>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	0c9b      	lsrs	r3, r3, #18
 8001eea:	e000      	b.n	8001eee <isPriorityHigher+0x3c>
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	613b      	str	r3, [r7, #16]
        uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 8001ef0:	7dbb      	ldrb	r3, [r7, #22]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <isPriorityHigher+0x4a>
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	0c9b      	lsrs	r3, r3, #18
 8001efa:	e000      	b.n	8001efe <isPriorityHigher+0x4c>
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	60fb      	str	r3, [r7, #12]
        if (arb11 != rhs_arb11)
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d007      	beq.n	8001f18 <isPriorityHigher+0x66>
        {
            return arb11 < rhs_arb11;
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	bf34      	ite	cc
 8001f10:	2301      	movcc	r3, #1
 8001f12:	2300      	movcs	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	e022      	b.n	8001f5e <isPriorityHigher+0xac>
        }
        else
        {
            return rhs_ext;
 8001f18:	7dbb      	ldrb	r3, [r7, #22]
 8001f1a:	e020      	b.n	8001f5e <isPriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bf14      	ite	ne
 8001f26:	2301      	movne	r3, #1
 8001f28:	2300      	moveq	r3, #0
 8001f2a:	757b      	strb	r3, [r7, #21]
    const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bf14      	ite	ne
 8001f36:	2301      	movne	r3, #1
 8001f38:	2300      	moveq	r3, #0
 8001f3a:	753b      	strb	r3, [r7, #20]
    if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d105      	bne.n	8001f50 <isPriorityHigher+0x9e>
 8001f44:	7d7a      	ldrb	r2, [r7, #21]
 8001f46:	7d3b      	ldrb	r3, [r7, #20]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <isPriorityHigher+0x9e>
    {
        return rhs_rtr;
 8001f4c:	7d3b      	ldrb	r3, [r7, #20]
 8001f4e:	e006      	b.n	8001f5e <isPriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_id < rhs_clean_id;
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	bf34      	ite	cc
 8001f58:	2301      	movcc	r3, #1
 8001f5a:	2300      	movcs	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3724      	adds	r7, #36	@ 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <prepareForNextTransfer>:

/**
 * preps the rx state for the next transfer. does not delete the state
 */
CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(state->buffer_blocks == CANARD_BUFFER_IDX_NONE);
    state->transfer_id++;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7ddb      	ldrb	r3, [r3, #23]
 8001f76:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	b2d9      	uxtb	r1, r3
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	7dd3      	ldrb	r3, [r2, #23]
 8001f88:	f361 0386 	bfi	r3, r1, #2, #5
 8001f8c:	75d3      	strb	r3, [r2, #23]
    state->payload_len = 0;
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	8ad3      	ldrh	r3, [r2, #22]
 8001f92:	f36f 0309 	bfc	r3, #0, #10
 8001f96:	82d3      	strh	r3, [r2, #22]
    state->next_toggle = 0;
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	7dd3      	ldrb	r3, [r2, #23]
 8001f9c:	f36f 13c7 	bfc	r3, #7, #1
 8001fa0:	75d3      	strb	r3, [r2, #23]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <extractDataType>:

/**
 * returns data type from id
 */
uint16_t extractDataType(uint32_t id)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
    if (extractTransferType(id) == CanardTransferTypeBroadcast)
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f819 	bl	8001fee <extractTransferType>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d10e      	bne.n	8001fe0 <extractDataType+0x32>
    {
        uint16_t dtid = MSG_TYPE_FROM_ID(id);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	81fb      	strh	r3, [r7, #14]
        if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d103      	bne.n	8001fdc <extractDataType+0x2e>
        {
            dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 8001fd4:	89fb      	ldrh	r3, [r7, #14]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	81fb      	strh	r3, [r7, #14]
        }
        return dtid;
 8001fdc:	89fb      	ldrh	r3, [r7, #14]
 8001fde:	e002      	b.n	8001fe6 <extractDataType+0x38>
    }
    else
    {
        return (uint16_t) SRV_TYPE_FROM_ID(id);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	0c1b      	lsrs	r3, r3, #16
 8001fe4:	b2db      	uxtb	r3, r3
    }
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <extractTransferType>:

/**
 * returns transfer type from id
 */
CanardTransferType extractTransferType(uint32_t id)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
    const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bf14      	ite	ne
 8002000:	2301      	movne	r3, #1
 8002002:	2300      	moveq	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]
    if (!is_service)
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	f083 0301 	eor.w	r3, r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <extractTransferType+0x28>
    {
        return CanardTransferTypeBroadcast;
 8002012:	2302      	movs	r3, #2
 8002014:	e009      	b.n	800202a <extractTransferType+0x3c>
    }
    else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	0bdb      	lsrs	r3, r3, #15
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <extractTransferType+0x3a>
    {
        return CanardTransferTypeRequest;
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <extractTransferType+0x3c>
    }
    else
    {
        return CanardTransferTypeResponse;
 8002028:	2300      	movs	r3, #0
    }
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <traverseRxStates>:
/**
 * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
 * with either the Id or a new one at the end
 */
CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
    CanardRxState* states = ins->rx_states;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	60fb      	str	r3, [r7, #12]

    if (states == NULL) // initialize CanardRxStates
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d110      	bne.n	800206e <traverseRxStates+0x38>
    {
        states = createRxState(&ins->allocator, transfer_descriptor);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	330c      	adds	r3, #12
 8002050:	6839      	ldr	r1, [r7, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f865 	bl	8002122 <createRxState>
 8002058:	60f8      	str	r0, [r7, #12]

        if(states == NULL)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <traverseRxStates+0x2e>
        {
            return NULL;
 8002060:	2300      	movs	r3, #0
 8002062:	e013      	b.n	800208c <traverseRxStates+0x56>
        }

        ins->rx_states = states;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	621a      	str	r2, [r3, #32]
        return states;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	e00e      	b.n	800208c <traverseRxStates+0x56>
    }

    states = findRxState(ins, transfer_descriptor);
 800206e:	6839      	ldr	r1, [r7, #0]
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f80f 	bl	8002094 <findRxState>
 8002076:	60f8      	str	r0, [r7, #12]
    if (states != NULL)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <traverseRxStates+0x4c>
    {
        return states;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	e004      	b.n	800208c <traverseRxStates+0x56>
    }
    else
    {
        return prependRxState(ins, transfer_descriptor);
 8002082:	6839      	ldr	r1, [r7, #0]
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f827 	bl	80020d8 <prependRxState>
 800208a:	4603      	mov	r3, r0
    }
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <findRxState>:

/**
 * returns pointer to the rx state of transfer descriptor or null if not found
 */
CANARD_INTERNAL CanardRxState* findRxState(CanardInstance *ins, uint32_t transfer_descriptor)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
    CanardRxState *state = ins->rx_states;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	60fb      	str	r3, [r7, #12]
    while (state != NULL)
 80020a4:	e010      	b.n	80020c8 <findRxState+0x34>
    {
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d101      	bne.n	80020b4 <findRxState+0x20>
        {
            return state;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	e00d      	b.n	80020d0 <findRxState+0x3c>
        }
        state = canardRxFromIdx(&ins->allocator, state->next);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f103 020c 	add.w	r2, r3, #12
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4619      	mov	r1, r3
 80020c0:	4610      	mov	r0, r2
 80020c2:	f7fe fd45 	bl	8000b50 <canardRxFromIdx>
 80020c6:	60f8      	str	r0, [r7, #12]
    while (state != NULL)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1eb      	bne.n	80020a6 <findRxState+0x12>
    }
    return NULL;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <prependRxState>:

/**
 * prepends rx state to the canard instance rx_states
 */
CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
    CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	330c      	adds	r3, #12
 80020e6:	6839      	ldr	r1, [r7, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 f81a 	bl	8002122 <createRxState>
 80020ee:	60f8      	str	r0, [r7, #12]

    if(state == NULL)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <prependRxState+0x22>
    {
        return NULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e00f      	b.n	800211a <prependRxState+0x42>
    }

    state->next = canardRxToIdx(&ins->allocator, ins->rx_states);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f103 020c 	add.w	r2, r3, #12
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4619      	mov	r1, r3
 8002106:	4610      	mov	r0, r2
 8002108:	f7fe fd2e 	bl	8000b68 <canardRxToIdx>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	601a      	str	r2, [r3, #0]
    ins->rx_states = state;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	621a      	str	r2, [r3, #32]
    return state;
 8002118:	68fb      	ldr	r3, [r7, #12]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <createRxState>:

CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_descriptor)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b08c      	sub	sp, #48	@ 0x30
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
    CanardRxState init = {
 800212c:	f107 0308 	add.w	r3, r7, #8
 8002130:	2220      	movs	r2, #32
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f009 fac7 	bl	800b6c8 <memset>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	61bb      	str	r3, [r7, #24]
        .next = CANARD_BUFFER_IDX_NONE,
        .buffer_blocks = CANARD_BUFFER_IDX_NONE,
        .dtid_tt_snid_dnid = transfer_descriptor
    };

    CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fbb6 	bl	80028b0 <allocateBlock>
 8002144:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (state == NULL)
 8002146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <createRxState+0x2e>
    {
        return NULL;
 800214c:	2300      	movs	r3, #0
 800214e:	e007      	b.n	8002160 <createRxState+0x3e>
    }
    memcpy(state, &init, sizeof(*state));
 8002150:	f107 0308 	add.w	r3, r7, #8
 8002154:	2220      	movs	r2, #32
 8002156:	4619      	mov	r1, r3
 8002158:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800215a:	f009 fb50 	bl	800b7fe <memcpy>

    return state;
 800215e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002160:	4618      	mov	r0, r3
 8002162:	3730      	adds	r7, #48	@ 0x30
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <releaseStatePayload>:

CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8002172:	e01b      	b.n	80021ac <releaseStatePayload+0x44>
    {
        CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rxstate->buffer_blocks);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f103 020c 	add.w	r2, r3, #12
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4619      	mov	r1, r3
 8002180:	4610      	mov	r0, r2
 8002182:	f7fe fccd 	bl	8000b20 <canardBufferFromIdx>
 8002186:	60f8      	str	r0, [r7, #12]
        CanardBufferBlock* const temp = block->next;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60bb      	str	r3, [r7, #8]
        freeBlock(&ins->allocator, block);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	330c      	adds	r3, #12
 8002192:	68f9      	ldr	r1, [r7, #12]
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fbb4 	bl	8002902 <freeBlock>
        rxstate->buffer_blocks = canardBufferToIdx(&ins->allocator, temp);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	330c      	adds	r3, #12
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe fcc9 	bl	8000b38 <canardBufferToIdx>
 80021a6:	4602      	mov	r2, r0
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	605a      	str	r2, [r3, #4]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1df      	bne.n	8002174 <releaseStatePayload+0xc>
    }
    rxstate->payload_len = 0;
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	8ad3      	ldrh	r3, [r2, #22]
 80021b8:	f36f 0309 	bfc	r3, #0, #10
 80021bc:	82d3      	strh	r3, [r2, #22]
    return CANARD_OK;
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
}
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <bufferBlockPushBytes>:
 */
CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
                                             CanardRxState* state,
                                             const uint8_t* data,
                                             uint8_t data_len)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	@ 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	70fb      	strb	r3, [r7, #3]
    uint16_t data_index = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // if head is not full, add data to head
    if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	8adb      	ldrh	r3, [r3, #22]
 80021e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d036      	beq.n	800225e <bufferBlockPushBytes+0x8e>
    {
        for (uint16_t i = (uint16_t)state->payload_len;
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	8adb      	ldrh	r3, [r3, #22]
 80021f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80021fc:	e00e      	b.n	800221c <bufferBlockPushBytes+0x4c>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
             i++, data_index++)
        {
            state->buffer_head[i] = data[data_index];
 80021fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	441a      	add	r2, r3
 8002204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002206:	7811      	ldrb	r1, [r2, #0]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	4413      	add	r3, r2
 800220c:	460a      	mov	r2, r1
 800220e:	76da      	strb	r2, [r3, #27]
             i++, data_index++)
 8002210:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002212:	3301      	adds	r3, #1
 8002214:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002216:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002218:	3301      	adds	r3, #1
 800221a:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 800221c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800221e:	2b04      	cmp	r3, #4
 8002220:	d804      	bhi.n	800222c <bufferBlockPushBytes+0x5c>
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	b29b      	uxth	r3, r3
 8002226:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002228:	429a      	cmp	r2, r3
 800222a:	d3e8      	bcc.n	80021fe <bufferBlockPushBytes+0x2e>
        }
        if (data_index >= data_len)
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	b29b      	uxth	r3, r3
 8002230:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002232:	429a      	cmp	r2, r3
 8002234:	d313      	bcc.n	800225e <bufferBlockPushBytes+0x8e>
        {
            state->payload_len =
                (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	8adb      	ldrh	r3, [r3, #22]
 800223a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800223e:	b29b      	uxth	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	b29b      	uxth	r3, r3
 8002246:	4413      	add	r3, r2
 8002248:	b29b      	uxth	r3, r3
 800224a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800224e:	b299      	uxth	r1, r3
            state->payload_len =
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	8ad3      	ldrh	r3, [r2, #22]
 8002254:	f361 0309 	bfi	r3, r1, #0, #10
 8002258:	82d3      	strh	r3, [r2, #22]
            return 1;
 800225a:	2301      	movs	r3, #1
 800225c:	e0ae      	b.n	80023bc <bufferBlockPushBytes+0x1ec>
        }
    } // head is full.

    uint16_t index_at_nth_block =
        (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	8adb      	ldrh	r3, [r3, #22]
 8002262:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002266:	b29b      	uxth	r3, r3
 8002268:	1f5a      	subs	r2, r3, #5
 800226a:	0893      	lsrs	r3, r2, #2
 800226c:	4955      	ldr	r1, [pc, #340]	@ (80023c4 <bufferBlockPushBytes+0x1f4>)
 800226e:	fba1 3103 	umull	r3, r1, r1, r3
 8002272:	460b      	mov	r3, r1
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	1a5b      	subs	r3, r3, r1
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	1ad3      	subs	r3, r2, r3
    uint16_t index_at_nth_block =
 800227c:	847b      	strh	r3, [r7, #34]	@ 0x22

    // get to current block
    CanardBufferBlock* block = NULL;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]

    // buffer blocks uninitialized
    if (state->buffer_blocks == CANARD_BUFFER_IDX_NONE)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d113      	bne.n	80022b2 <bufferBlockPushBytes+0xe2>
    {
        block = createBufferBlock(allocator);
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f89c 	bl	80023c8 <createBufferBlock>
 8002290:	61f8      	str	r0, [r7, #28]
        state->buffer_blocks = canardBufferToIdx(allocator, block);
 8002292:	69f9      	ldr	r1, [r7, #28]
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f7fe fc4f 	bl	8000b38 <canardBufferToIdx>
 800229a:	4602      	mov	r2, r0
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	605a      	str	r2, [r3, #4]
        if (block == NULL)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <bufferBlockPushBytes+0xdc>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 80022a6:	f06f 0302 	mvn.w	r3, #2
 80022aa:	e087      	b.n	80023bc <bufferBlockPushBytes+0x1ec>
        }

        index_at_nth_block = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	847b      	strh	r3, [r7, #34]	@ 0x22
 80022b0:	e06c      	b.n	800238c <bufferBlockPushBytes+0x1bc>
    }
    else
    {
        uint16_t nth_block = 1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	837b      	strh	r3, [r7, #26]

        // get to block
        block = canardBufferFromIdx(allocator, state->buffer_blocks);
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4619      	mov	r1, r3
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f7fe fc2f 	bl	8000b20 <canardBufferFromIdx>
 80022c2:	61f8      	str	r0, [r7, #28]
        while (block->next != NULL)
 80022c4:	e005      	b.n	80022d2 <bufferBlockPushBytes+0x102>
        {
            nth_block++;
 80022c6:	8b7b      	ldrh	r3, [r7, #26]
 80022c8:	3301      	adds	r3, #1
 80022ca:	837b      	strh	r3, [r7, #26]
            block = block->next;
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61fb      	str	r3, [r7, #28]
        while (block->next != NULL)
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f5      	bne.n	80022c6 <bufferBlockPushBytes+0xf6>
        }

        const uint16_t num_buffer_blocks =
            (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	8adb      	ldrh	r3, [r3, #22]
 80022de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	4413      	add	r3, r2
 80022ea:	3b05      	subs	r3, #5
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	4a35      	ldr	r2, [pc, #212]	@ (80023c4 <bufferBlockPushBytes+0x1f4>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	b29b      	uxth	r3, r3
        const uint16_t num_buffer_blocks =
 80022f6:	3301      	adds	r3, #1
 80022f8:	82fb      	strh	r3, [r7, #22]
                         CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);

        if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 80022fa:	8afa      	ldrh	r2, [r7, #22]
 80022fc:	8b7b      	ldrh	r3, [r7, #26]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d944      	bls.n	800238c <bufferBlockPushBytes+0x1bc>
 8002302:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002304:	2b00      	cmp	r3, #0
 8002306:	d141      	bne.n	800238c <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 f85d 	bl	80023c8 <createBufferBlock>
 800230e:	4602      	mov	r2, r0
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <bufferBlockPushBytes+0x152>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 800231c:	f06f 0302 	mvn.w	r3, #2
 8002320:	e04c      	b.n	80023bc <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	61fb      	str	r3, [r7, #28]
        }
    }

    // add data to current block until it becomes full, add new block if necessary
    while (data_index < data_len)
 8002328:	e030      	b.n	800238c <bufferBlockPushBytes+0x1bc>
    {
        for (uint16_t i = index_at_nth_block;
 800232a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800232c:	833b      	strh	r3, [r7, #24]
 800232e:	e00e      	b.n	800234e <bufferBlockPushBytes+0x17e>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
             i++, data_index++)
        {
            block->data[i] = data[data_index];
 8002330:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	441a      	add	r2, r3
 8002336:	8b3b      	ldrh	r3, [r7, #24]
 8002338:	7811      	ldrb	r1, [r2, #0]
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	460a      	mov	r2, r1
 8002340:	711a      	strb	r2, [r3, #4]
             i++, data_index++)
 8002342:	8b3b      	ldrh	r3, [r7, #24]
 8002344:	3301      	adds	r3, #1
 8002346:	833b      	strh	r3, [r7, #24]
 8002348:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800234a:	3301      	adds	r3, #1
 800234c:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 800234e:	8b3b      	ldrh	r3, [r7, #24]
 8002350:	2b1b      	cmp	r3, #27
 8002352:	d804      	bhi.n	800235e <bufferBlockPushBytes+0x18e>
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	b29b      	uxth	r3, r3
 8002358:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800235a:	429a      	cmp	r2, r3
 800235c:	d3e8      	bcc.n	8002330 <bufferBlockPushBytes+0x160>
        }

        if (data_index < data_len)
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	b29b      	uxth	r3, r3
 8002362:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002364:	429a      	cmp	r2, r3
 8002366:	d211      	bcs.n	800238c <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f82d 	bl	80023c8 <createBufferBlock>
 800236e:	4602      	mov	r2, r0
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <bufferBlockPushBytes+0x1b2>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 800237c:	f06f 0302 	mvn.w	r3, #2
 8002380:	e01c      	b.n	80023bc <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	61fb      	str	r3, [r7, #28]
            index_at_nth_block = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	847b      	strh	r3, [r7, #34]	@ 0x22
    while (data_index < data_len)
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	b29b      	uxth	r3, r3
 8002390:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002392:	429a      	cmp	r2, r3
 8002394:	d3c9      	bcc.n	800232a <bufferBlockPushBytes+0x15a>
        }
    }

    state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	8adb      	ldrh	r3, [r3, #22]
 800239a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800239e:	b29b      	uxth	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ae:	b299      	uxth	r1, r3
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	8ad3      	ldrh	r3, [r2, #22]
 80023b4:	f361 0309 	bfi	r3, r1, #0, #10
 80023b8:	82d3      	strh	r3, [r2, #22]

    return 1;
 80023ba:	2301      	movs	r3, #1
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3728      	adds	r7, #40	@ 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	24924925 	.word	0x24924925

080023c8 <createBufferBlock>:

CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
    CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fa6d 	bl	80028b0 <allocateBlock>
 80023d6:	60f8      	str	r0, [r7, #12]
    if (block == NULL)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <createBufferBlock+0x1a>
    {
        return NULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	e003      	b.n	80023ea <createBufferBlock+0x22>
    }
    block->next = NULL;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
    return block;
 80023e8:	68fb      	ldr	r3, [r7, #12]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <copyBitArray>:
/**
 * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
 */
void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                        uint8_t* dst, uint32_t dst_offset)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b089      	sub	sp, #36	@ 0x24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(src_len > 0U);

    // Normalizing inputs
    src += src_offset / 8U;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	08db      	lsrs	r3, r3, #3
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
    dst += dst_offset / 8U;
 800240a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240c:	08db      	lsrs	r3, r3, #3
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	4413      	add	r3, r2
 8002412:	603b      	str	r3, [r7, #0]

    src_offset %= 8U;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	60bb      	str	r3, [r7, #8]
    dst_offset %= 8U;
 800241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	62bb      	str	r3, [r7, #40]	@ 0x28

    const size_t last_bit = src_offset + src_len;
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	61fb      	str	r3, [r7, #28]
    while (last_bit - src_offset)
 800242c:	e04d      	b.n	80024ca <copyBitArray+0xd8>
    {
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	76fb      	strb	r3, [r7, #27]
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8002438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800243a:	b2db      	uxtb	r3, r3
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	76bb      	strb	r3, [r7, #26]

        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 8002442:	7eba      	ldrb	r2, [r7, #26]
 8002444:	7efb      	ldrb	r3, [r7, #27]
 8002446:	4293      	cmp	r3, r2
 8002448:	bf38      	it	cc
 800244a:	4613      	movcc	r3, r2
 800244c:	767b      	strb	r3, [r7, #25]
        const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 800244e:	7e7b      	ldrb	r3, [r7, #25]
 8002450:	f1c3 0208 	rsb	r2, r3, #8
 8002454:	69f9      	ldr	r1, [r7, #28]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	1acb      	subs	r3, r1, r3
 800245a:	4293      	cmp	r3, r2
 800245c:	bf28      	it	cs
 800245e:	4613      	movcs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
#else
        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 8002462:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	7ebb      	ldrb	r3, [r7, #26]
 8002472:	fa42 f303 	asr.w	r3, r2, r3
 8002476:	74fb      	strb	r3, [r7, #19]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	08db      	lsrs	r3, r3, #3
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4413      	add	r3, r2
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	7efb      	ldrb	r3, [r7, #27]
 8002486:	409a      	lsls	r2, r3
 8002488:	7ebb      	ldrb	r3, [r7, #26]
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	74bb      	strb	r3, [r7, #18]

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8002490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002492:	08db      	lsrs	r3, r3, #3
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	4413      	add	r3, r2
 8002498:	781a      	ldrb	r2, [r3, #0]
 800249a:	7cfb      	ldrb	r3, [r7, #19]
 800249c:	43db      	mvns	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	4013      	ands	r3, r2
 80024a2:	b2d9      	uxtb	r1, r3
 80024a4:	7cba      	ldrb	r2, [r7, #18]
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
 80024a8:	4013      	ands	r3, r2
 80024aa:	b2da      	uxtb	r2, r3
        dst[dst_offset / 8U] =
 80024ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ae:	08db      	lsrs	r3, r3, #3
 80024b0:	6838      	ldr	r0, [r7, #0]
 80024b2:	4403      	add	r3, r0
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 80024b4:	430a      	orrs	r2, r1
 80024b6:	b2d2      	uxtb	r2, r2
        dst[dst_offset / 8U] =
 80024b8:	701a      	strb	r2, [r3, #0]
#endif

        src_offset += copy_bits;
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	4413      	add	r3, r2
 80024c0:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 80024c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	4413      	add	r3, r2
 80024c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (last_bit - src_offset)
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d1ad      	bne.n	800242e <copyBitArray+0x3c>
    }
}
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
 80024d6:	3724      	adds	r7, #36	@ 0x24
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <descatterTransferPayload>:

CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                 uint32_t bit_offset,
                                                 uint8_t bit_length,
                                                 void* output)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b090      	sub	sp, #64	@ 0x40
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	4613      	mov	r3, r2
 80024ee:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(transfer != 0);

    if (bit_offset >= transfer->payload_len * 8)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8a9b      	ldrh	r3, [r3, #20]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	461a      	mov	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d301      	bcc.n	8002502 <descatterTransferPayload+0x22>
    {
        return 0;       // Out of range, reading zero bits
 80024fe:	2300      	movs	r3, #0
 8002500:	e0df      	b.n	80026c2 <descatterTransferPayload+0x1e2>
    }

    if (bit_offset + bit_length > transfer->payload_len * 8)
 8002502:	79fa      	ldrb	r2, [r7, #7]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4413      	add	r3, r2
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	8a92      	ldrh	r2, [r2, #20]
 800250c:	00d2      	lsls	r2, r2, #3
 800250e:	4293      	cmp	r3, r2
 8002510:	d908      	bls.n	8002524 <descatterTransferPayload+0x44>
    {
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8a9b      	ldrh	r3, [r3, #20]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	b2da      	uxtb	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	71fb      	strb	r3, [r7, #7]
    }

    CANARD_ASSERT(bit_length > 0);

    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d104      	bne.n	8002536 <descatterTransferPayload+0x56>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80b9 	beq.w	80026a8 <descatterTransferPayload+0x1c8>
        /*
         * This part is hideously complicated and probably should be redesigned.
         * The objective here is to copy the requested number of bits from scattered storage into the temporary
         * local storage. We go through great pains to ensure that all corner cases are handled correctly.
         */
        uint32_t input_bit_offset = bit_offset;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t output_bit_offset = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        uint8_t remaining_bit_length = bit_length;
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        // Reading head
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 8002546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002548:	2b27      	cmp	r3, #39	@ 0x27
 800254a:	d82d      	bhi.n	80025a8 <descatterTransferPayload+0xc8>
        {
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 800254c:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002552:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8002556:	429a      	cmp	r2, r3
 8002558:	d305      	bcc.n	8002566 <descatterTransferPayload+0x86>
 800255a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8002562:	b2db      	uxtb	r3, r3
 8002564:	e001      	b.n	800256a <descatterTransferPayload+0x8a>
 8002566:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800256a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6898      	ldr	r0, [r3, #8]
 8002572:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002576:	2300      	movs	r3, #0
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800257e:	f7ff ff38 	bl	80023f2 <copyBitArray>

            input_bit_offset += amount;
 8002582:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002586:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002588:	4413      	add	r3, r2
 800258a:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + amount);
 800258c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002590:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002594:	4413      	add	r3, r2
 8002596:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 800259a:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800259e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        // Reading middle
        uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8a9b      	ldrh	r3, [r3, #20]
 80025ac:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80025b0:	3b05      	subs	r3, #5
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 80025b6:	2328      	movs	r3, #40	@ 0x28
 80025b8:	62bb      	str	r3, [r7, #40]	@ 0x28
        const CanardBufferBlock* block = transfer->payload_middle;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24

        while ((block != NULL) && (remaining_bit_length > 0))
 80025c0:	e044      	b.n	800264c <descatterTransferPayload+0x16c>
        {
            CANARD_ASSERT(remaining_bits > 0);
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 80025c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c4:	2be0      	cmp	r3, #224	@ 0xe0
 80025c6:	bf28      	it	cs
 80025c8:	23e0      	movcs	r3, #224	@ 0xe0
 80025ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025cc:	4413      	add	r3, r2
 80025ce:	61fb      	str	r3, [r7, #28]
                                                                         remaining_bits);

            // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
            if (block_end_bit_offset > input_bit_offset)
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d92e      	bls.n	8002636 <descatterTransferPayload+0x156>
            {
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 80025d8:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80025dc:	69f9      	ldr	r1, [r7, #28]
 80025de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e0:	1acb      	subs	r3, r1, r3
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d306      	bcc.n	80025f4 <descatterTransferPayload+0x114>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	e001      	b.n	80025f8 <descatterTransferPayload+0x118>
 80025f4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80025f8:	76fb      	strb	r3, [r7, #27]

                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 80025fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	617b      	str	r3, [r7, #20]

                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	1d18      	adds	r0, r3, #4
 8002606:	7efa      	ldrb	r2, [r7, #27]
 8002608:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6979      	ldr	r1, [r7, #20]
 8002612:	f7ff feee 	bl	80023f2 <copyBitArray>

                input_bit_offset += amount;
 8002616:	7efb      	ldrb	r3, [r7, #27]
 8002618:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800261a:	4413      	add	r3, r2
 800261c:	637b      	str	r3, [r7, #52]	@ 0x34
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 800261e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002622:	7efb      	ldrb	r3, [r7, #27]
 8002624:	4413      	add	r3, r2
 8002626:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 800262a:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800262e:	7efb      	ldrb	r3, [r7, #27]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            }

            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 8002636:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800263e:	4413      	add	r3, r2
 8002640:	62fb      	str	r3, [r7, #44]	@ 0x2c
            block_bit_offset = block_end_bit_offset;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	62bb      	str	r3, [r7, #40]	@ 0x28
            block = block->next;
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	627b      	str	r3, [r7, #36]	@ 0x24
        while ((block != NULL) && (remaining_bit_length > 0))
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <descatterTransferPayload+0x17a>
 8002652:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1b3      	bne.n	80025c2 <descatterTransferPayload+0xe2>
        }

        CANARD_ASSERT(remaining_bit_length <= remaining_bits);

        // Reading tail
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d02c      	beq.n	80026bc <descatterTransferPayload+0x1dc>
 8002662:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002666:	2b00      	cmp	r3, #0
 8002668:	d028      	beq.n	80026bc <descatterTransferPayload+0x1dc>
        {
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
            const uint32_t offset = input_bit_offset - block_bit_offset;
 800266a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800266c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	613b      	str	r3, [r7, #16]

            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6918      	ldr	r0, [r3, #16]
 8002676:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800267a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6939      	ldr	r1, [r7, #16]
 8002684:	f7ff feb5 	bl	80023f2 <copyBitArray>
                         output_bit_offset);

            input_bit_offset += remaining_bit_length;
 8002688:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800268c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800268e:	4413      	add	r3, r2
 8002690:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 8002692:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002696:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800269a:	4413      	add	r3, r2
 800269c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    {
 80026a6:	e009      	b.n	80026bc <descatterTransferPayload+0x1dc>
        CANARD_ASSERT(output_bit_offset <= 64);
        CANARD_ASSERT(remaining_bit_length == 0);
    }
    else                                                                    // Single frame
    {
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6898      	ldr	r0, [r3, #8]
 80026ac:	79fa      	ldrb	r2, [r7, #7]
 80026ae:	2300      	movs	r3, #0
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	f7ff fe9c 	bl	80023f2 <copyBitArray>
 80026ba:	e000      	b.n	80026be <descatterTransferPayload+0x1de>
    {
 80026bc:	bf00      	nop
    }

    return bit_length;
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	b21b      	sxth	r3, r3
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3738      	adds	r7, #56	@ 0x38
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <isBigEndian>:

CANARD_INTERNAL bool isBigEndian(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
#else
        uint16_t a;
        uint8_t b[2];
#endif
    } u;
    u.a = 1;
 80026d0:	2301      	movs	r3, #1
 80026d2:	80bb      	strh	r3, [r7, #4]
    return u.b[1] == 1;                             // Some don't...
 80026d4:	797b      	ldrb	r3, [r7, #5]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	bf0c      	ite	eq
 80026da:	2301      	moveq	r3, #1
 80026dc:	2300      	movne	r3, #0
 80026de:	b2db      	uxtb	r3, r3
#endif
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <swapByteOrder>:

CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(data != NULL);

    uint8_t* const bytes = (uint8_t*) data;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	60fb      	str	r3, [r7, #12]

    size_t fwd = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
    size_t rev = size - 1;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	3b01      	subs	r3, #1
 8002702:	613b      	str	r3, [r7, #16]

    while (fwd < rev)
 8002704:	e017      	b.n	8002736 <swapByteOrder+0x4a>
    {
        const uint8_t x = bytes[fwd];
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	4413      	add	r3, r2
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	72fb      	strb	r3, [r7, #11]
        bytes[fwd] = bytes[rev];
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	441a      	add	r2, r3
 8002716:	68f9      	ldr	r1, [r7, #12]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	440b      	add	r3, r1
 800271c:	7812      	ldrb	r2, [r2, #0]
 800271e:	701a      	strb	r2, [r3, #0]
        bytes[rev] = x;
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4413      	add	r3, r2
 8002726:	7afa      	ldrb	r2, [r7, #11]
 8002728:	701a      	strb	r2, [r3, #0]
        fwd++;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	3301      	adds	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
        rev--;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	3b01      	subs	r3, #1
 8002734:	613b      	str	r3, [r7, #16]
    while (fwd < rev)
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	429a      	cmp	r2, r3
 800273c:	d3e3      	bcc.n	8002706 <swapByteOrder+0x1a>
    }
}
 800273e:	bf00      	nop
 8002740:	bf00      	nop
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <crcAddByte>:

/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	460a      	mov	r2, r1
 8002756:	80fb      	strh	r3, [r7, #6]
 8002758:	4613      	mov	r3, r2
 800275a:	717b      	strb	r3, [r7, #5]
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 800275c:	797b      	ldrb	r3, [r7, #5]
 800275e:	b29b      	uxth	r3, r3
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	b29a      	uxth	r2, r3
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	4053      	eors	r3, r2
 8002768:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
 800276e:	e012      	b.n	8002796 <crcAddByte+0x4a>
    {
        if (crc_val & 0x8000U)
 8002770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002774:	2b00      	cmp	r3, #0
 8002776:	da08      	bge.n	800278a <crcAddByte+0x3e>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	b29b      	uxth	r3, r3
 800277e:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8002782:	f083 0301 	eor.w	r3, r3, #1
 8002786:	80fb      	strh	r3, [r7, #6]
 8002788:	e002      	b.n	8002790 <crcAddByte+0x44>
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	3301      	adds	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b07      	cmp	r3, #7
 800279a:	d9e9      	bls.n	8002770 <crcAddByte+0x24>
        }
    }
    return crc_val;
 800279c:	88fb      	ldrh	r3, [r7, #6]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 80027aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ac:	b087      	sub	sp, #28
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4601      	mov	r1, r0
 80027b2:	e9c7 2300 	strd	r2, r3, [r7]
 80027b6:	460b      	mov	r3, r1
 80027b8:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 80027ba:	2300      	movs	r3, #0
 80027bc:	82fb      	strh	r3, [r7, #22]
 80027be:	e01b      	b.n	80027f8 <crcAddSignature+0x4e>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 80027c0:	8af9      	ldrh	r1, [r7, #22]
 80027c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027c6:	f1c1 0620 	rsb	r6, r1, #32
 80027ca:	f1a1 0020 	sub.w	r0, r1, #32
 80027ce:	fa22 f401 	lsr.w	r4, r2, r1
 80027d2:	fa03 f606 	lsl.w	r6, r3, r6
 80027d6:	4334      	orrs	r4, r6
 80027d8:	fa23 f000 	lsr.w	r0, r3, r0
 80027dc:	4304      	orrs	r4, r0
 80027de:	fa23 f501 	lsr.w	r5, r3, r1
 80027e2:	b2e2      	uxtb	r2, r4
 80027e4:	89fb      	ldrh	r3, [r7, #14]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ffaf 	bl	800274c <crcAddByte>
 80027ee:	4603      	mov	r3, r0
 80027f0:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 80027f2:	8afb      	ldrh	r3, [r7, #22]
 80027f4:	3308      	adds	r3, #8
 80027f6:	82fb      	strh	r3, [r7, #22]
 80027f8:	8afb      	ldrh	r3, [r7, #22]
 80027fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80027fc:	d9e0      	bls.n	80027c0 <crcAddSignature+0x16>
    }
    return crc_val;
 80027fe:	89fb      	ldrh	r3, [r7, #14]
}
 8002800:	4618      	mov	r0, r3
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002808 <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8002816:	e00a      	b.n	800282e <crcAdd+0x26>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	60ba      	str	r2, [r7, #8]
 800281e:	781a      	ldrb	r2, [r3, #0]
 8002820:	89fb      	ldrh	r3, [r7, #14]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff91 	bl	800274c <crcAddByte>
 800282a:	4603      	mov	r3, r0
 800282c:	81fb      	strh	r3, [r7, #14]
    while (len--)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	1e5a      	subs	r2, r3, #1
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1ef      	bne.n	8002818 <crcAdd+0x10>
    }
    return crc_val;
 8002838:	89fb      	ldrh	r3, [r7, #14]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       void* buf,
                                       uint16_t buf_len)
{
 8002842:	b480      	push	{r7}
 8002844:	b089      	sub	sp, #36	@ 0x24
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	4613      	mov	r3, r2
 800284e:	80fb      	strh	r3, [r7, #6]
    size_t current_index = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
    CanardPoolAllocatorBlock *abuf = buf;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	617b      	str	r3, [r7, #20]
    allocator->arena = buf;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	611a      	str	r2, [r3, #16]
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	3304      	adds	r3, #4
 8002862:	61bb      	str	r3, [r7, #24]
    while (current_index < buf_len)
 8002864:	e00b      	b.n	800287e <initPoolAllocator+0x3c>
    {
        *current_block = &abuf[current_index];
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	015b      	lsls	r3, r3, #5
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	441a      	add	r2, r3
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	601a      	str	r2, [r3, #0]
        current_block = &((*current_block)->next);
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	61bb      	str	r3, [r7, #24]
        current_index++;
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	3301      	adds	r3, #1
 800287c:	61fb      	str	r3, [r7, #28]
    while (current_index < buf_len)
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	429a      	cmp	r2, r3
 8002884:	d3ef      	bcc.n	8002866 <initPoolAllocator+0x24>
    }
    *current_block = NULL;
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

    allocator->statistics.capacity_blocks = buf_len;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	88fa      	ldrh	r2, [r7, #6]
 8002890:	811a      	strh	r2, [r3, #8]
    allocator->statistics.current_usage_blocks = 0;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	815a      	strh	r2, [r3, #10]
    allocator->statistics.peak_usage_blocks = 0;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	819a      	strh	r2, [r3, #12]
    // user should initialize semaphore after the canardInit
    // or at first call of canard_allocate_sem_take
    allocator->semaphore = NULL;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
}
 80028a4:	bf00      	nop
 80028a6:	3724      	adds	r7, #36	@ 0x24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <allocateBlock+0x14>
    {
#if CANARD_ALLOCATE_SEM
        canard_allocate_sem_give(allocator);
#endif
        return NULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	e018      	b.n	80028f6 <allocateBlock+0x46>
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
    allocator->free_list = allocator->free_list->next;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	605a      	str	r2, [r3, #4]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	895b      	ldrh	r3, [r3, #10]
 80028d8:	3301      	adds	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	815a      	strh	r2, [r3, #10]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	899a      	ldrh	r2, [r3, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	895b      	ldrh	r3, [r3, #10]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d203      	bcs.n	80028f4 <allocateBlock+0x44>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	895a      	ldrh	r2, [r3, #10]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	819a      	strh	r2, [r3, #12]
    }
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
    return result;
 80028f4:	68fb      	ldr	r3, [r7, #12]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	60fb      	str	r3, [r7, #12]

    block->next = allocator->free_list;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	601a      	str	r2, [r3, #0]
    allocator->free_list = block;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	605a      	str	r2, [r3, #4]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
    allocator->statistics.current_usage_blocks--;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	895b      	ldrh	r3, [r3, #10]
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	815a      	strh	r2, [r3, #10]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
}
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <canardSTM32Recieve>:
  *         This parameter can be a value of @arg FDCAN_Rx_location.
  * @param  rx_frame pointer to a CanardCANFrame structure where the received CAN message will be
  * 		stored.
  * @retval ret == 1: OK, ret < 0: CANARD_ERROR, ret == 0: Check hfdcan->ErrorCode
  */
int16_t canardSTM32Recieve(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, CanardCANFrame *const rx_frame) {
 8002936:	b580      	push	{r7, lr}
 8002938:	b090      	sub	sp, #64	@ 0x40
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
	if (rx_frame == NULL) {
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <canardSTM32Recieve+0x18>
		return -CANARD_ERROR_INVALID_ARGUMENT;
 8002948:	f06f 0301 	mvn.w	r3, #1
 800294c:	e033      	b.n	80029b6 <canardSTM32Recieve+0x80>
	}

	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	if (HAL_FDCAN_GetRxMessage(hfdcan, RxLocation, &RxHeader, RxData) == HAL_OK) {
 800294e:	f107 0310 	add.w	r3, r7, #16
 8002952:	f107 0218 	add.w	r2, r7, #24
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f003 feb7 	bl	80066cc <HAL_FDCAN_GetRxMessage>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d127      	bne.n	80029b4 <canardSTM32Recieve+0x7e>
		//		printf("%02x", RxData[i]);
		//	}
		//	printf("\n");

		// Process ID to canard format
		rx_frame->id = RxHeader.Identifier;
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	601a      	str	r2, [r3, #0]

		if (RxHeader.IdType == FDCAN_EXTENDED_ID) { // canard will only process the message if it is extended ID
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002970:	d105      	bne.n	800297e <canardSTM32Recieve+0x48>
			rx_frame->id |= CANARD_CAN_FRAME_EFF;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	601a      	str	r2, [r3, #0]
		}

		if (RxHeader.RxFrameType == FDCAN_REMOTE_FRAME) { // canard won't process the message if it is a remote frame
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002984:	d105      	bne.n	8002992 <canardSTM32Recieve+0x5c>
			rx_frame->id |= CANARD_CAN_FRAME_RTR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	601a      	str	r2, [r3, #0]
		}

		rx_frame->data_len = RxHeader.DataLength;
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	b2da      	uxtb	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	731a      	strb	r2, [r3, #12]
		memcpy(rx_frame->data, RxData, RxHeader.DataLength);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3304      	adds	r3, #4
 800299e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a0:	f107 0110 	add.w	r1, r7, #16
 80029a4:	4618      	mov	r0, r3
 80029a6:	f008 ff2a 	bl	800b7fe <memcpy>

		// assume a single interface
		rx_frame->iface_id = 0;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	735a      	strb	r2, [r3, #13]

		return 1;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <canardSTM32Recieve+0x80>
	}

	// Either no CAN msg to be read, or an error that can be read from hfdcan->ErrorCode
	return 0;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3740      	adds	r7, #64	@ 0x40
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <canardSTM32Transmit>:
  *         the configuration information for the specified FDCAN.
  * @param  tx_frame pointer to a CanardCANFrame structure that contains the CAN message to
  * 		transmit.
  * @retval ret == 1: OK, ret < 0: CANARD_ERROR, ret == 0: Check hfdcan->ErrorCode
  */
int16_t canardSTM32Transmit(FDCAN_HandleTypeDef *hfdcan, const CanardCANFrame* const tx_frame) {
 80029be:	b580      	push	{r7, lr}
 80029c0:	b08e      	sub	sp, #56	@ 0x38
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
	if (tx_frame == NULL) {
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <canardSTM32Transmit+0x16>
		return -CANARD_ERROR_INVALID_ARGUMENT;
 80029ce:	f06f 0301 	mvn.w	r3, #1
 80029d2:	e04b      	b.n	8002a6c <canardSTM32Transmit+0xae>
	}

	if (tx_frame->id & CANARD_CAN_FRAME_ERR) {
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <canardSTM32Transmit+0x28>
		return -CANARD_ERROR_INVALID_ARGUMENT; // unsupported frame format
 80029e0:	f06f 0301 	mvn.w	r3, #1
 80029e4:	e042      	b.n	8002a6c <canardSTM32Transmit+0xae>

	FDCAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8];

	// Process canard id to STM FDCAN header format
	if (tx_frame->id & CANARD_CAN_FRAME_EFF) {
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	da08      	bge.n	8002a00 <canardSTM32Transmit+0x42>
		TxHeader.IdType = FDCAN_EXTENDED_ID;
 80029ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80029f2:	61bb      	str	r3, [r7, #24]
		TxHeader.Identifier = tx_frame->id & CANARD_CAN_EXT_ID_MASK;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	e006      	b.n	8002a0e <canardSTM32Transmit+0x50>
	} else {
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61bb      	str	r3, [r7, #24]
		TxHeader.Identifier = tx_frame->id & CANARD_CAN_STD_ID_MASK;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a0c:	617b      	str	r3, [r7, #20]
	}

	TxHeader.DataLength = tx_frame->data_len;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	7b1b      	ldrb	r3, [r3, #12]
 8002a12:	623b      	str	r3, [r7, #32]

	if (tx_frame->id & CANARD_CAN_FRAME_RTR) {
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <canardSTM32Transmit+0x6a>
		TxHeader.TxFrameType = FDCAN_REMOTE_FRAME;
 8002a20:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	e001      	b.n	8002a2c <canardSTM32Transmit+0x6e>
	} else {
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
	}

	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE; // unsure about this one
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF; // Disabling FDCAN (using CAN 2.0)
 8002a30:	2300      	movs	r3, #0
 8002a32:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN; // Disabling FDCAN (using CAN 2.0)
 8002a34:	2300      	movs	r3, #0
 8002a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS; // unsure about this one
 8002a38:	2300      	movs	r3, #0
 8002a3a:	633b      	str	r3, [r7, #48]	@ 0x30
	TxHeader.MessageMarker = 0; // unsure about this one
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	637b      	str	r3, [r7, #52]	@ 0x34
	memcpy(TxData, tx_frame->data, TxHeader.DataLength);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	1d19      	adds	r1, r3, #4
 8002a44:	6a3a      	ldr	r2, [r7, #32]
 8002a46:	f107 030c 	add.w	r3, r7, #12
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f008 fed7 	bl	800b7fe <memcpy>

	if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, TxData) == HAL_OK) {
 8002a50:	f107 020c 	add.w	r2, r7, #12
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	4619      	mov	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f003 fdf2 	bl	8006644 <HAL_FDCAN_AddMessageToTxFifoQ>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <canardSTM32Transmit+0xac>
//		printf("Successfully sent message with id: %lu \n", TxHeader.Identifier);
		return 1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <canardSTM32Transmit+0xae>
	}

//	printf("Failed at adding message with id: %lu to Tx Fifo", TxHeader.Identifier);
	// This might be for many reasons including the Tx Fifo being full, the error can be read from hfdcan->ErrorCode
	return 0;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3738      	adds	r7, #56	@ 0x38
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002a7c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002a80:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d013      	beq.n	8002ab4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002a8c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002a90:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002a94:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00b      	beq.n	8002ab4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002a9c:	e000      	b.n	8002aa0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002a9e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002aa0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f9      	beq.n	8002a9e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002aaa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002ab4:	687b      	ldr	r3, [r7, #4]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002acc:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002ace:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ad0:	4907      	ldr	r1, [pc, #28]	@ (8002af0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ad8:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002ada:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40021000 	.word	0x40021000

08002af4 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002afc:	4b08      	ldr	r3, [pc, #32]	@ (8002b20 <LL_APB1_GRP2_EnableClock+0x2c>)
 8002afe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b00:	4907      	ldr	r1, [pc, #28]	@ (8002b20 <LL_APB1_GRP2_EnableClock+0x2c>)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002b08:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <LL_APB1_GRP2_EnableClock+0x2c>)
 8002b0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b12:	68fb      	ldr	r3, [r7, #12]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40021000 	.word	0x40021000

08002b24 <getUniqueID>:
}

/*
  get a 16 byte unique ID for this node, this should be based on the CPU unique ID or other unique ID
 */
void getUniqueID(uint8_t id[16]){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
	uint32_t HALUniqueIDs[3];
// Make Unique ID out of the 96-bit STM32 UID and fill the rest with 0s
	memset(id, 0, 16);
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	2100      	movs	r1, #0
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f008 fdc9 	bl	800b6c8 <memset>
	HALUniqueIDs[0] = HAL_GetUIDw0();
 8002b36:	f002 fadd 	bl	80050f4 <HAL_GetUIDw0>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	60fb      	str	r3, [r7, #12]
	HALUniqueIDs[1] = HAL_GetUIDw1();
 8002b3e:	f002 fae5 	bl	800510c <HAL_GetUIDw1>
 8002b42:	4603      	mov	r3, r0
 8002b44:	613b      	str	r3, [r7, #16]
	HALUniqueIDs[2] = HAL_GetUIDw2();
 8002b46:	f002 faed 	bl	8005124 <HAL_GetUIDw2>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	617b      	str	r3, [r7, #20]
	memcpy(id, HALUniqueIDs, 12);
 8002b4e:	f107 030c 	add.w	r3, r7, #12
 8002b52:	220c      	movs	r2, #12
 8002b54:	4619      	mov	r1, r3
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f008 fe51 	bl	800b7fe <memcpy>
}
 8002b5c:	bf00      	nop
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	0000      	movs	r0, r0
	...

08002b68 <setServoPWM>:

// Might have to change the code if the handler (&htim) changes based on # of servos were controlling
void setServoPWM(uint8_t ServoNum){
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
	switch (ServoNum) {
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	f200 8083 	bhi.w	8002c80 <setServoPWM+0x118>
 8002b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b80 <setServoPWM+0x18>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002b91 	.word	0x08002b91
 8002b84:	08002bcd 	.word	0x08002bcd
 8002b88:	08002c09 	.word	0x08002c09
 8002b8c:	08002c45 	.word	0x08002c45
	case 0:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, servos[0].position * (PULSE_RANGE/2) + (PULSE_RANGE*1.5));
 8002b90:	4b41      	ldr	r3, [pc, #260]	@ (8002c98 <setServoPWM+0x130>)
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8002c9c <setServoPWM+0x134>
 8002b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b9e:	ee17 0a90 	vmov	r0, s15
 8002ba2:	f7fd fcad 	bl	8000500 <__aeabi_f2d>
 8002ba6:	a33a      	add	r3, pc, #232	@ (adr r3, 8002c90 <setServoPWM+0x128>)
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f7fd fb4a 	bl	8000244 <__adddf3>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	493a      	ldr	r1, [pc, #232]	@ (8002ca0 <setServoPWM+0x138>)
 8002bb6:	680c      	ldr	r4, [r1, #0]
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	f7fd fcf8 	bl	80005b0 <__aeabi_d2uiz>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	6363      	str	r3, [r4, #52]	@ 0x34
		printf("SERVO 0 PWM SET");
 8002bc4:	4837      	ldr	r0, [pc, #220]	@ (8002ca4 <setServoPWM+0x13c>)
 8002bc6:	f008 fc2f 	bl	800b428 <iprintf>
		break;
 8002bca:	e05d      	b.n	8002c88 <setServoPWM+0x120>
	case 1:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, servos[1].position * (PULSE_RANGE/2) + (PULSE_RANGE*1.5));
 8002bcc:	4b32      	ldr	r3, [pc, #200]	@ (8002c98 <setServoPWM+0x130>)
 8002bce:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bd2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002c9c <setServoPWM+0x134>
 8002bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bda:	ee17 0a90 	vmov	r0, s15
 8002bde:	f7fd fc8f 	bl	8000500 <__aeabi_f2d>
 8002be2:	a32b      	add	r3, pc, #172	@ (adr r3, 8002c90 <setServoPWM+0x128>)
 8002be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be8:	f7fd fb2c 	bl	8000244 <__adddf3>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	492b      	ldr	r1, [pc, #172]	@ (8002ca0 <setServoPWM+0x138>)
 8002bf2:	680c      	ldr	r4, [r1, #0]
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f7fd fcda 	bl	80005b0 <__aeabi_d2uiz>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	63a3      	str	r3, [r4, #56]	@ 0x38
		printf("SERVO 1 PWM SET");
 8002c00:	4829      	ldr	r0, [pc, #164]	@ (8002ca8 <setServoPWM+0x140>)
 8002c02:	f008 fc11 	bl	800b428 <iprintf>
		break;
 8002c06:	e03f      	b.n	8002c88 <setServoPWM+0x120>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, servos[2].position * (PULSE_RANGE/2) + (PULSE_RANGE*1.5));
 8002c08:	4b23      	ldr	r3, [pc, #140]	@ (8002c98 <setServoPWM+0x130>)
 8002c0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c0e:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002c9c <setServoPWM+0x134>
 8002c12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c16:	ee17 0a90 	vmov	r0, s15
 8002c1a:	f7fd fc71 	bl	8000500 <__aeabi_f2d>
 8002c1e:	a31c      	add	r3, pc, #112	@ (adr r3, 8002c90 <setServoPWM+0x128>)
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	f7fd fb0e 	bl	8000244 <__adddf3>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	491f      	ldr	r1, [pc, #124]	@ (8002cac <setServoPWM+0x144>)
 8002c2e:	680c      	ldr	r4, [r1, #0]
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	f7fd fcbc 	bl	80005b0 <__aeabi_d2uiz>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	6363      	str	r3, [r4, #52]	@ 0x34
		printf("SERVO 2 PWM SET");
 8002c3c:	481c      	ldr	r0, [pc, #112]	@ (8002cb0 <setServoPWM+0x148>)
 8002c3e:	f008 fbf3 	bl	800b428 <iprintf>
		break;
 8002c42:	e021      	b.n	8002c88 <setServoPWM+0x120>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, servos[3].position * (PULSE_RANGE/2) + (PULSE_RANGE*1.5));
 8002c44:	4b14      	ldr	r3, [pc, #80]	@ (8002c98 <setServoPWM+0x130>)
 8002c46:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002c4a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002c9c <setServoPWM+0x134>
 8002c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c52:	ee17 0a90 	vmov	r0, s15
 8002c56:	f7fd fc53 	bl	8000500 <__aeabi_f2d>
 8002c5a:	a30d      	add	r3, pc, #52	@ (adr r3, 8002c90 <setServoPWM+0x128>)
 8002c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c60:	f7fd faf0 	bl	8000244 <__adddf3>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4910      	ldr	r1, [pc, #64]	@ (8002cac <setServoPWM+0x144>)
 8002c6a:	680c      	ldr	r4, [r1, #0]
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	4619      	mov	r1, r3
 8002c70:	f7fd fc9e 	bl	80005b0 <__aeabi_d2uiz>
 8002c74:	4603      	mov	r3, r0
 8002c76:	63a3      	str	r3, [r4, #56]	@ 0x38
		printf("SERVO 3 PWM SET");
 8002c78:	480e      	ldr	r0, [pc, #56]	@ (8002cb4 <setServoPWM+0x14c>)
 8002c7a:	f008 fbd5 	bl	800b428 <iprintf>
		break;
 8002c7e:	e003      	b.n	8002c88 <setServoPWM+0x120>
	default:
		printf("INVALID SERVO ID, NOTHING SET");
 8002c80:	480d      	ldr	r0, [pc, #52]	@ (8002cb8 <setServoPWM+0x150>)
 8002c82:	f008 fbd1 	bl	800b428 <iprintf>
		break;
 8002c86:	bf00      	nop
	}
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd90      	pop	{r4, r7, pc}
 8002c90:	00000000 	.word	0x00000000
 8002c94:	40b01d00 	.word	0x40b01d00
 8002c98:	200009b0 	.word	0x200009b0
 8002c9c:	44abe000 	.word	0x44abe000
 8002ca0:	2000020c 	.word	0x2000020c
 8002ca4:	0800c2cc 	.word	0x0800c2cc
 8002ca8:	0800c2dc 	.word	0x0800c2dc
 8002cac:	20000258 	.word	0x20000258
 8002cb0:	0800c2ec 	.word	0x0800c2ec
 8002cb4:	0800c2fc 	.word	0x0800c2fc
 8002cb8:	0800c30c 	.word	0x0800c30c

08002cbc <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8002cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc0:	b08a      	sub	sp, #40	@ 0x28
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
	// Receiving
	CanardCANFrame rx_frame;

	const uint64_t timestamp = HAL_GetTick() * 1000ULL;
 8002cc8:	f002 fa08 	bl	80050dc <HAL_GetTick>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2200      	movs	r2, #0
 8002cd0:	469a      	mov	sl, r3
 8002cd2:	4693      	mov	fp, r2
 8002cd4:	4652      	mov	r2, sl
 8002cd6:	465b      	mov	r3, fp
 8002cd8:	f04f 0000 	mov.w	r0, #0
 8002cdc:	f04f 0100 	mov.w	r1, #0
 8002ce0:	0159      	lsls	r1, r3, #5
 8002ce2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ce6:	0150      	lsls	r0, r2, #5
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	ebb2 040a 	subs.w	r4, r2, sl
 8002cf0:	eb63 050b 	sbc.w	r5, r3, fp
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	00ab      	lsls	r3, r5, #2
 8002cfe:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002d02:	00a2      	lsls	r2, r4, #2
 8002d04:	4614      	mov	r4, r2
 8002d06:	461d      	mov	r5, r3
 8002d08:	eb14 080a 	adds.w	r8, r4, sl
 8002d0c:	eb45 090b 	adc.w	r9, r5, fp
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d24:	4690      	mov	r8, r2
 8002d26:	4699      	mov	r9, r3
 8002d28:	e9c7 8908 	strd	r8, r9, [r7, #32]
	const int16_t rx_res = canardSTM32Recieve(hfdcan, FDCAN_RX_FIFO0, &rx_frame);
 8002d2c:	f107 030c 	add.w	r3, r7, #12
 8002d30:	461a      	mov	r2, r3
 8002d32:	2140      	movs	r1, #64	@ 0x40
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff fdfe 	bl	8002936 <canardSTM32Recieve>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	83fb      	strh	r3, [r7, #30]

	if (rx_res < 0) {
 8002d3e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da06      	bge.n	8002d54 <HAL_FDCAN_RxFifo0Callback+0x98>
		printf("Receive error %d\n", rx_res);
 8002d46:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4809      	ldr	r0, [pc, #36]	@ (8002d74 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8002d4e:	f008 fb6b 	bl	800b428 <iprintf>
	}
	else if (rx_res > 0)        // Success - process the frame
	{
		canardHandleRxFrame(&canard, &rx_frame, timestamp);
	}
}
 8002d52:	e00a      	b.n	8002d6a <HAL_FDCAN_RxFifo0Callback+0xae>
	else if (rx_res > 0)        // Success - process the frame
 8002d54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	dd06      	ble.n	8002d6a <HAL_FDCAN_RxFifo0Callback+0xae>
		canardHandleRxFrame(&canard, &rx_frame, timestamp);
 8002d5c:	f107 010c 	add.w	r1, r7, #12
 8002d60:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d64:	4804      	ldr	r0, [pc, #16]	@ (8002d78 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8002d66:	f7fd ffdf 	bl	8000d28 <canardHandleRxFrame>
}
 8002d6a:	bf00      	nop
 8002d6c:	3728      	adds	r7, #40	@ 0x28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d74:	0800c32c 	.word	0x0800c32c
 8002d78:	20000580 	.word	0x20000580

08002d7c <handle_NodeStatus>:
// NOTE: All canard handlers and senders are based on this reference: https://dronecan.github.io/Specification/7._List_of_standard_data_types/
// Alternatively, you can look at the corresponding generated header file in the dsdlc_generated folder

// Canard Handlers ( Many have code copied from libcanard esc_node example: https://github.com/dronecan/libcanard/blob/master/examples/ESCNode/esc_node.c )

void handle_NodeStatus(CanardInstance *ins, CanardRxTransfer *transfer) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
	struct uavcan_protocol_NodeStatus nodeStatus;

	if (uavcan_protocol_NodeStatus_decode(transfer, &nodeStatus)) {
 8002d86:	f107 030c 	add.w	r3, r7, #12
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	6838      	ldr	r0, [r7, #0]
 8002d8e:	f002 f917 	bl	8004fc0 <uavcan_protocol_NodeStatus_decode>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d15d      	bne.n	8002e54 <handle_NodeStatus+0xd8>
		return;
	}

	printf("Node health: %ud Node Mode: %ud\n", nodeStatus.health, nodeStatus.mode);
 8002d98:	7c3b      	ldrb	r3, [r7, #16]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	7c7b      	ldrb	r3, [r7, #17]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	482e      	ldr	r0, [pc, #184]	@ (8002e5c <handle_NodeStatus+0xe0>)
 8002da2:	f008 fb41 	bl	800b428 <iprintf>

	printf("Node Health ");
 8002da6:	482e      	ldr	r0, [pc, #184]	@ (8002e60 <handle_NodeStatus+0xe4>)
 8002da8:	f008 fb3e 	bl	800b428 <iprintf>

	switch (nodeStatus.health) {
 8002dac:	7c3b      	ldrb	r3, [r7, #16]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d81a      	bhi.n	8002de8 <handle_NodeStatus+0x6c>
 8002db2:	a201      	add	r2, pc, #4	@ (adr r2, 8002db8 <handle_NodeStatus+0x3c>)
 8002db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db8:	08002dc9 	.word	0x08002dc9
 8002dbc:	08002dd1 	.word	0x08002dd1
 8002dc0:	08002dd9 	.word	0x08002dd9
 8002dc4:	08002de1 	.word	0x08002de1
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK:
		printf("OK\n");
 8002dc8:	4826      	ldr	r0, [pc, #152]	@ (8002e64 <handle_NodeStatus+0xe8>)
 8002dca:	f008 fb9d 	bl	800b508 <puts>
		break;
 8002dce:	e00f      	b.n	8002df0 <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_WARNING:
		printf("WARNING\n");
 8002dd0:	4825      	ldr	r0, [pc, #148]	@ (8002e68 <handle_NodeStatus+0xec>)
 8002dd2:	f008 fb99 	bl	800b508 <puts>
		break;
 8002dd6:	e00b      	b.n	8002df0 <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_ERROR:
		printf("ERROR\n");
 8002dd8:	4824      	ldr	r0, [pc, #144]	@ (8002e6c <handle_NodeStatus+0xf0>)
 8002dda:	f008 fb95 	bl	800b508 <puts>
		break;
 8002dde:	e007      	b.n	8002df0 <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_CRITICAL:
		printf("CRITICAL\n");
 8002de0:	4823      	ldr	r0, [pc, #140]	@ (8002e70 <handle_NodeStatus+0xf4>)
 8002de2:	f008 fb91 	bl	800b508 <puts>
		break;
 8002de6:	e003      	b.n	8002df0 <handle_NodeStatus+0x74>
	default:
		printf("UNKNOWN?\n");
 8002de8:	4822      	ldr	r0, [pc, #136]	@ (8002e74 <handle_NodeStatus+0xf8>)
 8002dea:	f008 fb8d 	bl	800b508 <puts>
		break;
 8002dee:	bf00      	nop
	}

	printf("Node Mode ");
 8002df0:	4821      	ldr	r0, [pc, #132]	@ (8002e78 <handle_NodeStatus+0xfc>)
 8002df2:	f008 fb19 	bl	800b428 <iprintf>

	switch(nodeStatus.mode) {
 8002df6:	7c7b      	ldrb	r3, [r7, #17]
 8002df8:	2b07      	cmp	r3, #7
 8002dfa:	d827      	bhi.n	8002e4c <handle_NodeStatus+0xd0>
 8002dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8002e04 <handle_NodeStatus+0x88>)
 8002dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e02:	bf00      	nop
 8002e04:	08002e25 	.word	0x08002e25
 8002e08:	08002e2d 	.word	0x08002e2d
 8002e0c:	08002e35 	.word	0x08002e35
 8002e10:	08002e3d 	.word	0x08002e3d
 8002e14:	08002e4d 	.word	0x08002e4d
 8002e18:	08002e4d 	.word	0x08002e4d
 8002e1c:	08002e4d 	.word	0x08002e4d
 8002e20:	08002e45 	.word	0x08002e45
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL:
		printf("OPERATIONAL\n");
 8002e24:	4815      	ldr	r0, [pc, #84]	@ (8002e7c <handle_NodeStatus+0x100>)
 8002e26:	f008 fb6f 	bl	800b508 <puts>
		break;
 8002e2a:	e014      	b.n	8002e56 <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_INITIALIZATION:
		printf("INITIALIZATION\n");
 8002e2c:	4814      	ldr	r0, [pc, #80]	@ (8002e80 <handle_NodeStatus+0x104>)
 8002e2e:	f008 fb6b 	bl	800b508 <puts>
		break;
 8002e32:	e010      	b.n	8002e56 <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_MAINTENANCE:
		printf("MAINTENANCE\n");
 8002e34:	4813      	ldr	r0, [pc, #76]	@ (8002e84 <handle_NodeStatus+0x108>)
 8002e36:	f008 fb67 	bl	800b508 <puts>
		break;
 8002e3a:	e00c      	b.n	8002e56 <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_SOFTWARE_UPDATE:
		printf("SOFTWARE UPDATE\n");
 8002e3c:	4812      	ldr	r0, [pc, #72]	@ (8002e88 <handle_NodeStatus+0x10c>)
 8002e3e:	f008 fb63 	bl	800b508 <puts>
		break;
 8002e42:	e008      	b.n	8002e56 <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_OFFLINE:
		printf("OFFLINE\n");
 8002e44:	4811      	ldr	r0, [pc, #68]	@ (8002e8c <handle_NodeStatus+0x110>)
 8002e46:	f008 fb5f 	bl	800b508 <puts>
		break;
 8002e4a:	e004      	b.n	8002e56 <handle_NodeStatus+0xda>
	default:
		printf("UNKNOWN?\n");
 8002e4c:	4809      	ldr	r0, [pc, #36]	@ (8002e74 <handle_NodeStatus+0xf8>)
 8002e4e:	f008 fb5b 	bl	800b508 <puts>
		break;
 8002e52:	e000      	b.n	8002e56 <handle_NodeStatus+0xda>
		return;
 8002e54:	bf00      	nop
	}
}
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	0800c340 	.word	0x0800c340
 8002e60:	0800c364 	.word	0x0800c364
 8002e64:	0800c374 	.word	0x0800c374
 8002e68:	0800c378 	.word	0x0800c378
 8002e6c:	0800c380 	.word	0x0800c380
 8002e70:	0800c388 	.word	0x0800c388
 8002e74:	0800c394 	.word	0x0800c394
 8002e78:	0800c3a0 	.word	0x0800c3a0
 8002e7c:	0800c3ac 	.word	0x0800c3ac
 8002e80:	0800c3b8 	.word	0x0800c3b8
 8002e84:	0800c3c8 	.word	0x0800c3c8
 8002e88:	0800c3d4 	.word	0x0800c3d4
 8002e8c:	0800c3e4 	.word	0x0800c3e4

08002e90 <handle_NotifyState>:

void handle_NotifyState(CanardInstance *ins, CanardRxTransfer *transfer) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b0c8      	sub	sp, #288	@ 0x120
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002e9a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002e9e:	6018      	str	r0, [r3, #0]
 8002ea0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ea4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002ea8:	6019      	str	r1, [r3, #0]
	struct ardupilot_indication_NotifyState notifyState;

	if (ardupilot_indication_NotifyState_decode(transfer, &notifyState)) {
 8002eaa:	f107 0208 	add.w	r2, r7, #8
 8002eae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002eb2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	f001 fcc2 	bl	8004842 <ardupilot_indication_NotifyState_decode>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d13b      	bne.n	8002f3c <handle_NotifyState+0xac>
		return;
	}

	uint32_t nl = notifyState.vehicle_state & 0xFFFFFFFF;  // ignoring the last 32 bits for printing since the highest vehicle_state value right now is 23 even though they're allowed to be up to 64bit unsigned integer
 8002ec4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ec8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ecc:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	printf("Vehicle State: %lu ", nl);
 8002ed6:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8002eda:	481b      	ldr	r0, [pc, #108]	@ (8002f48 <handle_NotifyState+0xb8>)
 8002edc:	f008 faa4 	bl	800b428 <iprintf>

	if (notifyState.aux_data.len > 0) {
 8002ee0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ee4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ee8:	785b      	ldrb	r3, [r3, #1]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d022      	beq.n	8002f34 <handle_NotifyState+0xa4>
		printf("Aux Data: 0x");
 8002eee:	4817      	ldr	r0, [pc, #92]	@ (8002f4c <handle_NotifyState+0xbc>)
 8002ef0:	f008 fa9a 	bl	800b428 <iprintf>

		for (int i = 0; i < notifyState.aux_data.len; i++) {
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002efa:	e011      	b.n	8002f20 <handle_NotifyState+0x90>
			printf("%02x", notifyState.aux_data.data[i]);
 8002efc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f00:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8002f04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f08:	4413      	add	r3, r2
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	480f      	ldr	r0, [pc, #60]	@ (8002f50 <handle_NotifyState+0xc0>)
 8002f12:	f008 fa89 	bl	800b428 <iprintf>
		for (int i = 0; i < notifyState.aux_data.len; i++) {
 8002f16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002f20:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002f24:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f30:	4293      	cmp	r3, r2
 8002f32:	dbe3      	blt.n	8002efc <handle_NotifyState+0x6c>
		}
	}

	printf("\n");
 8002f34:	200a      	movs	r0, #10
 8002f36:	f008 fa89 	bl	800b44c <putchar>
 8002f3a:	e000      	b.n	8002f3e <handle_NotifyState+0xae>
		return;
 8002f3c:	bf00      	nop

}
 8002f3e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	0800c3ec 	.word	0x0800c3ec
 8002f4c:	0800c400 	.word	0x0800c400
 8002f50:	0800c410 	.word	0x0800c410

08002f54 <handle_ArrayCommand>:

/*
 * handle a servo ArrayCommand request
 */
static void handle_ArrayCommand(CanardInstance *ins, CanardRxTransfer *transfer)
{
 8002f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f58:	b0a6      	sub	sp, #152	@ 0x98
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
    struct uavcan_equipment_actuator_ArrayCommand cmd;
    if (uavcan_equipment_actuator_ArrayCommand_decode(transfer, &cmd)) { //return true if decode is invalid
 8002f60:	f107 030c 	add.w	r3, r7, #12
 8002f64:	4619      	mov	r1, r3
 8002f66:	6838      	ldr	r0, [r7, #0]
 8002f68:	f001 fd3a 	bl	80049e0 <uavcan_equipment_actuator_ArrayCommand_decode>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 80a5 	bne.w	80030be <handle_ArrayCommand+0x16a>
        return;
    }
    uint64_t tnow = HAL_GetTick() * 1000ULL;
 8002f74:	f002 f8b2 	bl	80050dc <HAL_GetTick>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	469a      	mov	sl, r3
 8002f7e:	4693      	mov	fp, r2
 8002f80:	4652      	mov	r2, sl
 8002f82:	465b      	mov	r3, fp
 8002f84:	f04f 0000 	mov.w	r0, #0
 8002f88:	f04f 0100 	mov.w	r1, #0
 8002f8c:	0159      	lsls	r1, r3, #5
 8002f8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f92:	0150      	lsls	r0, r2, #5
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	ebb2 040a 	subs.w	r4, r2, sl
 8002f9c:	eb63 050b 	sbc.w	r5, r3, fp
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	00ab      	lsls	r3, r5, #2
 8002faa:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002fae:	00a2      	lsls	r2, r4, #2
 8002fb0:	4614      	mov	r4, r2
 8002fb2:	461d      	mov	r5, r3
 8002fb4:	eb14 080a 	adds.w	r8, r4, sl
 8002fb8:	eb45 090b 	adc.w	r9, r5, fp
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fcc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fd0:	4690      	mov	r8, r2
 8002fd2:	4699      	mov	r9, r3
 8002fd4:	e9c7 8922 	strd	r8, r9, [r7, #136]	@ 0x88
    for (uint8_t i=0; i < cmd.commands.len; i++) {
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8002fde:	e068      	b.n	80030b2 <handle_ArrayCommand+0x15e>
        if (cmd.commands.data[i].actuator_id >= NUM_SERVOS) {
 8002fe0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	3398      	adds	r3, #152	@ 0x98
 8002fe8:	443b      	add	r3, r7
 8002fea:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d859      	bhi.n	80030a6 <handle_ArrayCommand+0x152>
            // not for us
            continue;
        }
        switch (cmd.commands.data[i].command_type) {
 8002ff2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	3398      	adds	r3, #152	@ 0x98
 8002ffa:	443b      	add	r3, r7
 8002ffc:	f813 3c87 	ldrb.w	r3, [r3, #-135]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <handle_ArrayCommand+0xb6>
 8003004:	2b04      	cmp	r3, #4
 8003006:	d014      	beq.n	8003032 <handle_ArrayCommand+0xde>
 8003008:	e03c      	b.n	8003084 <handle_ArrayCommand+0x130>
        case UAVCAN_EQUIPMENT_ACTUATOR_COMMAND_COMMAND_TYPE_UNITLESS:
            servos[cmd.commands.data[i].actuator_id].position = cmd.commands.data[i].command_value;
 800300a:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800300e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	3398      	adds	r3, #152	@ 0x98
 8003016:	443b      	add	r3, r7
 8003018:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 800301c:	4618      	mov	r0, r3
 800301e:	00d3      	lsls	r3, r2, #3
 8003020:	3398      	adds	r3, #152	@ 0x98
 8003022:	443b      	add	r3, r7
 8003024:	3b84      	subs	r3, #132	@ 0x84
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4927      	ldr	r1, [pc, #156]	@ (80030c8 <handle_ArrayCommand+0x174>)
 800302a:	0103      	lsls	r3, r0, #4
 800302c:	440b      	add	r3, r1
 800302e:	601a      	str	r2, [r3, #0]
            break;
 8003030:	e028      	b.n	8003084 <handle_ArrayCommand+0x130>
        case UAVCAN_EQUIPMENT_ACTUATOR_COMMAND_COMMAND_TYPE_PWM:
            // map PWM to -1 to 1, assuming 1500 trim. If the servo has natural PWM
            // support then we should use it directly instead
            servos[cmd.commands.data[i].actuator_id].position = (cmd.commands.data[i].command_value-PWM_TRIM)/PWM_SCALE_FACTOR;
 8003032:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	3398      	adds	r3, #152	@ 0x98
 800303a:	443b      	add	r3, r7
 800303c:	3b84      	subs	r3, #132	@ 0x84
 800303e:	ed93 7a00 	vldr	s14, [r3]
 8003042:	eddf 7a22 	vldr	s15, [pc, #136]	@ 80030cc <handle_ArrayCommand+0x178>
 8003046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800304a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800304e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80030d0 <handle_ArrayCommand+0x17c>
 8003052:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	3398      	adds	r3, #152	@ 0x98
 800305a:	443b      	add	r3, r7
 800305c:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8003060:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003064:	4a18      	ldr	r2, [pc, #96]	@ (80030c8 <handle_ArrayCommand+0x174>)
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	4413      	add	r3, r2
 800306a:	edc3 7a00 	vstr	s15, [r3]
            //set the PWM signal duty cycle
            setServoPWM(cmd.commands.data[i].actuator_id);
 800306e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	3398      	adds	r3, #152	@ 0x98
 8003076:	443b      	add	r3, r7
 8003078:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fd73 	bl	8002b68 <setServoPWM>
            break;
 8003082:	bf00      	nop
        }
        servos[cmd.commands.data[i].actuator_id].last_update_us = tnow;
 8003084:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	3398      	adds	r3, #152	@ 0x98
 800308c:	443b      	add	r3, r7
 800308e:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8003092:	4a0d      	ldr	r2, [pc, #52]	@ (80030c8 <handle_ArrayCommand+0x174>)
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	4413      	add	r3, r2
 8003098:	f103 0108 	add.w	r1, r3, #8
 800309c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80030a0:	e9c1 2300 	strd	r2, r3, [r1]
 80030a4:	e000      	b.n	80030a8 <handle_ArrayCommand+0x154>
            continue;
 80030a6:	bf00      	nop
    for (uint8_t i=0; i < cmd.commands.len; i++) {
 80030a8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80030ac:	3301      	adds	r3, #1
 80030ae:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80030b2:	7b3b      	ldrb	r3, [r7, #12]
 80030b4:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d391      	bcc.n	8002fe0 <handle_ArrayCommand+0x8c>
 80030bc:	e000      	b.n	80030c0 <handle_ArrayCommand+0x16c>
        return;
 80030be:	bf00      	nop

        //call a function to run the servos with the data set in this function
    }
}
 80030c0:	3798      	adds	r7, #152	@ 0x98
 80030c2:	46bd      	mov	sp, r7
 80030c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c8:	200009b0 	.word	0x200009b0
 80030cc:	000005dc 	.word	0x000005dc
 80030d0:	43fa0000 	.word	0x43fa0000
 80030d4:	00000000 	.word	0x00000000

080030d8 <handle_GetNodeInfo>:

/*
  handle a GetNodeInfo request
*/
// TODO: All the data in here is temporary for testing. If actually need to send valid data, edit accordingly.
void handle_GetNodeInfo(CanardInstance *ins, CanardRxTransfer *transfer) {
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	f5ad 7d4b 	sub.w	sp, sp, #812	@ 0x32c
 80030de:	af06      	add	r7, sp, #24
 80030e0:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80030e4:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80030e8:	6018      	str	r0, [r3, #0]
 80030ea:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80030ee:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80030f2:	6019      	str	r1, [r3, #0]
	printf("GetNodeInfo request from %d\n", transfer->source_node_id);
 80030f4:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80030f8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	7edb      	ldrb	r3, [r3, #27]
 8003100:	4619      	mov	r1, r3
 8003102:	484f      	ldr	r0, [pc, #316]	@ (8003240 <handle_GetNodeInfo+0x168>)
 8003104:	f008 f990 	bl	800b428 <iprintf>

	uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];
	struct uavcan_protocol_GetNodeInfoResponse pkt;

	memset(&pkt, 0, sizeof(pkt));
 8003108:	f107 0308 	add.w	r3, r7, #8
 800310c:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f008 fad8 	bl	800b6c8 <memset>

	node_status.uptime_sec = HAL_GetTick() / 1000ULL;
 8003118:	f001 ffe0 	bl	80050dc <HAL_GetTick>
 800311c:	4603      	mov	r3, r0
 800311e:	4a49      	ldr	r2, [pc, #292]	@ (8003244 <handle_GetNodeInfo+0x16c>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	4a48      	ldr	r2, [pc, #288]	@ (8003248 <handle_GetNodeInfo+0x170>)
 8003128:	6013      	str	r3, [r2, #0]
	pkt.status = node_status;
 800312a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800312e:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003132:	4a45      	ldr	r2, [pc, #276]	@ (8003248 <handle_GetNodeInfo+0x170>)
 8003134:	ca07      	ldmia	r2, {r0, r1, r2}
 8003136:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// fill in your major and minor firmware version
	pkt.software_version.major = 1;
 800313a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800313e:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003142:	2201      	movs	r2, #1
 8003144:	741a      	strb	r2, [r3, #16]
	pkt.software_version.minor = 0;
 8003146:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800314a:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 800314e:	2200      	movs	r2, #0
 8003150:	745a      	strb	r2, [r3, #17]
	pkt.software_version.optional_field_flags = 0;
 8003152:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8003156:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 800315a:	2200      	movs	r2, #0
 800315c:	749a      	strb	r2, [r3, #18]
	pkt.software_version.vcs_commit = 0; // should put git hash in here
 800315e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8003162:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003166:	2200      	movs	r2, #0
 8003168:	615a      	str	r2, [r3, #20]

	// should fill in hardware version
	pkt.hardware_version.major = 1;
 800316a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800316e:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2020 	strb.w	r2, [r3, #32]
	pkt.hardware_version.minor = 0;
 8003178:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800317c:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	// just setting all 16 bytes to 1 for testing
	getUniqueID(pkt.hardware_version.unique_id);
 8003186:	f107 0308 	add.w	r3, r7, #8
 800318a:	3322      	adds	r3, #34	@ 0x22
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fcc9 	bl	8002b24 <getUniqueID>

	strncpy((char*)pkt.name.data, "ESCNode", sizeof(pkt.name.data));
 8003192:	f107 0308 	add.w	r3, r7, #8
 8003196:	f203 1333 	addw	r3, r3, #307	@ 0x133
 800319a:	2250      	movs	r2, #80	@ 0x50
 800319c:	492b      	ldr	r1, [pc, #172]	@ (800324c <handle_GetNodeInfo+0x174>)
 800319e:	4618      	mov	r0, r3
 80031a0:	f008 fa9a 	bl	800b6d8 <strncpy>
	pkt.name.len = strnlen((char*)pkt.name.data, sizeof(pkt.name.data));
 80031a4:	f107 0308 	add.w	r3, r7, #8
 80031a8:	f203 1333 	addw	r3, r3, #307	@ 0x133
 80031ac:	2150      	movs	r1, #80	@ 0x50
 80031ae:	4618      	mov	r0, r3
 80031b0:	f008 faa5 	bl	800b6fe <strnlen>
 80031b4:	4603      	mov	r3, r0
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80031bc:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80031c0:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132

	uint16_t total_size = uavcan_protocol_GetNodeInfoResponse_encode(&pkt, buffer);
 80031c4:	f507 72ca 	add.w	r2, r7, #404	@ 0x194
 80031c8:	f107 0308 	add.w	r3, r7, #8
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f001 fe1c 	bl	8004e0c <uavcan_protocol_GetNodeInfoResponse_encode>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f8a7 330e 	strh.w	r3, [r7, #782]	@ 0x30e

	canardRequestOrRespond(ins,
 80031da:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80031de:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	7edc      	ldrb	r4, [r3, #27]
 80031e6:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80031ea:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3319      	adds	r3, #25
 80031f2:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 80031f6:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	7e92      	ldrb	r2, [r2, #26]
 80031fe:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 8003202:	f5a1 7043 	sub.w	r0, r1, #780	@ 0x30c
 8003206:	f8b7 130e 	ldrh.w	r1, [r7, #782]	@ 0x30e
 800320a:	9105      	str	r1, [sp, #20]
 800320c:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8003210:	9104      	str	r1, [sp, #16]
 8003212:	2100      	movs	r1, #0
 8003214:	9103      	str	r1, [sp, #12]
 8003216:	9202      	str	r2, [sp, #8]
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	2301      	movs	r3, #1
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	a306      	add	r3, pc, #24	@ (adr r3, 8003238 <handle_GetNodeInfo+0x160>)
 8003220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003224:	4621      	mov	r1, r4
 8003226:	6800      	ldr	r0, [r0, #0]
 8003228:	f7fd fcce 	bl	8000bc8 <canardRequestOrRespond>
						   &transfer->transfer_id,
						   transfer->priority,
						   CanardResponse,
						   &buffer[0],
						   total_size);
}
 800322c:	bf00      	nop
 800322e:	f507 7745 	add.w	r7, r7, #788	@ 0x314
 8003232:	46bd      	mov	sp, r7
 8003234:	bd90      	pop	{r4, r7, pc}
 8003236:	bf00      	nop
 8003238:	21c46a9e 	.word	0x21c46a9e
 800323c:	ee468a81 	.word	0xee468a81
 8003240:	0800c418 	.word	0x0800c418
 8003244:	10624dd3 	.word	0x10624dd3
 8003248:	200009f0 	.word	0x200009f0
 800324c:	0800c438 	.word	0x0800c438

08003250 <send_NodeStatus>:

/*
  send the 1Hz NodeStatus message. This is what allows a node to show
  up in the DroneCAN GUI tool and in the flight controller logs
 */
void send_NodeStatus(void) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b0e6      	sub	sp, #408	@ 0x198
 8003254:	af06      	add	r7, sp, #24
    uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];

    node_status.uptime_sec = HAL_GetTick() / 1000UL;
 8003256:	f001 ff41 	bl	80050dc <HAL_GetTick>
 800325a:	4603      	mov	r3, r0
 800325c:	4a1a      	ldr	r2, [pc, #104]	@ (80032c8 <send_NodeStatus+0x78>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	099b      	lsrs	r3, r3, #6
 8003264:	4a19      	ldr	r2, [pc, #100]	@ (80032cc <send_NodeStatus+0x7c>)
 8003266:	6013      	str	r3, [r2, #0]
    node_status.health = UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK;
 8003268:	4b18      	ldr	r3, [pc, #96]	@ (80032cc <send_NodeStatus+0x7c>)
 800326a:	2200      	movs	r2, #0
 800326c:	711a      	strb	r2, [r3, #4]
    node_status.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL;
 800326e:	4b17      	ldr	r3, [pc, #92]	@ (80032cc <send_NodeStatus+0x7c>)
 8003270:	2200      	movs	r2, #0
 8003272:	715a      	strb	r2, [r3, #5]
    node_status.sub_mode = 0;
 8003274:	4b15      	ldr	r3, [pc, #84]	@ (80032cc <send_NodeStatus+0x7c>)
 8003276:	2200      	movs	r2, #0
 8003278:	719a      	strb	r2, [r3, #6]

    // put whatever you like in here for display in GUI
    node_status.vendor_specific_status_code = 1234;
 800327a:	4b14      	ldr	r3, [pc, #80]	@ (80032cc <send_NodeStatus+0x7c>)
 800327c:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 8003280:	811a      	strh	r2, [r3, #8]

    uint32_t len = uavcan_protocol_NodeStatus_encode(&node_status, buffer);
 8003282:	463b      	mov	r3, r7
 8003284:	4619      	mov	r1, r3
 8003286:	4811      	ldr	r0, [pc, #68]	@ (80032cc <send_NodeStatus+0x7c>)
 8003288:	f001 fe80 	bl	8004f8c <uavcan_protocol_NodeStatus_encode>
 800328c:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    // we need a static variable for the transfer ID. This is
    // incremeneted on each transfer, allowing for detection of packet
    // loss
    static uint8_t transfer_id;

    canardBroadcast(&canard,
 8003290:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8003294:	b29b      	uxth	r3, r3
 8003296:	9304      	str	r3, [sp, #16]
 8003298:	463b      	mov	r3, r7
 800329a:	9303      	str	r3, [sp, #12]
 800329c:	2318      	movs	r3, #24
 800329e:	9302      	str	r3, [sp, #8]
 80032a0:	4b0b      	ldr	r3, [pc, #44]	@ (80032d0 <send_NodeStatus+0x80>)
 80032a2:	9301      	str	r3, [sp, #4]
 80032a4:	f240 1355 	movw	r3, #341	@ 0x155
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	a305      	add	r3, pc, #20	@ (adr r3, 80032c0 <send_NodeStatus+0x70>)
 80032ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b0:	4808      	ldr	r0, [pc, #32]	@ (80032d4 <send_NodeStatus+0x84>)
 80032b2:	f7fd fb83 	bl	80009bc <canardBroadcast>
                    UAVCAN_PROTOCOL_NODESTATUS_ID,
                    &transfer_id,
                    CANARD_TRANSFER_PRIORITY_LOW,
                    buffer,
                    len);
}
 80032b6:	bf00      	nop
 80032b8:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	c1a7c6f1 	.word	0xc1a7c6f1
 80032c4:	0f0868d0 	.word	0x0f0868d0
 80032c8:	10624dd3 	.word	0x10624dd3
 80032cc:	200009f0 	.word	0x200009f0
 80032d0:	200009fc 	.word	0x200009fc
 80032d4:	20000580 	.word	0x20000580

080032d8 <shouldAcceptTransfer>:
bool shouldAcceptTransfer(const CanardInstance *ins,
                                 uint64_t *out_data_type_signature,
                                 uint16_t data_type_id,
                                 CanardTransferType transfer_type,
                                 uint8_t source_node_id)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	4611      	mov	r1, r2
 80032e4:	461a      	mov	r2, r3
 80032e6:	460b      	mov	r3, r1
 80032e8:	80fb      	strh	r3, [r7, #6]
 80032ea:	4613      	mov	r3, r2
 80032ec:	717b      	strb	r3, [r7, #5]
	if (transfer_type == CanardTransferTypeRequest) {
 80032ee:	797b      	ldrb	r3, [r7, #5]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d10a      	bne.n	800330a <shouldAcceptTransfer+0x32>
	// check if we want to handle a specific service request
		switch (data_type_id) {
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <shouldAcceptTransfer+0x32>
		case UAVCAN_PROTOCOL_GETNODEINFO_ID: {
			*out_data_type_signature = UAVCAN_PROTOCOL_GETNODEINFO_REQUEST_SIGNATURE;
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	a31e      	add	r3, pc, #120	@ (adr r3, 8003378 <shouldAcceptTransfer+0xa0>)
 80032fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003302:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8003306:	2301      	movs	r3, #1
 8003308:	e02e      	b.n	8003368 <shouldAcceptTransfer+0x90>
		}
		}
	}
	if (transfer_type == CanardTransferTypeResponse) {
 800330a:	797b      	ldrb	r3, [r7, #5]
 800330c:	2b00      	cmp	r3, #0
		// check if we want to handle a specific service request
		switch (data_type_id) {
		}
	}
	if (transfer_type == CanardTransferTypeBroadcast) {
 800330e:	797b      	ldrb	r3, [r7, #5]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d128      	bne.n	8003366 <shouldAcceptTransfer+0x8e>
		// see if we want to handle a specific broadcast packet
		switch (data_type_id) {
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	f644 6227 	movw	r2, #20007	@ 0x4e27
 800331a:	4293      	cmp	r3, r2
 800331c:	d01b      	beq.n	8003356 <shouldAcceptTransfer+0x7e>
 800331e:	f644 6227 	movw	r2, #20007	@ 0x4e27
 8003322:	4293      	cmp	r3, r2
 8003324:	dc1f      	bgt.n	8003366 <shouldAcceptTransfer+0x8e>
 8003326:	f240 1255 	movw	r2, #341	@ 0x155
 800332a:	4293      	cmp	r3, r2
 800332c:	d00b      	beq.n	8003346 <shouldAcceptTransfer+0x6e>
 800332e:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 8003332:	4293      	cmp	r3, r2
 8003334:	d117      	bne.n	8003366 <shouldAcceptTransfer+0x8e>
		case UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_ID: {
			*out_data_type_signature = UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_SIGNATURE; //Change this
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	a311      	add	r3, pc, #68	@ (adr r3, 8003380 <shouldAcceptTransfer+0xa8>)
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8003342:	2301      	movs	r3, #1
 8003344:	e010      	b.n	8003368 <shouldAcceptTransfer+0x90>
		}
		case UAVCAN_PROTOCOL_NODESTATUS_ID: {
			*out_data_type_signature = UAVCAN_PROTOCOL_NODESTATUS_SIGNATURE;
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	a30f      	add	r3, pc, #60	@ (adr r3, 8003388 <shouldAcceptTransfer+0xb0>)
 800334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334e:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8003352:	2301      	movs	r3, #1
 8003354:	e008      	b.n	8003368 <shouldAcceptTransfer+0x90>
		}
		case ARDUPILOT_INDICATION_NOTIFYSTATE_ID: {
			*out_data_type_signature = ARDUPILOT_INDICATION_NOTIFYSTATE_SIGNATURE;
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	a30d      	add	r3, pc, #52	@ (adr r3, 8003390 <shouldAcceptTransfer+0xb8>)
 800335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335e:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <shouldAcceptTransfer+0x90>
		}
		}
	}
	// we don't want any other messages
	return false;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	f3af 8000 	nop.w
 8003378:	21c46a9e 	.word	0x21c46a9e
 800337c:	ee468a81 	.word	0xee468a81
 8003380:	38ec3af3 	.word	0x38ec3af3
 8003384:	d8a74862 	.word	0xd8a74862
 8003388:	c1a7c6f1 	.word	0xc1a7c6f1
 800338c:	0f0868d0 	.word	0x0f0868d0
 8003390:	1651fdec 	.word	0x1651fdec
 8003394:	631f2a9c 	.word	0x631f2a9c

08003398 <onTransferReceived>:

void onTransferReceived(CanardInstance *ins, CanardRxTransfer *transfer) {
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
//		for (int i = 0; i < transfer->payload_len; i++) {
//			printf("%02x", transfer->payload_head[i]);
//		}
//
//		printf("\n");
	if (transfer->transfer_type == CanardTransferTypeRequest) {
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	7e1b      	ldrb	r3, [r3, #24]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d108      	bne.n	80033bc <onTransferReceived+0x24>
		// check if we want to handle a specific service request
		switch (transfer->data_type_id) {
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	8adb      	ldrh	r3, [r3, #22]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d104      	bne.n	80033bc <onTransferReceived+0x24>
		case UAVCAN_PROTOCOL_GETNODEINFO_ID: {
			handle_GetNodeInfo(ins, transfer);
 80033b2:	6839      	ldr	r1, [r7, #0]
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff fe8f 	bl	80030d8 <handle_GetNodeInfo>
			break;
 80033ba:	bf00      	nop
		}
		}
	}
	if (transfer->transfer_type == CanardTransferTypeResponse) {
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	7e1b      	ldrb	r3, [r3, #24]
 80033c0:	2b00      	cmp	r3, #0
		switch (transfer->data_type_id) {
		}
	}
	if (transfer->transfer_type == CanardTransferTypeBroadcast) {
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	7e1b      	ldrb	r3, [r3, #24]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d120      	bne.n	800340c <onTransferReceived+0x74>
		// check if we want to handle a specific broadcast message
		switch (transfer->data_type_id) {
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	8adb      	ldrh	r3, [r3, #22]
 80033ce:	f644 6227 	movw	r2, #20007	@ 0x4e27
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d015      	beq.n	8003402 <onTransferReceived+0x6a>
 80033d6:	f644 6227 	movw	r2, #20007	@ 0x4e27
 80033da:	4293      	cmp	r3, r2
 80033dc:	dc16      	bgt.n	800340c <onTransferReceived+0x74>
 80033de:	f240 1255 	movw	r2, #341	@ 0x155
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d008      	beq.n	80033f8 <onTransferReceived+0x60>
 80033e6:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d10e      	bne.n	800340c <onTransferReceived+0x74>
		case UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_ID:{
			handle_ArrayCommand(ins, transfer);
 80033ee:	6839      	ldr	r1, [r7, #0]
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff fdaf 	bl	8002f54 <handle_ArrayCommand>
			break;
 80033f6:	e009      	b.n	800340c <onTransferReceived+0x74>
		}
		case UAVCAN_PROTOCOL_NODESTATUS_ID: {
			handle_NodeStatus(ins, transfer);
 80033f8:	6839      	ldr	r1, [r7, #0]
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff fcbe 	bl	8002d7c <handle_NodeStatus>
			break;
 8003400:	e004      	b.n	800340c <onTransferReceived+0x74>
		}
		case ARDUPILOT_INDICATION_NOTIFYSTATE_ID: {
			handle_NotifyState(ins, transfer);
 8003402:	6839      	ldr	r1, [r7, #0]
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff fd43 	bl	8002e90 <handle_NotifyState>
			break;
 800340a:	bf00      	nop
		}
		}
	}
}
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <processCanardTxQueue>:

void processCanardTxQueue(FDCAN_HandleTypeDef *hfdcan) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	// Transmitting

	for (const CanardCANFrame *tx_frame ; (tx_frame = canardPeekTxQueue(&canard)) != NULL;) {
 800341c:	e01a      	b.n	8003454 <processCanardTxQueue+0x40>
		const int16_t tx_res = canardSTM32Transmit(hfdcan, tx_frame);
 800341e:	68f9      	ldr	r1, [r7, #12]
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff facc 	bl	80029be <canardSTM32Transmit>
 8003426:	4603      	mov	r3, r0
 8003428:	817b      	strh	r3, [r7, #10]

		if (tx_res < 0) {
 800342a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800342e:	2b00      	cmp	r3, #0
 8003430:	da06      	bge.n	8003440 <processCanardTxQueue+0x2c>
			printf("Transmit error %d\n", tx_res);
 8003432:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003436:	4619      	mov	r1, r3
 8003438:	480c      	ldr	r0, [pc, #48]	@ (800346c <processCanardTxQueue+0x58>)
 800343a:	f007 fff5 	bl	800b428 <iprintf>
 800343e:	e006      	b.n	800344e <processCanardTxQueue+0x3a>
		} else if (tx_res > 0) {
 8003440:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003444:	2b00      	cmp	r3, #0
 8003446:	dd02      	ble.n	800344e <processCanardTxQueue+0x3a>
			printf("Successfully transmitted message\n");
 8003448:	4809      	ldr	r0, [pc, #36]	@ (8003470 <processCanardTxQueue+0x5c>)
 800344a:	f008 f85d 	bl	800b508 <puts>
		}

		// Pop canardTxQueue either way
		canardPopTxQueue(&canard);
 800344e:	4809      	ldr	r0, [pc, #36]	@ (8003474 <processCanardTxQueue+0x60>)
 8003450:	f7fd fc55 	bl	8000cfe <canardPopTxQueue>
	for (const CanardCANFrame *tx_frame ; (tx_frame = canardPeekTxQueue(&canard)) != NULL;) {
 8003454:	4807      	ldr	r0, [pc, #28]	@ (8003474 <processCanardTxQueue+0x60>)
 8003456:	f7fd fc3f 	bl	8000cd8 <canardPeekTxQueue>
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1dd      	bne.n	800341e <processCanardTxQueue+0xa>
	}
}
 8003462:	bf00      	nop
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	0800c440 	.word	0x0800c440
 8003470:	0800c454 	.word	0x0800c454
 8003474:	20000580 	.word	0x20000580

08003478 <process1HzTasks>:

/*
  This function is called at 1 Hz rate from the main loop.
*/
void process1HzTasks(uint64_t timestamp_usec) {
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	e9c7 0100 	strd	r0, r1, [r7]
    /*
      Purge transfers that are no longer transmitted. This can free up some memory
    */
    canardCleanupStaleTransfers(&canard, timestamp_usec);
 8003482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003486:	4804      	ldr	r0, [pc, #16]	@ (8003498 <process1HzTasks+0x20>)
 8003488:	f7fd ffec 	bl	8001464 <canardCleanupStaleTransfers>

    /*
      Transmit the node status message
    */
    send_NodeStatus();
 800348c:	f7ff fee0 	bl	8003250 <send_NodeStatus>
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	20000580 	.word	0x20000580
 800349c:	00000000 	.word	0x00000000

080034a0 <send_ServoStatus>:

/*
  send servo status at 50Hz
*/
static void send_ServoStatus(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b090      	sub	sp, #64	@ 0x40
 80034a4:	af06      	add	r7, sp, #24
    // send a separate status packet for each servo
    for (uint8_t i=0; i<NUM_SERVOS; i++) {
 80034a6:	2300      	movs	r3, #0
 80034a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80034ac:	e040      	b.n	8003530 <send_ServoStatus+0x90>
        struct uavcan_equipment_actuator_Status pkt;
        memset(&pkt, 0, sizeof(pkt));
 80034ae:	f107 030c 	add.w	r3, r7, #12
 80034b2:	2214      	movs	r2, #20
 80034b4:	2100      	movs	r1, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f008 f906 	bl	800b6c8 <memset>
        uint8_t buffer[UAVCAN_EQUIPMENT_ACTUATOR_STATUS_MAX_SIZE];

        // make up some synthetic status data
        pkt.actuator_id = i;
 80034bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034c0:	733b      	strb	r3, [r7, #12]
        pkt.position = servos[i].position;
 80034c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034c6:	4a22      	ldr	r2, [pc, #136]	@ (8003550 <send_ServoStatus+0xb0>)
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	4413      	add	r3, r2
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	613b      	str	r3, [r7, #16]
        pkt.force = 3.5 * servos[i].position;
 80034d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003550 <send_ServoStatus+0xb0>)
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	4413      	add	r3, r2
 80034da:	edd3 7a00 	vldr	s15, [r3]
 80034de:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 80034e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034e6:	edc7 7a05 	vstr	s15, [r7, #20]
        pkt.speed = 0.12; // m/s or rad/s
 80034ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003554 <send_ServoStatus+0xb4>)
 80034ec:	61bb      	str	r3, [r7, #24]
        pkt.power_rating_pct = 17;
 80034ee:	2311      	movs	r3, #17
 80034f0:	773b      	strb	r3, [r7, #28]

        uint32_t len = uavcan_equipment_actuator_Status_encode(&pkt, buffer);
 80034f2:	1d3a      	adds	r2, r7, #4
 80034f4:	f107 030c 	add.w	r3, r7, #12
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f001 fb03 	bl	8004b06 <uavcan_equipment_actuator_Status_encode>
 8003500:	6238      	str	r0, [r7, #32]
        // we need a static variable for the transfer ID. This is
        // incremeneted on each transfer, allowing for detection of packet
        // loss
        static uint8_t transfer_id;

        canardBroadcast(&canard,
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	b29b      	uxth	r3, r3
 8003506:	9304      	str	r3, [sp, #16]
 8003508:	1d3b      	adds	r3, r7, #4
 800350a:	9303      	str	r3, [sp, #12]
 800350c:	2318      	movs	r3, #24
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <send_ServoStatus+0xb8>)
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	f240 33f3 	movw	r3, #1011	@ 0x3f3
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	a30b      	add	r3, pc, #44	@ (adr r3, 8003548 <send_ServoStatus+0xa8>)
 800351c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003520:	480e      	ldr	r0, [pc, #56]	@ (800355c <send_ServoStatus+0xbc>)
 8003522:	f7fd fa4b 	bl	80009bc <canardBroadcast>
    for (uint8_t i=0; i<NUM_SERVOS; i++) {
 8003526:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800352a:	3301      	adds	r3, #1
 800352c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003534:	2b03      	cmp	r3, #3
 8003536:	d9ba      	bls.n	80034ae <send_ServoStatus+0xe>
                        &transfer_id,
                        CANARD_TRANSFER_PRIORITY_LOW,
                        buffer,
                        len);
    }
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	3728      	adds	r7, #40	@ 0x28
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	f3af 8000 	nop.w
 8003548:	faf1ea04 	.word	0xfaf1ea04
 800354c:	5e9bba44 	.word	0x5e9bba44
 8003550:	200009b0 	.word	0x200009b0
 8003554:	3df5c28f 	.word	0x3df5c28f
 8003558:	200009fd 	.word	0x200009fd
 800355c:	20000580 	.word	0x20000580

08003560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003564:	b08c      	sub	sp, #48	@ 0x30
 8003566:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003568:	f001 fd4e 	bl	8005008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800356c:	f000 f876 	bl	800365c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003570:	f000 fc16 	bl	8003da0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003574:	f000 f8d8 	bl	8003728 <MX_ADC1_Init>
  MX_ICACHE_Init();
 8003578:	f000 f9c8 	bl	800390c <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 800357c:	f000 f9da 	bl	8003934 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8003580:	f000 fa26 	bl	80039d0 <MX_RTC_Init>
  MX_UCPD1_Init();
 8003584:	f000 fbae 	bl	8003ce4 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8003588:	f000 fbe2 	bl	8003d50 <MX_USB_PCD_Init>
  MX_FDCAN1_Init();
 800358c:	f000 f942 	bl	8003814 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8003590:	f000 fa68 	bl	8003a64 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003594:	f000 fb24 	bl	8003be0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /*
   Initializing the Libcanard instance.
   */
  canardInit(&canard,
 8003598:	2300      	movs	r3, #0
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	4b2a      	ldr	r3, [pc, #168]	@ (8003648 <main+0xe8>)
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	4b2a      	ldr	r3, [pc, #168]	@ (800364c <main+0xec>)
 80035a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035a6:	492a      	ldr	r1, [pc, #168]	@ (8003650 <main+0xf0>)
 80035a8:	482a      	ldr	r0, [pc, #168]	@ (8003654 <main+0xf4>)
 80035aa:	f7fd f9ad 	bl	8000908 <canardInit>
			 sizeof(memory_pool),
			 onTransferReceived,
			 shouldAcceptTransfer,
			 NULL);

  uint64_t next_1hz_service_at = HAL_GetTick();
 80035ae:	f001 fd95 	bl	80050dc <HAL_GetTick>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2200      	movs	r2, #0
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	60fa      	str	r2, [r7, #12]
 80035ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035be:	e9c7 2308 	strd	r2, r3, [r7, #32]
  uint64_t next_50hz_service_at = HAL_GetTick();
 80035c2:	f001 fd8b 	bl	80050dc <HAL_GetTick>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2200      	movs	r2, #0
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035d2:	e9c7 2306 	strd	r2, r3, [r7, #24]

  // Could use DNA (Dynamic Node Allocation) by following example in esc_node.c but that requires a lot of setup and I'm not too sure of what advantage it brings
  // Instead, set a different NODE_ID for each device on the CAN bus by configuring node_settings
  if (NODE_ID > 0) {
	  canardSetLocalNodeID(&canard, NODE_ID);
 80035d6:	2101      	movs	r1, #1
 80035d8:	481e      	ldr	r0, [pc, #120]	@ (8003654 <main+0xf4>)
 80035da:	f7fd f9c9 	bl	8000970 <canardSetLocalNodeID>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	processCanardTxQueue(&hfdcan1);
 80035de:	481e      	ldr	r0, [pc, #120]	@ (8003658 <main+0xf8>)
 80035e0:	f7ff ff18 	bl	8003414 <processCanardTxQueue>

	const uint64_t ts = HAL_GetTick();
 80035e4:	f001 fd7a 	bl	80050dc <HAL_GetTick>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2200      	movs	r2, #0
 80035ec:	469a      	mov	sl, r3
 80035ee:	4693      	mov	fp, r2
 80035f0:	e9c7 ab04 	strd	sl, fp, [r7, #16]

	if (ts >= next_1hz_service_at) {
 80035f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035fc:	4290      	cmp	r0, r2
 80035fe:	eb71 0303 	sbcs.w	r3, r1, r3
 8003602:	d30b      	bcc.n	800361c <main+0xbc>
		next_1hz_service_at += 1000ULL;
 8003604:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003608:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 800360c:	f143 0500 	adc.w	r5, r3, #0
 8003610:	e9c7 4508 	strd	r4, r5, [r7, #32]
		process1HzTasks(ts);
 8003614:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003618:	f7ff ff2e 	bl	8003478 <process1HzTasks>
	}
	if (ts >= next_50hz_service_at) {
 800361c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003624:	4290      	cmp	r0, r2
 8003626:	eb71 0303 	sbcs.w	r3, r1, r3
 800362a:	d3d8      	bcc.n	80035de <main+0x7e>
		next_50hz_service_at += 1000000ULL/50U;
 800362c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003630:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8003634:	eb12 0801 	adds.w	r8, r2, r1
 8003638:	f143 0900 	adc.w	r9, r3, #0
 800363c:	e9c7 8906 	strd	r8, r9, [r7, #24]
		send_ServoStatus();
 8003640:	f7ff ff2e 	bl	80034a0 <send_ServoStatus>
  {
 8003644:	e7cb      	b.n	80035de <main+0x7e>
 8003646:	bf00      	nop
 8003648:	080032d9 	.word	0x080032d9
 800364c:	08003399 	.word	0x08003399
 8003650:	200005ac 	.word	0x200005ac
 8003654:	20000580 	.word	0x20000580
 8003658:	200000ec 	.word	0x200000ec

0800365c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b098      	sub	sp, #96	@ 0x60
 8003660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003662:	f107 0318 	add.w	r3, r7, #24
 8003666:	2248      	movs	r2, #72	@ 0x48
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f008 f82c 	bl	800b6c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003670:	1d3b      	adds	r3, r7, #4
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]
 8003678:	609a      	str	r2, [r3, #8]
 800367a:	60da      	str	r2, [r3, #12]
 800367c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800367e:	2000      	movs	r0, #0
 8003680:	f003 ff50 	bl	8007524 <HAL_PWREx_ControlVoltageScaling>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800368a:	f000 fc40 	bl	8003f0e <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800368e:	f003 ff2b 	bl	80074e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003692:	4b24      	ldr	r3, [pc, #144]	@ (8003724 <SystemClock_Config+0xc8>)
 8003694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003698:	4a22      	ldr	r2, [pc, #136]	@ (8003724 <SystemClock_Config+0xc8>)
 800369a:	f023 0318 	bic.w	r3, r3, #24
 800369e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80036a2:	2336      	movs	r3, #54	@ 0x36
 80036a4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80036a6:	2381      	movs	r3, #129	@ 0x81
 80036a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80036b0:	2301      	movs	r3, #1
 80036b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036b4:	2340      	movs	r3, #64	@ 0x40
 80036b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80036b8:	2301      	movs	r3, #1
 80036ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80036bc:	2300      	movs	r3, #0
 80036be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80036c0:	2360      	movs	r3, #96	@ 0x60
 80036c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036c4:	2302      	movs	r3, #2
 80036c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80036c8:	2301      	movs	r3, #1
 80036ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80036cc:	2301      	movs	r3, #1
 80036ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80036d0:	2337      	movs	r3, #55	@ 0x37
 80036d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80036d4:	2307      	movs	r3, #7
 80036d6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80036d8:	2302      	movs	r3, #2
 80036da:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80036dc:	2302      	movs	r3, #2
 80036de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036e0:	f107 0318 	add.w	r3, r7, #24
 80036e4:	4618      	mov	r0, r3
 80036e6:	f003 ffad 	bl	8007644 <HAL_RCC_OscConfig>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80036f0:	f000 fc0d 	bl	8003f0e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036f4:	230f      	movs	r3, #15
 80036f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036f8:	2303      	movs	r3, #3
 80036fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	2105      	movs	r1, #5
 800370c:	4618      	mov	r0, r3
 800370e:	f004 fc6f 	bl	8007ff0 <HAL_RCC_ClockConfig>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003718:	f000 fbf9 	bl	8003f0e <Error_Handler>
  }
}
 800371c:	bf00      	nop
 800371e:	3760      	adds	r7, #96	@ 0x60
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000

08003728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	@ 0x28
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800372e:	f107 031c 	add.w	r3, r7, #28
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800373a:	1d3b      	adds	r3, r7, #4
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
 8003748:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800374a:	4b2f      	ldr	r3, [pc, #188]	@ (8003808 <MX_ADC1_Init+0xe0>)
 800374c:	4a2f      	ldr	r2, [pc, #188]	@ (800380c <MX_ADC1_Init+0xe4>)
 800374e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003750:	4b2d      	ldr	r3, [pc, #180]	@ (8003808 <MX_ADC1_Init+0xe0>)
 8003752:	2200      	movs	r2, #0
 8003754:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003756:	4b2c      	ldr	r3, [pc, #176]	@ (8003808 <MX_ADC1_Init+0xe0>)
 8003758:	2200      	movs	r2, #0
 800375a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800375c:	4b2a      	ldr	r3, [pc, #168]	@ (8003808 <MX_ADC1_Init+0xe0>)
 800375e:	2200      	movs	r2, #0
 8003760:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003762:	4b29      	ldr	r3, [pc, #164]	@ (8003808 <MX_ADC1_Init+0xe0>)
 8003764:	2200      	movs	r2, #0
 8003766:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003768:	4b27      	ldr	r3, [pc, #156]	@ (8003808 <MX_ADC1_Init+0xe0>)
 800376a:	2204      	movs	r2, #4
 800376c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800376e:	4b26      	ldr	r3, [pc, #152]	@ (8003808 <MX_ADC1_Init+0xe0>)
 8003770:	2200      	movs	r2, #0
 8003772:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003774:	4b24      	ldr	r3, [pc, #144]	@ (8003808 <MX_ADC1_Init+0xe0>)
 8003776:	2200      	movs	r2, #0
 8003778:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800377a:	4b23      	ldr	r3, [pc, #140]	@ (8003808 <MX_ADC1_Init+0xe0>)
 800377c:	2201      	movs	r2, #1
 800377e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003780:	4b21      	ldr	r3, [pc, #132]	@ (8003808 <MX_ADC1_Init+0xe0>)
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003788:	4b1f      	ldr	r3, [pc, #124]	@ (8003808 <MX_ADC1_Init+0xe0>)
 800378a:	2200      	movs	r2, #0
 800378c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800378e:	4b1e      	ldr	r3, [pc, #120]	@ (8003808 <MX_ADC1_Init+0xe0>)
 8003790:	2200      	movs	r2, #0
 8003792:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003794:	4b1c      	ldr	r3, [pc, #112]	@ (8003808 <MX_ADC1_Init+0xe0>)
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800379c:	4b1a      	ldr	r3, [pc, #104]	@ (8003808 <MX_ADC1_Init+0xe0>)
 800379e:	2200      	movs	r2, #0
 80037a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80037a2:	4b19      	ldr	r3, [pc, #100]	@ (8003808 <MX_ADC1_Init+0xe0>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80037aa:	4817      	ldr	r0, [pc, #92]	@ (8003808 <MX_ADC1_Init+0xe0>)
 80037ac:	f001 fe66 	bl	800547c <HAL_ADC_Init>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80037b6:	f000 fbaa 	bl	8003f0e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80037be:	f107 031c 	add.w	r3, r7, #28
 80037c2:	4619      	mov	r1, r3
 80037c4:	4810      	ldr	r0, [pc, #64]	@ (8003808 <MX_ADC1_Init+0xe0>)
 80037c6:	f002 fbb5 	bl	8005f34 <HAL_ADCEx_MultiModeConfigChannel>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80037d0:	f000 fb9d 	bl	8003f0e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80037d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003810 <MX_ADC1_Init+0xe8>)
 80037d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80037d8:	2306      	movs	r3, #6
 80037da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80037e0:	237f      	movs	r3, #127	@ 0x7f
 80037e2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80037e4:	2304      	movs	r3, #4
 80037e6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037ec:	1d3b      	adds	r3, r7, #4
 80037ee:	4619      	mov	r1, r3
 80037f0:	4805      	ldr	r0, [pc, #20]	@ (8003808 <MX_ADC1_Init+0xe0>)
 80037f2:	f001 ff8f 	bl	8005714 <HAL_ADC_ConfigChannel>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80037fc:	f000 fb87 	bl	8003f0e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003800:	bf00      	nop
 8003802:	3728      	adds	r7, #40	@ 0x28
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	20000084 	.word	0x20000084
 800380c:	42028000 	.word	0x42028000
 8003810:	0c900008 	.word	0x0c900008

08003814 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0

  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800381a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800381e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8003824:	2302      	movs	r3, #2
 8003826:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8003828:	2301      	movs	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x01;
 800382c:	2301      	movs	r3, #1
 800382e:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003834:	4b33      	ldr	r3, [pc, #204]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 8003836:	4a34      	ldr	r2, [pc, #208]	@ (8003908 <MX_FDCAN1_Init+0xf4>)
 8003838:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV22;
 800383a:	4b32      	ldr	r3, [pc, #200]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 800383c:	220b      	movs	r2, #11
 800383e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003840:	4b30      	ldr	r3, [pc, #192]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 8003842:	2200      	movs	r2, #0
 8003844:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003846:	4b2f      	ldr	r3, [pc, #188]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 8003848:	2200      	movs	r2, #0
 800384a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800384c:	4b2d      	ldr	r3, [pc, #180]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 800384e:	2200      	movs	r2, #0
 8003850:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003852:	4b2c      	ldr	r3, [pc, #176]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 8003854:	2200      	movs	r2, #0
 8003856:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003858:	4b2a      	ldr	r3, [pc, #168]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 800385a:	2200      	movs	r2, #0
 800385c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 100;
 800385e:	4b29      	ldr	r3, [pc, #164]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 8003860:	2264      	movs	r2, #100	@ 0x64
 8003862:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8003864:	4b27      	ldr	r3, [pc, #156]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 8003866:	2201      	movs	r2, #1
 8003868:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800386a:	4b26      	ldr	r3, [pc, #152]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 800386c:	2202      	movs	r2, #2
 800386e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8003870:	4b24      	ldr	r3, [pc, #144]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 8003872:	2202      	movs	r2, #2
 8003874:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003876:	4b23      	ldr	r3, [pc, #140]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 8003878:	2201      	movs	r2, #1
 800387a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800387c:	4b21      	ldr	r3, [pc, #132]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 800387e:	2201      	movs	r2, #1
 8003880:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8003882:	4b20      	ldr	r3, [pc, #128]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 8003884:	2201      	movs	r2, #1
 8003886:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8003888:	4b1e      	ldr	r3, [pc, #120]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 800388a:	2201      	movs	r2, #1
 800388c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800388e:	4b1d      	ldr	r3, [pc, #116]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 8003890:	2200      	movs	r2, #0
 8003892:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8003894:	4b1b      	ldr	r3, [pc, #108]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 8003896:	2201      	movs	r2, #1
 8003898:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800389a:	4b1a      	ldr	r3, [pc, #104]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 800389c:	2200      	movs	r2, #0
 800389e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80038a0:	4818      	ldr	r0, [pc, #96]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 80038a2:	f002 fcfb 	bl	800629c <HAL_FDCAN_Init>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_FDCAN1_Init+0x9c>
  {
    Error_Handler();
 80038ac:	f000 fb2f 	bl	8003f0e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 80038b0:	2200      	movs	r2, #0
 80038b2:	2101      	movs	r1, #1
 80038b4:	4813      	ldr	r0, [pc, #76]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 80038b6:	f003 f811 	bl	80068dc <HAL_FDCAN_ActivateNotification>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <MX_FDCAN1_Init+0xb6>
	printf("1");
 80038c0:	2031      	movs	r0, #49	@ 0x31
 80038c2:	f007 fdc3 	bl	800b44c <putchar>
	Error_Handler();
 80038c6:	f000 fb22 	bl	8003f0e <Error_Handler>
  }
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 80038ca:	463b      	mov	r3, r7
 80038cc:	4619      	mov	r1, r3
 80038ce:	480d      	ldr	r0, [pc, #52]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 80038d0:	f002 fe36 	bl	8006540 <HAL_FDCAN_ConfigFilter>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d004      	beq.n	80038e4 <MX_FDCAN1_Init+0xd0>
    printf("2");
 80038da:	2032      	movs	r0, #50	@ 0x32
 80038dc:	f007 fdb6 	bl	800b44c <putchar>
    Error_Handler();
 80038e0:	f000 fb15 	bl	8003f0e <Error_Handler>
  }
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80038e4:	4807      	ldr	r0, [pc, #28]	@ (8003904 <MX_FDCAN1_Init+0xf0>)
 80038e6:	f002 fe85 	bl	80065f4 <HAL_FDCAN_Start>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d004      	beq.n	80038fa <MX_FDCAN1_Init+0xe6>
    printf("3");
 80038f0:	2033      	movs	r0, #51	@ 0x33
 80038f2:	f007 fdab 	bl	800b44c <putchar>
    Error_Handler();
 80038f6:	f000 fb0a 	bl	8003f0e <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	200000ec 	.word	0x200000ec
 8003908:	4000a400 	.word	0x4000a400

0800390c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8003910:	2000      	movs	r0, #0
 8003912:	f003 fcc1 	bl	8007298 <HAL_ICACHE_ConfigAssociativityMode>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800391c:	f000 faf7 	bl	8003f0e <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8003920:	f003 fcda 	bl	80072d8 <HAL_ICACHE_Enable>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800392a:	f000 faf0 	bl	8003f0e <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003938:	4b22      	ldr	r3, [pc, #136]	@ (80039c4 <MX_LPUART1_UART_Init+0x90>)
 800393a:	4a23      	ldr	r2, [pc, #140]	@ (80039c8 <MX_LPUART1_UART_Init+0x94>)
 800393c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800393e:	4b21      	ldr	r3, [pc, #132]	@ (80039c4 <MX_LPUART1_UART_Init+0x90>)
 8003940:	4a22      	ldr	r2, [pc, #136]	@ (80039cc <MX_LPUART1_UART_Init+0x98>)
 8003942:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003944:	4b1f      	ldr	r3, [pc, #124]	@ (80039c4 <MX_LPUART1_UART_Init+0x90>)
 8003946:	2200      	movs	r2, #0
 8003948:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800394a:	4b1e      	ldr	r3, [pc, #120]	@ (80039c4 <MX_LPUART1_UART_Init+0x90>)
 800394c:	2200      	movs	r2, #0
 800394e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003950:	4b1c      	ldr	r3, [pc, #112]	@ (80039c4 <MX_LPUART1_UART_Init+0x90>)
 8003952:	2200      	movs	r2, #0
 8003954:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003956:	4b1b      	ldr	r3, [pc, #108]	@ (80039c4 <MX_LPUART1_UART_Init+0x90>)
 8003958:	220c      	movs	r2, #12
 800395a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800395c:	4b19      	ldr	r3, [pc, #100]	@ (80039c4 <MX_LPUART1_UART_Init+0x90>)
 800395e:	2200      	movs	r2, #0
 8003960:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003962:	4b18      	ldr	r3, [pc, #96]	@ (80039c4 <MX_LPUART1_UART_Init+0x90>)
 8003964:	2200      	movs	r2, #0
 8003966:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003968:	4b16      	ldr	r3, [pc, #88]	@ (80039c4 <MX_LPUART1_UART_Init+0x90>)
 800396a:	2200      	movs	r2, #0
 800396c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800396e:	4b15      	ldr	r3, [pc, #84]	@ (80039c4 <MX_LPUART1_UART_Init+0x90>)
 8003970:	2200      	movs	r2, #0
 8003972:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003974:	4b13      	ldr	r3, [pc, #76]	@ (80039c4 <MX_LPUART1_UART_Init+0x90>)
 8003976:	2200      	movs	r2, #0
 8003978:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800397a:	4812      	ldr	r0, [pc, #72]	@ (80039c4 <MX_LPUART1_UART_Init+0x90>)
 800397c:	f006 fc2e 	bl	800a1dc <HAL_UART_Init>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8003986:	f000 fac2 	bl	8003f0e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800398a:	2100      	movs	r1, #0
 800398c:	480d      	ldr	r0, [pc, #52]	@ (80039c4 <MX_LPUART1_UART_Init+0x90>)
 800398e:	f007 f9cd 	bl	800ad2c <HAL_UARTEx_SetTxFifoThreshold>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8003998:	f000 fab9 	bl	8003f0e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800399c:	2100      	movs	r1, #0
 800399e:	4809      	ldr	r0, [pc, #36]	@ (80039c4 <MX_LPUART1_UART_Init+0x90>)
 80039a0:	f007 fa02 	bl	800ada8 <HAL_UARTEx_SetRxFifoThreshold>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80039aa:	f000 fab0 	bl	8003f0e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80039ae:	4805      	ldr	r0, [pc, #20]	@ (80039c4 <MX_LPUART1_UART_Init+0x90>)
 80039b0:	f007 f983 	bl	800acba <HAL_UARTEx_DisableFifoMode>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80039ba:	f000 faa8 	bl	8003f0e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000150 	.word	0x20000150
 80039c8:	40008000 	.word	0x40008000
 80039cc:	00033324 	.word	0x00033324

080039d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80039d6:	463b      	mov	r3, r7
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	605a      	str	r2, [r3, #4]
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	60da      	str	r2, [r3, #12]
 80039e2:	611a      	str	r2, [r3, #16]
 80039e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80039e6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a5c <MX_RTC_Init+0x8c>)
 80039e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a60 <MX_RTC_Init+0x90>)
 80039ea:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80039ec:	4b1b      	ldr	r3, [pc, #108]	@ (8003a5c <MX_RTC_Init+0x8c>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80039f2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a5c <MX_RTC_Init+0x8c>)
 80039f4:	227f      	movs	r2, #127	@ 0x7f
 80039f6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80039f8:	4b18      	ldr	r3, [pc, #96]	@ (8003a5c <MX_RTC_Init+0x8c>)
 80039fa:	22ff      	movs	r2, #255	@ 0xff
 80039fc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80039fe:	4b17      	ldr	r3, [pc, #92]	@ (8003a5c <MX_RTC_Init+0x8c>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003a04:	4b15      	ldr	r3, [pc, #84]	@ (8003a5c <MX_RTC_Init+0x8c>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003a0a:	4b14      	ldr	r3, [pc, #80]	@ (8003a5c <MX_RTC_Init+0x8c>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003a10:	4b12      	ldr	r3, [pc, #72]	@ (8003a5c <MX_RTC_Init+0x8c>)
 8003a12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a16:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8003a18:	4b10      	ldr	r3, [pc, #64]	@ (8003a5c <MX_RTC_Init+0x8c>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003a1e:	480f      	ldr	r0, [pc, #60]	@ (8003a5c <MX_RTC_Init+0x8c>)
 8003a20:	f005 fae0 	bl	8008fe4 <HAL_RTC_Init>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8003a2a:	f000 fa70 	bl	8003f0e <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8003a3e:	463b      	mov	r3, r7
 8003a40:	4619      	mov	r1, r3
 8003a42:	4806      	ldr	r0, [pc, #24]	@ (8003a5c <MX_RTC_Init+0x8c>)
 8003a44:	f005 fbdc 	bl	8009200 <HAL_RTCEx_PrivilegeModeSet>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8003a4e:	f000 fa5e 	bl	8003f0e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003a52:	bf00      	nop
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	200001e4 	.word	0x200001e4
 8003a60:	40002800 	.word	0x40002800

08003a64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b09c      	sub	sp, #112	@ 0x70
 8003a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a6a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	605a      	str	r2, [r3, #4]
 8003a74:	609a      	str	r2, [r3, #8]
 8003a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a84:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	611a      	str	r2, [r3, #16]
 8003a94:	615a      	str	r2, [r3, #20]
 8003a96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a98:	1d3b      	adds	r3, r7, #4
 8003a9a:	2234      	movs	r2, #52	@ 0x34
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f007 fe12 	bl	800b6c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003aa4:	4b4c      	ldr	r3, [pc, #304]	@ (8003bd8 <MX_TIM1_Init+0x174>)
 8003aa6:	4a4d      	ldr	r2, [pc, #308]	@ (8003bdc <MX_TIM1_Init+0x178>)
 8003aa8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 8003aaa:	4b4b      	ldr	r3, [pc, #300]	@ (8003bd8 <MX_TIM1_Init+0x174>)
 8003aac:	2227      	movs	r2, #39	@ 0x27
 8003aae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ab0:	4b49      	ldr	r3, [pc, #292]	@ (8003bd8 <MX_TIM1_Init+0x174>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 55000;
 8003ab6:	4b48      	ldr	r3, [pc, #288]	@ (8003bd8 <MX_TIM1_Init+0x174>)
 8003ab8:	f24d 62d8 	movw	r2, #55000	@ 0xd6d8
 8003abc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003abe:	4b46      	ldr	r3, [pc, #280]	@ (8003bd8 <MX_TIM1_Init+0x174>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ac4:	4b44      	ldr	r3, [pc, #272]	@ (8003bd8 <MX_TIM1_Init+0x174>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aca:	4b43      	ldr	r3, [pc, #268]	@ (8003bd8 <MX_TIM1_Init+0x174>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ad0:	4841      	ldr	r0, [pc, #260]	@ (8003bd8 <MX_TIM1_Init+0x174>)
 8003ad2:	f005 fbc1 	bl	8009258 <HAL_TIM_Base_Init>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003adc:	f000 fa17 	bl	8003f0e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ae4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003ae6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003aea:	4619      	mov	r1, r3
 8003aec:	483a      	ldr	r0, [pc, #232]	@ (8003bd8 <MX_TIM1_Init+0x174>)
 8003aee:	f005 fd7f 	bl	80095f0 <HAL_TIM_ConfigClockSource>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003af8:	f000 fa09 	bl	8003f0e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003afc:	4836      	ldr	r0, [pc, #216]	@ (8003bd8 <MX_TIM1_Init+0x174>)
 8003afe:	f005 fc02 	bl	8009306 <HAL_TIM_PWM_Init>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003b08:	f000 fa01 	bl	8003f0e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b10:	2300      	movs	r3, #0
 8003b12:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b14:	2300      	movs	r3, #0
 8003b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	482e      	ldr	r0, [pc, #184]	@ (8003bd8 <MX_TIM1_Init+0x174>)
 8003b20:	f006 fa48 	bl	8009fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003b2a:	f000 f9f0 	bl	8003f0e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b2e:	2360      	movs	r3, #96	@ 0x60
 8003b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 4125;
 8003b32:	f241 031d 	movw	r3, #4125	@ 0x101d
 8003b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b44:	2300      	movs	r3, #0
 8003b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b4c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b50:	2200      	movs	r2, #0
 8003b52:	4619      	mov	r1, r3
 8003b54:	4820      	ldr	r0, [pc, #128]	@ (8003bd8 <MX_TIM1_Init+0x174>)
 8003b56:	f005 fc37 	bl	80093c8 <HAL_TIM_PWM_ConfigChannel>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003b60:	f000 f9d5 	bl	8003f0e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b64:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b68:	2204      	movs	r2, #4
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	481a      	ldr	r0, [pc, #104]	@ (8003bd8 <MX_TIM1_Init+0x174>)
 8003b6e:	f005 fc2b 	bl	80093c8 <HAL_TIM_PWM_ConfigChannel>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8003b78:	f000 f9c9 	bl	8003f0e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003ba2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003bac:	2300      	movs	r3, #0
 8003bae:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003bb4:	1d3b      	adds	r3, r7, #4
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4807      	ldr	r0, [pc, #28]	@ (8003bd8 <MX_TIM1_Init+0x174>)
 8003bba:	f006 fa83 	bl	800a0c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8003bc4:	f000 f9a3 	bl	8003f0e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003bc8:	4803      	ldr	r0, [pc, #12]	@ (8003bd8 <MX_TIM1_Init+0x174>)
 8003bca:	f000 fb5d 	bl	8004288 <HAL_TIM_MspPostInit>

}
 8003bce:	bf00      	nop
 8003bd0:	3770      	adds	r7, #112	@ 0x70
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	2000020c 	.word	0x2000020c
 8003bdc:	40012c00 	.word	0x40012c00

08003be0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08e      	sub	sp, #56	@ 0x38
 8003be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003be6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	605a      	str	r2, [r3, #4]
 8003bf0:	609a      	str	r2, [r3, #8]
 8003bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bf4:	f107 031c 	add.w	r3, r7, #28
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c00:	463b      	mov	r3, r7
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	609a      	str	r2, [r3, #8]
 8003c0a:	60da      	str	r2, [r3, #12]
 8003c0c:	611a      	str	r2, [r3, #16]
 8003c0e:	615a      	str	r2, [r3, #20]
 8003c10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c12:	4b33      	ldr	r3, [pc, #204]	@ (8003ce0 <MX_TIM2_Init+0x100>)
 8003c14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8003c1a:	4b31      	ldr	r3, [pc, #196]	@ (8003ce0 <MX_TIM2_Init+0x100>)
 8003c1c:	2227      	movs	r2, #39	@ 0x27
 8003c1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c20:	4b2f      	ldr	r3, [pc, #188]	@ (8003ce0 <MX_TIM2_Init+0x100>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 55000;
 8003c26:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce0 <MX_TIM2_Init+0x100>)
 8003c28:	f24d 62d8 	movw	r2, #55000	@ 0xd6d8
 8003c2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce0 <MX_TIM2_Init+0x100>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c34:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce0 <MX_TIM2_Init+0x100>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c3a:	4829      	ldr	r0, [pc, #164]	@ (8003ce0 <MX_TIM2_Init+0x100>)
 8003c3c:	f005 fb0c 	bl	8009258 <HAL_TIM_Base_Init>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003c46:	f000 f962 	bl	8003f0e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c54:	4619      	mov	r1, r3
 8003c56:	4822      	ldr	r0, [pc, #136]	@ (8003ce0 <MX_TIM2_Init+0x100>)
 8003c58:	f005 fcca 	bl	80095f0 <HAL_TIM_ConfigClockSource>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003c62:	f000 f954 	bl	8003f0e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003c66:	481e      	ldr	r0, [pc, #120]	@ (8003ce0 <MX_TIM2_Init+0x100>)
 8003c68:	f005 fb4d 	bl	8009306 <HAL_TIM_PWM_Init>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003c72:	f000 f94c 	bl	8003f0e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c7e:	f107 031c 	add.w	r3, r7, #28
 8003c82:	4619      	mov	r1, r3
 8003c84:	4816      	ldr	r0, [pc, #88]	@ (8003ce0 <MX_TIM2_Init+0x100>)
 8003c86:	f006 f995 	bl	8009fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003c90:	f000 f93d 	bl	8003f0e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c94:	2360      	movs	r3, #96	@ 0x60
 8003c96:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 4125;
 8003c98:	f241 031d 	movw	r3, #4125	@ 0x101d
 8003c9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ca6:	463b      	mov	r3, r7
 8003ca8:	2200      	movs	r2, #0
 8003caa:	4619      	mov	r1, r3
 8003cac:	480c      	ldr	r0, [pc, #48]	@ (8003ce0 <MX_TIM2_Init+0x100>)
 8003cae:	f005 fb8b 	bl	80093c8 <HAL_TIM_PWM_ConfigChannel>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003cb8:	f000 f929 	bl	8003f0e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003cbc:	463b      	mov	r3, r7
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4807      	ldr	r0, [pc, #28]	@ (8003ce0 <MX_TIM2_Init+0x100>)
 8003cc4:	f005 fb80 	bl	80093c8 <HAL_TIM_PWM_ConfigChannel>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8003cce:	f000 f91e 	bl	8003f0e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003cd2:	4803      	ldr	r0, [pc, #12]	@ (8003ce0 <MX_TIM2_Init+0x100>)
 8003cd4:	f000 fad8 	bl	8004288 <HAL_TIM_MspPostInit>

}
 8003cd8:	bf00      	nop
 8003cda:	3738      	adds	r7, #56	@ 0x38
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20000258 	.word	0x20000258

08003ce4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cea:	463b      	mov	r3, r7
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	60da      	str	r2, [r3, #12]
 8003cf6:	611a      	str	r2, [r3, #16]
 8003cf8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8003cfa:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003cfe:	f7fe fef9 	bl	8002af4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8003d02:	2002      	movs	r0, #2
 8003d04:	f7fe fede 	bl	8002ac4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003d08:	2001      	movs	r0, #1
 8003d0a:	f7fe fedb 	bl	8002ac4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d12:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003d14:	2303      	movs	r3, #3
 8003d16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d1c:	463b      	mov	r3, r7
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4809      	ldr	r0, [pc, #36]	@ (8003d48 <MX_UCPD1_Init+0x64>)
 8003d22:	f007 fa18 	bl	800b156 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d2a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d34:	463b      	mov	r3, r7
 8003d36:	4619      	mov	r1, r3
 8003d38:	4804      	ldr	r0, [pc, #16]	@ (8003d4c <MX_UCPD1_Init+0x68>)
 8003d3a:	f007 fa0c 	bl	800b156 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8003d3e:	bf00      	nop
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	42020400 	.word	0x42020400
 8003d4c:	42020000 	.word	0x42020000

08003d50 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003d54:	4b10      	ldr	r3, [pc, #64]	@ (8003d98 <MX_USB_PCD_Init+0x48>)
 8003d56:	4a11      	ldr	r2, [pc, #68]	@ (8003d9c <MX_USB_PCD_Init+0x4c>)
 8003d58:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d98 <MX_USB_PCD_Init+0x48>)
 8003d5c:	2208      	movs	r2, #8
 8003d5e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003d60:	4b0d      	ldr	r3, [pc, #52]	@ (8003d98 <MX_USB_PCD_Init+0x48>)
 8003d62:	2202      	movs	r2, #2
 8003d64:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003d66:	4b0c      	ldr	r3, [pc, #48]	@ (8003d98 <MX_USB_PCD_Init+0x48>)
 8003d68:	2202      	movs	r2, #2
 8003d6a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d98 <MX_USB_PCD_Init+0x48>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003d72:	4b09      	ldr	r3, [pc, #36]	@ (8003d98 <MX_USB_PCD_Init+0x48>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003d78:	4b07      	ldr	r3, [pc, #28]	@ (8003d98 <MX_USB_PCD_Init+0x48>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003d7e:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <MX_USB_PCD_Init+0x48>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003d84:	4804      	ldr	r0, [pc, #16]	@ (8003d98 <MX_USB_PCD_Init+0x48>)
 8003d86:	f003 fab7 	bl	80072f8 <HAL_PCD_Init>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8003d90:	f000 f8bd 	bl	8003f0e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003d94:	bf00      	nop
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	200002a4 	.word	0x200002a4
 8003d9c:	4000d400 	.word	0x4000d400

08003da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08c      	sub	sp, #48	@ 0x30
 8003da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da6:	f107 031c 	add.w	r3, r7, #28
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	60da      	str	r2, [r3, #12]
 8003db4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003db6:	4b4b      	ldr	r3, [pc, #300]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dba:	4a4a      	ldr	r2, [pc, #296]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003dbc:	f043 0304 	orr.w	r3, r3, #4
 8003dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dc2:	4b48      	ldr	r3, [pc, #288]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	61bb      	str	r3, [r7, #24]
 8003dcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dce:	4b45      	ldr	r3, [pc, #276]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd2:	4a44      	ldr	r2, [pc, #272]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dda:	4b42      	ldr	r3, [pc, #264]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003de6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dea:	4a3e      	ldr	r2, [pc, #248]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003dec:	f043 0310 	orr.w	r3, r3, #16
 8003df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003df2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dfe:	4b39      	ldr	r3, [pc, #228]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e02:	4a38      	ldr	r2, [pc, #224]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003e04:	f043 0302 	orr.w	r3, r3, #2
 8003e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e0a:	4b36      	ldr	r3, [pc, #216]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e16:	4b33      	ldr	r3, [pc, #204]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1a:	4a32      	ldr	r2, [pc, #200]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003e1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e22:	4b30      	ldr	r3, [pc, #192]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8003e2e:	f003 fbd5 	bl	80075dc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e32:	4b2c      	ldr	r3, [pc, #176]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e36:	4a2b      	ldr	r2, [pc, #172]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003e38:	f043 0308 	orr.w	r3, r3, #8
 8003e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e3e:	4b29      	ldr	r3, [pc, #164]	@ (8003ee4 <MX_GPIO_Init+0x144>)
 8003e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	607b      	str	r3, [r7, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2180      	movs	r1, #128	@ 0x80
 8003e4e:	4826      	ldr	r0, [pc, #152]	@ (8003ee8 <MX_GPIO_Init+0x148>)
 8003e50:	f003 fa0a 	bl	8007268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8003e54:	2200      	movs	r2, #0
 8003e56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e5a:	4824      	ldr	r0, [pc, #144]	@ (8003eec <MX_GPIO_Init+0x14c>)
 8003e5c:	f003 fa04 	bl	8007268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8003e60:	2200      	movs	r2, #0
 8003e62:	21a0      	movs	r1, #160	@ 0xa0
 8003e64:	4822      	ldr	r0, [pc, #136]	@ (8003ef0 <MX_GPIO_Init+0x150>)
 8003e66:	f003 f9ff 	bl	8007268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8003e6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8003e7a:	f107 031c 	add.w	r3, r7, #28
 8003e7e:	4619      	mov	r1, r3
 8003e80:	481b      	ldr	r0, [pc, #108]	@ (8003ef0 <MX_GPIO_Init+0x150>)
 8003e82:	f003 f871 	bl	8006f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8003e86:	2380      	movs	r3, #128	@ 0x80
 8003e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e92:	2300      	movs	r3, #0
 8003e94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8003e96:	f107 031c 	add.w	r3, r7, #28
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4812      	ldr	r0, [pc, #72]	@ (8003ee8 <MX_GPIO_Init+0x148>)
 8003e9e:	f003 f863 	bl	8006f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8003ea2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8003eb4:	f107 031c 	add.w	r3, r7, #28
 8003eb8:	4619      	mov	r1, r3
 8003eba:	480c      	ldr	r0, [pc, #48]	@ (8003eec <MX_GPIO_Init+0x14c>)
 8003ebc:	f003 f854 	bl	8006f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8003ec0:	23a0      	movs	r3, #160	@ 0xa0
 8003ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed0:	f107 031c 	add.w	r3, r7, #28
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4806      	ldr	r0, [pc, #24]	@ (8003ef0 <MX_GPIO_Init+0x150>)
 8003ed8:	f003 f846 	bl	8006f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003edc:	bf00      	nop
 8003ede:	3730      	adds	r7, #48	@ 0x30
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	42020800 	.word	0x42020800
 8003eec:	42020000 	.word	0x42020000
 8003ef0:	42020400 	.word	0x42020400

08003ef4 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	return ITM_SendChar(ch);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe fdb8 	bl	8002a74 <ITM_SendChar>
 8003f04:	4603      	mov	r3, r0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f12:	b672      	cpsid	i
}
 8003f14:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f16:	bf00      	nop
 8003f18:	e7fd      	b.n	8003f16 <Error_Handler+0x8>
	...

08003f1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f22:	4b0f      	ldr	r3, [pc, #60]	@ (8003f60 <HAL_MspInit+0x44>)
 8003f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f26:	4a0e      	ldr	r2, [pc, #56]	@ (8003f60 <HAL_MspInit+0x44>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f60 <HAL_MspInit+0x44>)
 8003f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f3a:	4b09      	ldr	r3, [pc, #36]	@ (8003f60 <HAL_MspInit+0x44>)
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3e:	4a08      	ldr	r2, [pc, #32]	@ (8003f60 <HAL_MspInit+0x44>)
 8003f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f46:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <HAL_MspInit+0x44>)
 8003f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40021000 	.word	0x40021000

08003f64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b0ae      	sub	sp, #184	@ 0xb8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f7c:	f107 0310 	add.w	r3, r7, #16
 8003f80:	2294      	movs	r2, #148	@ 0x94
 8003f82:	2100      	movs	r1, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f007 fb9f 	bl	800b6c8 <memset>
  if(hadc->Instance==ADC1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800400c <HAL_ADC_MspInit+0xa8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d137      	bne.n	8004004 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003f94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003f9a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003f9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fa2:	f107 0310 	add.w	r3, r7, #16
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f004 fb06 	bl	80085b8 <HAL_RCCEx_PeriphCLKConfig>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8003fb2:	f7ff ffac 	bl	8003f0e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003fb6:	4b16      	ldr	r3, [pc, #88]	@ (8004010 <HAL_ADC_MspInit+0xac>)
 8003fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fba:	4a15      	ldr	r2, [pc, #84]	@ (8004010 <HAL_ADC_MspInit+0xac>)
 8003fbc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fc2:	4b13      	ldr	r3, [pc, #76]	@ (8004010 <HAL_ADC_MspInit+0xac>)
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fce:	4b10      	ldr	r3, [pc, #64]	@ (8004010 <HAL_ADC_MspInit+0xac>)
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd2:	4a0f      	ldr	r2, [pc, #60]	@ (8004010 <HAL_ADC_MspInit+0xac>)
 8003fd4:	f043 0304 	orr.w	r3, r3, #4
 8003fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fda:	4b0d      	ldr	r3, [pc, #52]	@ (8004010 <HAL_ADC_MspInit+0xac>)
 8003fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	60bb      	str	r3, [r7, #8]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8003fe6:	2304      	movs	r3, #4
 8003fe8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fec:	2303      	movs	r3, #3
 8003fee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8003ff8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4805      	ldr	r0, [pc, #20]	@ (8004014 <HAL_ADC_MspInit+0xb0>)
 8004000:	f002 ffb2 	bl	8006f68 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004004:	bf00      	nop
 8004006:	37b8      	adds	r7, #184	@ 0xb8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	42028000 	.word	0x42028000
 8004010:	40021000 	.word	0x40021000
 8004014:	42020800 	.word	0x42020800

08004018 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b0ae      	sub	sp, #184	@ 0xb8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004020:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	60da      	str	r2, [r3, #12]
 800402e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004030:	f107 0310 	add.w	r3, r7, #16
 8004034:	2294      	movs	r2, #148	@ 0x94
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f007 fb45 	bl	800b6c8 <memset>
  if(hfdcan->Instance==FDCAN1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a26      	ldr	r2, [pc, #152]	@ (80040dc <HAL_FDCAN_MspInit+0xc4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d144      	bne.n	80040d2 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004048:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800404c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800404e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004052:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004054:	f107 0310 	add.w	r3, r7, #16
 8004058:	4618      	mov	r0, r3
 800405a:	f004 faad 	bl	80085b8 <HAL_RCCEx_PeriphCLKConfig>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004064:	f7ff ff53 	bl	8003f0e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 8004068:	4b1d      	ldr	r3, [pc, #116]	@ (80040e0 <HAL_FDCAN_MspInit+0xc8>)
 800406a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406c:	4a1c      	ldr	r2, [pc, #112]	@ (80040e0 <HAL_FDCAN_MspInit+0xc8>)
 800406e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004072:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004074:	4b1a      	ldr	r3, [pc, #104]	@ (80040e0 <HAL_FDCAN_MspInit+0xc8>)
 8004076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004080:	4b17      	ldr	r3, [pc, #92]	@ (80040e0 <HAL_FDCAN_MspInit+0xc8>)
 8004082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004084:	4a16      	ldr	r2, [pc, #88]	@ (80040e0 <HAL_FDCAN_MspInit+0xc8>)
 8004086:	f043 0308 	orr.w	r3, r3, #8
 800408a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800408c:	4b14      	ldr	r3, [pc, #80]	@ (80040e0 <HAL_FDCAN_MspInit+0xc8>)
 800408e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004098:	2303      	movs	r3, #3
 800409a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409e:	2302      	movs	r3, #2
 80040a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80040b0:	2309      	movs	r3, #9
 80040b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040b6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80040ba:	4619      	mov	r1, r3
 80040bc:	4809      	ldr	r0, [pc, #36]	@ (80040e4 <HAL_FDCAN_MspInit+0xcc>)
 80040be:	f002 ff53 	bl	8006f68 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80040c2:	2200      	movs	r2, #0
 80040c4:	2100      	movs	r1, #0
 80040c6:	2027      	movs	r0, #39	@ 0x27
 80040c8:	f002 f8b3 	bl	8006232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80040cc:	2027      	movs	r0, #39	@ 0x27
 80040ce:	f002 f8ca 	bl	8006266 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80040d2:	bf00      	nop
 80040d4:	37b8      	adds	r7, #184	@ 0xb8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	4000a400 	.word	0x4000a400
 80040e0:	40021000 	.word	0x40021000
 80040e4:	42020c00 	.word	0x42020c00

080040e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b0ae      	sub	sp, #184	@ 0xb8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
 80040fa:	609a      	str	r2, [r3, #8]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004100:	f107 0310 	add.w	r3, r7, #16
 8004104:	2294      	movs	r2, #148	@ 0x94
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f007 fadd 	bl	800b6c8 <memset>
  if(huart->Instance==LPUART1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a22      	ldr	r2, [pc, #136]	@ (800419c <HAL_UART_MspInit+0xb4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d13d      	bne.n	8004194 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004118:	2320      	movs	r3, #32
 800411a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800411c:	2300      	movs	r3, #0
 800411e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004120:	f107 0310 	add.w	r3, r7, #16
 8004124:	4618      	mov	r0, r3
 8004126:	f004 fa47 	bl	80085b8 <HAL_RCCEx_PeriphCLKConfig>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004130:	f7ff feed 	bl	8003f0e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004134:	4b1a      	ldr	r3, [pc, #104]	@ (80041a0 <HAL_UART_MspInit+0xb8>)
 8004136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004138:	4a19      	ldr	r2, [pc, #100]	@ (80041a0 <HAL_UART_MspInit+0xb8>)
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004140:	4b17      	ldr	r3, [pc, #92]	@ (80041a0 <HAL_UART_MspInit+0xb8>)
 8004142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800414c:	4b14      	ldr	r3, [pc, #80]	@ (80041a0 <HAL_UART_MspInit+0xb8>)
 800414e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004150:	4a13      	ldr	r2, [pc, #76]	@ (80041a0 <HAL_UART_MspInit+0xb8>)
 8004152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004156:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004158:	4b11      	ldr	r3, [pc, #68]	@ (80041a0 <HAL_UART_MspInit+0xb8>)
 800415a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8004164:	f003 fa3a 	bl	80075dc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8004168:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800416c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004170:	2302      	movs	r3, #2
 8004172:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004176:	2300      	movs	r3, #0
 8004178:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417c:	2300      	movs	r3, #0
 800417e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004182:	2308      	movs	r3, #8
 8004184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004188:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800418c:	4619      	mov	r1, r3
 800418e:	4805      	ldr	r0, [pc, #20]	@ (80041a4 <HAL_UART_MspInit+0xbc>)
 8004190:	f002 feea 	bl	8006f68 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8004194:	bf00      	nop
 8004196:	37b8      	adds	r7, #184	@ 0xb8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40008000 	.word	0x40008000
 80041a0:	40021000 	.word	0x40021000
 80041a4:	42021800 	.word	0x42021800

080041a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b0a8      	sub	sp, #160	@ 0xa0
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041b0:	f107 030c 	add.w	r3, r7, #12
 80041b4:	2294      	movs	r2, #148	@ 0x94
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f007 fa85 	bl	800b6c8 <memset>
  if(hrtc->Instance==RTC)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a16      	ldr	r2, [pc, #88]	@ (800421c <HAL_RTC_MspInit+0x74>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d124      	bne.n	8004212 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80041c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041cc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80041ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041d6:	f107 030c 	add.w	r3, r7, #12
 80041da:	4618      	mov	r0, r3
 80041dc:	f004 f9ec 	bl	80085b8 <HAL_RCCEx_PeriphCLKConfig>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80041e6:	f7ff fe92 	bl	8003f0e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80041ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004220 <HAL_RTC_MspInit+0x78>)
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f0:	4a0b      	ldr	r2, [pc, #44]	@ (8004220 <HAL_RTC_MspInit+0x78>)
 80041f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80041fa:	4b09      	ldr	r3, [pc, #36]	@ (8004220 <HAL_RTC_MspInit+0x78>)
 80041fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fe:	4a08      	ldr	r2, [pc, #32]	@ (8004220 <HAL_RTC_MspInit+0x78>)
 8004200:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004204:	6593      	str	r3, [r2, #88]	@ 0x58
 8004206:	4b06      	ldr	r3, [pc, #24]	@ (8004220 <HAL_RTC_MspInit+0x78>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8004212:	bf00      	nop
 8004214:	37a0      	adds	r7, #160	@ 0xa0
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40002800 	.word	0x40002800
 8004220:	40021000 	.word	0x40021000

08004224 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a13      	ldr	r2, [pc, #76]	@ (8004280 <HAL_TIM_Base_MspInit+0x5c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d10c      	bne.n	8004250 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004236:	4b13      	ldr	r3, [pc, #76]	@ (8004284 <HAL_TIM_Base_MspInit+0x60>)
 8004238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423a:	4a12      	ldr	r2, [pc, #72]	@ (8004284 <HAL_TIM_Base_MspInit+0x60>)
 800423c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004240:	6613      	str	r3, [r2, #96]	@ 0x60
 8004242:	4b10      	ldr	r3, [pc, #64]	@ (8004284 <HAL_TIM_Base_MspInit+0x60>)
 8004244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004246:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800424e:	e010      	b.n	8004272 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004258:	d10b      	bne.n	8004272 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800425a:	4b0a      	ldr	r3, [pc, #40]	@ (8004284 <HAL_TIM_Base_MspInit+0x60>)
 800425c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425e:	4a09      	ldr	r2, [pc, #36]	@ (8004284 <HAL_TIM_Base_MspInit+0x60>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	6593      	str	r3, [r2, #88]	@ 0x58
 8004266:	4b07      	ldr	r3, [pc, #28]	@ (8004284 <HAL_TIM_Base_MspInit+0x60>)
 8004268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	68bb      	ldr	r3, [r7, #8]
}
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40021000 	.word	0x40021000

08004288 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	@ 0x28
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a22      	ldr	r2, [pc, #136]	@ (8004330 <HAL_TIM_MspPostInit+0xa8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d11d      	bne.n	80042e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042aa:	4b22      	ldr	r3, [pc, #136]	@ (8004334 <HAL_TIM_MspPostInit+0xac>)
 80042ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ae:	4a21      	ldr	r2, [pc, #132]	@ (8004334 <HAL_TIM_MspPostInit+0xac>)
 80042b0:	f043 0310 	orr.w	r3, r3, #16
 80042b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004334 <HAL_TIM_MspPostInit+0xac>)
 80042b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ba:	f003 0310 	and.w	r3, r3, #16
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80042c2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80042c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c8:	2302      	movs	r3, #2
 80042ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d0:	2300      	movs	r3, #0
 80042d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042d4:	2301      	movs	r3, #1
 80042d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042d8:	f107 0314 	add.w	r3, r7, #20
 80042dc:	4619      	mov	r1, r3
 80042de:	4816      	ldr	r0, [pc, #88]	@ (8004338 <HAL_TIM_MspPostInit+0xb0>)
 80042e0:	f002 fe42 	bl	8006f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80042e4:	e020      	b.n	8004328 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM2)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ee:	d11b      	bne.n	8004328 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042f0:	4b10      	ldr	r3, [pc, #64]	@ (8004334 <HAL_TIM_MspPostInit+0xac>)
 80042f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f4:	4a0f      	ldr	r2, [pc, #60]	@ (8004334 <HAL_TIM_MspPostInit+0xac>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004334 <HAL_TIM_MspPostInit+0xac>)
 80042fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004308:	2303      	movs	r3, #3
 800430a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430c:	2302      	movs	r3, #2
 800430e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004310:	2300      	movs	r3, #0
 8004312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004314:	2300      	movs	r3, #0
 8004316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004318:	2301      	movs	r3, #1
 800431a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800431c:	f107 0314 	add.w	r3, r7, #20
 8004320:	4619      	mov	r1, r3
 8004322:	4806      	ldr	r0, [pc, #24]	@ (800433c <HAL_TIM_MspPostInit+0xb4>)
 8004324:	f002 fe20 	bl	8006f68 <HAL_GPIO_Init>
}
 8004328:	bf00      	nop
 800432a:	3728      	adds	r7, #40	@ 0x28
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40021000 	.word	0x40021000
 8004338:	42021000 	.word	0x42021000
 800433c:	42020000 	.word	0x42020000

08004340 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b0ae      	sub	sp, #184	@ 0xb8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004348:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	605a      	str	r2, [r3, #4]
 8004352:	609a      	str	r2, [r3, #8]
 8004354:	60da      	str	r2, [r3, #12]
 8004356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004358:	f107 0310 	add.w	r3, r7, #16
 800435c:	2294      	movs	r2, #148	@ 0x94
 800435e:	2100      	movs	r1, #0
 8004360:	4618      	mov	r0, r3
 8004362:	f007 f9b1 	bl	800b6c8 <memset>
  if(hpcd->Instance==USB)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a22      	ldr	r2, [pc, #136]	@ (80043f4 <HAL_PCD_MspInit+0xb4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d13d      	bne.n	80043ec <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004370:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004374:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8004376:	2300      	movs	r3, #0
 8004378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800437c:	f107 0310 	add.w	r3, r7, #16
 8004380:	4618      	mov	r0, r3
 8004382:	f004 f919 	bl	80085b8 <HAL_RCCEx_PeriphCLKConfig>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800438c:	f7ff fdbf 	bl	8003f0e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004390:	4b19      	ldr	r3, [pc, #100]	@ (80043f8 <HAL_PCD_MspInit+0xb8>)
 8004392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004394:	4a18      	ldr	r2, [pc, #96]	@ (80043f8 <HAL_PCD_MspInit+0xb8>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800439c:	4b16      	ldr	r3, [pc, #88]	@ (80043f8 <HAL_PCD_MspInit+0xb8>)
 800439e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	60fb      	str	r3, [r7, #12]
 80043a6:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80043a8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80043ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b0:	2302      	movs	r3, #2
 80043b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043bc:	2300      	movs	r3, #0
 80043be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80043c2:	230a      	movs	r3, #10
 80043c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80043cc:	4619      	mov	r1, r3
 80043ce:	480b      	ldr	r0, [pc, #44]	@ (80043fc <HAL_PCD_MspInit+0xbc>)
 80043d0:	f002 fdca 	bl	8006f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80043d4:	4b08      	ldr	r3, [pc, #32]	@ (80043f8 <HAL_PCD_MspInit+0xb8>)
 80043d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d8:	4a07      	ldr	r2, [pc, #28]	@ (80043f8 <HAL_PCD_MspInit+0xb8>)
 80043da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80043de:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80043e0:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <HAL_PCD_MspInit+0xb8>)
 80043e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_MspInit 1 */

  }

}
 80043ec:	bf00      	nop
 80043ee:	37b8      	adds	r7, #184	@ 0xb8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	4000d400 	.word	0x4000d400
 80043f8:	40021000 	.word	0x40021000
 80043fc:	42020000 	.word	0x42020000

08004400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004404:	bf00      	nop
 8004406:	e7fd      	b.n	8004404 <NMI_Handler+0x4>

08004408 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800440c:	bf00      	nop
 800440e:	e7fd      	b.n	800440c <HardFault_Handler+0x4>

08004410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004414:	bf00      	nop
 8004416:	e7fd      	b.n	8004414 <MemManage_Handler+0x4>

08004418 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800441c:	bf00      	nop
 800441e:	e7fd      	b.n	800441c <BusFault_Handler+0x4>

08004420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004424:	bf00      	nop
 8004426:	e7fd      	b.n	8004424 <UsageFault_Handler+0x4>

08004428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800442c:	bf00      	nop
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004436:	b480      	push	{r7}
 8004438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800443a:	bf00      	nop
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004456:	f000 fe2d 	bl	80050b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004464:	4802      	ldr	r0, [pc, #8]	@ (8004470 <FDCAN1_IT0_IRQHandler+0x10>)
 8004466:	f002 fb1f 	bl	8006aa8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800446a:	bf00      	nop
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	200000ec 	.word	0x200000ec

08004474 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	e00a      	b.n	800449c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004486:	f3af 8000 	nop.w
 800448a:	4601      	mov	r1, r0
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	60ba      	str	r2, [r7, #8]
 8004492:	b2ca      	uxtb	r2, r1
 8004494:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	3301      	adds	r3, #1
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	dbf0      	blt.n	8004486 <_read+0x12>
  }

  return len;
 80044a4:	687b      	ldr	r3, [r7, #4]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b086      	sub	sp, #24
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	e009      	b.n	80044d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	60ba      	str	r2, [r7, #8]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fd13 	bl	8003ef4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	3301      	adds	r3, #1
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	429a      	cmp	r2, r3
 80044da:	dbf1      	blt.n	80044c0 <_write+0x12>
  }
  return len;
 80044dc:	687b      	ldr	r3, [r7, #4]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <_close>:

int _close(int file)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800450e:	605a      	str	r2, [r3, #4]
  return 0;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <_isatty>:

int _isatty(int file)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004526:	2301      	movs	r3, #1
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
	...

08004550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004558:	4a14      	ldr	r2, [pc, #80]	@ (80045ac <_sbrk+0x5c>)
 800455a:	4b15      	ldr	r3, [pc, #84]	@ (80045b0 <_sbrk+0x60>)
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004564:	4b13      	ldr	r3, [pc, #76]	@ (80045b4 <_sbrk+0x64>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d102      	bne.n	8004572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800456c:	4b11      	ldr	r3, [pc, #68]	@ (80045b4 <_sbrk+0x64>)
 800456e:	4a12      	ldr	r2, [pc, #72]	@ (80045b8 <_sbrk+0x68>)
 8004570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004572:	4b10      	ldr	r3, [pc, #64]	@ (80045b4 <_sbrk+0x64>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4413      	add	r3, r2
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	429a      	cmp	r2, r3
 800457e:	d207      	bcs.n	8004590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004580:	f007 f910 	bl	800b7a4 <__errno>
 8004584:	4603      	mov	r3, r0
 8004586:	220c      	movs	r2, #12
 8004588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800458a:	f04f 33ff 	mov.w	r3, #4294967295
 800458e:	e009      	b.n	80045a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004590:	4b08      	ldr	r3, [pc, #32]	@ (80045b4 <_sbrk+0x64>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004596:	4b07      	ldr	r3, [pc, #28]	@ (80045b4 <_sbrk+0x64>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4413      	add	r3, r2
 800459e:	4a05      	ldr	r2, [pc, #20]	@ (80045b4 <_sbrk+0x64>)
 80045a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045a2:	68fb      	ldr	r3, [r7, #12]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20030000 	.word	0x20030000
 80045b0:	00000400 	.word	0x00000400
 80045b4:	20000a00 	.word	0x20000a00
 80045b8:	20000b58 	.word	0x20000b58

080045bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80045c0:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <SystemInit+0x20>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c6:	4a05      	ldr	r2, [pc, #20]	@ (80045dc <SystemInit+0x20>)
 80045c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80045d0:	bf00      	nop
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	e000ed00 	.word	0xe000ed00

080045e0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80045e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004724 <SystemCoreClockUpdate+0x144>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d107      	bne.n	8004602 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80045f2:	4b4c      	ldr	r3, [pc, #304]	@ (8004724 <SystemCoreClockUpdate+0x144>)
 80045f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045f8:	0a1b      	lsrs	r3, r3, #8
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	e005      	b.n	800460e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8004602:	4b48      	ldr	r3, [pc, #288]	@ (8004724 <SystemCoreClockUpdate+0x144>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	091b      	lsrs	r3, r3, #4
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800460e:	4a46      	ldr	r2, [pc, #280]	@ (8004728 <SystemCoreClockUpdate+0x148>)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004616:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004618:	4b42      	ldr	r3, [pc, #264]	@ (8004724 <SystemCoreClockUpdate+0x144>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 030c 	and.w	r3, r3, #12
 8004620:	2b0c      	cmp	r3, #12
 8004622:	d866      	bhi.n	80046f2 <SystemCoreClockUpdate+0x112>
 8004624:	a201      	add	r2, pc, #4	@ (adr r2, 800462c <SystemCoreClockUpdate+0x4c>)
 8004626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462a:	bf00      	nop
 800462c:	08004661 	.word	0x08004661
 8004630:	080046f3 	.word	0x080046f3
 8004634:	080046f3 	.word	0x080046f3
 8004638:	080046f3 	.word	0x080046f3
 800463c:	08004669 	.word	0x08004669
 8004640:	080046f3 	.word	0x080046f3
 8004644:	080046f3 	.word	0x080046f3
 8004648:	080046f3 	.word	0x080046f3
 800464c:	08004671 	.word	0x08004671
 8004650:	080046f3 	.word	0x080046f3
 8004654:	080046f3 	.word	0x080046f3
 8004658:	080046f3 	.word	0x080046f3
 800465c:	08004679 	.word	0x08004679
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8004660:	4a32      	ldr	r2, [pc, #200]	@ (800472c <SystemCoreClockUpdate+0x14c>)
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	6013      	str	r3, [r2, #0]
      break;
 8004666:	e048      	b.n	80046fa <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004668:	4b30      	ldr	r3, [pc, #192]	@ (800472c <SystemCoreClockUpdate+0x14c>)
 800466a:	4a31      	ldr	r2, [pc, #196]	@ (8004730 <SystemCoreClockUpdate+0x150>)
 800466c:	601a      	str	r2, [r3, #0]
      break;
 800466e:	e044      	b.n	80046fa <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004670:	4b2e      	ldr	r3, [pc, #184]	@ (800472c <SystemCoreClockUpdate+0x14c>)
 8004672:	4a30      	ldr	r2, [pc, #192]	@ (8004734 <SystemCoreClockUpdate+0x154>)
 8004674:	601a      	str	r2, [r3, #0]
      break;
 8004676:	e040      	b.n	80046fa <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004678:	4b2a      	ldr	r3, [pc, #168]	@ (8004724 <SystemCoreClockUpdate+0x144>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8004682:	4b28      	ldr	r3, [pc, #160]	@ (8004724 <SystemCoreClockUpdate+0x144>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	091b      	lsrs	r3, r3, #4
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	3301      	adds	r3, #1
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d003      	beq.n	800469e <SystemCoreClockUpdate+0xbe>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d006      	beq.n	80046aa <SystemCoreClockUpdate+0xca>
 800469c:	e00b      	b.n	80046b6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800469e:	4a24      	ldr	r2, [pc, #144]	@ (8004730 <SystemCoreClockUpdate+0x150>)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a6:	613b      	str	r3, [r7, #16]
          break;
 80046a8:	e00b      	b.n	80046c2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80046aa:	4a22      	ldr	r2, [pc, #136]	@ (8004734 <SystemCoreClockUpdate+0x154>)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	613b      	str	r3, [r7, #16]
          break;
 80046b4:	e005      	b.n	80046c2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80046be:	613b      	str	r3, [r7, #16]
          break;
 80046c0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80046c2:	4b18      	ldr	r3, [pc, #96]	@ (8004724 <SystemCoreClockUpdate+0x144>)
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	0a1b      	lsrs	r3, r3, #8
 80046c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80046d4:	4b13      	ldr	r3, [pc, #76]	@ (8004724 <SystemCoreClockUpdate+0x144>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	0e5b      	lsrs	r3, r3, #25
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	3301      	adds	r3, #1
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ec:	4a0f      	ldr	r2, [pc, #60]	@ (800472c <SystemCoreClockUpdate+0x14c>)
 80046ee:	6013      	str	r3, [r2, #0]
      break;
 80046f0:	e003      	b.n	80046fa <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80046f2:	4a0e      	ldr	r2, [pc, #56]	@ (800472c <SystemCoreClockUpdate+0x14c>)
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	6013      	str	r3, [r2, #0]
      break;
 80046f8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80046fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004724 <SystemCoreClockUpdate+0x144>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	091b      	lsrs	r3, r3, #4
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	4a0c      	ldr	r2, [pc, #48]	@ (8004738 <SystemCoreClockUpdate+0x158>)
 8004706:	5cd3      	ldrb	r3, [r2, r3]
 8004708:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800470a:	4b08      	ldr	r3, [pc, #32]	@ (800472c <SystemCoreClockUpdate+0x14c>)
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	fa22 f303 	lsr.w	r3, r2, r3
 8004714:	4a05      	ldr	r2, [pc, #20]	@ (800472c <SystemCoreClockUpdate+0x14c>)
 8004716:	6013      	str	r3, [r2, #0]
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40021000 	.word	0x40021000
 8004728:	0800c490 	.word	0x0800c490
 800472c:	20000000 	.word	0x20000000
 8004730:	00f42400 	.word	0x00f42400
 8004734:	007a1200 	.word	0x007a1200
 8004738:	0800c478 	.word	0x0800c478

0800473c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800473c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004774 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004740:	f7ff ff3c 	bl	80045bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004744:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004746:	e003      	b.n	8004750 <LoopCopyDataInit>

08004748 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004748:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800474a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800474c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800474e:	3104      	adds	r1, #4

08004750 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004750:	480a      	ldr	r0, [pc, #40]	@ (800477c <LoopForever+0xa>)
	ldr	r3, =_edata
 8004752:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004754:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004756:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004758:	d3f6      	bcc.n	8004748 <CopyDataInit>
	ldr	r2, =_sbss
 800475a:	4a0a      	ldr	r2, [pc, #40]	@ (8004784 <LoopForever+0x12>)
	b	LoopFillZerobss
 800475c:	e002      	b.n	8004764 <LoopFillZerobss>

0800475e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800475e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004760:	f842 3b04 	str.w	r3, [r2], #4

08004764 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004764:	4b08      	ldr	r3, [pc, #32]	@ (8004788 <LoopForever+0x16>)
	cmp	r2, r3
 8004766:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004768:	d3f9      	bcc.n	800475e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800476a:	f007 f821 	bl	800b7b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800476e:	f7fe fef7 	bl	8003560 <main>

08004772 <LoopForever>:

LoopForever:
    b LoopForever
 8004772:	e7fe      	b.n	8004772 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8004774:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8004778:	0800c54c 	.word	0x0800c54c
	ldr	r0, =_sdata
 800477c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004780:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8004784:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8004788:	20000b54 	.word	0x20000b54

0800478c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800478c:	e7fe      	b.n	800478c <ADC1_2_IRQHandler>

0800478e <_ardupilot_indication_NotifyState_decode>:
}

/*
 decode ardupilot_indication_NotifyState, return true on failure, false on success
*/
bool _ardupilot_indication_NotifyState_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct ardupilot_indication_NotifyState* msg, bool tao) {
 800478e:	b580      	push	{r7, lr}
 8004790:	b088      	sub	sp, #32
 8004792:	af02      	add	r7, sp, #8
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	607a      	str	r2, [r7, #4]
 800479a:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data_type);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	6819      	ldr	r1, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	2300      	movs	r3, #0
 80047a6:	2208      	movs	r2, #8
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f7fc fec7 	bl	800153c <canardDecodeScalar>

    *bit_ofs += 8;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f103 0208 	add.w	r2, r3, #8
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data.len);
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	6819      	ldr	r1, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3301      	adds	r3, #1
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	2300      	movs	r3, #0
 80047c6:	2208      	movs	r2, #8
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f7fc feb7 	bl	800153c <canardDecodeScalar>
    *bit_ofs += 8;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f103 0208 	add.w	r2, r3, #8
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	601a      	str	r2, [r3, #0]
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->aux_data.len > 255) {
        return true; /* invalid value */
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->aux_data.len; i++) {
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e014      	b.n	800480a <_ardupilot_indication_NotifyState_decode+0x7c>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data.data[i]);
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	4413      	add	r3, r2
 80047ea:	3302      	adds	r3, #2
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	2300      	movs	r3, #0
 80047f0:	2208      	movs	r2, #8
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7fc fea2 	bl	800153c <canardDecodeScalar>

        *bit_ofs += 8;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f103 0208 	add.w	r2, r3, #8
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->aux_data.len; i++) {
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	3301      	adds	r3, #1
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	785b      	ldrb	r3, [r3, #1]
 800480e:	461a      	mov	r2, r3
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	4293      	cmp	r3, r2
 8004814:	d3e4      	bcc.n	80047e0 <_ardupilot_indication_NotifyState_decode+0x52>





    canardDecodeScalar(transfer, *bit_ofs, 64, false, &msg->vehicle_state);
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	6819      	ldr	r1, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	2300      	movs	r3, #0
 8004824:	2240      	movs	r2, #64	@ 0x40
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f7fc fe88 	bl	800153c <canardDecodeScalar>

    *bit_ofs += 64;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8004838:	2300      	movs	r3, #0

}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <ardupilot_indication_NotifyState_decode>:
}

/*
  return true if the decode is invalid
 */
bool ardupilot_indication_NotifyState_decode(const CanardRxTransfer* transfer, struct ardupilot_indication_NotifyState* msg) {
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > ARDUPILOT_INDICATION_NOTIFYSTATE_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	60bb      	str	r3, [r7, #8]
    if (_ardupilot_indication_NotifyState_decode(transfer, &bit_ofs, msg,
 8004850:	f107 0108 	add.w	r1, r7, #8
 8004854:	2301      	movs	r3, #1
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff ff98 	bl	800478e <_ardupilot_indication_NotifyState_decode>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <ardupilot_indication_NotifyState_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8004864:	2301      	movs	r3, #1
 8004866:	e00c      	b.n	8004882 <ardupilot_indication_NotifyState_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	3307      	adds	r3, #7
 800486c:	08db      	lsrs	r3, r3, #3
 800486e:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8a9b      	ldrh	r3, [r3, #20]
 8004874:	461a      	mov	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4293      	cmp	r3, r2
 800487a:	bf14      	ite	ne
 800487c:	2301      	movne	r3, #1
 800487e:	2300      	moveq	r3, #0
 8004880:	b2db      	uxtb	r3, r3
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <_uavcan_equipment_actuator_Command_decode>:
}

/*
 decode uavcan_equipment_actuator_Command, return true on failure, false on success
*/
bool _uavcan_equipment_actuator_Command_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_Command* msg, bool tao) {
 800488a:	b580      	push	{r7, lr}
 800488c:	b088      	sub	sp, #32
 800488e:	af02      	add	r7, sp, #8
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->actuator_id);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	6819      	ldr	r1, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	2300      	movs	r3, #0
 80048a2:	2208      	movs	r2, #8
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f7fc fe49 	bl	800153c <canardDecodeScalar>

    *bit_ofs += 8;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f103 0208 	add.w	r2, r3, #8
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->command_type);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6819      	ldr	r1, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3301      	adds	r3, #1
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	2300      	movs	r3, #0
 80048c2:	2208      	movs	r2, #8
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f7fc fe39 	bl	800153c <canardDecodeScalar>

    *bit_ofs += 8;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f103 0208 	add.w	r2, r3, #8
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	601a      	str	r2, [r3, #0]



    {
        uint16_t float16_val;
        canardDecodeScalar(transfer, *bit_ofs, 16, true, &float16_val);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6819      	ldr	r1, [r3, #0]
 80048da:	f107 0316 	add.w	r3, r7, #22
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	2301      	movs	r3, #1
 80048e2:	2210      	movs	r2, #16
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7fc fe29 	bl	800153c <canardDecodeScalar>
        msg->command_value = canardConvertFloat16ToNativeFloat(float16_val);
 80048ea:	8afb      	ldrh	r3, [r7, #22]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fd f8ab 	bl	8001a48 <canardConvertFloat16ToNativeFloat>
 80048f2:	eef0 7a40 	vmov.f32	s15, s0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	edc3 7a01 	vstr	s15, [r3, #4]
    }

    *bit_ofs += 16;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f103 0210 	add.w	r2, r3, #16
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8004908:	2300      	movs	r3, #0

}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <_uavcan_equipment_actuator_ArrayCommand_decode>:
}

/*
 decode uavcan_equipment_actuator_ArrayCommand, return true on failure, false on success
*/
bool _uavcan_equipment_actuator_ArrayCommand_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_ArrayCommand* msg, bool tao) {
 8004912:	b580      	push	{r7, lr}
 8004914:	b088      	sub	sp, #32
 8004916:	af02      	add	r7, sp, #8
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	70fb      	strb	r3, [r7, #3]





    if (!tao) {
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	f083 0301 	eor.w	r3, r3, #1
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00d      	beq.n	8004948 <_uavcan_equipment_actuator_ArrayCommand_decode+0x36>


        canardDecodeScalar(transfer, *bit_ofs, 4, false, &msg->commands.len);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	2300      	movs	r3, #0
 8004936:	2204      	movs	r2, #4
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f7fc fdff 	bl	800153c <canardDecodeScalar>
        *bit_ofs += 4;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	1d1a      	adds	r2, r3, #4
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	601a      	str	r2, [r3, #0]





    if (tao) {
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d022      	beq.n	8004994 <_uavcan_equipment_actuator_ArrayCommand_decode+0x82>

        msg->commands.len = 0;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]
        while ((transfer->payload_len*8) > *bit_ofs) {
 8004954:	e015      	b.n	8004982 <_uavcan_equipment_actuator_ArrayCommand_decode+0x70>

            if (_uavcan_equipment_actuator_Command_decode(transfer, bit_ofs, &msg->commands.data[msg->commands.len], false)) {return true;}
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	4413      	add	r3, r2
 8004960:	1d1a      	adds	r2, r3, #4
 8004962:	2300      	movs	r3, #0
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff ff8f 	bl	800488a <_uavcan_equipment_actuator_Command_decode>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <_uavcan_equipment_actuator_ArrayCommand_decode+0x64>
 8004972:	2301      	movs	r3, #1
 8004974:	e030      	b.n	80049d8 <_uavcan_equipment_actuator_ArrayCommand_decode+0xc6>
            msg->commands.len++;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	3301      	adds	r3, #1
 800497c:	b2da      	uxtb	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	701a      	strb	r2, [r3, #0]
        while ((transfer->payload_len*8) > *bit_ofs) {
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8a9b      	ldrh	r3, [r3, #20]
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	461a      	mov	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d8e1      	bhi.n	8004956 <_uavcan_equipment_actuator_ArrayCommand_decode+0x44>
 8004992:	e020      	b.n	80049d6 <_uavcan_equipment_actuator_ArrayCommand_decode+0xc4>



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
        if (msg->commands.len > 15) {
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b0f      	cmp	r3, #15
 800499a:	d901      	bls.n	80049a0 <_uavcan_equipment_actuator_ArrayCommand_decode+0x8e>
            return true; /* invalid value */
 800499c:	2301      	movs	r3, #1
 800499e:	e01b      	b.n	80049d8 <_uavcan_equipment_actuator_ArrayCommand_decode+0xc6>
        }
#pragma GCC diagnostic pop
        for (size_t i=0; i < msg->commands.len; i++) {
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	e011      	b.n	80049ca <_uavcan_equipment_actuator_ArrayCommand_decode+0xb8>



            if (_uavcan_equipment_actuator_Command_decode(transfer, bit_ofs, &msg->commands.data[i], false)) {return true;}
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4413      	add	r3, r2
 80049ae:	1d1a      	adds	r2, r3, #4
 80049b0:	2300      	movs	r3, #0
 80049b2:	68b9      	ldr	r1, [r7, #8]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff ff68 	bl	800488a <_uavcan_equipment_actuator_Command_decode>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <_uavcan_equipment_actuator_ArrayCommand_decode+0xb2>
 80049c0:	2301      	movs	r3, #1
 80049c2:	e009      	b.n	80049d8 <_uavcan_equipment_actuator_ArrayCommand_decode+0xc6>
        for (size_t i=0; i < msg->commands.len; i++) {
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	3301      	adds	r3, #1
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d3e7      	bcc.n	80049a6 <_uavcan_equipment_actuator_ArrayCommand_decode+0x94>





    return false; /* success */
 80049d6:	2300      	movs	r3, #0

}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <uavcan_equipment_actuator_ArrayCommand_decode>:
}

/*
  return true if the decode is invalid
 */
bool uavcan_equipment_actuator_ArrayCommand_decode(const CanardRxTransfer* transfer, struct uavcan_equipment_actuator_ArrayCommand* msg) {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]
    if (_uavcan_equipment_actuator_ArrayCommand_decode(transfer, &bit_ofs, msg,
 80049ee:	f107 0108 	add.w	r1, r7, #8
 80049f2:	2301      	movs	r3, #1
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff ff8b 	bl	8004912 <_uavcan_equipment_actuator_ArrayCommand_decode>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <uavcan_equipment_actuator_ArrayCommand_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8004a02:	2301      	movs	r3, #1
 8004a04:	e00c      	b.n	8004a20 <uavcan_equipment_actuator_ArrayCommand_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	3307      	adds	r3, #7
 8004a0a:	08db      	lsrs	r3, r3, #3
 8004a0c:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	8a9b      	ldrh	r3, [r3, #20]
 8004a12:	461a      	mov	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4293      	cmp	r3, r2
 8004a18:	bf14      	ite	ne
 8004a1a:	2301      	movne	r3, #1
 8004a1c:	2300      	moveq	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <_uavcan_equipment_actuator_Status_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_equipment_actuator_Status_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_Status* msg, bool tao);
static inline bool _uavcan_equipment_actuator_Status_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_Status* msg, bool tao);
void _uavcan_equipment_actuator_Status_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_Status* msg, bool tao) {
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->actuator_id);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	6819      	ldr	r1, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f7fc ff05 	bl	800184e <canardEncodeScalar>

    *bit_ofs += 8;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f103 0208 	add.w	r2, r3, #8
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	601a      	str	r2, [r3, #0]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->position);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a56:	eeb0 0a67 	vmov.f32	s0, s15
 8004a5a:	f7fc ff9f 	bl	800199c <canardConvertNativeFloatToFloat16>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	82fb      	strh	r3, [r7, #22]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	6819      	ldr	r1, [r3, #0]
 8004a66:	f107 0316 	add.w	r3, r7, #22
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7fc feee 	bl	800184e <canardEncodeScalar>
    }

    *bit_ofs += 16;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f103 0210 	add.w	r2, r3, #16
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	601a      	str	r2, [r3, #0]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->force);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a84:	eeb0 0a67 	vmov.f32	s0, s15
 8004a88:	f7fc ff88 	bl	800199c <canardConvertNativeFloatToFloat16>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	82bb      	strh	r3, [r7, #20]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	6819      	ldr	r1, [r3, #0]
 8004a94:	f107 0314 	add.w	r3, r7, #20
 8004a98:	2210      	movs	r2, #16
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f7fc fed7 	bl	800184e <canardEncodeScalar>
    }

    *bit_ofs += 16;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f103 0210 	add.w	r2, r3, #16
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	601a      	str	r2, [r3, #0]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->speed);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ab6:	f7fc ff71 	bl	800199c <canardConvertNativeFloatToFloat16>
 8004aba:	4603      	mov	r3, r0
 8004abc:	827b      	strh	r3, [r7, #18]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	f107 0312 	add.w	r3, r7, #18
 8004ac6:	2210      	movs	r2, #16
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7fc fec0 	bl	800184e <canardEncodeScalar>
    }

    *bit_ofs += 16;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f103 0210 	add.w	r2, r3, #16
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	601a      	str	r2, [r3, #0]





    *bit_ofs += 1;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 7, &msg->power_rating_pct);
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6819      	ldr	r1, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3310      	adds	r3, #16
 8004aec:	2207      	movs	r2, #7
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f7fc fead 	bl	800184e <canardEncodeScalar>

    *bit_ofs += 7;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	1dda      	adds	r2, r3, #7
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	601a      	str	r2, [r3, #0]





}
 8004afe:	bf00      	nop
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <uavcan_equipment_actuator_Status_encode>:

uint32_t uavcan_equipment_actuator_Status_encode(struct uavcan_equipment_actuator_Status* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_EQUIPMENT_ACTUATOR_STATUS_MAX_SIZE);
 8004b14:	2208      	movs	r2, #8
 8004b16:	2100      	movs	r1, #0
 8004b18:	6838      	ldr	r0, [r7, #0]
 8004b1a:	f006 fdd5 	bl	800b6c8 <memset>
    _uavcan_equipment_actuator_Status_encode(buffer, &bit_ofs, msg, 
 8004b1e:	f107 010c 	add.w	r1, r7, #12
 8004b22:	2301      	movs	r3, #1
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6838      	ldr	r0, [r7, #0]
 8004b28:	f7ff ff7e 	bl	8004a28 <_uavcan_equipment_actuator_Status_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3307      	adds	r3, #7
 8004b30:	08db      	lsrs	r3, r3, #3
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <_uavcan_protocol_HardwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_HardwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao) {
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b088      	sub	sp, #32
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	607a      	str	r2, [r7, #4]
 8004b46:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	6819      	ldr	r1, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2208      	movs	r2, #8
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f7fc fe7c 	bl	800184e <canardEncodeScalar>

    *bit_ofs += 8;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f103 0208 	add.w	r2, r3, #8
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	6819      	ldr	r1, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	2208      	movs	r2, #8
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f7fc fe6e 	bl	800184e <canardEncodeScalar>

    *bit_ofs += 8;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f103 0208 	add.w	r2, r3, #8
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	601a      	str	r2, [r3, #0]





    for (size_t i=0; i < 16; i++) {
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	e012      	b.n	8004baa <_uavcan_protocol_HardwareVersion_encode+0x70>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->unique_id[i]);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	6819      	ldr	r1, [r3, #0]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3302      	adds	r3, #2
 8004b90:	2208      	movs	r2, #8
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f7fc fe5b 	bl	800184e <canardEncodeScalar>

        *bit_ofs += 8;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f103 0208 	add.w	r2, r3, #8
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < 16; i++) {
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	61fb      	str	r3, [r7, #28]
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	2b0f      	cmp	r3, #15
 8004bae:	d9e9      	bls.n	8004b84 <_uavcan_protocol_HardwareVersion_encode+0x4a>





    if (!tao) {
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	f083 0301 	eor.w	r3, r3, #1
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00d      	beq.n	8004bd8 <_uavcan_protocol_HardwareVersion_encode+0x9e>


        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.len);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	6819      	ldr	r1, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3312      	adds	r3, #18
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f7fc fe41 	bl	800184e <canardEncodeScalar>
        *bit_ofs += 8;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f103 0208 	add.w	r2, r3, #8
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t certificate_of_authenticity_len = msg->certificate_of_authenticity.len > 255 ? 255 : msg->certificate_of_authenticity.len;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	7c9b      	ldrb	r3, [r3, #18]
 8004bdc:	617b      	str	r3, [r7, #20]
#pragma GCC diagnostic pop
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 8004bde:	2300      	movs	r3, #0
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	e013      	b.n	8004c0c <_uavcan_protocol_HardwareVersion_encode+0xd2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.data[i]);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	6819      	ldr	r1, [r3, #0]
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	3310      	adds	r3, #16
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	4413      	add	r3, r2
 8004bf0:	3303      	adds	r3, #3
 8004bf2:	2208      	movs	r2, #8
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f7fc fe2a 	bl	800184e <canardEncodeScalar>

        *bit_ofs += 8;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f103 0208 	add.w	r2, r3, #8
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	61bb      	str	r3, [r7, #24]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d3e7      	bcc.n	8004be4 <_uavcan_protocol_HardwareVersion_encode+0xaa>





}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	3720      	adds	r7, #32
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
 8004c2a:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	6819      	ldr	r1, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f7fc fe0a 	bl	800184e <canardEncodeScalar>

    *bit_ofs += 32;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f103 0220 	add.w	r2, r3, #32
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	6819      	ldr	r1, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	2202      	movs	r2, #2
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f7fc fdfc 	bl	800184e <canardEncodeScalar>

    *bit_ofs += 2;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	1c9a      	adds	r2, r3, #2
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	6819      	ldr	r1, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3305      	adds	r3, #5
 8004c68:	2203      	movs	r2, #3
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7fc fdef 	bl	800184e <canardEncodeScalar>

    *bit_ofs += 3;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	1cda      	adds	r2, r3, #3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	6819      	ldr	r1, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3306      	adds	r3, #6
 8004c82:	2203      	movs	r2, #3
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f7fc fde2 	bl	800184e <canardEncodeScalar>

    *bit_ofs += 3;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	1cda      	adds	r2, r3, #3
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	6819      	ldr	r1, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	2210      	movs	r2, #16
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f7fc fdd5 	bl	800184e <canardEncodeScalar>

    *bit_ofs += 16;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f103 0210 	add.w	r2, r3, #16
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	601a      	str	r2, [r3, #0]





}
 8004cb0:	bf00      	nop
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <_uavcan_protocol_SoftwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_SoftwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6819      	ldr	r1, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2208      	movs	r2, #8
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f7fc fdbd 	bl	800184e <canardEncodeScalar>

    *bit_ofs += 8;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f103 0208 	add.w	r2, r3, #8
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6819      	ldr	r1, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	2208      	movs	r2, #8
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f7fc fdaf 	bl	800184e <canardEncodeScalar>

    *bit_ofs += 8;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f103 0208 	add.w	r2, r3, #8
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->optional_field_flags);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	6819      	ldr	r1, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3302      	adds	r3, #2
 8004d04:	2208      	movs	r2, #8
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f7fc fda1 	bl	800184e <canardEncodeScalar>

    *bit_ofs += 8;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f103 0208 	add.w	r2, r3, #8
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->vcs_commit);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	6819      	ldr	r1, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	2220      	movs	r2, #32
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7fc fd93 	bl	800184e <canardEncodeScalar>

    *bit_ofs += 32;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f103 0220 	add.w	r2, r3, #32
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 64, &msg->image_crc);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	6819      	ldr	r1, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3308      	adds	r3, #8
 8004d3c:	2240      	movs	r2, #64	@ 0x40
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f7fc fd85 	bl	800184e <canardEncodeScalar>

    *bit_ofs += 64;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	601a      	str	r2, [r3, #0]





}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <_uavcan_protocol_GetNodeInfoResponse_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
static inline bool _uavcan_protocol_GetNodeInfoResponse_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	70fb      	strb	r3, [r7, #3]





    _uavcan_protocol_NodeStatus_encode(buffer, bit_ofs, &msg->status, false);
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f7ff ff56 	bl	8004c1e <_uavcan_protocol_NodeStatus_encode>





    _uavcan_protocol_SoftwareVersion_encode(buffer, bit_ofs, &msg->software_version, false);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f103 0210 	add.w	r2, r3, #16
 8004d78:	2300      	movs	r3, #0
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f7ff ff9b 	bl	8004cb8 <_uavcan_protocol_SoftwareVersion_encode>





    _uavcan_protocol_HardwareVersion_encode(buffer, bit_ofs, &msg->hardware_version, false);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f103 0220 	add.w	r2, r3, #32
 8004d88:	2300      	movs	r3, #0
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f7ff fed4 	bl	8004b3a <_uavcan_protocol_HardwareVersion_encode>





    if (!tao) {
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	f083 0301 	eor.w	r3, r3, #1
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00d      	beq.n	8004dba <_uavcan_protocol_GetNodeInfoResponse_encode+0x62>


        canardEncodeScalar(buffer, *bit_ofs, 7, &msg->name.len);
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6819      	ldr	r1, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8004da8:	2207      	movs	r2, #7
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7fc fd4f 	bl	800184e <canardEncodeScalar>
        *bit_ofs += 7;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	1dda      	adds	r2, r3, #7
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t name_len = msg->name.len > 80 ? 80 : msg->name.len;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004dc0:	2b50      	cmp	r3, #80	@ 0x50
 8004dc2:	bf28      	it	cs
 8004dc4:	2350      	movcs	r3, #80	@ 0x50
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	613b      	str	r3, [r7, #16]
#pragma GCC diagnostic pop
    for (size_t i=0; i < name_len; i++) {
 8004dca:	2300      	movs	r3, #0
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	e014      	b.n	8004dfa <_uavcan_protocol_GetNodeInfoResponse_encode+0xa2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->name.data[i]);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	6819      	ldr	r1, [r3, #0]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	3303      	adds	r3, #3
 8004de0:	2208      	movs	r2, #8
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7fc fd33 	bl	800184e <canardEncodeScalar>

        *bit_ofs += 8;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f103 0208 	add.w	r2, r3, #8
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < name_len; i++) {
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	3301      	adds	r3, #1
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d3e6      	bcc.n	8004dd0 <_uavcan_protocol_GetNodeInfoResponse_encode+0x78>





}
 8004e02:	bf00      	nop
 8004e04:	bf00      	nop
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <uavcan_protocol_GetNodeInfoResponse_encode>:

uint32_t uavcan_protocol_GetNodeInfoResponse_encode(struct uavcan_protocol_GetNodeInfoResponse* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE);
 8004e1a:	f240 1279 	movw	r2, #377	@ 0x179
 8004e1e:	2100      	movs	r1, #0
 8004e20:	6838      	ldr	r0, [r7, #0]
 8004e22:	f006 fc51 	bl	800b6c8 <memset>
    _uavcan_protocol_GetNodeInfoResponse_encode(buffer, &bit_ofs, msg, 
 8004e26:	f107 010c 	add.w	r1, r7, #12
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6838      	ldr	r0, [r7, #0]
 8004e30:	f7ff ff92 	bl	8004d58 <_uavcan_protocol_GetNodeInfoResponse_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3307      	adds	r3, #7
 8004e38:	08db      	lsrs	r3, r3, #3
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <_uavcan_protocol_NodeStatus_encode>:
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b084      	sub	sp, #16
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
 8004e4e:	70fb      	strb	r3, [r7, #3]
    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	6819      	ldr	r1, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7fc fcf8 	bl	800184e <canardEncodeScalar>
    *bit_ofs += 32;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f103 0220 	add.w	r2, r3, #32
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	601a      	str	r2, [r3, #0]
    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	6819      	ldr	r1, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3304      	adds	r3, #4
 8004e72:	2202      	movs	r2, #2
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f7fc fcea 	bl	800184e <canardEncodeScalar>
    *bit_ofs += 2;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	1c9a      	adds	r2, r3, #2
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	601a      	str	r2, [r3, #0]
    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	6819      	ldr	r1, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3305      	adds	r3, #5
 8004e8c:	2203      	movs	r2, #3
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f7fc fcdd 	bl	800184e <canardEncodeScalar>
    *bit_ofs += 3;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	1cda      	adds	r2, r3, #3
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	601a      	str	r2, [r3, #0]
    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	6819      	ldr	r1, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3306      	adds	r3, #6
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f7fc fcd0 	bl	800184e <canardEncodeScalar>
    *bit_ofs += 3;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	1cda      	adds	r2, r3, #3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	601a      	str	r2, [r3, #0]
    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	6819      	ldr	r1, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f7fc fcc3 	bl	800184e <canardEncodeScalar>
    *bit_ofs += 16;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f103 0210 	add.w	r2, r3, #16
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	601a      	str	r2, [r3, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <_uavcan_protocol_NodeStatus_decode>:

/*
 decode uavcan_protocol_NodeStatus, return true on failure, false on success
*/
bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 32, false, &msg->uptime_sec);
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	6819      	ldr	r1, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7fc fb20 	bl	800153c <canardDecodeScalar>

    *bit_ofs += 32;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f103 0220 	add.w	r2, r3, #32
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 2, false, &msg->health);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	6819      	ldr	r1, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	2202      	movs	r2, #2
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f7fc fb10 	bl	800153c <canardDecodeScalar>

    *bit_ofs += 2;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	1c9a      	adds	r2, r3, #2
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->mode);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	6819      	ldr	r1, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3305      	adds	r3, #5
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	2300      	movs	r3, #0
 8004f32:	2203      	movs	r2, #3
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7fc fb01 	bl	800153c <canardDecodeScalar>

    *bit_ofs += 3;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	1cda      	adds	r2, r3, #3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->sub_mode);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	6819      	ldr	r1, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3306      	adds	r3, #6
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	2203      	movs	r2, #3
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7fc faf2 	bl	800153c <canardDecodeScalar>

    *bit_ofs += 3;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	1cda      	adds	r2, r3, #3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->vendor_specific_status_code);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	6819      	ldr	r1, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3308      	adds	r3, #8
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	2210      	movs	r2, #16
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7fc fae3 	bl	800153c <canardDecodeScalar>

    *bit_ofs += 16;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f103 0210 	add.w	r2, r3, #16
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8004f82:	2300      	movs	r3, #0

}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <uavcan_protocol_NodeStatus_encode>:

uint32_t uavcan_protocol_NodeStatus_encode(struct uavcan_protocol_NodeStatus* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE);
 8004f9a:	2207      	movs	r2, #7
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	6838      	ldr	r0, [r7, #0]
 8004fa0:	f006 fb92 	bl	800b6c8 <memset>
    _uavcan_protocol_NodeStatus_encode(buffer, &bit_ofs, msg, 
 8004fa4:	f107 010c 	add.w	r1, r7, #12
 8004fa8:	2301      	movs	r3, #1
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6838      	ldr	r0, [r7, #0]
 8004fae:	f7ff ff48 	bl	8004e42 <_uavcan_protocol_NodeStatus_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3307      	adds	r3, #7
 8004fb6:	08db      	lsrs	r3, r3, #3
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <uavcan_protocol_NodeStatus_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_NodeStatus* msg) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_NodeStatus_decode(transfer, &bit_ofs, msg,
 8004fce:	f107 0108 	add.w	r1, r7, #8
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff ff80 	bl	8004edc <_uavcan_protocol_NodeStatus_decode>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <uavcan_protocol_NodeStatus_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e00c      	b.n	8005000 <uavcan_protocol_NodeStatus_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	3307      	adds	r3, #7
 8004fea:	08db      	lsrs	r3, r3, #3
 8004fec:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	8a9b      	ldrh	r3, [r3, #20]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	bf14      	ite	ne
 8004ffa:	2301      	movne	r3, #1
 8004ffc:	2300      	moveq	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8005012:	2004      	movs	r0, #4
 8005014:	f001 f902 	bl	800621c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8005018:	f7ff fae2 	bl	80045e0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800501c:	2000      	movs	r0, #0
 800501e:	f000 f80d 	bl	800503c <HAL_InitTick>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	71fb      	strb	r3, [r7, #7]
 800502c:	e001      	b.n	8005032 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800502e:	f7fe ff75 	bl	8003f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005032:	79fb      	ldrb	r3, [r7, #7]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005048:	4b17      	ldr	r3, [pc, #92]	@ (80050a8 <HAL_InitTick+0x6c>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d023      	beq.n	8005098 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005050:	4b16      	ldr	r3, [pc, #88]	@ (80050ac <HAL_InitTick+0x70>)
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	4b14      	ldr	r3, [pc, #80]	@ (80050a8 <HAL_InitTick+0x6c>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	4619      	mov	r1, r3
 800505a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800505e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005062:	fbb2 f3f3 	udiv	r3, r2, r3
 8005066:	4618      	mov	r0, r3
 8005068:	f001 f90b 	bl	8006282 <HAL_SYSTICK_Config>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10f      	bne.n	8005092 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b07      	cmp	r3, #7
 8005076:	d809      	bhi.n	800508c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005078:	2200      	movs	r2, #0
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	f04f 30ff 	mov.w	r0, #4294967295
 8005080:	f001 f8d7 	bl	8006232 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005084:	4a0a      	ldr	r2, [pc, #40]	@ (80050b0 <HAL_InitTick+0x74>)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	e007      	b.n	800509c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
 8005090:	e004      	b.n	800509c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	73fb      	strb	r3, [r7, #15]
 8005096:	e001      	b.n	800509c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800509c:	7bfb      	ldrb	r3, [r7, #15]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000008 	.word	0x20000008
 80050ac:	20000000 	.word	0x20000000
 80050b0:	20000004 	.word	0x20000004

080050b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80050b8:	4b06      	ldr	r3, [pc, #24]	@ (80050d4 <HAL_IncTick+0x20>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	4b06      	ldr	r3, [pc, #24]	@ (80050d8 <HAL_IncTick+0x24>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4413      	add	r3, r2
 80050c4:	4a04      	ldr	r2, [pc, #16]	@ (80050d8 <HAL_IncTick+0x24>)
 80050c6:	6013      	str	r3, [r2, #0]
}
 80050c8:	bf00      	nop
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	20000008 	.word	0x20000008
 80050d8:	20000a04 	.word	0x20000a04

080050dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  return uwTick;
 80050e0:	4b03      	ldr	r3, [pc, #12]	@ (80050f0 <HAL_GetTick+0x14>)
 80050e2:	681b      	ldr	r3, [r3, #0]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	20000a04 	.word	0x20000a04

080050f4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80050f8:	4b03      	ldr	r3, [pc, #12]	@ (8005108 <HAL_GetUIDw0+0x14>)
 80050fa:	681b      	ldr	r3, [r3, #0]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	0bfa0590 	.word	0x0bfa0590

0800510c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8005110:	4b03      	ldr	r3, [pc, #12]	@ (8005120 <HAL_GetUIDw1+0x14>)
 8005112:	681b      	ldr	r3, [r3, #0]
}
 8005114:	4618      	mov	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	0bfa0594 	.word	0x0bfa0594

08005124 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8005128:	4b03      	ldr	r3, [pc, #12]	@ (8005138 <HAL_GetUIDw2+0x14>)
 800512a:	681b      	ldr	r3, [r3, #0]
}
 800512c:	4618      	mov	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	0bfa0598 	.word	0x0bfa0598

0800513c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	609a      	str	r2, [r3, #8]
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	609a      	str	r2, [r3, #8]
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005198:	4618      	mov	r0, r3
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3360      	adds	r3, #96	@ 0x60
 80051b6:	461a      	mov	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	4b08      	ldr	r3, [pc, #32]	@ (80051e8 <LL_ADC_SetOffset+0x44>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	03fff000 	.word	0x03fff000

080051ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3360      	adds	r3, #96	@ 0x60
 80051fa:	461a      	mov	r2, r3
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4413      	add	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3360      	adds	r3, #96	@ 0x60
 8005228:	461a      	mov	r2, r3
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	431a      	orrs	r2, r3
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	615a      	str	r2, [r3, #20]
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3330      	adds	r3, #48	@ 0x30
 8005284:	461a      	mov	r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	0a1b      	lsrs	r3, r3, #8
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	f003 030c 	and.w	r3, r3, #12
 8005290:	4413      	add	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f003 031f 	and.w	r3, r3, #31
 800529e:	211f      	movs	r1, #31
 80052a0:	fa01 f303 	lsl.w	r3, r1, r3
 80052a4:	43db      	mvns	r3, r3
 80052a6:	401a      	ands	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	0e9b      	lsrs	r3, r3, #26
 80052ac:	f003 011f 	and.w	r1, r3, #31
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f003 031f 	and.w	r3, r3, #31
 80052b6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ba:	431a      	orrs	r2, r3
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3314      	adds	r3, #20
 80052dc:	461a      	mov	r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	0e5b      	lsrs	r3, r3, #25
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	4413      	add	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	0d1b      	lsrs	r3, r3, #20
 80052f4:	f003 031f 	and.w	r3, r3, #31
 80052f8:	2107      	movs	r1, #7
 80052fa:	fa01 f303 	lsl.w	r3, r1, r3
 80052fe:	43db      	mvns	r3, r3
 8005300:	401a      	ands	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	0d1b      	lsrs	r3, r3, #20
 8005306:	f003 031f 	and.w	r3, r3, #31
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	fa01 f303 	lsl.w	r3, r1, r3
 8005310:	431a      	orrs	r2, r3
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005316:	bf00      	nop
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
	...

08005324 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800533c:	43db      	mvns	r3, r3
 800533e:	401a      	ands	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f003 0318 	and.w	r3, r3, #24
 8005346:	4908      	ldr	r1, [pc, #32]	@ (8005368 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005348:	40d9      	lsrs	r1, r3
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	400b      	ands	r3, r1
 800534e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005352:	431a      	orrs	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	0007ffff 	.word	0x0007ffff

0800536c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800537c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6093      	str	r3, [r2, #8]
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053a4:	d101      	bne.n	80053aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80053c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80053cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053f4:	d101      	bne.n	80053fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <LL_ADC_IsEnabled+0x18>
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <LL_ADC_IsEnabled+0x1a>
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b04      	cmp	r3, #4
 8005440:	d101      	bne.n	8005446 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b08      	cmp	r3, #8
 8005466:	d101      	bne.n	800546c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005468:	2301      	movs	r3, #1
 800546a:	e000      	b.n	800546e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800547c:	b590      	push	{r4, r7, lr}
 800547e:	b089      	sub	sp, #36	@ 0x24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e12e      	b.n	80056f4 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d109      	bne.n	80054b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f7fe fd5d 	bl	8003f64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff ff67 	bl	8005390 <LL_ADC_IsDeepPowerDownEnabled>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d004      	beq.n	80054d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff ff4d 	bl	800536c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff ff82 	bl	80053e0 <LL_ADC_IsInternalRegulatorEnabled>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d115      	bne.n	800550e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff ff66 	bl	80053b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80054ec:	4b83      	ldr	r3, [pc, #524]	@ (80056fc <HAL_ADC_Init+0x280>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	099b      	lsrs	r3, r3, #6
 80054f2:	4a83      	ldr	r2, [pc, #524]	@ (8005700 <HAL_ADC_Init+0x284>)
 80054f4:	fba2 2303 	umull	r2, r3, r2, r3
 80054f8:	099b      	lsrs	r3, r3, #6
 80054fa:	3301      	adds	r3, #1
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005500:	e002      	b.n	8005508 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	3b01      	subs	r3, #1
 8005506:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f9      	bne.n	8005502 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff ff64 	bl	80053e0 <LL_ADC_IsInternalRegulatorEnabled>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10d      	bne.n	800553a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005522:	f043 0210 	orr.w	r2, r3, #16
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552e:	f043 0201 	orr.w	r2, r3, #1
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff ff75 	bl	800542e <LL_ADC_REG_IsConversionOngoing>
 8005544:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554a:	f003 0310 	and.w	r3, r3, #16
 800554e:	2b00      	cmp	r3, #0
 8005550:	f040 80c7 	bne.w	80056e2 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	f040 80c3 	bne.w	80056e2 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005560:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005564:	f043 0202 	orr.w	r2, r3, #2
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff ff49 	bl	8005408 <LL_ADC_IsEnabled>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d110      	bne.n	800559e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800557c:	4861      	ldr	r0, [pc, #388]	@ (8005704 <HAL_ADC_Init+0x288>)
 800557e:	f7ff ff43 	bl	8005408 <LL_ADC_IsEnabled>
 8005582:	4604      	mov	r4, r0
 8005584:	4860      	ldr	r0, [pc, #384]	@ (8005708 <HAL_ADC_Init+0x28c>)
 8005586:	f7ff ff3f 	bl	8005408 <LL_ADC_IsEnabled>
 800558a:	4603      	mov	r3, r0
 800558c:	4323      	orrs	r3, r4
 800558e:	2b00      	cmp	r3, #0
 8005590:	d105      	bne.n	800559e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	4619      	mov	r1, r3
 8005598:	485c      	ldr	r0, [pc, #368]	@ (800570c <HAL_ADC_Init+0x290>)
 800559a:	f7ff fdcf 	bl	800513c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	7e5b      	ldrb	r3, [r3, #25]
 80055a2:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80055a8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80055ae:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80055b4:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055bc:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80055be:	4313      	orrs	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d106      	bne.n	80055da <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d0:	3b01      	subs	r3, #1
 80055d2:	045b      	lsls	r3, r3, #17
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e6:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ee:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	4b44      	ldr	r3, [pc, #272]	@ (8005710 <HAL_ADC_Init+0x294>)
 80055fe:	4013      	ands	r3, r2
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	69b9      	ldr	r1, [r7, #24]
 8005606:	430b      	orrs	r3, r1
 8005608:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff ff20 	bl	8005454 <LL_ADC_INJ_IsConversionOngoing>
 8005614:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d140      	bne.n	800569e <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d13d      	bne.n	800569e <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	7e1b      	ldrb	r3, [r3, #24]
 800562a:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800562c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005634:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005636:	4313      	orrs	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005644:	f023 0306 	bic.w	r3, r3, #6
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6812      	ldr	r2, [r2, #0]
 800564c:	69b9      	ldr	r1, [r7, #24]
 800564e:	430b      	orrs	r3, r1
 8005650:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005658:	2b01      	cmp	r3, #1
 800565a:	d118      	bne.n	800568e <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005666:	f023 0304 	bic.w	r3, r3, #4
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005672:	4311      	orrs	r1, r2
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005678:	4311      	orrs	r1, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800567e:	430a      	orrs	r2, r1
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	611a      	str	r2, [r3, #16]
 800568c:	e007      	b.n	800569e <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0201 	bic.w	r2, r2, #1
 800569c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d10c      	bne.n	80056c0 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ac:	f023 010f 	bic.w	r1, r3, #15
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	1e5a      	subs	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80056be:	e007      	b.n	80056d0 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 020f 	bic.w	r2, r2, #15
 80056ce:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d4:	f023 0303 	bic.w	r3, r3, #3
 80056d8:	f043 0201 	orr.w	r2, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	659a      	str	r2, [r3, #88]	@ 0x58
 80056e0:	e007      	b.n	80056f2 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e6:	f043 0210 	orr.w	r2, r3, #16
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80056f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3724      	adds	r7, #36	@ 0x24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd90      	pop	{r4, r7, pc}
 80056fc:	20000000 	.word	0x20000000
 8005700:	053e2d63 	.word	0x053e2d63
 8005704:	42028000 	.word	0x42028000
 8005708:	42028100 	.word	0x42028100
 800570c:	42028300 	.word	0x42028300
 8005710:	fff0c007 	.word	0xfff0c007

08005714 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005714:	b590      	push	{r4, r7, lr}
 8005716:	b0b7      	sub	sp, #220	@ 0xdc
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_ADC_ConfigChannel+0x22>
 8005732:	2302      	movs	r3, #2
 8005734:	e3c1      	b.n	8005eba <HAL_ADC_ConfigChannel+0x7a6>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff fe73 	bl	800542e <LL_ADC_REG_IsConversionOngoing>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	f040 83a6 	bne.w	8005e9c <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	6859      	ldr	r1, [r3, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	f7ff fd89 	bl	8005274 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fe61 	bl	800542e <LL_ADC_REG_IsConversionOngoing>
 800576c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff fe6d 	bl	8005454 <LL_ADC_INJ_IsConversionOngoing>
 800577a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800577e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005782:	2b00      	cmp	r3, #0
 8005784:	f040 81c1 	bne.w	8005b0a <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800578c:	2b00      	cmp	r3, #0
 800578e:	f040 81bc 	bne.w	8005b0a <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800579a:	d10f      	bne.n	80057bc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2200      	movs	r2, #0
 80057a6:	4619      	mov	r1, r3
 80057a8:	f7ff fd90 	bl	80052cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff fd4a 	bl	800524e <LL_ADC_SetSamplingTimeCommonConfig>
 80057ba:	e00e      	b.n	80057da <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	6819      	ldr	r1, [r3, #0]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	461a      	mov	r2, r3
 80057ca:	f7ff fd7f 	bl	80052cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2100      	movs	r1, #0
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff fd3a 	bl	800524e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	08db      	lsrs	r3, r3, #3
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d00a      	beq.n	8005812 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	6919      	ldr	r1, [r3, #16]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800580c:	f7ff fcca 	bl	80051a4 <LL_ADC_SetOffset>
 8005810:	e17b      	b.n	8005b0a <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2100      	movs	r1, #0
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff fce7 	bl	80051ec <LL_ADC_GetOffsetChannel>
 800581e:	4603      	mov	r3, r0
 8005820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <HAL_ADC_ConfigChannel+0x12a>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2100      	movs	r1, #0
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff fcdc 	bl	80051ec <LL_ADC_GetOffsetChannel>
 8005834:	4603      	mov	r3, r0
 8005836:	0e9b      	lsrs	r3, r3, #26
 8005838:	f003 021f 	and.w	r2, r3, #31
 800583c:	e01e      	b.n	800587c <HAL_ADC_ConfigChannel+0x168>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2100      	movs	r1, #0
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff fcd1 	bl	80051ec <LL_ADC_GetOffsetChannel>
 800584a:	4603      	mov	r3, r0
 800584c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005850:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005854:	fa93 f3a3 	rbit	r3, r3
 8005858:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800585c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005860:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 800586c:	2320      	movs	r3, #32
 800586e:	e004      	b.n	800587a <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8005870:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005874:	fab3 f383 	clz	r3, r3
 8005878:	b2db      	uxtb	r3, r3
 800587a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005884:	2b00      	cmp	r3, #0
 8005886:	d105      	bne.n	8005894 <HAL_ADC_ConfigChannel+0x180>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	0e9b      	lsrs	r3, r3, #26
 800588e:	f003 031f 	and.w	r3, r3, #31
 8005892:	e018      	b.n	80058c6 <HAL_ADC_ConfigChannel+0x1b2>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80058a0:	fa93 f3a3 	rbit	r3, r3
 80058a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80058a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80058b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 80058b8:	2320      	movs	r3, #32
 80058ba:	e004      	b.n	80058c6 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 80058bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80058c0:	fab3 f383 	clz	r3, r3
 80058c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d106      	bne.n	80058d8 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2200      	movs	r2, #0
 80058d0:	2100      	movs	r1, #0
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7ff fca0 	bl	8005218 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2101      	movs	r1, #1
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fc84 	bl	80051ec <LL_ADC_GetOffsetChannel>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10a      	bne.n	8005904 <HAL_ADC_ConfigChannel+0x1f0>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2101      	movs	r1, #1
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff fc79 	bl	80051ec <LL_ADC_GetOffsetChannel>
 80058fa:	4603      	mov	r3, r0
 80058fc:	0e9b      	lsrs	r3, r3, #26
 80058fe:	f003 021f 	and.w	r2, r3, #31
 8005902:	e01e      	b.n	8005942 <HAL_ADC_ConfigChannel+0x22e>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2101      	movs	r1, #1
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff fc6e 	bl	80051ec <LL_ADC_GetOffsetChannel>
 8005910:	4603      	mov	r3, r0
 8005912:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005916:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800591a:	fa93 f3a3 	rbit	r3, r3
 800591e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005926:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800592a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8005932:	2320      	movs	r3, #32
 8005934:	e004      	b.n	8005940 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8005936:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800593a:	fab3 f383 	clz	r3, r3
 800593e:	b2db      	uxtb	r3, r3
 8005940:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800594a:	2b00      	cmp	r3, #0
 800594c:	d105      	bne.n	800595a <HAL_ADC_ConfigChannel+0x246>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	0e9b      	lsrs	r3, r3, #26
 8005954:	f003 031f 	and.w	r3, r3, #31
 8005958:	e018      	b.n	800598c <HAL_ADC_ConfigChannel+0x278>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005962:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005966:	fa93 f3a3 	rbit	r3, r3
 800596a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800596e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005972:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005976:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800597e:	2320      	movs	r3, #32
 8005980:	e004      	b.n	800598c <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8005982:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005986:	fab3 f383 	clz	r3, r3
 800598a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800598c:	429a      	cmp	r2, r3
 800598e:	d106      	bne.n	800599e <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2200      	movs	r2, #0
 8005996:	2101      	movs	r1, #1
 8005998:	4618      	mov	r0, r3
 800599a:	f7ff fc3d 	bl	8005218 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2102      	movs	r1, #2
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff fc21 	bl	80051ec <LL_ADC_GetOffsetChannel>
 80059aa:	4603      	mov	r3, r0
 80059ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10a      	bne.n	80059ca <HAL_ADC_ConfigChannel+0x2b6>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2102      	movs	r1, #2
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff fc16 	bl	80051ec <LL_ADC_GetOffsetChannel>
 80059c0:	4603      	mov	r3, r0
 80059c2:	0e9b      	lsrs	r3, r3, #26
 80059c4:	f003 021f 	and.w	r2, r3, #31
 80059c8:	e01e      	b.n	8005a08 <HAL_ADC_ConfigChannel+0x2f4>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2102      	movs	r1, #2
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff fc0b 	bl	80051ec <LL_ADC_GetOffsetChannel>
 80059d6:	4603      	mov	r3, r0
 80059d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059e0:	fa93 f3a3 	rbit	r3, r3
 80059e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80059e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80059f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80059f8:	2320      	movs	r3, #32
 80059fa:	e004      	b.n	8005a06 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80059fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a00:	fab3 f383 	clz	r3, r3
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d105      	bne.n	8005a20 <HAL_ADC_ConfigChannel+0x30c>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	0e9b      	lsrs	r3, r3, #26
 8005a1a:	f003 031f 	and.w	r3, r3, #31
 8005a1e:	e016      	b.n	8005a4e <HAL_ADC_ConfigChannel+0x33a>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a2c:	fa93 f3a3 	rbit	r3, r3
 8005a30:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005a32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8005a40:	2320      	movs	r3, #32
 8005a42:	e004      	b.n	8005a4e <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8005a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a48:	fab3 f383 	clz	r3, r3
 8005a4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d106      	bne.n	8005a60 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2200      	movs	r2, #0
 8005a58:	2102      	movs	r1, #2
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff fbdc 	bl	8005218 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2103      	movs	r1, #3
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff fbc0 	bl	80051ec <LL_ADC_GetOffsetChannel>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <HAL_ADC_ConfigChannel+0x378>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2103      	movs	r1, #3
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff fbb5 	bl	80051ec <LL_ADC_GetOffsetChannel>
 8005a82:	4603      	mov	r3, r0
 8005a84:	0e9b      	lsrs	r3, r3, #26
 8005a86:	f003 021f 	and.w	r2, r3, #31
 8005a8a:	e017      	b.n	8005abc <HAL_ADC_ConfigChannel+0x3a8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2103      	movs	r1, #3
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff fbaa 	bl	80051ec <LL_ADC_GetOffsetChannel>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a9e:	fa93 f3a3 	rbit	r3, r3
 8005aa2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005aa4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005aa6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005aa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8005aae:	2320      	movs	r3, #32
 8005ab0:	e003      	b.n	8005aba <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8005ab2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ab4:	fab3 f383 	clz	r3, r3
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d105      	bne.n	8005ad4 <HAL_ADC_ConfigChannel+0x3c0>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	0e9b      	lsrs	r3, r3, #26
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	e011      	b.n	8005af8 <HAL_ADC_ConfigChannel+0x3e4>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ada:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005adc:	fa93 f3a3 	rbit	r3, r3
 8005ae0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005ae2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ae4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005ae6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8005aec:	2320      	movs	r3, #32
 8005aee:	e003      	b.n	8005af8 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8005af0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005af2:	fab3 f383 	clz	r3, r3
 8005af6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d106      	bne.n	8005b0a <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2200      	movs	r2, #0
 8005b02:	2103      	movs	r1, #3
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff fb87 	bl	8005218 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff fc7a 	bl	8005408 <LL_ADC_IsEnabled>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f040 81c9 	bne.w	8005eae <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6818      	ldr	r0, [r3, #0]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	6819      	ldr	r1, [r3, #0]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	f7ff fbfb 	bl	8005324 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	4a8f      	ldr	r2, [pc, #572]	@ (8005d70 <HAL_ADC_ConfigChannel+0x65c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	f040 8131 	bne.w	8005d9c <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10b      	bne.n	8005b62 <HAL_ADC_ConfigChannel+0x44e>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	0e9b      	lsrs	r3, r3, #26
 8005b50:	3301      	adds	r3, #1
 8005b52:	f003 031f 	and.w	r3, r3, #31
 8005b56:	2b09      	cmp	r3, #9
 8005b58:	bf94      	ite	ls
 8005b5a:	2301      	movls	r3, #1
 8005b5c:	2300      	movhi	r3, #0
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	e019      	b.n	8005b96 <HAL_ADC_ConfigChannel+0x482>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b6a:	fa93 f3a3 	rbit	r3, r3
 8005b6e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005b70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b72:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005b74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8005b7a:	2320      	movs	r3, #32
 8005b7c:	e003      	b.n	8005b86 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8005b7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b80:	fab3 f383 	clz	r3, r3
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	3301      	adds	r3, #1
 8005b88:	f003 031f 	and.w	r3, r3, #31
 8005b8c:	2b09      	cmp	r3, #9
 8005b8e:	bf94      	ite	ls
 8005b90:	2301      	movls	r3, #1
 8005b92:	2300      	movhi	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d079      	beq.n	8005c8e <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d107      	bne.n	8005bb6 <HAL_ADC_ConfigChannel+0x4a2>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	0e9b      	lsrs	r3, r3, #26
 8005bac:	3301      	adds	r3, #1
 8005bae:	069b      	lsls	r3, r3, #26
 8005bb0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005bb4:	e015      	b.n	8005be2 <HAL_ADC_ConfigChannel+0x4ce>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bbe:	fa93 f3a3 	rbit	r3, r3
 8005bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bc6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8005bce:	2320      	movs	r3, #32
 8005bd0:	e003      	b.n	8005bda <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8005bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bd4:	fab3 f383 	clz	r3, r3
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	3301      	adds	r3, #1
 8005bdc:	069b      	lsls	r3, r3, #26
 8005bde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d109      	bne.n	8005c02 <HAL_ADC_ConfigChannel+0x4ee>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	0e9b      	lsrs	r3, r3, #26
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005c00:	e017      	b.n	8005c32 <HAL_ADC_ConfigChannel+0x51e>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c0a:	fa93 f3a3 	rbit	r3, r3
 8005c0e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005c10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c12:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005c14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8005c1a:	2320      	movs	r3, #32
 8005c1c:	e003      	b.n	8005c26 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8005c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c20:	fab3 f383 	clz	r3, r3
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	3301      	adds	r3, #1
 8005c28:	f003 031f 	and.w	r3, r3, #31
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c32:	ea42 0103 	orr.w	r1, r2, r3
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10a      	bne.n	8005c58 <HAL_ADC_ConfigChannel+0x544>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	0e9b      	lsrs	r3, r3, #26
 8005c48:	3301      	adds	r3, #1
 8005c4a:	f003 021f 	and.w	r2, r3, #31
 8005c4e:	4613      	mov	r3, r2
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	4413      	add	r3, r2
 8005c54:	051b      	lsls	r3, r3, #20
 8005c56:	e018      	b.n	8005c8a <HAL_ADC_ConfigChannel+0x576>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c60:	fa93 f3a3 	rbit	r3, r3
 8005c64:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8005c70:	2320      	movs	r3, #32
 8005c72:	e003      	b.n	8005c7c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8005c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c76:	fab3 f383 	clz	r3, r3
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	f003 021f 	and.w	r2, r3, #31
 8005c82:	4613      	mov	r3, r2
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	4413      	add	r3, r2
 8005c88:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c8a:	430b      	orrs	r3, r1
 8005c8c:	e081      	b.n	8005d92 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d107      	bne.n	8005caa <HAL_ADC_ConfigChannel+0x596>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	0e9b      	lsrs	r3, r3, #26
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	069b      	lsls	r3, r3, #26
 8005ca4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ca8:	e015      	b.n	8005cd6 <HAL_ADC_ConfigChannel+0x5c2>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb2:	fa93 f3a3 	rbit	r3, r3
 8005cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cba:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8005cc2:	2320      	movs	r3, #32
 8005cc4:	e003      	b.n	8005cce <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc8:	fab3 f383 	clz	r3, r3
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	3301      	adds	r3, #1
 8005cd0:	069b      	lsls	r3, r3, #26
 8005cd2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d109      	bne.n	8005cf6 <HAL_ADC_ConfigChannel+0x5e2>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	0e9b      	lsrs	r3, r3, #26
 8005ce8:	3301      	adds	r3, #1
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	2101      	movs	r1, #1
 8005cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf4:	e017      	b.n	8005d26 <HAL_ADC_ConfigChannel+0x612>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	fa93 f3a3 	rbit	r3, r3
 8005d02:	61fb      	str	r3, [r7, #28]
  return result;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8005d0e:	2320      	movs	r3, #32
 8005d10:	e003      	b.n	8005d1a <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d14:	fab3 f383 	clz	r3, r3
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	2101      	movs	r1, #1
 8005d22:	fa01 f303 	lsl.w	r3, r1, r3
 8005d26:	ea42 0103 	orr.w	r1, r2, r3
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10d      	bne.n	8005d52 <HAL_ADC_ConfigChannel+0x63e>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	0e9b      	lsrs	r3, r3, #26
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	f003 021f 	and.w	r2, r3, #31
 8005d42:	4613      	mov	r3, r2
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	4413      	add	r3, r2
 8005d48:	3b1e      	subs	r3, #30
 8005d4a:	051b      	lsls	r3, r3, #20
 8005d4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005d50:	e01e      	b.n	8005d90 <HAL_ADC_ConfigChannel+0x67c>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	fa93 f3a3 	rbit	r3, r3
 8005d5e:	613b      	str	r3, [r7, #16]
  return result;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d104      	bne.n	8005d74 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8005d6a:	2320      	movs	r3, #32
 8005d6c:	e006      	b.n	8005d7c <HAL_ADC_ConfigChannel+0x668>
 8005d6e:	bf00      	nop
 8005d70:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	fab3 f383 	clz	r3, r3
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	f003 021f 	and.w	r2, r3, #31
 8005d82:	4613      	mov	r3, r2
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	4413      	add	r3, r2
 8005d88:	3b1e      	subs	r3, #30
 8005d8a:	051b      	lsls	r3, r3, #20
 8005d8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d90:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d96:	4619      	mov	r1, r3
 8005d98:	f7ff fa98 	bl	80052cc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	4b48      	ldr	r3, [pc, #288]	@ (8005ec4 <HAL_ADC_ConfigChannel+0x7b0>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 8082 	beq.w	8005eae <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005daa:	4847      	ldr	r0, [pc, #284]	@ (8005ec8 <HAL_ADC_ConfigChannel+0x7b4>)
 8005dac:	f7ff f9ec 	bl	8005188 <LL_ADC_GetCommonPathInternalCh>
 8005db0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005db4:	4845      	ldr	r0, [pc, #276]	@ (8005ecc <HAL_ADC_ConfigChannel+0x7b8>)
 8005db6:	f7ff fb27 	bl	8005408 <LL_ADC_IsEnabled>
 8005dba:	4604      	mov	r4, r0
 8005dbc:	4844      	ldr	r0, [pc, #272]	@ (8005ed0 <HAL_ADC_ConfigChannel+0x7bc>)
 8005dbe:	f7ff fb23 	bl	8005408 <LL_ADC_IsEnabled>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	4323      	orrs	r3, r4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d15e      	bne.n	8005e88 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a41      	ldr	r2, [pc, #260]	@ (8005ed4 <HAL_ADC_ConfigChannel+0x7c0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d127      	bne.n	8005e24 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005dd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005dd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d121      	bne.n	8005e24 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a39      	ldr	r2, [pc, #228]	@ (8005ecc <HAL_ADC_ConfigChannel+0x7b8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d161      	bne.n	8005eae <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005dee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005df2:	4619      	mov	r1, r3
 8005df4:	4834      	ldr	r0, [pc, #208]	@ (8005ec8 <HAL_ADC_ConfigChannel+0x7b4>)
 8005df6:	f7ff f9b4 	bl	8005162 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005dfa:	4b37      	ldr	r3, [pc, #220]	@ (8005ed8 <HAL_ADC_ConfigChannel+0x7c4>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	099b      	lsrs	r3, r3, #6
 8005e00:	4a36      	ldr	r2, [pc, #216]	@ (8005edc <HAL_ADC_ConfigChannel+0x7c8>)
 8005e02:	fba2 2303 	umull	r2, r3, r2, r3
 8005e06:	099b      	lsrs	r3, r3, #6
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8005e12:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8005e14:	e002      	b.n	8005e1c <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f9      	bne.n	8005e16 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e22:	e044      	b.n	8005eae <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a2d      	ldr	r2, [pc, #180]	@ (8005ee0 <HAL_ADC_ConfigChannel+0x7cc>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d113      	bne.n	8005e56 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10d      	bne.n	8005e56 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a23      	ldr	r2, [pc, #140]	@ (8005ecc <HAL_ADC_ConfigChannel+0x7b8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d134      	bne.n	8005eae <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	481e      	ldr	r0, [pc, #120]	@ (8005ec8 <HAL_ADC_ConfigChannel+0x7b4>)
 8005e50:	f7ff f987 	bl	8005162 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e54:	e02b      	b.n	8005eae <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a22      	ldr	r2, [pc, #136]	@ (8005ee4 <HAL_ADC_ConfigChannel+0x7d0>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d126      	bne.n	8005eae <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005e60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d120      	bne.n	8005eae <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a16      	ldr	r2, [pc, #88]	@ (8005ecc <HAL_ADC_ConfigChannel+0x7b8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d11b      	bne.n	8005eae <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4811      	ldr	r0, [pc, #68]	@ (8005ec8 <HAL_ADC_ConfigChannel+0x7b4>)
 8005e82:	f7ff f96e 	bl	8005162 <LL_ADC_SetCommonPathInternalCh>
 8005e86:	e012      	b.n	8005eae <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e8c:	f043 0220 	orr.w	r2, r3, #32
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005e9a:	e008      	b.n	8005eae <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea0:	f043 0220 	orr.w	r2, r3, #32
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8005eb6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	37dc      	adds	r7, #220	@ 0xdc
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd90      	pop	{r4, r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	80080000 	.word	0x80080000
 8005ec8:	42028300 	.word	0x42028300
 8005ecc:	42028000 	.word	0x42028000
 8005ed0:	42028100 	.word	0x42028100
 8005ed4:	c7520000 	.word	0xc7520000
 8005ed8:	20000000 	.word	0x20000000
 8005edc:	053e2d63 	.word	0x053e2d63
 8005ee0:	cb840000 	.word	0xcb840000
 8005ee4:	80000001 	.word	0x80000001

08005ee8 <LL_ADC_IsEnabled>:
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <LL_ADC_IsEnabled+0x18>
 8005efc:	2301      	movs	r3, #1
 8005efe:	e000      	b.n	8005f02 <LL_ADC_IsEnabled+0x1a>
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <LL_ADC_REG_IsConversionOngoing>:
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d101      	bne.n	8005f26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005f34:	b590      	push	{r4, r7, lr}
 8005f36:	b0a1      	sub	sp, #132	@ 0x84
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e089      	b.n	8006066 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005f5e:	2300      	movs	r3, #0
 8005f60:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a42      	ldr	r2, [pc, #264]	@ (8006070 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d102      	bne.n	8005f72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005f6c:	4b41      	ldr	r3, [pc, #260]	@ (8006074 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e001      	b.n	8005f76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10b      	bne.n	8005f94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f80:	f043 0220 	orr.w	r2, r3, #32
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e068      	b.n	8006066 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff ffb9 	bl	8005f0e <LL_ADC_REG_IsConversionOngoing>
 8005f9c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff ffb3 	bl	8005f0e <LL_ADC_REG_IsConversionOngoing>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d14a      	bne.n	8006044 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005fae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d147      	bne.n	8006044 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005fb4:	4b30      	ldr	r3, [pc, #192]	@ (8006078 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005fb6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d027      	beq.n	8006010 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005fc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	6859      	ldr	r1, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005fd2:	035b      	lsls	r3, r3, #13
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fda:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fdc:	4824      	ldr	r0, [pc, #144]	@ (8006070 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8005fde:	f7ff ff83 	bl	8005ee8 <LL_ADC_IsEnabled>
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	4823      	ldr	r0, [pc, #140]	@ (8006074 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005fe6:	f7ff ff7f 	bl	8005ee8 <LL_ADC_IsEnabled>
 8005fea:	4603      	mov	r3, r0
 8005fec:	4323      	orrs	r3, r4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d132      	bne.n	8006058 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005ff2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005ffa:	f023 030f 	bic.w	r3, r3, #15
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	6811      	ldr	r1, [r2, #0]
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	6892      	ldr	r2, [r2, #8]
 8006006:	430a      	orrs	r2, r1
 8006008:	431a      	orrs	r2, r3
 800600a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800600c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800600e:	e023      	b.n	8006058 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006010:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006018:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800601a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800601c:	4814      	ldr	r0, [pc, #80]	@ (8006070 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800601e:	f7ff ff63 	bl	8005ee8 <LL_ADC_IsEnabled>
 8006022:	4604      	mov	r4, r0
 8006024:	4813      	ldr	r0, [pc, #76]	@ (8006074 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006026:	f7ff ff5f 	bl	8005ee8 <LL_ADC_IsEnabled>
 800602a:	4603      	mov	r3, r0
 800602c:	4323      	orrs	r3, r4
 800602e:	2b00      	cmp	r3, #0
 8006030:	d112      	bne.n	8006058 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006032:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800603a:	f023 030f 	bic.w	r3, r3, #15
 800603e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006040:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006042:	e009      	b.n	8006058 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006048:	f043 0220 	orr.w	r2, r3, #32
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006056:	e000      	b.n	800605a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006058:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8006062:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006066:	4618      	mov	r0, r3
 8006068:	3784      	adds	r7, #132	@ 0x84
 800606a:	46bd      	mov	sp, r7
 800606c:	bd90      	pop	{r4, r7, pc}
 800606e:	bf00      	nop
 8006070:	42028000 	.word	0x42028000
 8006074:	42028100 	.word	0x42028100
 8006078:	42028300 	.word	0x42028300

0800607c <__NVIC_SetPriorityGrouping>:
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800608c:	4b0c      	ldr	r3, [pc, #48]	@ (80060c0 <__NVIC_SetPriorityGrouping+0x44>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006098:	4013      	ands	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80060a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060ae:	4a04      	ldr	r2, [pc, #16]	@ (80060c0 <__NVIC_SetPriorityGrouping+0x44>)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	60d3      	str	r3, [r2, #12]
}
 80060b4:	bf00      	nop
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	e000ed00 	.word	0xe000ed00

080060c4 <__NVIC_GetPriorityGrouping>:
{
 80060c4:	b480      	push	{r7}
 80060c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060c8:	4b04      	ldr	r3, [pc, #16]	@ (80060dc <__NVIC_GetPriorityGrouping+0x18>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	0a1b      	lsrs	r3, r3, #8
 80060ce:	f003 0307 	and.w	r3, r3, #7
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	e000ed00 	.word	0xe000ed00

080060e0 <__NVIC_EnableIRQ>:
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	4603      	mov	r3, r0
 80060e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	db0b      	blt.n	800610a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060f2:	79fb      	ldrb	r3, [r7, #7]
 80060f4:	f003 021f 	and.w	r2, r3, #31
 80060f8:	4907      	ldr	r1, [pc, #28]	@ (8006118 <__NVIC_EnableIRQ+0x38>)
 80060fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	2001      	movs	r0, #1
 8006102:	fa00 f202 	lsl.w	r2, r0, r2
 8006106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	e000e100 	.word	0xe000e100

0800611c <__NVIC_SetPriority>:
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	4603      	mov	r3, r0
 8006124:	6039      	str	r1, [r7, #0]
 8006126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800612c:	2b00      	cmp	r3, #0
 800612e:	db0a      	blt.n	8006146 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	b2da      	uxtb	r2, r3
 8006134:	490c      	ldr	r1, [pc, #48]	@ (8006168 <__NVIC_SetPriority+0x4c>)
 8006136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800613a:	0152      	lsls	r2, r2, #5
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	440b      	add	r3, r1
 8006140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006144:	e00a      	b.n	800615c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	b2da      	uxtb	r2, r3
 800614a:	4908      	ldr	r1, [pc, #32]	@ (800616c <__NVIC_SetPriority+0x50>)
 800614c:	79fb      	ldrb	r3, [r7, #7]
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	3b04      	subs	r3, #4
 8006154:	0152      	lsls	r2, r2, #5
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	440b      	add	r3, r1
 800615a:	761a      	strb	r2, [r3, #24]
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	e000e100 	.word	0xe000e100
 800616c:	e000ed00 	.word	0xe000ed00

08006170 <NVIC_EncodePriority>:
{
 8006170:	b480      	push	{r7}
 8006172:	b089      	sub	sp, #36	@ 0x24
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	f1c3 0307 	rsb	r3, r3, #7
 800618a:	2b03      	cmp	r3, #3
 800618c:	bf28      	it	cs
 800618e:	2303      	movcs	r3, #3
 8006190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	3303      	adds	r3, #3
 8006196:	2b06      	cmp	r3, #6
 8006198:	d902      	bls.n	80061a0 <NVIC_EncodePriority+0x30>
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	3b04      	subs	r3, #4
 800619e:	e000      	b.n	80061a2 <NVIC_EncodePriority+0x32>
 80061a0:	2300      	movs	r3, #0
 80061a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061a4:	f04f 32ff 	mov.w	r2, #4294967295
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	43da      	mvns	r2, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	401a      	ands	r2, r3
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061b8:	f04f 31ff 	mov.w	r1, #4294967295
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	fa01 f303 	lsl.w	r3, r1, r3
 80061c2:	43d9      	mvns	r1, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061c8:	4313      	orrs	r3, r2
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3724      	adds	r7, #36	@ 0x24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
	...

080061d8 <SysTick_Config>:
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061e8:	d301      	bcc.n	80061ee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80061ea:	2301      	movs	r3, #1
 80061ec:	e00f      	b.n	800620e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006218 <SysTick_Config+0x40>)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061f6:	2107      	movs	r1, #7
 80061f8:	f04f 30ff 	mov.w	r0, #4294967295
 80061fc:	f7ff ff8e 	bl	800611c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006200:	4b05      	ldr	r3, [pc, #20]	@ (8006218 <SysTick_Config+0x40>)
 8006202:	2200      	movs	r2, #0
 8006204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006206:	4b04      	ldr	r3, [pc, #16]	@ (8006218 <SysTick_Config+0x40>)
 8006208:	2207      	movs	r2, #7
 800620a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	e000e010 	.word	0xe000e010

0800621c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff ff29 	bl	800607c <__NVIC_SetPriorityGrouping>
}
 800622a:	bf00      	nop
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b086      	sub	sp, #24
 8006236:	af00      	add	r7, sp, #0
 8006238:	4603      	mov	r3, r0
 800623a:	60b9      	str	r1, [r7, #8]
 800623c:	607a      	str	r2, [r7, #4]
 800623e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006240:	f7ff ff40 	bl	80060c4 <__NVIC_GetPriorityGrouping>
 8006244:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	6978      	ldr	r0, [r7, #20]
 800624c:	f7ff ff90 	bl	8006170 <NVIC_EncodePriority>
 8006250:	4602      	mov	r2, r0
 8006252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006256:	4611      	mov	r1, r2
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff ff5f 	bl	800611c <__NVIC_SetPriority>
}
 800625e:	bf00      	nop
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	4603      	mov	r3, r0
 800626e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff ff33 	bl	80060e0 <__NVIC_EnableIRQ>
}
 800627a:	bf00      	nop
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff ffa4 	bl	80061d8 <SysTick_Config>
 8006290:	4603      	mov	r3, r0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e142      	b.n	8006534 <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d106      	bne.n	80062c8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7fd fea8 	bl	8004018 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699a      	ldr	r2, [r3, #24]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0210 	bic.w	r2, r2, #16
 80062d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062d8:	f7fe ff00 	bl	80050dc <HAL_GetTick>
 80062dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80062de:	e012      	b.n	8006306 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80062e0:	f7fe fefc 	bl	80050dc <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b0a      	cmp	r3, #10
 80062ec:	d90b      	bls.n	8006306 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f2:	f043 0201 	orr.w	r2, r3, #1
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2203      	movs	r2, #3
 80062fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e116      	b.n	8006534 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b08      	cmp	r3, #8
 8006312:	d0e5      	beq.n	80062e0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0201 	orr.w	r2, r2, #1
 8006322:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006324:	f7fe feda 	bl	80050dc <HAL_GetTick>
 8006328:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800632a:	e012      	b.n	8006352 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800632c:	f7fe fed6 	bl	80050dc <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b0a      	cmp	r3, #10
 8006338:	d90b      	bls.n	8006352 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800633e:	f043 0201 	orr.w	r2, r3, #1
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2203      	movs	r2, #3
 800634a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e0f0      	b.n	8006534 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0e5      	beq.n	800632c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0202 	orr.w	r2, r2, #2
 800636e:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006370:	4a72      	ldr	r2, [pc, #456]	@ (800653c <HAL_FDCAN_Init+0x2a0>)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	7c1b      	ldrb	r3, [r3, #16]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d108      	bne.n	8006392 <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699a      	ldr	r2, [r3, #24]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800638e:	619a      	str	r2, [r3, #24]
 8006390:	e007      	b.n	80063a2 <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	699a      	ldr	r2, [r3, #24]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063a0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	7c5b      	ldrb	r3, [r3, #17]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d108      	bne.n	80063bc <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	699a      	ldr	r2, [r3, #24]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063b8:	619a      	str	r2, [r3, #24]
 80063ba:	e007      	b.n	80063cc <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699a      	ldr	r2, [r3, #24]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80063ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	7c9b      	ldrb	r3, [r3, #18]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d108      	bne.n	80063e6 <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80063e2:	619a      	str	r2, [r3, #24]
 80063e4:	e007      	b.n	80063f6 <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699a      	ldr	r2, [r3, #24]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80063f4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	699a      	ldr	r2, [r3, #24]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800641a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	691a      	ldr	r2, [r3, #16]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0210 	bic.w	r2, r2, #16
 800642a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d108      	bne.n	8006446 <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0204 	orr.w	r2, r2, #4
 8006442:	619a      	str	r2, [r3, #24]
 8006444:	e02c      	b.n	80064a0 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d028      	beq.n	80064a0 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	2b02      	cmp	r3, #2
 8006454:	d01c      	beq.n	8006490 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699a      	ldr	r2, [r3, #24]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006464:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0210 	orr.w	r2, r2, #16
 8006474:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	2b03      	cmp	r3, #3
 800647c:	d110      	bne.n	80064a0 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	699a      	ldr	r2, [r3, #24]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 0220 	orr.w	r2, r2, #32
 800648c:	619a      	str	r2, [r3, #24]
 800648e:	e007      	b.n	80064a0 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0220 	orr.w	r2, r2, #32
 800649e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	69db      	ldr	r3, [r3, #28]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064b0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80064b8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80064c8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80064ca:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064d4:	d115      	bne.n	8006502 <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064da:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e0:	3b01      	subs	r3, #1
 80064e2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80064e4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ea:	3b01      	subs	r3, #1
 80064ec:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80064ee:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f6:	3b01      	subs	r3, #1
 80064f8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80064fe:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006500:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fc53 	bl	8006dc4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	4000a500 	.word	0x4000a500

08006540 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006550:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006552:	7dfb      	ldrb	r3, [r7, #23]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d002      	beq.n	800655e <HAL_FDCAN_ConfigFilter+0x1e>
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d13d      	bne.n	80065da <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d119      	bne.n	800659a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006572:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800657a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	e01d      	b.n	80065d6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	075a      	lsls	r2, r3, #29
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	079a      	lsls	r2, r3, #30
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	4413      	add	r3, r2
 80065c2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	3304      	adds	r3, #4
 80065ce:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e006      	b.n	80065e8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065de:	f043 0202 	orr.w	r2, r3, #2
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
  }
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b01      	cmp	r3, #1
 8006606:	d110      	bne.n	800662a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0201 	bic.w	r2, r2, #1
 800661e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	e006      	b.n	8006638 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800662e:	f043 0204 	orr.w	r2, r3, #4
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
  }
}
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d12c      	bne.n	80066b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d007      	beq.n	800667c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006670:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e023      	b.n	80066c4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006684:	0c1b      	lsrs	r3, r3, #16
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 fbec 	bl	8006e70 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2101      	movs	r1, #1
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	fa01 f202 	lsl.w	r2, r1, r2
 80066a4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80066a8:	2201      	movs	r2, #1
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	409a      	lsls	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	e006      	b.n	80066c4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ba:	f043 0208 	orr.w	r2, r3, #8
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
  }
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b08b      	sub	sp, #44	@ 0x2c
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80066e4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80066e6:	7efb      	ldrb	r3, [r7, #27]
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	f040 80e8 	bne.w	80068be <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b40      	cmp	r3, #64	@ 0x40
 80066f2:	d137      	bne.n	8006764 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	2b00      	cmp	r3, #0
 8006702:	d107      	bne.n	8006714 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006708:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e0db      	b.n	80068cc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800671c:	0e1b      	lsrs	r3, r3, #24
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b01      	cmp	r3, #1
 8006724:	d10a      	bne.n	800673c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800672e:	0a5b      	lsrs	r3, r3, #9
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006738:	2301      	movs	r3, #1
 800673a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006744:	0a1b      	lsrs	r3, r3, #8
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	69fa      	ldr	r2, [r7, #28]
 800674c:	4413      	add	r3, r2
 800674e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8006754:	69fa      	ldr	r2, [r7, #28]
 8006756:	4613      	mov	r3, r2
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	4413      	add	r3, r2
 800675c:	00db      	lsls	r3, r3, #3
 800675e:	440b      	add	r3, r1
 8006760:	627b      	str	r3, [r7, #36]	@ 0x24
 8006762:	e036      	b.n	80067d2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	2b00      	cmp	r3, #0
 8006772:	d107      	bne.n	8006784 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006778:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e0a3      	b.n	80068cc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800678c:	0e1b      	lsrs	r3, r3, #24
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b01      	cmp	r3, #1
 8006794:	d10a      	bne.n	80067ac <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800679e:	0a1b      	lsrs	r3, r3, #8
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80067a8:	2301      	movs	r3, #1
 80067aa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067b4:	0a1b      	lsrs	r3, r3, #8
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	4413      	add	r3, r2
 80067be:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80067c4:	69fa      	ldr	r2, [r7, #28]
 80067c6:	4613      	mov	r3, r2
 80067c8:	00db      	lsls	r3, r3, #3
 80067ca:	4413      	add	r3, r2
 80067cc:	00db      	lsls	r3, r3, #3
 80067ce:	440b      	add	r3, r1
 80067d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d107      	bne.n	80067f6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80067e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	0c9b      	lsrs	r3, r3, #18
 80067ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	e005      	b.n	8006802 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800680e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681c:	3304      	adds	r3, #4
 800681e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	b29a      	uxth	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800682a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	0c1b      	lsrs	r3, r3, #16
 8006830:	f003 020f 	and.w	r2, r3, #15
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	0e1b      	lsrs	r3, r3, #24
 8006856:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	0fda      	lsrs	r2, r3, #31
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686a:	3304      	adds	r3, #4
 800686c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006872:	2300      	movs	r3, #0
 8006874:	623b      	str	r3, [r7, #32]
 8006876:	e00a      	b.n	800688e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	441a      	add	r2, r3
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	440b      	add	r3, r1
 8006884:	7812      	ldrb	r2, [r2, #0]
 8006886:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	3301      	adds	r3, #1
 800688c:	623b      	str	r3, [r7, #32]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	4a11      	ldr	r2, [pc, #68]	@ (80068d8 <HAL_FDCAN_GetRxMessage+0x20c>)
 8006894:	5cd3      	ldrb	r3, [r2, r3]
 8006896:	461a      	mov	r2, r3
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	4293      	cmp	r3, r2
 800689c:	d3ec      	bcc.n	8006878 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b40      	cmp	r3, #64	@ 0x40
 80068a2:	d105      	bne.n	80068b0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	69fa      	ldr	r2, [r7, #28]
 80068aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80068ae:	e004      	b.n	80068ba <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69fa      	ldr	r2, [r7, #28]
 80068b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	e006      	b.n	80068cc <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068c2:	f043 0208 	orr.w	r2, r3, #8
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
  }
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	372c      	adds	r7, #44	@ 0x2c
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	0800c4d0 	.word	0x0800c4d0

080068dc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80068ee:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d003      	beq.n	80068fe <HAL_FDCAN_ActivateNotification+0x22>
 80068f6:	7dfb      	ldrb	r3, [r7, #23]
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	f040 80c8 	bne.w	8006a8e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006904:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	2b00      	cmp	r3, #0
 800690e:	d004      	beq.n	800691a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d03b      	beq.n	8006992 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006920:	2b00      	cmp	r3, #0
 8006922:	d004      	beq.n	800692e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d031      	beq.n	8006992 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f003 0304 	and.w	r3, r3, #4
 800693e:	2b00      	cmp	r3, #0
 8006940:	d027      	beq.n	8006992 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006948:	2b00      	cmp	r3, #0
 800694a:	d004      	beq.n	8006956 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01d      	beq.n	8006992 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800695c:	2b00      	cmp	r3, #0
 800695e:	d004      	beq.n	800696a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f003 0310 	and.w	r3, r3, #16
 8006966:	2b00      	cmp	r3, #0
 8006968:	d013      	beq.n	8006992 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006970:	2b00      	cmp	r3, #0
 8006972:	d004      	beq.n	800697e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	d009      	beq.n	8006992 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00c      	beq.n	80069a2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800698e:	2b00      	cmp	r3, #0
 8006990:	d107      	bne.n	80069a2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f042 0201 	orr.w	r2, r2, #1
 80069a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f003 0307 	and.w	r3, r3, #7
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d004      	beq.n	80069b6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d13b      	bne.n	8006a2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d131      	bne.n	8006a2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f003 0304 	and.w	r3, r3, #4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d127      	bne.n	8006a2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d11d      	bne.n	8006a2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f003 0310 	and.w	r3, r3, #16
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d113      	bne.n	8006a2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d004      	beq.n	8006a1a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d109      	bne.n	8006a2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00c      	beq.n	8006a3e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d007      	beq.n	8006a3e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0202 	orr.w	r2, r2, #2
 8006a3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d009      	beq.n	8006a5c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d009      	beq.n	8006a7a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e006      	b.n	8006a9c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a92:	f043 0202 	orr.w	r2, r3, #2
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
  }
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	371c      	adds	r7, #28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08c      	sub	sp, #48	@ 0x30
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ab6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8006aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ada:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006adc:	4013      	ands	r3, r2
 8006ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ae6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006aea:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af4:	4013      	ands	r3, r2
 8006af6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006afe:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8006b02:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b0a:	6a3a      	ldr	r2, [r7, #32]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b16:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8006b1a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	4013      	ands	r3, r2
 8006b26:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b2e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b36:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00b      	beq.n	8006b5a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d006      	beq.n	8006b5a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2240      	movs	r2, #64	@ 0x40
 8006b52:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f916 	bl	8006d86 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d019      	beq.n	8006b98 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d014      	beq.n	8006b98 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006b76:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	4013      	ands	r3, r2
 8006b84:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b8e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006b90:	6939      	ldr	r1, [r7, #16]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f8d8 	bl	8006d48 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d007      	beq.n	8006bae <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ba4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006ba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f8a2 	bl	8006cf2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d007      	beq.n	8006bc4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006bbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fc f87c 	bl	8002cbc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d007      	beq.n	8006bda <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bd0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006bd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f897 	bl	8006d08 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00c      	beq.n	8006bfe <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d007      	beq.n	8006bfe <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bf6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f890 	bl	8006d1e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d018      	beq.n	8006c3a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d013      	beq.n	8006c3a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006c1a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4013      	ands	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2280      	movs	r2, #128	@ 0x80
 8006c30:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006c32:	68f9      	ldr	r1, [r7, #12]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f87c 	bl	8006d32 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00c      	beq.n	8006c5e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d007      	beq.n	8006c5e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006c56:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f880 	bl	8006d5e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00c      	beq.n	8006c82 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006c7a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f878 	bl	8006d72 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00f      	beq.n	8006cac <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006c9e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ca4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d007      	beq.n	8006cc2 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006cba:	69f9      	ldr	r1, [r7, #28]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f876 	bl	8006dae <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d009      	beq.n	8006cdc <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6a3a      	ldr	r2, [r7, #32]
 8006cce:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f858 	bl	8006d9a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006cea:	bf00      	nop
 8006cec:	3730      	adds	r7, #48	@ 0x30
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006d66:	bf00      	nop
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b083      	sub	sp, #12
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006dcc:	4b27      	ldr	r3, [pc, #156]	@ (8006e6c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8006dce:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dde:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de6:	041a      	lsls	r2, r3, #16
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e04:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0c:	061a      	lsls	r2, r3, #24
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	e005      	b.n	8006e52 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d3f3      	bcc.n	8006e46 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8006e5e:	bf00      	nop
 8006e60:	bf00      	nop
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	4000ac00 	.word	0x4000ac00

08006e70 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b089      	sub	sp, #36	@ 0x24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10a      	bne.n	8006e9c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8006e8e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006e96:	4313      	orrs	r3, r2
 8006e98:	61fb      	str	r3, [r7, #28]
 8006e9a:	e00a      	b.n	8006eb2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006ea4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006eaa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006eac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006eb0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006ebc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006ec2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006ec8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	4613      	mov	r3, r2
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	4413      	add	r3, r2
 8006ee0:	00db      	lsls	r3, r3, #3
 8006ee2:	440b      	add	r3, r1
 8006ee4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	69fa      	ldr	r2, [r7, #28]
 8006eea:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	3304      	adds	r3, #4
 8006ef0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	3304      	adds	r3, #4
 8006efc:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006efe:	2300      	movs	r3, #0
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	e020      	b.n	8006f46 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	3303      	adds	r3, #3
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	3302      	adds	r3, #2
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	440b      	add	r3, r1
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006f1c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	3301      	adds	r3, #1
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	440b      	add	r3, r1
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006f2a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	440a      	add	r2, r1
 8006f32:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006f34:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	3304      	adds	r3, #4
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	4a06      	ldr	r2, [pc, #24]	@ (8006f64 <FDCAN_CopyMessageToRAM+0xf4>)
 8006f4c:	5cd3      	ldrb	r3, [r2, r3]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d3d6      	bcc.n	8006f04 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8006f56:	bf00      	nop
 8006f58:	bf00      	nop
 8006f5a:	3724      	adds	r7, #36	@ 0x24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	0800c4d0 	.word	0x0800c4d0

08006f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006f76:	e158      	b.n	800722a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	fa01 f303 	lsl.w	r3, r1, r3
 8006f84:	4013      	ands	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 814a 	beq.w	8007224 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f003 0303 	and.w	r3, r3, #3
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d005      	beq.n	8006fa8 <HAL_GPIO_Init+0x40>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f003 0303 	and.w	r3, r3, #3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d130      	bne.n	800700a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	2203      	movs	r2, #3
 8006fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb8:	43db      	mvns	r3, r3
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	68da      	ldr	r2, [r3, #12]
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006fde:	2201      	movs	r2, #1
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe6:	43db      	mvns	r3, r3
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	4013      	ands	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	091b      	lsrs	r3, r3, #4
 8006ff4:	f003 0201 	and.w	r2, r3, #1
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	4313      	orrs	r3, r2
 8007002:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f003 0303 	and.w	r3, r3, #3
 8007012:	2b03      	cmp	r3, #3
 8007014:	d017      	beq.n	8007046 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	2203      	movs	r2, #3
 8007022:	fa02 f303 	lsl.w	r3, r2, r3
 8007026:	43db      	mvns	r3, r3
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4013      	ands	r3, r2
 800702c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	fa02 f303 	lsl.w	r3, r2, r3
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	4313      	orrs	r3, r2
 800703e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	2b02      	cmp	r3, #2
 8007050:	d123      	bne.n	800709a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	08da      	lsrs	r2, r3, #3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3208      	adds	r2, #8
 800705a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	220f      	movs	r2, #15
 800706a:	fa02 f303 	lsl.w	r3, r2, r3
 800706e:	43db      	mvns	r3, r3
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	4013      	ands	r3, r2
 8007074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	691a      	ldr	r2, [r3, #16]
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	fa02 f303 	lsl.w	r3, r2, r3
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	4313      	orrs	r3, r2
 800708a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	08da      	lsrs	r2, r3, #3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	3208      	adds	r2, #8
 8007094:	6939      	ldr	r1, [r7, #16]
 8007096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	2203      	movs	r2, #3
 80070a6:	fa02 f303 	lsl.w	r3, r2, r3
 80070aa:	43db      	mvns	r3, r3
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4013      	ands	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f003 0203 	and.w	r2, r3, #3
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	fa02 f303 	lsl.w	r3, r2, r3
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 80a4 	beq.w	8007224 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80070dc:	4a5a      	ldr	r2, [pc, #360]	@ (8007248 <HAL_GPIO_Init+0x2e0>)
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	089b      	lsrs	r3, r3, #2
 80070e2:	3318      	adds	r3, #24
 80070e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070e8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f003 0303 	and.w	r3, r3, #3
 80070f0:	00db      	lsls	r3, r3, #3
 80070f2:	220f      	movs	r2, #15
 80070f4:	fa02 f303 	lsl.w	r3, r2, r3
 80070f8:	43db      	mvns	r3, r3
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	4013      	ands	r3, r2
 80070fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a52      	ldr	r2, [pc, #328]	@ (800724c <HAL_GPIO_Init+0x2e4>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d025      	beq.n	8007154 <HAL_GPIO_Init+0x1ec>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a51      	ldr	r2, [pc, #324]	@ (8007250 <HAL_GPIO_Init+0x2e8>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d01f      	beq.n	8007150 <HAL_GPIO_Init+0x1e8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a50      	ldr	r2, [pc, #320]	@ (8007254 <HAL_GPIO_Init+0x2ec>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d019      	beq.n	800714c <HAL_GPIO_Init+0x1e4>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a4f      	ldr	r2, [pc, #316]	@ (8007258 <HAL_GPIO_Init+0x2f0>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d013      	beq.n	8007148 <HAL_GPIO_Init+0x1e0>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a4e      	ldr	r2, [pc, #312]	@ (800725c <HAL_GPIO_Init+0x2f4>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d00d      	beq.n	8007144 <HAL_GPIO_Init+0x1dc>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a4d      	ldr	r2, [pc, #308]	@ (8007260 <HAL_GPIO_Init+0x2f8>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d007      	beq.n	8007140 <HAL_GPIO_Init+0x1d8>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a4c      	ldr	r2, [pc, #304]	@ (8007264 <HAL_GPIO_Init+0x2fc>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d101      	bne.n	800713c <HAL_GPIO_Init+0x1d4>
 8007138:	2306      	movs	r3, #6
 800713a:	e00c      	b.n	8007156 <HAL_GPIO_Init+0x1ee>
 800713c:	2307      	movs	r3, #7
 800713e:	e00a      	b.n	8007156 <HAL_GPIO_Init+0x1ee>
 8007140:	2305      	movs	r3, #5
 8007142:	e008      	b.n	8007156 <HAL_GPIO_Init+0x1ee>
 8007144:	2304      	movs	r3, #4
 8007146:	e006      	b.n	8007156 <HAL_GPIO_Init+0x1ee>
 8007148:	2303      	movs	r3, #3
 800714a:	e004      	b.n	8007156 <HAL_GPIO_Init+0x1ee>
 800714c:	2302      	movs	r3, #2
 800714e:	e002      	b.n	8007156 <HAL_GPIO_Init+0x1ee>
 8007150:	2301      	movs	r3, #1
 8007152:	e000      	b.n	8007156 <HAL_GPIO_Init+0x1ee>
 8007154:	2300      	movs	r3, #0
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	f002 0203 	and.w	r2, r2, #3
 800715c:	00d2      	lsls	r2, r2, #3
 800715e:	4093      	lsls	r3, r2
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	4313      	orrs	r3, r2
 8007164:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8007166:	4938      	ldr	r1, [pc, #224]	@ (8007248 <HAL_GPIO_Init+0x2e0>)
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	089b      	lsrs	r3, r3, #2
 800716c:	3318      	adds	r3, #24
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007174:	4b34      	ldr	r3, [pc, #208]	@ (8007248 <HAL_GPIO_Init+0x2e0>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	43db      	mvns	r3, r3
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4013      	ands	r3, r2
 8007182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4313      	orrs	r3, r2
 8007196:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007198:	4a2b      	ldr	r2, [pc, #172]	@ (8007248 <HAL_GPIO_Init+0x2e0>)
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800719e:	4b2a      	ldr	r3, [pc, #168]	@ (8007248 <HAL_GPIO_Init+0x2e0>)
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	43db      	mvns	r3, r3
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	4013      	ands	r3, r2
 80071ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4313      	orrs	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80071c2:	4a21      	ldr	r2, [pc, #132]	@ (8007248 <HAL_GPIO_Init+0x2e0>)
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80071c8:	4b1f      	ldr	r3, [pc, #124]	@ (8007248 <HAL_GPIO_Init+0x2e0>)
 80071ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	43db      	mvns	r3, r3
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	4013      	ands	r3, r2
 80071d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80071ee:	4a16      	ldr	r2, [pc, #88]	@ (8007248 <HAL_GPIO_Init+0x2e0>)
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 80071f6:	4b14      	ldr	r3, [pc, #80]	@ (8007248 <HAL_GPIO_Init+0x2e0>)
 80071f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	43db      	mvns	r3, r3
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	4013      	ands	r3, r2
 8007206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	4313      	orrs	r3, r2
 800721a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800721c:	4a0a      	ldr	r2, [pc, #40]	@ (8007248 <HAL_GPIO_Init+0x2e0>)
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	3301      	adds	r3, #1
 8007228:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	fa22 f303 	lsr.w	r3, r2, r3
 8007234:	2b00      	cmp	r3, #0
 8007236:	f47f ae9f 	bne.w	8006f78 <HAL_GPIO_Init+0x10>
  }
}
 800723a:	bf00      	nop
 800723c:	bf00      	nop
 800723e:	371c      	adds	r7, #28
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	4002f400 	.word	0x4002f400
 800724c:	42020000 	.word	0x42020000
 8007250:	42020400 	.word	0x42020400
 8007254:	42020800 	.word	0x42020800
 8007258:	42020c00 	.word	0x42020c00
 800725c:	42021000 	.word	0x42021000
 8007260:	42021400 	.word	0x42021400
 8007264:	42021800 	.word	0x42021800

08007268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	460b      	mov	r3, r1
 8007272:	807b      	strh	r3, [r7, #2]
 8007274:	4613      	mov	r3, r2
 8007276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007278:	787b      	ldrb	r3, [r7, #1]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800727e:	887a      	ldrh	r2, [r7, #2]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007284:	e002      	b.n	800728c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007286:	887a      	ldrh	r2, [r7, #2]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80072a4:	4b0b      	ldr	r3, [pc, #44]	@ (80072d4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	73fb      	strb	r3, [r7, #15]
 80072b4:	e007      	b.n	80072c6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80072b6:	4b07      	ldr	r3, [pc, #28]	@ (80072d4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f023 0204 	bic.w	r2, r3, #4
 80072be:	4905      	ldr	r1, [pc, #20]	@ (80072d4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	40030400 	.word	0x40030400

080072d8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80072d8:	b480      	push	{r7}
 80072da:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80072dc:	4b05      	ldr	r3, [pc, #20]	@ (80072f4 <HAL_ICACHE_Enable+0x1c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a04      	ldr	r2, [pc, #16]	@ (80072f4 <HAL_ICACHE_Enable+0x1c>)
 80072e2:	f043 0301 	orr.w	r3, r3, #1
 80072e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	40030400 	.word	0x40030400

080072f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e0c0      	b.n	800748c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d106      	bne.n	8007324 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7fd f80e 	bl	8004340 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2203      	movs	r2, #3
 8007328:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4618      	mov	r0, r3
 8007332:	f003 ff7d 	bl	800b230 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007336:	2300      	movs	r3, #0
 8007338:	73fb      	strb	r3, [r7, #15]
 800733a:	e03e      	b.n	80073ba <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800733c:	7bfa      	ldrb	r2, [r7, #15]
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	4613      	mov	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	440b      	add	r3, r1
 800734a:	3311      	adds	r3, #17
 800734c:	2201      	movs	r2, #1
 800734e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007350:	7bfa      	ldrb	r2, [r7, #15]
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	4613      	mov	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	440b      	add	r3, r1
 800735e:	3310      	adds	r3, #16
 8007360:	7bfa      	ldrb	r2, [r7, #15]
 8007362:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007364:	7bfa      	ldrb	r2, [r7, #15]
 8007366:	6879      	ldr	r1, [r7, #4]
 8007368:	4613      	mov	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	440b      	add	r3, r1
 8007372:	3313      	adds	r3, #19
 8007374:	2200      	movs	r2, #0
 8007376:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007378:	7bfa      	ldrb	r2, [r7, #15]
 800737a:	6879      	ldr	r1, [r7, #4]
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	440b      	add	r3, r1
 8007386:	3320      	adds	r3, #32
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800738c:	7bfa      	ldrb	r2, [r7, #15]
 800738e:	6879      	ldr	r1, [r7, #4]
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	440b      	add	r3, r1
 800739a:	3324      	adds	r3, #36	@ 0x24
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
 80073a2:	6879      	ldr	r1, [r7, #4]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	4613      	mov	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	440b      	add	r3, r1
 80073b0:	2200      	movs	r2, #0
 80073b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	3301      	adds	r3, #1
 80073b8:	73fb      	strb	r3, [r7, #15]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	791b      	ldrb	r3, [r3, #4]
 80073be:	7bfa      	ldrb	r2, [r7, #15]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d3bb      	bcc.n	800733c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]
 80073c8:	e044      	b.n	8007454 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80073ca:	7bfa      	ldrb	r2, [r7, #15]
 80073cc:	6879      	ldr	r1, [r7, #4]
 80073ce:	4613      	mov	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	00db      	lsls	r3, r3, #3
 80073d6:	440b      	add	r3, r1
 80073d8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80073e0:	7bfa      	ldrb	r2, [r7, #15]
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	4613      	mov	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	00db      	lsls	r3, r3, #3
 80073ec:	440b      	add	r3, r1
 80073ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073f2:	7bfa      	ldrb	r2, [r7, #15]
 80073f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80073f6:	7bfa      	ldrb	r2, [r7, #15]
 80073f8:	6879      	ldr	r1, [r7, #4]
 80073fa:	4613      	mov	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	440b      	add	r3, r1
 8007404:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8007408:	2200      	movs	r2, #0
 800740a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800740c:	7bfa      	ldrb	r2, [r7, #15]
 800740e:	6879      	ldr	r1, [r7, #4]
 8007410:	4613      	mov	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	440b      	add	r3, r1
 800741a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800741e:	2200      	movs	r2, #0
 8007420:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007422:	7bfa      	ldrb	r2, [r7, #15]
 8007424:	6879      	ldr	r1, [r7, #4]
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	440b      	add	r3, r1
 8007430:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007438:	7bfa      	ldrb	r2, [r7, #15]
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	4613      	mov	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	440b      	add	r3, r1
 8007446:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800744a:	2200      	movs	r2, #0
 800744c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	3301      	adds	r3, #1
 8007452:	73fb      	strb	r3, [r7, #15]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	791b      	ldrb	r3, [r3, #4]
 8007458:	7bfa      	ldrb	r2, [r7, #15]
 800745a:	429a      	cmp	r2, r3
 800745c:	d3b5      	bcc.n	80073ca <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	3304      	adds	r3, #4
 8007466:	e893 0006 	ldmia.w	r3, {r1, r2}
 800746a:	f003 fefc 	bl	800b266 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	7a9b      	ldrb	r3, [r3, #10]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d102      	bne.n	800748a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f805 	bl	8007494 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	f043 0301 	orr.w	r3, r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	f043 0302 	orr.w	r3, r3, #2
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80074e8:	b480      	push	{r7}
 80074ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074ec:	4b05      	ldr	r3, [pc, #20]	@ (8007504 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a04      	ldr	r2, [pc, #16]	@ (8007504 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80074f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074f6:	6013      	str	r3, [r2, #0]
}
 80074f8:	bf00      	nop
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	40007000 	.word	0x40007000

08007508 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007508:	b480      	push	{r7}
 800750a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800750c:	4b04      	ldr	r3, [pc, #16]	@ (8007520 <HAL_PWREx_GetVoltageRange+0x18>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8007514:	4618      	mov	r0, r3
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	40007000 	.word	0x40007000

08007524 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 800752c:	4b27      	ldr	r3, [pc, #156]	@ (80075cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007534:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8007536:	f000 f861 	bl	80075fc <HAL_PWREx_SMPS_GetEffectiveMode>
 800753a:	4603      	mov	r3, r0
 800753c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007540:	d101      	bne.n	8007546 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e03e      	b.n	80075c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8007546:	4b21      	ldr	r3, [pc, #132]	@ (80075cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800754e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007552:	d101      	bne.n	8007558 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e035      	b.n	80075c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	429a      	cmp	r2, r3
 800755e:	d101      	bne.n	8007564 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	e02f      	b.n	80075c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007564:	4b19      	ldr	r3, [pc, #100]	@ (80075cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800756c:	4917      	ldr	r1, [pc, #92]	@ (80075cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4313      	orrs	r3, r2
 8007572:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8007574:	4b16      	ldr	r3, [pc, #88]	@ (80075d0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	095b      	lsrs	r3, r3, #5
 800757a:	4a16      	ldr	r2, [pc, #88]	@ (80075d4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800757c:	fba2 2303 	umull	r2, r3, r2, r3
 8007580:	09db      	lsrs	r3, r3, #7
 8007582:	2232      	movs	r2, #50	@ 0x32
 8007584:	fb02 f303 	mul.w	r3, r2, r3
 8007588:	4a13      	ldr	r2, [pc, #76]	@ (80075d8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800758a:	fba2 2303 	umull	r2, r3, r2, r3
 800758e:	08db      	lsrs	r3, r3, #3
 8007590:	3301      	adds	r3, #1
 8007592:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007594:	e002      	b.n	800759c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	3b01      	subs	r3, #1
 800759a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800759c:	4b0b      	ldr	r3, [pc, #44]	@ (80075cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075a8:	d102      	bne.n	80075b0 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1f2      	bne.n	8007596 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80075b0:	4b06      	ldr	r3, [pc, #24]	@ (80075cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075bc:	d101      	bne.n	80075c2 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e000      	b.n	80075c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	40007000 	.word	0x40007000
 80075d0:	20000000 	.word	0x20000000
 80075d4:	0a7c5ac5 	.word	0x0a7c5ac5
 80075d8:	cccccccd 	.word	0xcccccccd

080075dc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80075e0:	4b05      	ldr	r3, [pc, #20]	@ (80075f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	4a04      	ldr	r2, [pc, #16]	@ (80075f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80075e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80075ea:	6053      	str	r3, [r2, #4]
}
 80075ec:	bf00      	nop
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	40007000 	.word	0x40007000

080075fc <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8007602:	4b0f      	ldr	r3, [pc, #60]	@ (8007640 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8007612:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007616:	607b      	str	r3, [r7, #4]
 8007618:	e00a      	b.n	8007630 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d103      	bne.n	800762c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8007624:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007628:	607b      	str	r3, [r7, #4]
 800762a:	e001      	b.n	8007630 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 800762c:	2300      	movs	r3, #0
 800762e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8007630:	687b      	ldr	r3, [r7, #4]
}
 8007632:	4618      	mov	r0, r3
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	40007000 	.word	0x40007000

08007644 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d102      	bne.n	8007658 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	f000 bcc2 	b.w	8007fdc <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007658:	4b99      	ldr	r3, [pc, #612]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f003 030c 	and.w	r3, r3, #12
 8007660:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007662:	4b97      	ldr	r3, [pc, #604]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f003 0303 	and.w	r3, r3, #3
 800766a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 80e9 	beq.w	800784c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d006      	beq.n	800768e <HAL_RCC_OscConfig+0x4a>
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	2b0c      	cmp	r3, #12
 8007684:	f040 8083 	bne.w	800778e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d17f      	bne.n	800778e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800768e:	4b8c      	ldr	r3, [pc, #560]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d006      	beq.n	80076a8 <HAL_RCC_OscConfig+0x64>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d102      	bne.n	80076a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	f000 bc9a 	b.w	8007fdc <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076ac:	4b84      	ldr	r3, [pc, #528]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0308 	and.w	r3, r3, #8
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d004      	beq.n	80076c2 <HAL_RCC_OscConfig+0x7e>
 80076b8:	4b81      	ldr	r3, [pc, #516]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076c0:	e005      	b.n	80076ce <HAL_RCC_OscConfig+0x8a>
 80076c2:	4b7f      	ldr	r3, [pc, #508]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80076c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076c8:	091b      	lsrs	r3, r3, #4
 80076ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d224      	bcs.n	800771c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 fe9c 	bl	8008414 <RCC_SetFlashLatencyFromMSIRange>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d002      	beq.n	80076e8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	f000 bc7a 	b.w	8007fdc <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076e8:	4b75      	ldr	r3, [pc, #468]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a74      	ldr	r2, [pc, #464]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80076ee:	f043 0308 	orr.w	r3, r3, #8
 80076f2:	6013      	str	r3, [r2, #0]
 80076f4:	4b72      	ldr	r3, [pc, #456]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007700:	496f      	ldr	r1, [pc, #444]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 8007702:	4313      	orrs	r3, r2
 8007704:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007706:	4b6e      	ldr	r3, [pc, #440]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	021b      	lsls	r3, r3, #8
 8007714:	496a      	ldr	r1, [pc, #424]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 8007716:	4313      	orrs	r3, r2
 8007718:	604b      	str	r3, [r1, #4]
 800771a:	e026      	b.n	800776a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800771c:	4b68      	ldr	r3, [pc, #416]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a67      	ldr	r2, [pc, #412]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 8007722:	f043 0308 	orr.w	r3, r3, #8
 8007726:	6013      	str	r3, [r2, #0]
 8007728:	4b65      	ldr	r3, [pc, #404]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007734:	4962      	ldr	r1, [pc, #392]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 8007736:	4313      	orrs	r3, r2
 8007738:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800773a:	4b61      	ldr	r3, [pc, #388]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	495d      	ldr	r1, [pc, #372]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 800774a:	4313      	orrs	r3, r2
 800774c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10a      	bne.n	800776a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fe5b 	bl	8008414 <RCC_SetFlashLatencyFromMSIRange>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	f000 bc39 	b.w	8007fdc <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800776a:	f000 fe17 	bl	800839c <HAL_RCC_GetHCLKFreq>
 800776e:	4603      	mov	r3, r0
 8007770:	4a54      	ldr	r2, [pc, #336]	@ (80078c4 <HAL_RCC_OscConfig+0x280>)
 8007772:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007774:	4b54      	ldr	r3, [pc, #336]	@ (80078c8 <HAL_RCC_OscConfig+0x284>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4618      	mov	r0, r3
 800777a:	f7fd fc5f 	bl	800503c <HAL_InitTick>
 800777e:	4603      	mov	r3, r0
 8007780:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8007782:	7bfb      	ldrb	r3, [r7, #15]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d060      	beq.n	800784a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	f000 bc27 	b.w	8007fdc <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d039      	beq.n	800780a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007796:	4b4a      	ldr	r3, [pc, #296]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a49      	ldr	r2, [pc, #292]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 800779c:	f043 0301 	orr.w	r3, r3, #1
 80077a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80077a2:	f7fd fc9b 	bl	80050dc <HAL_GetTick>
 80077a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077a8:	e00f      	b.n	80077ca <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80077aa:	f7fd fc97 	bl	80050dc <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d908      	bls.n	80077ca <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077b8:	4b41      	ldr	r3, [pc, #260]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d102      	bne.n	80077ca <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	f000 bc09 	b.w	8007fdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077ca:	4b3d      	ldr	r3, [pc, #244]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d0e9      	beq.n	80077aa <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80077d6:	4b3a      	ldr	r3, [pc, #232]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a39      	ldr	r2, [pc, #228]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80077dc:	f043 0308 	orr.w	r3, r3, #8
 80077e0:	6013      	str	r3, [r2, #0]
 80077e2:	4b37      	ldr	r3, [pc, #220]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ee:	4934      	ldr	r1, [pc, #208]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80077f4:	4b32      	ldr	r3, [pc, #200]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	021b      	lsls	r3, r3, #8
 8007802:	492f      	ldr	r1, [pc, #188]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 8007804:	4313      	orrs	r3, r2
 8007806:	604b      	str	r3, [r1, #4]
 8007808:	e020      	b.n	800784c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800780a:	4b2d      	ldr	r3, [pc, #180]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a2c      	ldr	r2, [pc, #176]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 8007810:	f023 0301 	bic.w	r3, r3, #1
 8007814:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007816:	f7fd fc61 	bl	80050dc <HAL_GetTick>
 800781a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800781c:	e00e      	b.n	800783c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800781e:	f7fd fc5d 	bl	80050dc <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	2b02      	cmp	r3, #2
 800782a:	d907      	bls.n	800783c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800782c:	4b24      	ldr	r3, [pc, #144]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d001      	beq.n	800783c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e3cf      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800783c:	4b20      	ldr	r3, [pc, #128]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1ea      	bne.n	800781e <HAL_RCC_OscConfig+0x1da>
 8007848:	e000      	b.n	800784c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800784a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b00      	cmp	r3, #0
 8007856:	d07e      	beq.n	8007956 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	2b08      	cmp	r3, #8
 800785c:	d005      	beq.n	800786a <HAL_RCC_OscConfig+0x226>
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2b0c      	cmp	r3, #12
 8007862:	d10e      	bne.n	8007882 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	2b03      	cmp	r3, #3
 8007868:	d10b      	bne.n	8007882 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800786a:	4b15      	ldr	r3, [pc, #84]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d06e      	beq.n	8007954 <HAL_RCC_OscConfig+0x310>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d16a      	bne.n	8007954 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e3ac      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800788a:	d106      	bne.n	800789a <HAL_RCC_OscConfig+0x256>
 800788c:	4b0c      	ldr	r3, [pc, #48]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a0b      	ldr	r2, [pc, #44]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 8007892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007896:	6013      	str	r3, [r2, #0]
 8007898:	e024      	b.n	80078e4 <HAL_RCC_OscConfig+0x2a0>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078a2:	d113      	bne.n	80078cc <HAL_RCC_OscConfig+0x288>
 80078a4:	4b06      	ldr	r3, [pc, #24]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a05      	ldr	r2, [pc, #20]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80078aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	4b03      	ldr	r3, [pc, #12]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a02      	ldr	r2, [pc, #8]	@ (80078c0 <HAL_RCC_OscConfig+0x27c>)
 80078b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	e012      	b.n	80078e4 <HAL_RCC_OscConfig+0x2a0>
 80078be:	bf00      	nop
 80078c0:	40021000 	.word	0x40021000
 80078c4:	20000000 	.word	0x20000000
 80078c8:	20000004 	.word	0x20000004
 80078cc:	4b8b      	ldr	r3, [pc, #556]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a8a      	ldr	r2, [pc, #552]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 80078d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	4b88      	ldr	r3, [pc, #544]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a87      	ldr	r2, [pc, #540]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 80078de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d019      	beq.n	8007920 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ec:	f7fd fbf6 	bl	80050dc <HAL_GetTick>
 80078f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078f2:	e00e      	b.n	8007912 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078f4:	f7fd fbf2 	bl	80050dc <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b64      	cmp	r3, #100	@ 0x64
 8007900:	d907      	bls.n	8007912 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007902:	4b7e      	ldr	r3, [pc, #504]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e364      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007912:	4b7a      	ldr	r3, [pc, #488]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0ea      	beq.n	80078f4 <HAL_RCC_OscConfig+0x2b0>
 800791e:	e01a      	b.n	8007956 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007920:	f7fd fbdc 	bl	80050dc <HAL_GetTick>
 8007924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007926:	e00e      	b.n	8007946 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007928:	f7fd fbd8 	bl	80050dc <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	2b64      	cmp	r3, #100	@ 0x64
 8007934:	d907      	bls.n	8007946 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007936:	4b71      	ldr	r3, [pc, #452]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e34a      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007946:	4b6d      	ldr	r3, [pc, #436]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1ea      	bne.n	8007928 <HAL_RCC_OscConfig+0x2e4>
 8007952:	e000      	b.n	8007956 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b00      	cmp	r3, #0
 8007960:	d06c      	beq.n	8007a3c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	2b04      	cmp	r3, #4
 8007966:	d005      	beq.n	8007974 <HAL_RCC_OscConfig+0x330>
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	2b0c      	cmp	r3, #12
 800796c:	d119      	bne.n	80079a2 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	2b02      	cmp	r3, #2
 8007972:	d116      	bne.n	80079a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007974:	4b61      	ldr	r3, [pc, #388]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800797c:	2b00      	cmp	r3, #0
 800797e:	d005      	beq.n	800798c <HAL_RCC_OscConfig+0x348>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e327      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800798c:	4b5b      	ldr	r3, [pc, #364]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	061b      	lsls	r3, r3, #24
 800799a:	4958      	ldr	r1, [pc, #352]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 800799c:	4313      	orrs	r3, r2
 800799e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079a0:	e04c      	b.n	8007a3c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d029      	beq.n	80079fe <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079aa:	4b54      	ldr	r3, [pc, #336]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a53      	ldr	r2, [pc, #332]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 80079b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b6:	f7fd fb91 	bl	80050dc <HAL_GetTick>
 80079ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079bc:	e00e      	b.n	80079dc <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079be:	f7fd fb8d 	bl	80050dc <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d907      	bls.n	80079dc <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079cc:	4b4b      	ldr	r3, [pc, #300]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e2ff      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079dc:	4b47      	ldr	r3, [pc, #284]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0ea      	beq.n	80079be <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079e8:	4b44      	ldr	r3, [pc, #272]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	061b      	lsls	r3, r3, #24
 80079f6:	4941      	ldr	r1, [pc, #260]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	604b      	str	r3, [r1, #4]
 80079fc:	e01e      	b.n	8007a3c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079fe:	4b3f      	ldr	r3, [pc, #252]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a3e      	ldr	r2, [pc, #248]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007a04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0a:	f7fd fb67 	bl	80050dc <HAL_GetTick>
 8007a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a10:	e00e      	b.n	8007a30 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a12:	f7fd fb63 	bl	80050dc <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d907      	bls.n	8007a30 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a20:	4b36      	ldr	r3, [pc, #216]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e2d5      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a30:	4b32      	ldr	r3, [pc, #200]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1ea      	bne.n	8007a12 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d062      	beq.n	8007b0e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d038      	beq.n	8007ac2 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d108      	bne.n	8007a6a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8007a58:	4b28      	ldr	r3, [pc, #160]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a5e:	4a27      	ldr	r2, [pc, #156]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007a60:	f023 0310 	bic.w	r3, r3, #16
 8007a64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007a68:	e007      	b.n	8007a7a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8007a6a:	4b24      	ldr	r3, [pc, #144]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a70:	4a22      	ldr	r2, [pc, #136]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007a72:	f043 0310 	orr.w	r3, r3, #16
 8007a76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a7a:	4b20      	ldr	r3, [pc, #128]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a80:	4a1e      	ldr	r2, [pc, #120]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007a82:	f043 0301 	orr.w	r3, r3, #1
 8007a86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a8a:	f7fd fb27 	bl	80050dc <HAL_GetTick>
 8007a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a90:	e00f      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a92:	f7fd fb23 	bl	80050dc <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b07      	cmp	r3, #7
 8007a9e:	d908      	bls.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007aa0:	4b16      	ldr	r3, [pc, #88]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e294      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007ab2:	4b12      	ldr	r3, [pc, #72]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0e8      	beq.n	8007a92 <HAL_RCC_OscConfig+0x44e>
 8007ac0:	e025      	b.n	8007b0e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007aca:	f023 0301 	bic.w	r3, r3, #1
 8007ace:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ad2:	f7fd fb03 	bl	80050dc <HAL_GetTick>
 8007ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ad8:	e012      	b.n	8007b00 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ada:	f7fd faff 	bl	80050dc <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	2b07      	cmp	r3, #7
 8007ae6:	d90b      	bls.n	8007b00 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ae8:	4b04      	ldr	r3, [pc, #16]	@ (8007afc <HAL_RCC_OscConfig+0x4b8>)
 8007aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d004      	beq.n	8007b00 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e270      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
 8007afa:	bf00      	nop
 8007afc:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007b00:	4ba8      	ldr	r3, [pc, #672]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e5      	bne.n	8007ada <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 812d 	beq.w	8007d76 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007b20:	4ba0      	ldr	r3, [pc, #640]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10d      	bne.n	8007b48 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b2c:	4b9d      	ldr	r3, [pc, #628]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b30:	4a9c      	ldr	r2, [pc, #624]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007b32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b36:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b38:	4b9a      	ldr	r3, [pc, #616]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b40:	60bb      	str	r3, [r7, #8]
 8007b42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b44:	2301      	movs	r3, #1
 8007b46:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b48:	4b97      	ldr	r3, [pc, #604]	@ (8007da8 <HAL_RCC_OscConfig+0x764>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d11e      	bne.n	8007b92 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b54:	4b94      	ldr	r3, [pc, #592]	@ (8007da8 <HAL_RCC_OscConfig+0x764>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a93      	ldr	r2, [pc, #588]	@ (8007da8 <HAL_RCC_OscConfig+0x764>)
 8007b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b60:	f7fd fabc 	bl	80050dc <HAL_GetTick>
 8007b64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b66:	e00e      	b.n	8007b86 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b68:	f7fd fab8 	bl	80050dc <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d907      	bls.n	8007b86 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b76:	4b8c      	ldr	r3, [pc, #560]	@ (8007da8 <HAL_RCC_OscConfig+0x764>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e22a      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b86:	4b88      	ldr	r3, [pc, #544]	@ (8007da8 <HAL_RCC_OscConfig+0x764>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0ea      	beq.n	8007b68 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d01f      	beq.n	8007bde <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f003 0304 	and.w	r3, r3, #4
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d010      	beq.n	8007bcc <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007baa:	4b7e      	ldr	r3, [pc, #504]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb0:	4a7c      	ldr	r2, [pc, #496]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007bb2:	f043 0304 	orr.w	r3, r3, #4
 8007bb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007bba:	4b7a      	ldr	r3, [pc, #488]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bc0:	4a78      	ldr	r2, [pc, #480]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007bc2:	f043 0301 	orr.w	r3, r3, #1
 8007bc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007bca:	e018      	b.n	8007bfe <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007bcc:	4b75      	ldr	r3, [pc, #468]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bd2:	4a74      	ldr	r2, [pc, #464]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007bd4:	f043 0301 	orr.w	r3, r3, #1
 8007bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007bdc:	e00f      	b.n	8007bfe <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007bde:	4b71      	ldr	r3, [pc, #452]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be4:	4a6f      	ldr	r2, [pc, #444]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007be6:	f023 0301 	bic.w	r3, r3, #1
 8007bea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007bee:	4b6d      	ldr	r3, [pc, #436]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bf4:	4a6b      	ldr	r2, [pc, #428]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007bf6:	f023 0304 	bic.w	r3, r3, #4
 8007bfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d068      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c06:	f7fd fa69 	bl	80050dc <HAL_GetTick>
 8007c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c0c:	e011      	b.n	8007c32 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c0e:	f7fd fa65 	bl	80050dc <HAL_GetTick>
 8007c12:	4602      	mov	r2, r0
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d908      	bls.n	8007c32 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c20:	4b60      	ldr	r3, [pc, #384]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e1d4      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c32:	4b5c      	ldr	r3, [pc, #368]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d0e6      	beq.n	8007c0e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d022      	beq.n	8007c92 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007c4c:	4b55      	ldr	r3, [pc, #340]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c52:	4a54      	ldr	r2, [pc, #336]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007c5c:	e011      	b.n	8007c82 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c5e:	f7fd fa3d 	bl	80050dc <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d908      	bls.n	8007c82 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007c70:	4b4c      	ldr	r3, [pc, #304]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e1ac      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007c82:	4b48      	ldr	r3, [pc, #288]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0e6      	beq.n	8007c5e <HAL_RCC_OscConfig+0x61a>
 8007c90:	e068      	b.n	8007d64 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007c92:	4b44      	ldr	r3, [pc, #272]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c98:	4a42      	ldr	r2, [pc, #264]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007c9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007ca2:	e011      	b.n	8007cc8 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ca4:	f7fd fa1a 	bl	80050dc <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d908      	bls.n	8007cc8 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e189      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007cc8:	4b36      	ldr	r3, [pc, #216]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e6      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x660>
 8007cd6:	e045      	b.n	8007d64 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cd8:	f7fd fa00 	bl	80050dc <HAL_GetTick>
 8007cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cde:	e011      	b.n	8007d04 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ce0:	f7fd f9fc 	bl	80050dc <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d908      	bls.n	8007d04 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e16b      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d04:	4b27      	ldr	r3, [pc, #156]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1e6      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007d12:	4b24      	ldr	r3, [pc, #144]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d021      	beq.n	8007d64 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007d20:	4b20      	ldr	r3, [pc, #128]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d26:	4a1f      	ldr	r2, [pc, #124]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007d28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007d30:	e011      	b.n	8007d56 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d32:	f7fd f9d3 	bl	80050dc <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d908      	bls.n	8007d56 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007d44:	4b17      	ldr	r3, [pc, #92]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e142      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007d56:	4b13      	ldr	r3, [pc, #76]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1e6      	bne.n	8007d32 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d64:	7ffb      	ldrb	r3, [r7, #31]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d105      	bne.n	8007d76 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007d70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d04f      	beq.n	8007e22 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d028      	beq.n	8007ddc <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d8a:	4b06      	ldr	r3, [pc, #24]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007d8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d90:	4a04      	ldr	r2, [pc, #16]	@ (8007da4 <HAL_RCC_OscConfig+0x760>)
 8007d92:	f043 0301 	orr.w	r3, r3, #1
 8007d96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d9a:	f7fd f99f 	bl	80050dc <HAL_GetTick>
 8007d9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007da0:	e014      	b.n	8007dcc <HAL_RCC_OscConfig+0x788>
 8007da2:	bf00      	nop
 8007da4:	40021000 	.word	0x40021000
 8007da8:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007dac:	f7fd f996 	bl	80050dc <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d908      	bls.n	8007dcc <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007dba:	4b8a      	ldr	r3, [pc, #552]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007dbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dc0:	f003 0302 	and.w	r3, r3, #2
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e107      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007dcc:	4b85      	ldr	r3, [pc, #532]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d0e8      	beq.n	8007dac <HAL_RCC_OscConfig+0x768>
 8007dda:	e022      	b.n	8007e22 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007ddc:	4b81      	ldr	r3, [pc, #516]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007de2:	4a80      	ldr	r2, [pc, #512]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007de4:	f023 0301 	bic.w	r3, r3, #1
 8007de8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dec:	f7fd f976 	bl	80050dc <HAL_GetTick>
 8007df0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007df2:	e00f      	b.n	8007e14 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007df4:	f7fd f972 	bl	80050dc <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d908      	bls.n	8007e14 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e02:	4b78      	ldr	r3, [pc, #480]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007e04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e08:	f003 0302 	and.w	r3, r3, #2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e0e3      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007e14:	4b73      	ldr	r3, [pc, #460]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e8      	bne.n	8007df4 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 80d7 	beq.w	8007fda <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e2c:	4b6d      	ldr	r3, [pc, #436]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f003 030c 	and.w	r3, r3, #12
 8007e34:	2b0c      	cmp	r3, #12
 8007e36:	f000 8091 	beq.w	8007f5c <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d166      	bne.n	8007f10 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e42:	4b68      	ldr	r3, [pc, #416]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a67      	ldr	r2, [pc, #412]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007e48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e4e:	f7fd f945 	bl	80050dc <HAL_GetTick>
 8007e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e54:	e00e      	b.n	8007e74 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e56:	f7fd f941 	bl	80050dc <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d907      	bls.n	8007e74 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e64:	4b5f      	ldr	r3, [pc, #380]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e0b3      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e74:	4b5b      	ldr	r3, [pc, #364]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1ea      	bne.n	8007e56 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e80:	4b58      	ldr	r3, [pc, #352]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007e82:	68da      	ldr	r2, [r3, #12]
 8007e84:	4b58      	ldr	r3, [pc, #352]	@ (8007fe8 <HAL_RCC_OscConfig+0x9a4>)
 8007e86:	4013      	ands	r3, r2
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007e90:	3a01      	subs	r2, #1
 8007e92:	0112      	lsls	r2, r2, #4
 8007e94:	4311      	orrs	r1, r2
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007e9a:	0212      	lsls	r2, r2, #8
 8007e9c:	4311      	orrs	r1, r2
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007ea2:	0852      	lsrs	r2, r2, #1
 8007ea4:	3a01      	subs	r2, #1
 8007ea6:	0552      	lsls	r2, r2, #21
 8007ea8:	4311      	orrs	r1, r2
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007eae:	0852      	lsrs	r2, r2, #1
 8007eb0:	3a01      	subs	r2, #1
 8007eb2:	0652      	lsls	r2, r2, #25
 8007eb4:	4311      	orrs	r1, r2
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007eba:	06d2      	lsls	r2, r2, #27
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	4949      	ldr	r1, [pc, #292]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ec4:	4b47      	ldr	r3, [pc, #284]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a46      	ldr	r2, [pc, #280]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007eca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ece:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ed0:	4b44      	ldr	r3, [pc, #272]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	4a43      	ldr	r2, [pc, #268]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007ed6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007eda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007edc:	f7fd f8fe 	bl	80050dc <HAL_GetTick>
 8007ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ee2:	e00e      	b.n	8007f02 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ee4:	f7fd f8fa 	bl	80050dc <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d907      	bls.n	8007f02 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ef2:	4b3c      	ldr	r3, [pc, #240]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e06c      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f02:	4b38      	ldr	r3, [pc, #224]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0ea      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x8a0>
 8007f0e:	e064      	b.n	8007fda <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f10:	4b34      	ldr	r3, [pc, #208]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a33      	ldr	r2, [pc, #204]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007f16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f1c:	f7fd f8de 	bl	80050dc <HAL_GetTick>
 8007f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f22:	e00e      	b.n	8007f42 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f24:	f7fd f8da 	bl	80050dc <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d907      	bls.n	8007f42 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f32:	4b2c      	ldr	r3, [pc, #176]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d001      	beq.n	8007f42 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e04c      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f42:	4b28      	ldr	r3, [pc, #160]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1ea      	bne.n	8007f24 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007f4e:	4b25      	ldr	r3, [pc, #148]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	4924      	ldr	r1, [pc, #144]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007f54:	4b25      	ldr	r3, [pc, #148]	@ (8007fec <HAL_RCC_OscConfig+0x9a8>)
 8007f56:	4013      	ands	r3, r2
 8007f58:	60cb      	str	r3, [r1, #12]
 8007f5a:	e03e      	b.n	8007fda <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d101      	bne.n	8007f68 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e039      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8007f68:	4b1e      	ldr	r3, [pc, #120]	@ (8007fe4 <HAL_RCC_OscConfig+0x9a0>)
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f003 0203 	and.w	r2, r3, #3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d12c      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f86:	3b01      	subs	r3, #1
 8007f88:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d123      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f98:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d11b      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa8:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d113      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb8:	085b      	lsrs	r3, r3, #1
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d109      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fcc:	085b      	lsrs	r3, r3, #1
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d001      	beq.n	8007fda <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e000      	b.n	8007fdc <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3720      	adds	r7, #32
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	40021000 	.word	0x40021000
 8007fe8:	019f800c 	.word	0x019f800c
 8007fec:	feeefffc 	.word	0xfeeefffc

08007ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e11c      	b.n	8008242 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008008:	4b90      	ldr	r3, [pc, #576]	@ (800824c <HAL_RCC_ClockConfig+0x25c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 030f 	and.w	r3, r3, #15
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d910      	bls.n	8008038 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008016:	4b8d      	ldr	r3, [pc, #564]	@ (800824c <HAL_RCC_ClockConfig+0x25c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f023 020f 	bic.w	r2, r3, #15
 800801e:	498b      	ldr	r1, [pc, #556]	@ (800824c <HAL_RCC_ClockConfig+0x25c>)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	4313      	orrs	r3, r2
 8008024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008026:	4b89      	ldr	r3, [pc, #548]	@ (800824c <HAL_RCC_ClockConfig+0x25c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 030f 	and.w	r3, r3, #15
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	429a      	cmp	r2, r3
 8008032:	d001      	beq.n	8008038 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e104      	b.n	8008242 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b00      	cmp	r3, #0
 8008042:	d010      	beq.n	8008066 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689a      	ldr	r2, [r3, #8]
 8008048:	4b81      	ldr	r3, [pc, #516]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008050:	429a      	cmp	r2, r3
 8008052:	d908      	bls.n	8008066 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008054:	4b7e      	ldr	r3, [pc, #504]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	497b      	ldr	r1, [pc, #492]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 8008062:	4313      	orrs	r3, r2
 8008064:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 8085 	beq.w	800817e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	2b03      	cmp	r3, #3
 800807a:	d11f      	bne.n	80080bc <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800807c:	4b74      	ldr	r3, [pc, #464]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d101      	bne.n	800808c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e0da      	b.n	8008242 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800808c:	f000 fa26 	bl	80084dc <RCC_GetSysClockFreqFromPLLSource>
 8008090:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	4a6f      	ldr	r2, [pc, #444]	@ (8008254 <HAL_RCC_ClockConfig+0x264>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d947      	bls.n	800812a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800809a:	4b6d      	ldr	r3, [pc, #436]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d141      	bne.n	800812a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80080a6:	4b6a      	ldr	r3, [pc, #424]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080ae:	4a68      	ldr	r2, [pc, #416]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 80080b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80080b6:	2380      	movs	r3, #128	@ 0x80
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	e036      	b.n	800812a <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d107      	bne.n	80080d4 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080c4:	4b62      	ldr	r3, [pc, #392]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d115      	bne.n	80080fc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e0b6      	b.n	8008242 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d107      	bne.n	80080ec <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80080dc:	4b5c      	ldr	r3, [pc, #368]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d109      	bne.n	80080fc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e0aa      	b.n	8008242 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080ec:	4b58      	ldr	r3, [pc, #352]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e0a2      	b.n	8008242 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80080fc:	f000 f8b0 	bl	8008260 <HAL_RCC_GetSysClockFreq>
 8008100:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	4a53      	ldr	r2, [pc, #332]	@ (8008254 <HAL_RCC_ClockConfig+0x264>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d90f      	bls.n	800812a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800810a:	4b51      	ldr	r3, [pc, #324]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d109      	bne.n	800812a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008116:	4b4e      	ldr	r3, [pc, #312]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800811e:	4a4c      	ldr	r2, [pc, #304]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 8008120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008124:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008126:	2380      	movs	r3, #128	@ 0x80
 8008128:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800812a:	4b49      	ldr	r3, [pc, #292]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f023 0203 	bic.w	r2, r3, #3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	4946      	ldr	r1, [pc, #280]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 8008138:	4313      	orrs	r3, r2
 800813a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800813c:	f7fc ffce 	bl	80050dc <HAL_GetTick>
 8008140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008142:	e013      	b.n	800816c <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008144:	f7fc ffca 	bl	80050dc <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008152:	4293      	cmp	r3, r2
 8008154:	d90a      	bls.n	800816c <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008156:	4b3e      	ldr	r3, [pc, #248]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f003 020c 	and.w	r2, r3, #12
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	429a      	cmp	r2, r3
 8008166:	d001      	beq.n	800816c <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e06a      	b.n	8008242 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800816c:	4b38      	ldr	r3, [pc, #224]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f003 020c 	and.w	r2, r3, #12
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	429a      	cmp	r2, r3
 800817c:	d1e2      	bne.n	8008144 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b80      	cmp	r3, #128	@ 0x80
 8008182:	d105      	bne.n	8008190 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008184:	4b32      	ldr	r3, [pc, #200]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	4a31      	ldr	r2, [pc, #196]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 800818a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800818e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d010      	beq.n	80081be <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689a      	ldr	r2, [r3, #8]
 80081a0:	4b2b      	ldr	r3, [pc, #172]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d208      	bcs.n	80081be <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081ac:	4b28      	ldr	r3, [pc, #160]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	4925      	ldr	r1, [pc, #148]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081be:	4b23      	ldr	r3, [pc, #140]	@ (800824c <HAL_RCC_ClockConfig+0x25c>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 030f 	and.w	r3, r3, #15
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d210      	bcs.n	80081ee <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081cc:	4b1f      	ldr	r3, [pc, #124]	@ (800824c <HAL_RCC_ClockConfig+0x25c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f023 020f 	bic.w	r2, r3, #15
 80081d4:	491d      	ldr	r1, [pc, #116]	@ (800824c <HAL_RCC_ClockConfig+0x25c>)
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	4313      	orrs	r3, r2
 80081da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081dc:	4b1b      	ldr	r3, [pc, #108]	@ (800824c <HAL_RCC_ClockConfig+0x25c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 030f 	and.w	r3, r3, #15
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d001      	beq.n	80081ee <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e029      	b.n	8008242 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d008      	beq.n	800820c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081fa:	4b15      	ldr	r3, [pc, #84]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	4912      	ldr	r1, [pc, #72]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 8008208:	4313      	orrs	r3, r2
 800820a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0308 	and.w	r3, r3, #8
 8008214:	2b00      	cmp	r3, #0
 8008216:	d009      	beq.n	800822c <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008218:	4b0d      	ldr	r3, [pc, #52]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	00db      	lsls	r3, r3, #3
 8008226:	490a      	ldr	r1, [pc, #40]	@ (8008250 <HAL_RCC_ClockConfig+0x260>)
 8008228:	4313      	orrs	r3, r2
 800822a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800822c:	f000 f8b6 	bl	800839c <HAL_RCC_GetHCLKFreq>
 8008230:	4603      	mov	r3, r0
 8008232:	4a09      	ldr	r2, [pc, #36]	@ (8008258 <HAL_RCC_ClockConfig+0x268>)
 8008234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008236:	4b09      	ldr	r3, [pc, #36]	@ (800825c <HAL_RCC_ClockConfig+0x26c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4618      	mov	r0, r3
 800823c:	f7fc fefe 	bl	800503c <HAL_InitTick>
 8008240:	4603      	mov	r3, r0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	40022000 	.word	0x40022000
 8008250:	40021000 	.word	0x40021000
 8008254:	04c4b400 	.word	0x04c4b400
 8008258:	20000000 	.word	0x20000000
 800825c:	20000004 	.word	0x20000004

08008260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008260:	b480      	push	{r7}
 8008262:	b089      	sub	sp, #36	@ 0x24
 8008264:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	61fb      	str	r3, [r7, #28]
 800826a:	2300      	movs	r3, #0
 800826c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800826e:	4b47      	ldr	r3, [pc, #284]	@ (800838c <HAL_RCC_GetSysClockFreq+0x12c>)
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f003 030c 	and.w	r3, r3, #12
 8008276:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008278:	4b44      	ldr	r3, [pc, #272]	@ (800838c <HAL_RCC_GetSysClockFreq+0x12c>)
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f003 0303 	and.w	r3, r3, #3
 8008280:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d005      	beq.n	8008294 <HAL_RCC_GetSysClockFreq+0x34>
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	2b0c      	cmp	r3, #12
 800828c:	d121      	bne.n	80082d2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d11e      	bne.n	80082d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008294:	4b3d      	ldr	r3, [pc, #244]	@ (800838c <HAL_RCC_GetSysClockFreq+0x12c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0308 	and.w	r3, r3, #8
 800829c:	2b00      	cmp	r3, #0
 800829e:	d107      	bne.n	80082b0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80082a0:	4b3a      	ldr	r3, [pc, #232]	@ (800838c <HAL_RCC_GetSysClockFreq+0x12c>)
 80082a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082a6:	0a1b      	lsrs	r3, r3, #8
 80082a8:	f003 030f 	and.w	r3, r3, #15
 80082ac:	61fb      	str	r3, [r7, #28]
 80082ae:	e005      	b.n	80082bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80082b0:	4b36      	ldr	r3, [pc, #216]	@ (800838c <HAL_RCC_GetSysClockFreq+0x12c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	091b      	lsrs	r3, r3, #4
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80082bc:	4a34      	ldr	r2, [pc, #208]	@ (8008390 <HAL_RCC_GetSysClockFreq+0x130>)
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10d      	bne.n	80082e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80082d0:	e00a      	b.n	80082e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	d102      	bne.n	80082de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80082d8:	4b2e      	ldr	r3, [pc, #184]	@ (8008394 <HAL_RCC_GetSysClockFreq+0x134>)
 80082da:	61bb      	str	r3, [r7, #24]
 80082dc:	e004      	b.n	80082e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	2b08      	cmp	r3, #8
 80082e2:	d101      	bne.n	80082e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80082e4:	4b2c      	ldr	r3, [pc, #176]	@ (8008398 <HAL_RCC_GetSysClockFreq+0x138>)
 80082e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	2b0c      	cmp	r3, #12
 80082ec:	d146      	bne.n	800837c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80082ee:	4b27      	ldr	r3, [pc, #156]	@ (800838c <HAL_RCC_GetSysClockFreq+0x12c>)
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f003 0303 	and.w	r3, r3, #3
 80082f6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80082f8:	4b24      	ldr	r3, [pc, #144]	@ (800838c <HAL_RCC_GetSysClockFreq+0x12c>)
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	091b      	lsrs	r3, r3, #4
 80082fe:	f003 030f 	and.w	r3, r3, #15
 8008302:	3301      	adds	r3, #1
 8008304:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2b02      	cmp	r3, #2
 800830a:	d003      	beq.n	8008314 <HAL_RCC_GetSysClockFreq+0xb4>
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2b03      	cmp	r3, #3
 8008310:	d00d      	beq.n	800832e <HAL_RCC_GetSysClockFreq+0xce>
 8008312:	e019      	b.n	8008348 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008314:	4a1f      	ldr	r2, [pc, #124]	@ (8008394 <HAL_RCC_GetSysClockFreq+0x134>)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	fbb2 f3f3 	udiv	r3, r2, r3
 800831c:	4a1b      	ldr	r2, [pc, #108]	@ (800838c <HAL_RCC_GetSysClockFreq+0x12c>)
 800831e:	68d2      	ldr	r2, [r2, #12]
 8008320:	0a12      	lsrs	r2, r2, #8
 8008322:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008326:	fb02 f303 	mul.w	r3, r2, r3
 800832a:	617b      	str	r3, [r7, #20]
        break;
 800832c:	e019      	b.n	8008362 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800832e:	4a1a      	ldr	r2, [pc, #104]	@ (8008398 <HAL_RCC_GetSysClockFreq+0x138>)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	fbb2 f3f3 	udiv	r3, r2, r3
 8008336:	4a15      	ldr	r2, [pc, #84]	@ (800838c <HAL_RCC_GetSysClockFreq+0x12c>)
 8008338:	68d2      	ldr	r2, [r2, #12]
 800833a:	0a12      	lsrs	r2, r2, #8
 800833c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008340:	fb02 f303 	mul.w	r3, r2, r3
 8008344:	617b      	str	r3, [r7, #20]
        break;
 8008346:	e00c      	b.n	8008362 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008348:	69fa      	ldr	r2, [r7, #28]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008350:	4a0e      	ldr	r2, [pc, #56]	@ (800838c <HAL_RCC_GetSysClockFreq+0x12c>)
 8008352:	68d2      	ldr	r2, [r2, #12]
 8008354:	0a12      	lsrs	r2, r2, #8
 8008356:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800835a:	fb02 f303 	mul.w	r3, r2, r3
 800835e:	617b      	str	r3, [r7, #20]
        break;
 8008360:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8008362:	4b0a      	ldr	r3, [pc, #40]	@ (800838c <HAL_RCC_GetSysClockFreq+0x12c>)
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	0e5b      	lsrs	r3, r3, #25
 8008368:	f003 0303 	and.w	r3, r3, #3
 800836c:	3301      	adds	r3, #1
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	fbb2 f3f3 	udiv	r3, r2, r3
 800837a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800837c:	69bb      	ldr	r3, [r7, #24]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3724      	adds	r7, #36	@ 0x24
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	40021000 	.word	0x40021000
 8008390:	0800c490 	.word	0x0800c490
 8008394:	00f42400 	.word	0x00f42400
 8008398:	007a1200 	.word	0x007a1200

0800839c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80083a0:	f7ff ff5e 	bl	8008260 <HAL_RCC_GetSysClockFreq>
 80083a4:	4602      	mov	r2, r0
 80083a6:	4b05      	ldr	r3, [pc, #20]	@ (80083bc <HAL_RCC_GetHCLKFreq+0x20>)
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	091b      	lsrs	r3, r3, #4
 80083ac:	f003 030f 	and.w	r3, r3, #15
 80083b0:	4903      	ldr	r1, [pc, #12]	@ (80083c0 <HAL_RCC_GetHCLKFreq+0x24>)
 80083b2:	5ccb      	ldrb	r3, [r1, r3]
 80083b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	40021000 	.word	0x40021000
 80083c0:	0800c478 	.word	0x0800c478

080083c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80083c8:	f7ff ffe8 	bl	800839c <HAL_RCC_GetHCLKFreq>
 80083cc:	4602      	mov	r2, r0
 80083ce:	4b05      	ldr	r3, [pc, #20]	@ (80083e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	0a1b      	lsrs	r3, r3, #8
 80083d4:	f003 0307 	and.w	r3, r3, #7
 80083d8:	4903      	ldr	r1, [pc, #12]	@ (80083e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083da:	5ccb      	ldrb	r3, [r1, r3]
 80083dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	40021000 	.word	0x40021000
 80083e8:	0800c488 	.word	0x0800c488

080083ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80083f0:	f7ff ffd4 	bl	800839c <HAL_RCC_GetHCLKFreq>
 80083f4:	4602      	mov	r2, r0
 80083f6:	4b05      	ldr	r3, [pc, #20]	@ (800840c <HAL_RCC_GetPCLK2Freq+0x20>)
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	0adb      	lsrs	r3, r3, #11
 80083fc:	f003 0307 	and.w	r3, r3, #7
 8008400:	4903      	ldr	r1, [pc, #12]	@ (8008410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008402:	5ccb      	ldrb	r3, [r1, r3]
 8008404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008408:	4618      	mov	r0, r3
 800840a:	bd80      	pop	{r7, pc}
 800840c:	40021000 	.word	0x40021000
 8008410:	0800c488 	.word	0x0800c488

08008414 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008420:	4b2c      	ldr	r3, [pc, #176]	@ (80084d4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800842c:	f7ff f86c 	bl	8007508 <HAL_PWREx_GetVoltageRange>
 8008430:	6138      	str	r0, [r7, #16]
 8008432:	e014      	b.n	800845e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008434:	4b27      	ldr	r3, [pc, #156]	@ (80084d4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008438:	4a26      	ldr	r2, [pc, #152]	@ (80084d4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800843a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800843e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008440:	4b24      	ldr	r3, [pc, #144]	@ (80084d4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008448:	60fb      	str	r3, [r7, #12]
 800844a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800844c:	f7ff f85c 	bl	8007508 <HAL_PWREx_GetVoltageRange>
 8008450:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008452:	4b20      	ldr	r3, [pc, #128]	@ (80084d4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008456:	4a1f      	ldr	r2, [pc, #124]	@ (80084d4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8008458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800845c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d003      	beq.n	800846c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800846a:	d10b      	bne.n	8008484 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b80      	cmp	r3, #128	@ 0x80
 8008470:	d919      	bls.n	80084a6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2ba0      	cmp	r3, #160	@ 0xa0
 8008476:	d902      	bls.n	800847e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008478:	2302      	movs	r3, #2
 800847a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800847c:	e013      	b.n	80084a6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800847e:	2301      	movs	r3, #1
 8008480:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8008482:	e010      	b.n	80084a6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b80      	cmp	r3, #128	@ 0x80
 8008488:	d902      	bls.n	8008490 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800848a:	2303      	movs	r3, #3
 800848c:	617b      	str	r3, [r7, #20]
 800848e:	e00a      	b.n	80084a6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b80      	cmp	r3, #128	@ 0x80
 8008494:	d102      	bne.n	800849c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008496:	2302      	movs	r3, #2
 8008498:	617b      	str	r3, [r7, #20]
 800849a:	e004      	b.n	80084a6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b70      	cmp	r3, #112	@ 0x70
 80084a0:	d101      	bne.n	80084a6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80084a2:	2301      	movs	r3, #1
 80084a4:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80084a6:	4b0c      	ldr	r3, [pc, #48]	@ (80084d8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f023 020f 	bic.w	r2, r3, #15
 80084ae:	490a      	ldr	r1, [pc, #40]	@ (80084d8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80084b6:	4b08      	ldr	r3, [pc, #32]	@ (80084d8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d001      	beq.n	80084c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e000      	b.n	80084ca <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	40021000 	.word	0x40021000
 80084d8:	40022000 	.word	0x40022000

080084dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80084e2:	4b31      	ldr	r3, [pc, #196]	@ (80085a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	f003 0303 	and.w	r3, r3, #3
 80084ea:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80084ec:	4b2e      	ldr	r3, [pc, #184]	@ (80085a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	091b      	lsrs	r3, r3, #4
 80084f2:	f003 030f 	and.w	r3, r3, #15
 80084f6:	3301      	adds	r3, #1
 80084f8:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d015      	beq.n	800852c <RCC_GetSysClockFreqFromPLLSource+0x50>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b03      	cmp	r3, #3
 8008504:	d839      	bhi.n	800857a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d01c      	beq.n	8008546 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2b02      	cmp	r3, #2
 8008510:	d133      	bne.n	800857a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008512:	4a26      	ldr	r2, [pc, #152]	@ (80085ac <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	fbb2 f3f3 	udiv	r3, r2, r3
 800851a:	4a23      	ldr	r2, [pc, #140]	@ (80085a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800851c:	68d2      	ldr	r2, [r2, #12]
 800851e:	0a12      	lsrs	r2, r2, #8
 8008520:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008524:	fb02 f303 	mul.w	r3, r2, r3
 8008528:	613b      	str	r3, [r7, #16]
      break;
 800852a:	e029      	b.n	8008580 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800852c:	4a20      	ldr	r2, [pc, #128]	@ (80085b0 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	fbb2 f3f3 	udiv	r3, r2, r3
 8008534:	4a1c      	ldr	r2, [pc, #112]	@ (80085a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8008536:	68d2      	ldr	r2, [r2, #12]
 8008538:	0a12      	lsrs	r2, r2, #8
 800853a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800853e:	fb02 f303 	mul.w	r3, r2, r3
 8008542:	613b      	str	r3, [r7, #16]
      break;
 8008544:	e01c      	b.n	8008580 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008546:	4b18      	ldr	r3, [pc, #96]	@ (80085a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0308 	and.w	r3, r3, #8
 800854e:	2b00      	cmp	r3, #0
 8008550:	d107      	bne.n	8008562 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008552:	4b15      	ldr	r3, [pc, #84]	@ (80085a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8008554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008558:	0a1b      	lsrs	r3, r3, #8
 800855a:	f003 030f 	and.w	r3, r3, #15
 800855e:	617b      	str	r3, [r7, #20]
 8008560:	e005      	b.n	800856e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008562:	4b11      	ldr	r3, [pc, #68]	@ (80085a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	091b      	lsrs	r3, r3, #4
 8008568:	f003 030f 	and.w	r3, r3, #15
 800856c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800856e:	4a11      	ldr	r2, [pc, #68]	@ (80085b4 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008576:	613b      	str	r3, [r7, #16]
        break;
 8008578:	e002      	b.n	8008580 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800857a:	2300      	movs	r3, #0
 800857c:	613b      	str	r3, [r7, #16]
      break;
 800857e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8008580:	4b09      	ldr	r3, [pc, #36]	@ (80085a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	0e5b      	lsrs	r3, r3, #25
 8008586:	f003 0303 	and.w	r3, r3, #3
 800858a:	3301      	adds	r3, #1
 800858c:	005b      	lsls	r3, r3, #1
 800858e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	fbb2 f3f3 	udiv	r3, r2, r3
 8008598:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800859a:	683b      	ldr	r3, [r7, #0]
}
 800859c:	4618      	mov	r0, r3
 800859e:	371c      	adds	r7, #28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	40021000 	.word	0x40021000
 80085ac:	00f42400 	.word	0x00f42400
 80085b0:	007a1200 	.word	0x007a1200
 80085b4:	0800c490 	.word	0x0800c490

080085b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b088      	sub	sp, #32
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80085c0:	2300      	movs	r3, #0
 80085c2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80085c4:	2300      	movs	r3, #0
 80085c6:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d040      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085d8:	2b80      	cmp	r3, #128	@ 0x80
 80085da:	d02a      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80085dc:	2b80      	cmp	r3, #128	@ 0x80
 80085de:	d825      	bhi.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80085e0:	2b60      	cmp	r3, #96	@ 0x60
 80085e2:	d026      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80085e4:	2b60      	cmp	r3, #96	@ 0x60
 80085e6:	d821      	bhi.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80085e8:	2b40      	cmp	r3, #64	@ 0x40
 80085ea:	d006      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 80085ec:	2b40      	cmp	r3, #64	@ 0x40
 80085ee:	d81d      	bhi.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d009      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80085f4:	2b20      	cmp	r3, #32
 80085f6:	d010      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80085f8:	e018      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80085fa:	4b8f      	ldr	r3, [pc, #572]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	4a8e      	ldr	r2, [pc, #568]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008604:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008606:	e015      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	3304      	adds	r3, #4
 800860c:	2100      	movs	r1, #0
 800860e:	4618      	mov	r0, r3
 8008610:	f000 fb56 	bl	8008cc0 <RCCEx_PLLSAI1_Config>
 8008614:	4603      	mov	r3, r0
 8008616:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008618:	e00c      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	3320      	adds	r3, #32
 800861e:	2100      	movs	r1, #0
 8008620:	4618      	mov	r0, r3
 8008622:	f000 fc33 	bl	8008e8c <RCCEx_PLLSAI2_Config>
 8008626:	4603      	mov	r3, r0
 8008628:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800862a:	e003      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	77fb      	strb	r3, [r7, #31]
        break;
 8008630:	e000      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8008632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008634:	7ffb      	ldrb	r3, [r7, #31]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10b      	bne.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800863a:	4b7f      	ldr	r3, [pc, #508]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800863c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008640:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008648:	497b      	ldr	r1, [pc, #492]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800864a:	4313      	orrs	r3, r2
 800864c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8008650:	e001      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008652:	7ffb      	ldrb	r3, [r7, #31]
 8008654:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d047      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008666:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800866a:	d030      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 800866c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008670:	d82a      	bhi.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008672:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008676:	d02a      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008678:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800867c:	d824      	bhi.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800867e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008682:	d008      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008688:	d81e      	bhi.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800868e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008692:	d010      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008694:	e018      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008696:	4b68      	ldr	r3, [pc, #416]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	4a67      	ldr	r2, [pc, #412]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800869c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086a0:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80086a2:	e015      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	3304      	adds	r3, #4
 80086a8:	2100      	movs	r1, #0
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 fb08 	bl	8008cc0 <RCCEx_PLLSAI1_Config>
 80086b0:	4603      	mov	r3, r0
 80086b2:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80086b4:	e00c      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3320      	adds	r3, #32
 80086ba:	2100      	movs	r1, #0
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 fbe5 	bl	8008e8c <RCCEx_PLLSAI2_Config>
 80086c2:	4603      	mov	r3, r0
 80086c4:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80086c6:	e003      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	77fb      	strb	r3, [r7, #31]
        break;
 80086cc:	e000      	b.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80086ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086d0:	7ffb      	ldrb	r3, [r7, #31]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10b      	bne.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80086d6:	4b58      	ldr	r3, [pc, #352]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80086d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e4:	4954      	ldr	r1, [pc, #336]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80086ec:	e001      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ee:	7ffb      	ldrb	r3, [r7, #31]
 80086f0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f000 80ab 	beq.w	8008856 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008700:	2300      	movs	r3, #0
 8008702:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008704:	4b4c      	ldr	r3, [pc, #304]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10d      	bne.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008710:	4b49      	ldr	r3, [pc, #292]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008714:	4a48      	ldr	r2, [pc, #288]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800871a:	6593      	str	r3, [r2, #88]	@ 0x58
 800871c:	4b46      	ldr	r3, [pc, #280]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800871e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008728:	2301      	movs	r3, #1
 800872a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800872c:	4b43      	ldr	r3, [pc, #268]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a42      	ldr	r2, [pc, #264]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008736:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008738:	f7fc fcd0 	bl	80050dc <HAL_GetTick>
 800873c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800873e:	e00f      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008740:	f7fc fccc 	bl	80050dc <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	2b02      	cmp	r3, #2
 800874c:	d908      	bls.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800874e:	4b3b      	ldr	r3, [pc, #236]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008756:	2b00      	cmp	r3, #0
 8008758:	d109      	bne.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800875e:	e006      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008760:	4b36      	ldr	r3, [pc, #216]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008768:	2b00      	cmp	r3, #0
 800876a:	d0e9      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800876c:	e000      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800876e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8008770:	7ffb      	ldrb	r3, [r7, #31]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d164      	bne.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008776:	4b30      	ldr	r3, [pc, #192]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800877c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008780:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d01f      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	429a      	cmp	r2, r3
 8008792:	d019      	beq.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008794:	4b28      	ldr	r3, [pc, #160]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800879a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800879e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80087a0:	4b25      	ldr	r3, [pc, #148]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087a6:	4a24      	ldr	r2, [pc, #144]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80087b0:	4b21      	ldr	r3, [pc, #132]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b6:	4a20      	ldr	r2, [pc, #128]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80087c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d01f      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d2:	f7fc fc83 	bl	80050dc <HAL_GetTick>
 80087d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087d8:	e012      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087da:	f7fc fc7f 	bl	80050dc <HAL_GetTick>
 80087de:	4602      	mov	r2, r0
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d909      	bls.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087ec:	4b12      	ldr	r3, [pc, #72]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80087ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10a      	bne.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80087fe:	e007      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008800:	4b0d      	ldr	r3, [pc, #52]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0e5      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x222>
 800880e:	e000      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8008810:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8008812:	7ffb      	ldrb	r3, [r7, #31]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10c      	bne.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008818:	4b07      	ldr	r3, [pc, #28]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800881a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800881e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008828:	4903      	ldr	r1, [pc, #12]	@ (8008838 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800882a:	4313      	orrs	r3, r2
 800882c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008830:	e008      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008832:	7ffb      	ldrb	r3, [r7, #31]
 8008834:	77bb      	strb	r3, [r7, #30]
 8008836:	e005      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8008838:	40021000 	.word	0x40021000
 800883c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008840:	7ffb      	ldrb	r3, [r7, #31]
 8008842:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d105      	bne.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800884a:	4b9c      	ldr	r3, [pc, #624]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800884c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800884e:	4a9b      	ldr	r2, [pc, #620]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008850:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008854:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00a      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008862:	4b96      	ldr	r3, [pc, #600]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008868:	f023 0203 	bic.w	r2, r3, #3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008870:	4992      	ldr	r1, [pc, #584]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008872:	4313      	orrs	r3, r2
 8008874:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0302 	and.w	r3, r3, #2
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00a      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008884:	4b8d      	ldr	r3, [pc, #564]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800888a:	f023 020c 	bic.w	r2, r3, #12
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008892:	498a      	ldr	r1, [pc, #552]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008894:	4313      	orrs	r3, r2
 8008896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0304 	and.w	r3, r3, #4
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00a      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80088a6:	4b85      	ldr	r3, [pc, #532]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088b4:	4981      	ldr	r1, [pc, #516]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0308 	and.w	r3, r3, #8
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00a      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80088c8:	4b7c      	ldr	r3, [pc, #496]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d6:	4979      	ldr	r1, [pc, #484]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0310 	and.w	r3, r3, #16
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00a      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80088ea:	4b74      	ldr	r3, [pc, #464]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088f8:	4970      	ldr	r1, [pc, #448]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 0320 	and.w	r3, r3, #32
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00a      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800890c:	4b6b      	ldr	r3, [pc, #428]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800890e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008912:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800891a:	4968      	ldr	r1, [pc, #416]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800891c:	4313      	orrs	r3, r2
 800891e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00a      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800892e:	4b63      	ldr	r3, [pc, #396]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008934:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800893c:	495f      	ldr	r1, [pc, #380]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800893e:	4313      	orrs	r3, r2
 8008940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00a      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008950:	4b5a      	ldr	r3, [pc, #360]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008956:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800895e:	4957      	ldr	r1, [pc, #348]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008960:	4313      	orrs	r3, r2
 8008962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00a      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8008972:	4b52      	ldr	r3, [pc, #328]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008978:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008980:	494e      	ldr	r1, [pc, #312]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008982:	4313      	orrs	r3, r2
 8008984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d031      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008998:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800899c:	d00e      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x404>
 800899e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089a2:	d814      	bhi.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x416>
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d015      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80089a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089ac:	d10f      	bne.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089ae:	4b43      	ldr	r3, [pc, #268]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	4a42      	ldr	r2, [pc, #264]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80089b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089b8:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80089ba:	e00c      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3304      	adds	r3, #4
 80089c0:	2100      	movs	r1, #0
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 f97c 	bl	8008cc0 <RCCEx_PLLSAI1_Config>
 80089c8:	4603      	mov	r3, r0
 80089ca:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80089cc:	e003      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	77fb      	strb	r3, [r7, #31]
        break;
 80089d2:	e000      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80089d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089d6:	7ffb      	ldrb	r3, [r7, #31]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10b      	bne.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80089dc:	4b37      	ldr	r3, [pc, #220]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80089de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089ea:	4934      	ldr	r1, [pc, #208]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80089ec:	4313      	orrs	r3, r2
 80089ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80089f2:	e001      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089f4:	7ffb      	ldrb	r3, [r7, #31]
 80089f6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00a      	beq.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a04:	4b2d      	ldr	r3, [pc, #180]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a0a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a12:	492a      	ldr	r1, [pc, #168]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a14:	4313      	orrs	r3, r2
 8008a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008a26:	4b25      	ldr	r3, [pc, #148]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a34:	4921      	ldr	r1, [pc, #132]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00a      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a48:	4b1c      	ldr	r3, [pc, #112]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a56:	4919      	ldr	r1, [pc, #100]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00a      	beq.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a6a:	4b14      	ldr	r3, [pc, #80]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a70:	f023 0203 	bic.w	r2, r3, #3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a78:	4910      	ldr	r1, [pc, #64]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d02b      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a9a:	4908      	ldr	r1, [pc, #32]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008aa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008aaa:	d109      	bne.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008aac:	4b03      	ldr	r3, [pc, #12]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	4a02      	ldr	r2, [pc, #8]	@ (8008abc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ab6:	60d3      	str	r3, [r2, #12]
 8008ab8:	e014      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008aba:	bf00      	nop
 8008abc:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ac4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ac8:	d10c      	bne.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	3304      	adds	r3, #4
 8008ace:	2101      	movs	r1, #1
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 f8f5 	bl	8008cc0 <RCCEx_PLLSAI1_Config>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8008ada:	7ffb      	ldrb	r3, [r7, #31]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8008ae0:	7ffb      	ldrb	r3, [r7, #31]
 8008ae2:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d04a      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008af4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008af8:	d108      	bne.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x554>
 8008afa:	4b70      	ldr	r3, [pc, #448]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008afc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b00:	4a6e      	ldr	r2, [pc, #440]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b06:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8008b0a:	e012      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8008b0c:	4b6b      	ldr	r3, [pc, #428]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b1a:	4968      	ldr	r1, [pc, #416]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8008b22:	4b66      	ldr	r3, [pc, #408]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b28:	4a64      	ldr	r2, [pc, #400]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b2e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b3a:	d10d      	bne.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	2101      	movs	r1, #1
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 f8bc 	bl	8008cc0 <RCCEx_PLLSAI1_Config>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008b4c:	7ffb      	ldrb	r3, [r7, #31]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d019      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8008b52:	7ffb      	ldrb	r3, [r7, #31]
 8008b54:	77bb      	strb	r3, [r7, #30]
 8008b56:	e016      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b60:	d106      	bne.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b62:	4b56      	ldr	r3, [pc, #344]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	4a55      	ldr	r2, [pc, #340]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b6c:	60d3      	str	r3, [r2, #12]
 8008b6e:	e00a      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b78:	d105      	bne.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008b7a:	4b50      	ldr	r3, [pc, #320]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	4a4f      	ldr	r2, [pc, #316]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b84:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d028      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b92:	4b4a      	ldr	r3, [pc, #296]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ba0:	4946      	ldr	r1, [pc, #280]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bb0:	d106      	bne.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bb2:	4b42      	ldr	r3, [pc, #264]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	4a41      	ldr	r2, [pc, #260]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008bb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bbc:	60d3      	str	r3, [r2, #12]
 8008bbe:	e011      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bc8:	d10c      	bne.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	3304      	adds	r3, #4
 8008bce:	2101      	movs	r1, #1
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 f875 	bl	8008cc0 <RCCEx_PLLSAI1_Config>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008bda:	7ffb      	ldrb	r3, [r7, #31]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8008be0:	7ffb      	ldrb	r3, [r7, #31]
 8008be2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d01e      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008bf0:	4b32      	ldr	r3, [pc, #200]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bf6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c00:	492e      	ldr	r1, [pc, #184]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c02:	4313      	orrs	r3, r2
 8008c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c12:	d10c      	bne.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	3304      	adds	r3, #4
 8008c18:	2102      	movs	r1, #2
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 f850 	bl	8008cc0 <RCCEx_PLLSAI1_Config>
 8008c20:	4603      	mov	r3, r0
 8008c22:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008c24:	7ffb      	ldrb	r3, [r7, #31]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8008c2a:	7ffb      	ldrb	r3, [r7, #31]
 8008c2c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00b      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008c3a:	4b20      	ldr	r3, [pc, #128]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c40:	f023 0204 	bic.w	r2, r3, #4
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c4a:	491c      	ldr	r1, [pc, #112]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00b      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008c5e:	4b17      	ldr	r3, [pc, #92]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c64:	f023 0218 	bic.w	r2, r3, #24
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c6e:	4913      	ldr	r1, [pc, #76]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c70:	4313      	orrs	r3, r2
 8008c72:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d017      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008c82:	4b0e      	ldr	r3, [pc, #56]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c88:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c92:	490a      	ldr	r1, [pc, #40]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008c94:	4313      	orrs	r3, r2
 8008c96:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ca0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ca4:	d105      	bne.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ca6:	4b05      	ldr	r3, [pc, #20]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	4a04      	ldr	r2, [pc, #16]	@ (8008cbc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8008cac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cb0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8008cb2:	7fbb      	ldrb	r3, [r7, #30]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3720      	adds	r7, #32
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	40021000 	.word	0x40021000

08008cc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d018      	beq.n	8008d08 <RCCEx_PLLSAI1_Config+0x48>
 8008cd6:	2b03      	cmp	r3, #3
 8008cd8:	d81f      	bhi.n	8008d1a <RCCEx_PLLSAI1_Config+0x5a>
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d002      	beq.n	8008ce4 <RCCEx_PLLSAI1_Config+0x24>
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d009      	beq.n	8008cf6 <RCCEx_PLLSAI1_Config+0x36>
 8008ce2:	e01a      	b.n	8008d1a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008ce4:	4b65      	ldr	r3, [pc, #404]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0302 	and.w	r3, r3, #2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d117      	bne.n	8008d20 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cf4:	e014      	b.n	8008d20 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008cf6:	4b61      	ldr	r3, [pc, #388]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d110      	bne.n	8008d24 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d06:	e00d      	b.n	8008d24 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8008d08:	4b5c      	ldr	r3, [pc, #368]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d109      	bne.n	8008d28 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d18:	e006      	b.n	8008d28 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d1e:	e004      	b.n	8008d2a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8008d20:	bf00      	nop
 8008d22:	e002      	b.n	8008d2a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8008d24:	bf00      	nop
 8008d26:	e000      	b.n	8008d2a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8008d28:	bf00      	nop
  }

  if (status == HAL_OK)
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f040 809f 	bne.w	8008e70 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008d32:	4b52      	ldr	r3, [pc, #328]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a51      	ldr	r2, [pc, #324]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008d38:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d3e:	f7fc f9cd 	bl	80050dc <HAL_GetTick>
 8008d42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008d44:	e00f      	b.n	8008d66 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d46:	f7fc f9c9 	bl	80050dc <HAL_GetTick>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d908      	bls.n	8008d66 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008d54:	4b49      	ldr	r3, [pc, #292]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d009      	beq.n	8008d74 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d64:	e006      	b.n	8008d74 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008d66:	4b45      	ldr	r3, [pc, #276]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1e9      	bne.n	8008d46 <RCCEx_PLLSAI1_Config+0x86>
 8008d72:	e000      	b.n	8008d76 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8008d74:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d179      	bne.n	8008e70 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d116      	bne.n	8008db0 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008d82:	4b3e      	ldr	r3, [pc, #248]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008d84:	691a      	ldr	r2, [r3, #16]
 8008d86:	4b3e      	ldr	r3, [pc, #248]	@ (8008e80 <RCCEx_PLLSAI1_Config+0x1c0>)
 8008d88:	4013      	ands	r3, r2
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	6892      	ldr	r2, [r2, #8]
 8008d8e:	0211      	lsls	r1, r2, #8
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	68d2      	ldr	r2, [r2, #12]
 8008d94:	06d2      	lsls	r2, r2, #27
 8008d96:	4311      	orrs	r1, r2
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6852      	ldr	r2, [r2, #4]
 8008d9c:	3a01      	subs	r2, #1
 8008d9e:	0112      	lsls	r2, r2, #4
 8008da0:	4311      	orrs	r1, r2
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	6812      	ldr	r2, [r2, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	4934      	ldr	r1, [pc, #208]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	610b      	str	r3, [r1, #16]
 8008dae:	e033      	b.n	8008e18 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d118      	bne.n	8008de8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008db6:	4b31      	ldr	r3, [pc, #196]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008db8:	691a      	ldr	r2, [r3, #16]
 8008dba:	4b32      	ldr	r3, [pc, #200]	@ (8008e84 <RCCEx_PLLSAI1_Config+0x1c4>)
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	6892      	ldr	r2, [r2, #8]
 8008dc2:	0211      	lsls	r1, r2, #8
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	6912      	ldr	r2, [r2, #16]
 8008dc8:	0852      	lsrs	r2, r2, #1
 8008dca:	3a01      	subs	r2, #1
 8008dcc:	0552      	lsls	r2, r2, #21
 8008dce:	4311      	orrs	r1, r2
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	6852      	ldr	r2, [r2, #4]
 8008dd4:	3a01      	subs	r2, #1
 8008dd6:	0112      	lsls	r2, r2, #4
 8008dd8:	4311      	orrs	r1, r2
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	6812      	ldr	r2, [r2, #0]
 8008dde:	430a      	orrs	r2, r1
 8008de0:	4926      	ldr	r1, [pc, #152]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008de2:	4313      	orrs	r3, r2
 8008de4:	610b      	str	r3, [r1, #16]
 8008de6:	e017      	b.n	8008e18 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008de8:	4b24      	ldr	r3, [pc, #144]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008dea:	691a      	ldr	r2, [r3, #16]
 8008dec:	4b26      	ldr	r3, [pc, #152]	@ (8008e88 <RCCEx_PLLSAI1_Config+0x1c8>)
 8008dee:	4013      	ands	r3, r2
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	6892      	ldr	r2, [r2, #8]
 8008df4:	0211      	lsls	r1, r2, #8
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	6952      	ldr	r2, [r2, #20]
 8008dfa:	0852      	lsrs	r2, r2, #1
 8008dfc:	3a01      	subs	r2, #1
 8008dfe:	0652      	lsls	r2, r2, #25
 8008e00:	4311      	orrs	r1, r2
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	6852      	ldr	r2, [r2, #4]
 8008e06:	3a01      	subs	r2, #1
 8008e08:	0112      	lsls	r2, r2, #4
 8008e0a:	4311      	orrs	r1, r2
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	6812      	ldr	r2, [r2, #0]
 8008e10:	430a      	orrs	r2, r1
 8008e12:	491a      	ldr	r1, [pc, #104]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008e18:	4b18      	ldr	r3, [pc, #96]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a17      	ldr	r2, [pc, #92]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e24:	f7fc f95a 	bl	80050dc <HAL_GetTick>
 8008e28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008e2a:	e00f      	b.n	8008e4c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e2c:	f7fc f956 	bl	80050dc <HAL_GetTick>
 8008e30:	4602      	mov	r2, r0
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d908      	bls.n	8008e4c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008e3a:	4b10      	ldr	r3, [pc, #64]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d109      	bne.n	8008e5a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8008e4a:	e006      	b.n	8008e5a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0e9      	beq.n	8008e2c <RCCEx_PLLSAI1_Config+0x16c>
 8008e58:	e000      	b.n	8008e5c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8008e5a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d106      	bne.n	8008e70 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8008e62:	4b06      	ldr	r3, [pc, #24]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e64:	691a      	ldr	r2, [r3, #16]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	4904      	ldr	r1, [pc, #16]	@ (8008e7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	40021000 	.word	0x40021000
 8008e80:	07ff800c 	.word	0x07ff800c
 8008e84:	ff9f800c 	.word	0xff9f800c
 8008e88:	f9ff800c 	.word	0xf9ff800c

08008e8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d018      	beq.n	8008ed4 <RCCEx_PLLSAI2_Config+0x48>
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d81f      	bhi.n	8008ee6 <RCCEx_PLLSAI2_Config+0x5a>
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d002      	beq.n	8008eb0 <RCCEx_PLLSAI2_Config+0x24>
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d009      	beq.n	8008ec2 <RCCEx_PLLSAI2_Config+0x36>
 8008eae:	e01a      	b.n	8008ee6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8008fdc <RCCEx_PLLSAI2_Config+0x150>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0302 	and.w	r3, r3, #2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d117      	bne.n	8008eec <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ec0:	e014      	b.n	8008eec <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008ec2:	4b46      	ldr	r3, [pc, #280]	@ (8008fdc <RCCEx_PLLSAI2_Config+0x150>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d110      	bne.n	8008ef0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ed2:	e00d      	b.n	8008ef0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8008ed4:	4b41      	ldr	r3, [pc, #260]	@ (8008fdc <RCCEx_PLLSAI2_Config+0x150>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d109      	bne.n	8008ef4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ee4:	e006      	b.n	8008ef4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8008eea:	e004      	b.n	8008ef6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8008eec:	bf00      	nop
 8008eee:	e002      	b.n	8008ef6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8008ef0:	bf00      	nop
 8008ef2:	e000      	b.n	8008ef6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8008ef4:	bf00      	nop
  }

  if (status == HAL_OK)
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d169      	bne.n	8008fd0 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008efc:	4b37      	ldr	r3, [pc, #220]	@ (8008fdc <RCCEx_PLLSAI2_Config+0x150>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a36      	ldr	r2, [pc, #216]	@ (8008fdc <RCCEx_PLLSAI2_Config+0x150>)
 8008f02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f08:	f7fc f8e8 	bl	80050dc <HAL_GetTick>
 8008f0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008f0e:	e00f      	b.n	8008f30 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008f10:	f7fc f8e4 	bl	80050dc <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d908      	bls.n	8008f30 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8008fdc <RCCEx_PLLSAI2_Config+0x150>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d009      	beq.n	8008f3e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008f2e:	e006      	b.n	8008f3e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008f30:	4b2a      	ldr	r3, [pc, #168]	@ (8008fdc <RCCEx_PLLSAI2_Config+0x150>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e9      	bne.n	8008f10 <RCCEx_PLLSAI2_Config+0x84>
 8008f3c:	e000      	b.n	8008f40 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8008f3e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d144      	bne.n	8008fd0 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d115      	bne.n	8008f78 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008f4c:	4b23      	ldr	r3, [pc, #140]	@ (8008fdc <RCCEx_PLLSAI2_Config+0x150>)
 8008f4e:	695a      	ldr	r2, [r3, #20]
 8008f50:	4b23      	ldr	r3, [pc, #140]	@ (8008fe0 <RCCEx_PLLSAI2_Config+0x154>)
 8008f52:	4013      	ands	r3, r2
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	6892      	ldr	r2, [r2, #8]
 8008f58:	0211      	lsls	r1, r2, #8
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	68d2      	ldr	r2, [r2, #12]
 8008f5e:	06d2      	lsls	r2, r2, #27
 8008f60:	4311      	orrs	r1, r2
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	6852      	ldr	r2, [r2, #4]
 8008f66:	3a01      	subs	r2, #1
 8008f68:	0112      	lsls	r2, r2, #4
 8008f6a:	4311      	orrs	r1, r2
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	6812      	ldr	r2, [r2, #0]
 8008f70:	430a      	orrs	r2, r1
 8008f72:	491a      	ldr	r1, [pc, #104]	@ (8008fdc <RCCEx_PLLSAI2_Config+0x150>)
 8008f74:	4313      	orrs	r3, r2
 8008f76:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008f78:	4b18      	ldr	r3, [pc, #96]	@ (8008fdc <RCCEx_PLLSAI2_Config+0x150>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a17      	ldr	r2, [pc, #92]	@ (8008fdc <RCCEx_PLLSAI2_Config+0x150>)
 8008f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f84:	f7fc f8aa 	bl	80050dc <HAL_GetTick>
 8008f88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008f8a:	e00f      	b.n	8008fac <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008f8c:	f7fc f8a6 	bl	80050dc <HAL_GetTick>
 8008f90:	4602      	mov	r2, r0
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d908      	bls.n	8008fac <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008f9a:	4b10      	ldr	r3, [pc, #64]	@ (8008fdc <RCCEx_PLLSAI2_Config+0x150>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d109      	bne.n	8008fba <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8008faa:	e006      	b.n	8008fba <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008fac:	4b0b      	ldr	r3, [pc, #44]	@ (8008fdc <RCCEx_PLLSAI2_Config+0x150>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d0e9      	beq.n	8008f8c <RCCEx_PLLSAI2_Config+0x100>
 8008fb8:	e000      	b.n	8008fbc <RCCEx_PLLSAI2_Config+0x130>
          break;
 8008fba:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d106      	bne.n	8008fd0 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8008fc2:	4b06      	ldr	r3, [pc, #24]	@ (8008fdc <RCCEx_PLLSAI2_Config+0x150>)
 8008fc4:	695a      	ldr	r2, [r3, #20]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	4904      	ldr	r1, [pc, #16]	@ (8008fdc <RCCEx_PLLSAI2_Config+0x150>)
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	40021000 	.word	0x40021000
 8008fe0:	07ff800c 	.word	0x07ff800c

08008fe4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d066      	beq.n	80090c4 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d106      	bne.n	8009010 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7fb f8cc 	bl	80041a8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2202      	movs	r2, #2
 8009014:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	f003 0310 	and.w	r3, r3, #16
 8009022:	2b10      	cmp	r3, #16
 8009024:	d045      	beq.n	80090b2 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009026:	4b2a      	ldr	r3, [pc, #168]	@ (80090d0 <HAL_RTC_Init+0xec>)
 8009028:	22ca      	movs	r2, #202	@ 0xca
 800902a:	625a      	str	r2, [r3, #36]	@ 0x24
 800902c:	4b28      	ldr	r3, [pc, #160]	@ (80090d0 <HAL_RTC_Init+0xec>)
 800902e:	2253      	movs	r2, #83	@ 0x53
 8009030:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f872 	bl	800911c <RTC_EnterInitMode>
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d121      	bne.n	8009086 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009042:	4b23      	ldr	r3, [pc, #140]	@ (80090d0 <HAL_RTC_Init+0xec>)
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	4a22      	ldr	r2, [pc, #136]	@ (80090d0 <HAL_RTC_Init+0xec>)
 8009048:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800904c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009050:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009052:	4b1f      	ldr	r3, [pc, #124]	@ (80090d0 <HAL_RTC_Init+0xec>)
 8009054:	699a      	ldr	r2, [r3, #24]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6859      	ldr	r1, [r3, #4]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	4319      	orrs	r1, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	430b      	orrs	r3, r1
 8009066:	491a      	ldr	r1, [pc, #104]	@ (80090d0 <HAL_RTC_Init+0xec>)
 8009068:	4313      	orrs	r3, r2
 800906a:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68da      	ldr	r2, [r3, #12]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	041b      	lsls	r3, r3, #16
 8009076:	4916      	ldr	r1, [pc, #88]	@ (80090d0 <HAL_RTC_Init+0xec>)
 8009078:	4313      	orrs	r3, r2
 800907a:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f881 	bl	8009184 <RTC_ExitInitMode>
 8009082:	4603      	mov	r3, r0
 8009084:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8009086:	7bfb      	ldrb	r3, [r7, #15]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10e      	bne.n	80090aa <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 800908c:	4b10      	ldr	r3, [pc, #64]	@ (80090d0 <HAL_RTC_Init+0xec>)
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a19      	ldr	r1, [r3, #32]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	4319      	orrs	r1, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	430b      	orrs	r3, r1
 80090a4:	490a      	ldr	r1, [pc, #40]	@ (80090d0 <HAL_RTC_Init+0xec>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090aa:	4b09      	ldr	r3, [pc, #36]	@ (80090d0 <HAL_RTC_Init+0xec>)
 80090ac:	22ff      	movs	r2, #255	@ 0xff
 80090ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80090b0:	e001      	b.n	80090b6 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80090b6:	7bfb      	ldrb	r3, [r7, #15]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d103      	bne.n	80090c4 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	40002800 	.word	0x40002800

080090d4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 80090dc:	4b0d      	ldr	r3, [pc, #52]	@ (8009114 <HAL_RTC_WaitForSynchro+0x40>)
 80090de:	4a0e      	ldr	r2, [pc, #56]	@ (8009118 <HAL_RTC_WaitForSynchro+0x44>)
 80090e0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80090e2:	f7fb fffb 	bl	80050dc <HAL_GetTick>
 80090e6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80090e8:	e009      	b.n	80090fe <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80090ea:	f7fb fff7 	bl	80050dc <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80090f8:	d901      	bls.n	80090fe <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e006      	b.n	800910c <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80090fe:	4b05      	ldr	r3, [pc, #20]	@ (8009114 <HAL_RTC_WaitForSynchro+0x40>)
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f003 0320 	and.w	r3, r3, #32
 8009106:	2b00      	cmp	r3, #0
 8009108:	d0ef      	beq.n	80090ea <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	40002800 	.word	0x40002800
 8009118:	0001005c 	.word	0x0001005c

0800911c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009128:	4b15      	ldr	r3, [pc, #84]	@ (8009180 <RTC_EnterInitMode+0x64>)
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009130:	2b00      	cmp	r3, #0
 8009132:	d120      	bne.n	8009176 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009134:	4b12      	ldr	r3, [pc, #72]	@ (8009180 <RTC_EnterInitMode+0x64>)
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	4a11      	ldr	r2, [pc, #68]	@ (8009180 <RTC_EnterInitMode+0x64>)
 800913a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800913e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8009140:	f7fb ffcc 	bl	80050dc <HAL_GetTick>
 8009144:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009146:	e00d      	b.n	8009164 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009148:	f7fb ffc8 	bl	80050dc <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009156:	d905      	bls.n	8009164 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009158:	2303      	movs	r3, #3
 800915a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2203      	movs	r2, #3
 8009160:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009164:	4b06      	ldr	r3, [pc, #24]	@ (8009180 <RTC_EnterInitMode+0x64>)
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800916c:	2b00      	cmp	r3, #0
 800916e:	d102      	bne.n	8009176 <RTC_EnterInitMode+0x5a>
 8009170:	7bfb      	ldrb	r3, [r7, #15]
 8009172:	2b03      	cmp	r3, #3
 8009174:	d1e8      	bne.n	8009148 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009176:	7bfb      	ldrb	r3, [r7, #15]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3710      	adds	r7, #16
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	40002800 	.word	0x40002800

08009184 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009190:	4b1a      	ldr	r3, [pc, #104]	@ (80091fc <RTC_ExitInitMode+0x78>)
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	4a19      	ldr	r2, [pc, #100]	@ (80091fc <RTC_ExitInitMode+0x78>)
 8009196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800919a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800919c:	4b17      	ldr	r3, [pc, #92]	@ (80091fc <RTC_ExitInitMode+0x78>)
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	f003 0320 	and.w	r3, r3, #32
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10c      	bne.n	80091c2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7ff ff93 	bl	80090d4 <HAL_RTC_WaitForSynchro>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d01e      	beq.n	80091f2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2203      	movs	r2, #3
 80091b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	73fb      	strb	r3, [r7, #15]
 80091c0:	e017      	b.n	80091f2 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80091c2:	4b0e      	ldr	r3, [pc, #56]	@ (80091fc <RTC_ExitInitMode+0x78>)
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	4a0d      	ldr	r2, [pc, #52]	@ (80091fc <RTC_ExitInitMode+0x78>)
 80091c8:	f023 0320 	bic.w	r3, r3, #32
 80091cc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7ff ff80 	bl	80090d4 <HAL_RTC_WaitForSynchro>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d005      	beq.n	80091e6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2203      	movs	r2, #3
 80091de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80091e6:	4b05      	ldr	r3, [pc, #20]	@ (80091fc <RTC_ExitInitMode+0x78>)
 80091e8:	699b      	ldr	r3, [r3, #24]
 80091ea:	4a04      	ldr	r2, [pc, #16]	@ (80091fc <RTC_ExitInitMode+0x78>)
 80091ec:	f043 0320 	orr.w	r3, r3, #32
 80091f0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	40002800 	.word	0x40002800

08009200 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	490f      	ldr	r1, [pc, #60]	@ (8009250 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8009214:	4313      	orrs	r3, r2
 8009216:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	689a      	ldr	r2, [r3, #8]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	490c      	ldr	r1, [pc, #48]	@ (8009254 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8009222:	4313      	orrs	r3, r2
 8009224:	624b      	str	r3, [r1, #36]	@ 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8009226:	4b0b      	ldr	r3, [pc, #44]	@ (8009254 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	6919      	ldr	r1, [r3, #16]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	695b      	ldr	r3, [r3, #20]
 8009236:	041b      	lsls	r3, r3, #16
 8009238:	430b      	orrs	r3, r1
 800923a:	4906      	ldr	r1, [pc, #24]	@ (8009254 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800923c:	4313      	orrs	r3, r2
 800923e:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	40002800 	.word	0x40002800
 8009254:	40003400 	.word	0x40003400

08009258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e049      	b.n	80092fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	d106      	bne.n	8009284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7fa ffd0 	bl	8004224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2202      	movs	r2, #2
 8009288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3304      	adds	r3, #4
 8009294:	4619      	mov	r1, r3
 8009296:	4610      	mov	r0, r2
 8009298:	f000 fa74 	bl	8009784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b082      	sub	sp, #8
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e049      	b.n	80093ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800931e:	b2db      	uxtb	r3, r3
 8009320:	2b00      	cmp	r3, #0
 8009322:	d106      	bne.n	8009332 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f841 	bl	80093b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2202      	movs	r2, #2
 8009336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3304      	adds	r3, #4
 8009342:	4619      	mov	r1, r3
 8009344:	4610      	mov	r0, r2
 8009346:	f000 fa1d 	bl	8009784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2201      	movs	r2, #1
 800938e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d101      	bne.n	80093e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80093e2:	2302      	movs	r3, #2
 80093e4:	e0ff      	b.n	80095e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2b14      	cmp	r3, #20
 80093f2:	f200 80f0 	bhi.w	80095d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80093f6:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80093f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fc:	08009451 	.word	0x08009451
 8009400:	080095d7 	.word	0x080095d7
 8009404:	080095d7 	.word	0x080095d7
 8009408:	080095d7 	.word	0x080095d7
 800940c:	08009491 	.word	0x08009491
 8009410:	080095d7 	.word	0x080095d7
 8009414:	080095d7 	.word	0x080095d7
 8009418:	080095d7 	.word	0x080095d7
 800941c:	080094d3 	.word	0x080094d3
 8009420:	080095d7 	.word	0x080095d7
 8009424:	080095d7 	.word	0x080095d7
 8009428:	080095d7 	.word	0x080095d7
 800942c:	08009513 	.word	0x08009513
 8009430:	080095d7 	.word	0x080095d7
 8009434:	080095d7 	.word	0x080095d7
 8009438:	080095d7 	.word	0x080095d7
 800943c:	08009555 	.word	0x08009555
 8009440:	080095d7 	.word	0x080095d7
 8009444:	080095d7 	.word	0x080095d7
 8009448:	080095d7 	.word	0x080095d7
 800944c:	08009595 	.word	0x08009595
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68b9      	ldr	r1, [r7, #8]
 8009456:	4618      	mov	r0, r3
 8009458:	f000 fa3a 	bl	80098d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	699a      	ldr	r2, [r3, #24]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f042 0208 	orr.w	r2, r2, #8
 800946a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	699a      	ldr	r2, [r3, #24]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f022 0204 	bic.w	r2, r2, #4
 800947a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6999      	ldr	r1, [r3, #24]
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	691a      	ldr	r2, [r3, #16]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	430a      	orrs	r2, r1
 800948c:	619a      	str	r2, [r3, #24]
      break;
 800948e:	e0a5      	b.n	80095dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68b9      	ldr	r1, [r7, #8]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 faaa 	bl	80099f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	699a      	ldr	r2, [r3, #24]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	699a      	ldr	r2, [r3, #24]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6999      	ldr	r1, [r3, #24]
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	691b      	ldr	r3, [r3, #16]
 80094c6:	021a      	lsls	r2, r3, #8
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	430a      	orrs	r2, r1
 80094ce:	619a      	str	r2, [r3, #24]
      break;
 80094d0:	e084      	b.n	80095dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68b9      	ldr	r1, [r7, #8]
 80094d8:	4618      	mov	r0, r3
 80094da:	f000 fb13 	bl	8009b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69da      	ldr	r2, [r3, #28]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f042 0208 	orr.w	r2, r2, #8
 80094ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	69da      	ldr	r2, [r3, #28]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f022 0204 	bic.w	r2, r2, #4
 80094fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	69d9      	ldr	r1, [r3, #28]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	691a      	ldr	r2, [r3, #16]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	430a      	orrs	r2, r1
 800950e:	61da      	str	r2, [r3, #28]
      break;
 8009510:	e064      	b.n	80095dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68b9      	ldr	r1, [r7, #8]
 8009518:	4618      	mov	r0, r3
 800951a:	f000 fb7b 	bl	8009c14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69da      	ldr	r2, [r3, #28]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800952c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	69da      	ldr	r2, [r3, #28]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800953c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	69d9      	ldr	r1, [r3, #28]
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	021a      	lsls	r2, r3, #8
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	61da      	str	r2, [r3, #28]
      break;
 8009552:	e043      	b.n	80095dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68b9      	ldr	r1, [r7, #8]
 800955a:	4618      	mov	r0, r3
 800955c:	f000 fbc4 	bl	8009ce8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f042 0208 	orr.w	r2, r2, #8
 800956e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f022 0204 	bic.w	r2, r2, #4
 800957e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	691a      	ldr	r2, [r3, #16]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	430a      	orrs	r2, r1
 8009590:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009592:	e023      	b.n	80095dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68b9      	ldr	r1, [r7, #8]
 800959a:	4618      	mov	r0, r3
 800959c:	f000 fc08 	bl	8009db0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	021a      	lsls	r2, r3, #8
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	430a      	orrs	r2, r1
 80095d2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80095d4:	e002      	b.n	80095dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	75fb      	strb	r3, [r7, #23]
      break;
 80095da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop

080095f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009604:	2b01      	cmp	r3, #1
 8009606:	d101      	bne.n	800960c <HAL_TIM_ConfigClockSource+0x1c>
 8009608:	2302      	movs	r3, #2
 800960a:	e0b6      	b.n	800977a <HAL_TIM_ConfigClockSource+0x18a>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2202      	movs	r2, #2
 8009618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800962a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800962e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009636:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009648:	d03e      	beq.n	80096c8 <HAL_TIM_ConfigClockSource+0xd8>
 800964a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800964e:	f200 8087 	bhi.w	8009760 <HAL_TIM_ConfigClockSource+0x170>
 8009652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009656:	f000 8086 	beq.w	8009766 <HAL_TIM_ConfigClockSource+0x176>
 800965a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800965e:	d87f      	bhi.n	8009760 <HAL_TIM_ConfigClockSource+0x170>
 8009660:	2b70      	cmp	r3, #112	@ 0x70
 8009662:	d01a      	beq.n	800969a <HAL_TIM_ConfigClockSource+0xaa>
 8009664:	2b70      	cmp	r3, #112	@ 0x70
 8009666:	d87b      	bhi.n	8009760 <HAL_TIM_ConfigClockSource+0x170>
 8009668:	2b60      	cmp	r3, #96	@ 0x60
 800966a:	d050      	beq.n	800970e <HAL_TIM_ConfigClockSource+0x11e>
 800966c:	2b60      	cmp	r3, #96	@ 0x60
 800966e:	d877      	bhi.n	8009760 <HAL_TIM_ConfigClockSource+0x170>
 8009670:	2b50      	cmp	r3, #80	@ 0x50
 8009672:	d03c      	beq.n	80096ee <HAL_TIM_ConfigClockSource+0xfe>
 8009674:	2b50      	cmp	r3, #80	@ 0x50
 8009676:	d873      	bhi.n	8009760 <HAL_TIM_ConfigClockSource+0x170>
 8009678:	2b40      	cmp	r3, #64	@ 0x40
 800967a:	d058      	beq.n	800972e <HAL_TIM_ConfigClockSource+0x13e>
 800967c:	2b40      	cmp	r3, #64	@ 0x40
 800967e:	d86f      	bhi.n	8009760 <HAL_TIM_ConfigClockSource+0x170>
 8009680:	2b30      	cmp	r3, #48	@ 0x30
 8009682:	d064      	beq.n	800974e <HAL_TIM_ConfigClockSource+0x15e>
 8009684:	2b30      	cmp	r3, #48	@ 0x30
 8009686:	d86b      	bhi.n	8009760 <HAL_TIM_ConfigClockSource+0x170>
 8009688:	2b20      	cmp	r3, #32
 800968a:	d060      	beq.n	800974e <HAL_TIM_ConfigClockSource+0x15e>
 800968c:	2b20      	cmp	r3, #32
 800968e:	d867      	bhi.n	8009760 <HAL_TIM_ConfigClockSource+0x170>
 8009690:	2b00      	cmp	r3, #0
 8009692:	d05c      	beq.n	800974e <HAL_TIM_ConfigClockSource+0x15e>
 8009694:	2b10      	cmp	r3, #16
 8009696:	d05a      	beq.n	800974e <HAL_TIM_ConfigClockSource+0x15e>
 8009698:	e062      	b.n	8009760 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80096aa:	f000 fc63 	bl	8009f74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80096bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	609a      	str	r2, [r3, #8]
      break;
 80096c6:	e04f      	b.n	8009768 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80096d8:	f000 fc4c 	bl	8009f74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	689a      	ldr	r2, [r3, #8]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80096ea:	609a      	str	r2, [r3, #8]
      break;
 80096ec:	e03c      	b.n	8009768 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096fa:	461a      	mov	r2, r3
 80096fc:	f000 fbbe 	bl	8009e7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2150      	movs	r1, #80	@ 0x50
 8009706:	4618      	mov	r0, r3
 8009708:	f000 fc17 	bl	8009f3a <TIM_ITRx_SetConfig>
      break;
 800970c:	e02c      	b.n	8009768 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800971a:	461a      	mov	r2, r3
 800971c:	f000 fbdd 	bl	8009eda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2160      	movs	r1, #96	@ 0x60
 8009726:	4618      	mov	r0, r3
 8009728:	f000 fc07 	bl	8009f3a <TIM_ITRx_SetConfig>
      break;
 800972c:	e01c      	b.n	8009768 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800973a:	461a      	mov	r2, r3
 800973c:	f000 fb9e 	bl	8009e7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2140      	movs	r1, #64	@ 0x40
 8009746:	4618      	mov	r0, r3
 8009748:	f000 fbf7 	bl	8009f3a <TIM_ITRx_SetConfig>
      break;
 800974c:	e00c      	b.n	8009768 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4619      	mov	r1, r3
 8009758:	4610      	mov	r0, r2
 800975a:	f000 fbee 	bl	8009f3a <TIM_ITRx_SetConfig>
      break;
 800975e:	e003      	b.n	8009768 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	73fb      	strb	r3, [r7, #15]
      break;
 8009764:	e000      	b.n	8009768 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009766:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009778:	7bfb      	ldrb	r3, [r7, #15]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
	...

08009784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a46      	ldr	r2, [pc, #280]	@ (80098b0 <TIM_Base_SetConfig+0x12c>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d013      	beq.n	80097c4 <TIM_Base_SetConfig+0x40>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097a2:	d00f      	beq.n	80097c4 <TIM_Base_SetConfig+0x40>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a43      	ldr	r2, [pc, #268]	@ (80098b4 <TIM_Base_SetConfig+0x130>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d00b      	beq.n	80097c4 <TIM_Base_SetConfig+0x40>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a42      	ldr	r2, [pc, #264]	@ (80098b8 <TIM_Base_SetConfig+0x134>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d007      	beq.n	80097c4 <TIM_Base_SetConfig+0x40>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a41      	ldr	r2, [pc, #260]	@ (80098bc <TIM_Base_SetConfig+0x138>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d003      	beq.n	80097c4 <TIM_Base_SetConfig+0x40>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a40      	ldr	r2, [pc, #256]	@ (80098c0 <TIM_Base_SetConfig+0x13c>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d108      	bne.n	80097d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4a35      	ldr	r2, [pc, #212]	@ (80098b0 <TIM_Base_SetConfig+0x12c>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d01f      	beq.n	800981e <TIM_Base_SetConfig+0x9a>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097e4:	d01b      	beq.n	800981e <TIM_Base_SetConfig+0x9a>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a32      	ldr	r2, [pc, #200]	@ (80098b4 <TIM_Base_SetConfig+0x130>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d017      	beq.n	800981e <TIM_Base_SetConfig+0x9a>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a31      	ldr	r2, [pc, #196]	@ (80098b8 <TIM_Base_SetConfig+0x134>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d013      	beq.n	800981e <TIM_Base_SetConfig+0x9a>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4a30      	ldr	r2, [pc, #192]	@ (80098bc <TIM_Base_SetConfig+0x138>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d00f      	beq.n	800981e <TIM_Base_SetConfig+0x9a>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a2f      	ldr	r2, [pc, #188]	@ (80098c0 <TIM_Base_SetConfig+0x13c>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d00b      	beq.n	800981e <TIM_Base_SetConfig+0x9a>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a2e      	ldr	r2, [pc, #184]	@ (80098c4 <TIM_Base_SetConfig+0x140>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d007      	beq.n	800981e <TIM_Base_SetConfig+0x9a>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4a2d      	ldr	r2, [pc, #180]	@ (80098c8 <TIM_Base_SetConfig+0x144>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d003      	beq.n	800981e <TIM_Base_SetConfig+0x9a>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a2c      	ldr	r2, [pc, #176]	@ (80098cc <TIM_Base_SetConfig+0x148>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d108      	bne.n	8009830 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	4313      	orrs	r3, r2
 800982e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	4313      	orrs	r3, r2
 800983c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	689a      	ldr	r2, [r3, #8]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a16      	ldr	r2, [pc, #88]	@ (80098b0 <TIM_Base_SetConfig+0x12c>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d00f      	beq.n	800987c <TIM_Base_SetConfig+0xf8>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a18      	ldr	r2, [pc, #96]	@ (80098c0 <TIM_Base_SetConfig+0x13c>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d00b      	beq.n	800987c <TIM_Base_SetConfig+0xf8>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a17      	ldr	r2, [pc, #92]	@ (80098c4 <TIM_Base_SetConfig+0x140>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d007      	beq.n	800987c <TIM_Base_SetConfig+0xf8>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a16      	ldr	r2, [pc, #88]	@ (80098c8 <TIM_Base_SetConfig+0x144>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d003      	beq.n	800987c <TIM_Base_SetConfig+0xf8>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a15      	ldr	r2, [pc, #84]	@ (80098cc <TIM_Base_SetConfig+0x148>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d103      	bne.n	8009884 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	691a      	ldr	r2, [r3, #16]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	2b01      	cmp	r3, #1
 8009894:	d105      	bne.n	80098a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	f023 0201 	bic.w	r2, r3, #1
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	611a      	str	r2, [r3, #16]
  }
}
 80098a2:	bf00      	nop
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	40012c00 	.word	0x40012c00
 80098b4:	40000400 	.word	0x40000400
 80098b8:	40000800 	.word	0x40000800
 80098bc:	40000c00 	.word	0x40000c00
 80098c0:	40013400 	.word	0x40013400
 80098c4:	40014000 	.word	0x40014000
 80098c8:	40014400 	.word	0x40014400
 80098cc:	40014800 	.word	0x40014800

080098d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a1b      	ldr	r3, [r3, #32]
 80098de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	f023 0201 	bic.w	r2, r3, #1
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	699b      	ldr	r3, [r3, #24]
 80098f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f023 0303 	bic.w	r3, r3, #3
 800990a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	4313      	orrs	r3, r2
 8009914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f023 0302 	bic.w	r3, r3, #2
 800991c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	697a      	ldr	r2, [r7, #20]
 8009924:	4313      	orrs	r3, r2
 8009926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a2c      	ldr	r2, [pc, #176]	@ (80099dc <TIM_OC1_SetConfig+0x10c>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d00f      	beq.n	8009950 <TIM_OC1_SetConfig+0x80>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a2b      	ldr	r2, [pc, #172]	@ (80099e0 <TIM_OC1_SetConfig+0x110>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d00b      	beq.n	8009950 <TIM_OC1_SetConfig+0x80>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a2a      	ldr	r2, [pc, #168]	@ (80099e4 <TIM_OC1_SetConfig+0x114>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d007      	beq.n	8009950 <TIM_OC1_SetConfig+0x80>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a29      	ldr	r2, [pc, #164]	@ (80099e8 <TIM_OC1_SetConfig+0x118>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d003      	beq.n	8009950 <TIM_OC1_SetConfig+0x80>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a28      	ldr	r2, [pc, #160]	@ (80099ec <TIM_OC1_SetConfig+0x11c>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d10c      	bne.n	800996a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	f023 0308 	bic.w	r3, r3, #8
 8009956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	4313      	orrs	r3, r2
 8009960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	f023 0304 	bic.w	r3, r3, #4
 8009968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a1b      	ldr	r2, [pc, #108]	@ (80099dc <TIM_OC1_SetConfig+0x10c>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d00f      	beq.n	8009992 <TIM_OC1_SetConfig+0xc2>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a1a      	ldr	r2, [pc, #104]	@ (80099e0 <TIM_OC1_SetConfig+0x110>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d00b      	beq.n	8009992 <TIM_OC1_SetConfig+0xc2>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a19      	ldr	r2, [pc, #100]	@ (80099e4 <TIM_OC1_SetConfig+0x114>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d007      	beq.n	8009992 <TIM_OC1_SetConfig+0xc2>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a18      	ldr	r2, [pc, #96]	@ (80099e8 <TIM_OC1_SetConfig+0x118>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d003      	beq.n	8009992 <TIM_OC1_SetConfig+0xc2>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a17      	ldr	r2, [pc, #92]	@ (80099ec <TIM_OC1_SetConfig+0x11c>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d111      	bne.n	80099b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80099a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	693a      	ldr	r2, [r7, #16]
 80099ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	685a      	ldr	r2, [r3, #4]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	697a      	ldr	r2, [r7, #20]
 80099ce:	621a      	str	r2, [r3, #32]
}
 80099d0:	bf00      	nop
 80099d2:	371c      	adds	r7, #28
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	40012c00 	.word	0x40012c00
 80099e0:	40013400 	.word	0x40013400
 80099e4:	40014000 	.word	0x40014000
 80099e8:	40014400 	.word	0x40014400
 80099ec:	40014800 	.word	0x40014800

080099f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b087      	sub	sp, #28
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a1b      	ldr	r3, [r3, #32]
 80099fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a1b      	ldr	r3, [r3, #32]
 8009a04:	f023 0210 	bic.w	r2, r3, #16
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	021b      	lsls	r3, r3, #8
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	f023 0320 	bic.w	r3, r3, #32
 8009a3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	011b      	lsls	r3, r3, #4
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a28      	ldr	r2, [pc, #160]	@ (8009af0 <TIM_OC2_SetConfig+0x100>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d003      	beq.n	8009a5c <TIM_OC2_SetConfig+0x6c>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a27      	ldr	r2, [pc, #156]	@ (8009af4 <TIM_OC2_SetConfig+0x104>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d10d      	bne.n	8009a78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	011b      	lsls	r3, r3, #4
 8009a6a:	697a      	ldr	r2, [r7, #20]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8009af0 <TIM_OC2_SetConfig+0x100>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d00f      	beq.n	8009aa0 <TIM_OC2_SetConfig+0xb0>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a1c      	ldr	r2, [pc, #112]	@ (8009af4 <TIM_OC2_SetConfig+0x104>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d00b      	beq.n	8009aa0 <TIM_OC2_SetConfig+0xb0>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8009af8 <TIM_OC2_SetConfig+0x108>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d007      	beq.n	8009aa0 <TIM_OC2_SetConfig+0xb0>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a1a      	ldr	r2, [pc, #104]	@ (8009afc <TIM_OC2_SetConfig+0x10c>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d003      	beq.n	8009aa0 <TIM_OC2_SetConfig+0xb0>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a19      	ldr	r2, [pc, #100]	@ (8009b00 <TIM_OC2_SetConfig+0x110>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d113      	bne.n	8009ac8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009aa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009aae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	699b      	ldr	r3, [r3, #24]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	621a      	str	r2, [r3, #32]
}
 8009ae2:	bf00      	nop
 8009ae4:	371c      	adds	r7, #28
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	40012c00 	.word	0x40012c00
 8009af4:	40013400 	.word	0x40013400
 8009af8:	40014000 	.word	0x40014000
 8009afc:	40014400 	.word	0x40014400
 8009b00:	40014800 	.word	0x40014800

08009b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b087      	sub	sp, #28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a1b      	ldr	r3, [r3, #32]
 8009b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a1b      	ldr	r3, [r3, #32]
 8009b18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	69db      	ldr	r3, [r3, #28]
 8009b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f023 0303 	bic.w	r3, r3, #3
 8009b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	021b      	lsls	r3, r3, #8
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a27      	ldr	r2, [pc, #156]	@ (8009c00 <TIM_OC3_SetConfig+0xfc>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d003      	beq.n	8009b6e <TIM_OC3_SetConfig+0x6a>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a26      	ldr	r2, [pc, #152]	@ (8009c04 <TIM_OC3_SetConfig+0x100>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d10d      	bne.n	8009b8a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	021b      	lsls	r3, r3, #8
 8009b7c:	697a      	ldr	r2, [r7, #20]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8009c00 <TIM_OC3_SetConfig+0xfc>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d00f      	beq.n	8009bb2 <TIM_OC3_SetConfig+0xae>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4a1b      	ldr	r2, [pc, #108]	@ (8009c04 <TIM_OC3_SetConfig+0x100>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d00b      	beq.n	8009bb2 <TIM_OC3_SetConfig+0xae>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8009c08 <TIM_OC3_SetConfig+0x104>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d007      	beq.n	8009bb2 <TIM_OC3_SetConfig+0xae>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4a19      	ldr	r2, [pc, #100]	@ (8009c0c <TIM_OC3_SetConfig+0x108>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d003      	beq.n	8009bb2 <TIM_OC3_SetConfig+0xae>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	4a18      	ldr	r2, [pc, #96]	@ (8009c10 <TIM_OC3_SetConfig+0x10c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d113      	bne.n	8009bda <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	695b      	ldr	r3, [r3, #20]
 8009bc6:	011b      	lsls	r3, r3, #4
 8009bc8:	693a      	ldr	r2, [r7, #16]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	011b      	lsls	r3, r3, #4
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	685a      	ldr	r2, [r3, #4]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	697a      	ldr	r2, [r7, #20]
 8009bf2:	621a      	str	r2, [r3, #32]
}
 8009bf4:	bf00      	nop
 8009bf6:	371c      	adds	r7, #28
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	40012c00 	.word	0x40012c00
 8009c04:	40013400 	.word	0x40013400
 8009c08:	40014000 	.word	0x40014000
 8009c0c:	40014400 	.word	0x40014400
 8009c10:	40014800 	.word	0x40014800

08009c14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a1b      	ldr	r3, [r3, #32]
 8009c28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	69db      	ldr	r3, [r3, #28]
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	021b      	lsls	r3, r3, #8
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	031b      	lsls	r3, r3, #12
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a18      	ldr	r2, [pc, #96]	@ (8009cd4 <TIM_OC4_SetConfig+0xc0>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d00f      	beq.n	8009c98 <TIM_OC4_SetConfig+0x84>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a17      	ldr	r2, [pc, #92]	@ (8009cd8 <TIM_OC4_SetConfig+0xc4>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d00b      	beq.n	8009c98 <TIM_OC4_SetConfig+0x84>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a16      	ldr	r2, [pc, #88]	@ (8009cdc <TIM_OC4_SetConfig+0xc8>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d007      	beq.n	8009c98 <TIM_OC4_SetConfig+0x84>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a15      	ldr	r2, [pc, #84]	@ (8009ce0 <TIM_OC4_SetConfig+0xcc>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d003      	beq.n	8009c98 <TIM_OC4_SetConfig+0x84>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a14      	ldr	r2, [pc, #80]	@ (8009ce4 <TIM_OC4_SetConfig+0xd0>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d109      	bne.n	8009cac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	695b      	ldr	r3, [r3, #20]
 8009ca4:	019b      	lsls	r3, r3, #6
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	621a      	str	r2, [r3, #32]
}
 8009cc6:	bf00      	nop
 8009cc8:	371c      	adds	r7, #28
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	40012c00 	.word	0x40012c00
 8009cd8:	40013400 	.word	0x40013400
 8009cdc:	40014000 	.word	0x40014000
 8009ce0:	40014400 	.word	0x40014400
 8009ce4:	40014800 	.word	0x40014800

08009ce8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b087      	sub	sp, #28
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a1b      	ldr	r3, [r3, #32]
 8009cf6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a1b      	ldr	r3, [r3, #32]
 8009cfc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009d2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	041b      	lsls	r3, r3, #16
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a17      	ldr	r2, [pc, #92]	@ (8009d9c <TIM_OC5_SetConfig+0xb4>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d00f      	beq.n	8009d62 <TIM_OC5_SetConfig+0x7a>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a16      	ldr	r2, [pc, #88]	@ (8009da0 <TIM_OC5_SetConfig+0xb8>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d00b      	beq.n	8009d62 <TIM_OC5_SetConfig+0x7a>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a15      	ldr	r2, [pc, #84]	@ (8009da4 <TIM_OC5_SetConfig+0xbc>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d007      	beq.n	8009d62 <TIM_OC5_SetConfig+0x7a>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a14      	ldr	r2, [pc, #80]	@ (8009da8 <TIM_OC5_SetConfig+0xc0>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d003      	beq.n	8009d62 <TIM_OC5_SetConfig+0x7a>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a13      	ldr	r2, [pc, #76]	@ (8009dac <TIM_OC5_SetConfig+0xc4>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d109      	bne.n	8009d76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	695b      	ldr	r3, [r3, #20]
 8009d6e:	021b      	lsls	r3, r3, #8
 8009d70:	697a      	ldr	r2, [r7, #20]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	685a      	ldr	r2, [r3, #4]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	693a      	ldr	r2, [r7, #16]
 8009d8e:	621a      	str	r2, [r3, #32]
}
 8009d90:	bf00      	nop
 8009d92:	371c      	adds	r7, #28
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	40012c00 	.word	0x40012c00
 8009da0:	40013400 	.word	0x40013400
 8009da4:	40014000 	.word	0x40014000
 8009da8:	40014400 	.word	0x40014400
 8009dac:	40014800 	.word	0x40014800

08009db0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b087      	sub	sp, #28
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a1b      	ldr	r3, [r3, #32]
 8009dbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6a1b      	ldr	r3, [r3, #32]
 8009dc4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009dde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	021b      	lsls	r3, r3, #8
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	4313      	orrs	r3, r2
 8009dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	051b      	lsls	r3, r3, #20
 8009dfe:	693a      	ldr	r2, [r7, #16]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a18      	ldr	r2, [pc, #96]	@ (8009e68 <TIM_OC6_SetConfig+0xb8>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d00f      	beq.n	8009e2c <TIM_OC6_SetConfig+0x7c>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a17      	ldr	r2, [pc, #92]	@ (8009e6c <TIM_OC6_SetConfig+0xbc>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d00b      	beq.n	8009e2c <TIM_OC6_SetConfig+0x7c>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a16      	ldr	r2, [pc, #88]	@ (8009e70 <TIM_OC6_SetConfig+0xc0>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d007      	beq.n	8009e2c <TIM_OC6_SetConfig+0x7c>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a15      	ldr	r2, [pc, #84]	@ (8009e74 <TIM_OC6_SetConfig+0xc4>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d003      	beq.n	8009e2c <TIM_OC6_SetConfig+0x7c>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a14      	ldr	r2, [pc, #80]	@ (8009e78 <TIM_OC6_SetConfig+0xc8>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d109      	bne.n	8009e40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009e32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	695b      	ldr	r3, [r3, #20]
 8009e38:	029b      	lsls	r3, r3, #10
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	697a      	ldr	r2, [r7, #20]
 8009e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	621a      	str	r2, [r3, #32]
}
 8009e5a:	bf00      	nop
 8009e5c:	371c      	adds	r7, #28
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	40012c00 	.word	0x40012c00
 8009e6c:	40013400 	.word	0x40013400
 8009e70:	40014000 	.word	0x40014000
 8009e74:	40014400 	.word	0x40014400
 8009e78:	40014800 	.word	0x40014800

08009e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b087      	sub	sp, #28
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6a1b      	ldr	r3, [r3, #32]
 8009e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	f023 0201 	bic.w	r2, r3, #1
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	699b      	ldr	r3, [r3, #24]
 8009e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	011b      	lsls	r3, r3, #4
 8009eac:	693a      	ldr	r2, [r7, #16]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f023 030a 	bic.w	r3, r3, #10
 8009eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	621a      	str	r2, [r3, #32]
}
 8009ece:	bf00      	nop
 8009ed0:	371c      	adds	r7, #28
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009eda:	b480      	push	{r7}
 8009edc:	b087      	sub	sp, #28
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	60f8      	str	r0, [r7, #12]
 8009ee2:	60b9      	str	r1, [r7, #8]
 8009ee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6a1b      	ldr	r3, [r3, #32]
 8009ef0:	f023 0210 	bic.w	r2, r3, #16
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	031b      	lsls	r3, r3, #12
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009f16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	011b      	lsls	r3, r3, #4
 8009f1c:	697a      	ldr	r2, [r7, #20]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	621a      	str	r2, [r3, #32]
}
 8009f2e:	bf00      	nop
 8009f30:	371c      	adds	r7, #28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b085      	sub	sp, #20
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009f50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	f043 0307 	orr.w	r3, r3, #7
 8009f60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	609a      	str	r2, [r3, #8]
}
 8009f68:	bf00      	nop
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b087      	sub	sp, #28
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	021a      	lsls	r2, r3, #8
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	431a      	orrs	r2, r3
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	697a      	ldr	r2, [r7, #20]
 8009fa6:	609a      	str	r2, [r3, #8]
}
 8009fa8:	bf00      	nop
 8009faa:	371c      	adds	r7, #28
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d101      	bne.n	8009fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fc8:	2302      	movs	r3, #2
 8009fca:	e068      	b.n	800a09e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a2e      	ldr	r2, [pc, #184]	@ (800a0ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d004      	beq.n	800a000 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a2d      	ldr	r2, [pc, #180]	@ (800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d108      	bne.n	800a012 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a006:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	4313      	orrs	r3, r2
 800a010:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a018:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	4313      	orrs	r3, r2
 800a022:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a1e      	ldr	r2, [pc, #120]	@ (800a0ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d01d      	beq.n	800a072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a03e:	d018      	beq.n	800a072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a1b      	ldr	r2, [pc, #108]	@ (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d013      	beq.n	800a072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a1a      	ldr	r2, [pc, #104]	@ (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d00e      	beq.n	800a072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a18      	ldr	r2, [pc, #96]	@ (800a0bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d009      	beq.n	800a072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a13      	ldr	r2, [pc, #76]	@ (800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d004      	beq.n	800a072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a14      	ldr	r2, [pc, #80]	@ (800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d10c      	bne.n	800a08c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a078:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	4313      	orrs	r3, r2
 800a082:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2201      	movs	r2, #1
 800a090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3714      	adds	r7, #20
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	40012c00 	.word	0x40012c00
 800a0b0:	40013400 	.word	0x40013400
 800a0b4:	40000400 	.word	0x40000400
 800a0b8:	40000800 	.word	0x40000800
 800a0bc:	40000c00 	.word	0x40000c00
 800a0c0:	40014000 	.word	0x40014000

0800a0c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d101      	bne.n	800a0e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a0dc:	2302      	movs	r3, #2
 800a0de:	e073      	b.n	800a1c8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	4313      	orrs	r3, r2
 800a102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	4313      	orrs	r3, r2
 800a110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	695b      	ldr	r3, [r3, #20]
 800a138:	4313      	orrs	r3, r2
 800a13a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a146:	4313      	orrs	r3, r2
 800a148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	041b      	lsls	r3, r3, #16
 800a156:	4313      	orrs	r3, r2
 800a158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	69db      	ldr	r3, [r3, #28]
 800a164:	4313      	orrs	r3, r2
 800a166:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a19      	ldr	r2, [pc, #100]	@ (800a1d4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d004      	beq.n	800a17c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a18      	ldr	r2, [pc, #96]	@ (800a1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d11c      	bne.n	800a1b6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a186:	051b      	lsls	r3, r3, #20
 800a188:	4313      	orrs	r3, r2
 800a18a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	4313      	orrs	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	40012c00 	.word	0x40012c00
 800a1d8:	40013400 	.word	0x40013400

0800a1dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e042      	b.n	800a274 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d106      	bne.n	800a206 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f7f9 ff71 	bl	80040e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2224      	movs	r2, #36	@ 0x24
 800a20a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f022 0201 	bic.w	r2, r2, #1
 800a21c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a222:	2b00      	cmp	r3, #0
 800a224:	d002      	beq.n	800a22c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 fb28 	bl	800a87c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f825 	bl	800a27c <UART_SetConfig>
 800a232:	4603      	mov	r3, r0
 800a234:	2b01      	cmp	r3, #1
 800a236:	d101      	bne.n	800a23c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	e01b      	b.n	800a274 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a24a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	689a      	ldr	r2, [r3, #8]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a25a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f042 0201 	orr.w	r2, r2, #1
 800a26a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fba7 	bl	800a9c0 <UART_CheckIdleState>
 800a272:	4603      	mov	r3, r0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3708      	adds	r7, #8
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a27c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a280:	b08c      	sub	sp, #48	@ 0x30
 800a282:	af00      	add	r7, sp, #0
 800a284:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	689a      	ldr	r2, [r3, #8]
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	431a      	orrs	r2, r3
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	431a      	orrs	r2, r3
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	69db      	ldr	r3, [r3, #28]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	4baa      	ldr	r3, [pc, #680]	@ (800a554 <UART_SetConfig+0x2d8>)
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	6812      	ldr	r2, [r2, #0]
 800a2b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2b4:	430b      	orrs	r3, r1
 800a2b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	68da      	ldr	r2, [r3, #12]
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a9f      	ldr	r2, [pc, #636]	@ (800a558 <UART_SetConfig+0x2dc>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d004      	beq.n	800a2e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	6a1b      	ldr	r3, [r3, #32]
 800a2e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a2f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	6812      	ldr	r2, [r2, #0]
 800a2fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2fc:	430b      	orrs	r3, r1
 800a2fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a306:	f023 010f 	bic.w	r1, r3, #15
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	430a      	orrs	r2, r1
 800a314:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a90      	ldr	r2, [pc, #576]	@ (800a55c <UART_SetConfig+0x2e0>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d125      	bne.n	800a36c <UART_SetConfig+0xf0>
 800a320:	4b8f      	ldr	r3, [pc, #572]	@ (800a560 <UART_SetConfig+0x2e4>)
 800a322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a326:	f003 0303 	and.w	r3, r3, #3
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	d81a      	bhi.n	800a364 <UART_SetConfig+0xe8>
 800a32e:	a201      	add	r2, pc, #4	@ (adr r2, 800a334 <UART_SetConfig+0xb8>)
 800a330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a334:	0800a345 	.word	0x0800a345
 800a338:	0800a355 	.word	0x0800a355
 800a33c:	0800a34d 	.word	0x0800a34d
 800a340:	0800a35d 	.word	0x0800a35d
 800a344:	2301      	movs	r3, #1
 800a346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a34a:	e116      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a34c:	2302      	movs	r3, #2
 800a34e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a352:	e112      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a354:	2304      	movs	r3, #4
 800a356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a35a:	e10e      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a35c:	2308      	movs	r3, #8
 800a35e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a362:	e10a      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a364:	2310      	movs	r3, #16
 800a366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a36a:	e106      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a7c      	ldr	r2, [pc, #496]	@ (800a564 <UART_SetConfig+0x2e8>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d138      	bne.n	800a3e8 <UART_SetConfig+0x16c>
 800a376:	4b7a      	ldr	r3, [pc, #488]	@ (800a560 <UART_SetConfig+0x2e4>)
 800a378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a37c:	f003 030c 	and.w	r3, r3, #12
 800a380:	2b0c      	cmp	r3, #12
 800a382:	d82d      	bhi.n	800a3e0 <UART_SetConfig+0x164>
 800a384:	a201      	add	r2, pc, #4	@ (adr r2, 800a38c <UART_SetConfig+0x110>)
 800a386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38a:	bf00      	nop
 800a38c:	0800a3c1 	.word	0x0800a3c1
 800a390:	0800a3e1 	.word	0x0800a3e1
 800a394:	0800a3e1 	.word	0x0800a3e1
 800a398:	0800a3e1 	.word	0x0800a3e1
 800a39c:	0800a3d1 	.word	0x0800a3d1
 800a3a0:	0800a3e1 	.word	0x0800a3e1
 800a3a4:	0800a3e1 	.word	0x0800a3e1
 800a3a8:	0800a3e1 	.word	0x0800a3e1
 800a3ac:	0800a3c9 	.word	0x0800a3c9
 800a3b0:	0800a3e1 	.word	0x0800a3e1
 800a3b4:	0800a3e1 	.word	0x0800a3e1
 800a3b8:	0800a3e1 	.word	0x0800a3e1
 800a3bc:	0800a3d9 	.word	0x0800a3d9
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3c6:	e0d8      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a3c8:	2302      	movs	r3, #2
 800a3ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3ce:	e0d4      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a3d0:	2304      	movs	r3, #4
 800a3d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3d6:	e0d0      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a3d8:	2308      	movs	r3, #8
 800a3da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3de:	e0cc      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a3e0:	2310      	movs	r3, #16
 800a3e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a3e6:	e0c8      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a5e      	ldr	r2, [pc, #376]	@ (800a568 <UART_SetConfig+0x2ec>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d125      	bne.n	800a43e <UART_SetConfig+0x1c2>
 800a3f2:	4b5b      	ldr	r3, [pc, #364]	@ (800a560 <UART_SetConfig+0x2e4>)
 800a3f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a3f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a3fc:	2b30      	cmp	r3, #48	@ 0x30
 800a3fe:	d016      	beq.n	800a42e <UART_SetConfig+0x1b2>
 800a400:	2b30      	cmp	r3, #48	@ 0x30
 800a402:	d818      	bhi.n	800a436 <UART_SetConfig+0x1ba>
 800a404:	2b20      	cmp	r3, #32
 800a406:	d00a      	beq.n	800a41e <UART_SetConfig+0x1a2>
 800a408:	2b20      	cmp	r3, #32
 800a40a:	d814      	bhi.n	800a436 <UART_SetConfig+0x1ba>
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <UART_SetConfig+0x19a>
 800a410:	2b10      	cmp	r3, #16
 800a412:	d008      	beq.n	800a426 <UART_SetConfig+0x1aa>
 800a414:	e00f      	b.n	800a436 <UART_SetConfig+0x1ba>
 800a416:	2300      	movs	r3, #0
 800a418:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a41c:	e0ad      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a41e:	2302      	movs	r3, #2
 800a420:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a424:	e0a9      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a426:	2304      	movs	r3, #4
 800a428:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a42c:	e0a5      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a42e:	2308      	movs	r3, #8
 800a430:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a434:	e0a1      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a436:	2310      	movs	r3, #16
 800a438:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a43c:	e09d      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a4a      	ldr	r2, [pc, #296]	@ (800a56c <UART_SetConfig+0x2f0>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d125      	bne.n	800a494 <UART_SetConfig+0x218>
 800a448:	4b45      	ldr	r3, [pc, #276]	@ (800a560 <UART_SetConfig+0x2e4>)
 800a44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a44e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a452:	2bc0      	cmp	r3, #192	@ 0xc0
 800a454:	d016      	beq.n	800a484 <UART_SetConfig+0x208>
 800a456:	2bc0      	cmp	r3, #192	@ 0xc0
 800a458:	d818      	bhi.n	800a48c <UART_SetConfig+0x210>
 800a45a:	2b80      	cmp	r3, #128	@ 0x80
 800a45c:	d00a      	beq.n	800a474 <UART_SetConfig+0x1f8>
 800a45e:	2b80      	cmp	r3, #128	@ 0x80
 800a460:	d814      	bhi.n	800a48c <UART_SetConfig+0x210>
 800a462:	2b00      	cmp	r3, #0
 800a464:	d002      	beq.n	800a46c <UART_SetConfig+0x1f0>
 800a466:	2b40      	cmp	r3, #64	@ 0x40
 800a468:	d008      	beq.n	800a47c <UART_SetConfig+0x200>
 800a46a:	e00f      	b.n	800a48c <UART_SetConfig+0x210>
 800a46c:	2300      	movs	r3, #0
 800a46e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a472:	e082      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a474:	2302      	movs	r3, #2
 800a476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a47a:	e07e      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a47c:	2304      	movs	r3, #4
 800a47e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a482:	e07a      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a484:	2308      	movs	r3, #8
 800a486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a48a:	e076      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a48c:	2310      	movs	r3, #16
 800a48e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a492:	e072      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a35      	ldr	r2, [pc, #212]	@ (800a570 <UART_SetConfig+0x2f4>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d12a      	bne.n	800a4f4 <UART_SetConfig+0x278>
 800a49e:	4b30      	ldr	r3, [pc, #192]	@ (800a560 <UART_SetConfig+0x2e4>)
 800a4a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4ac:	d01a      	beq.n	800a4e4 <UART_SetConfig+0x268>
 800a4ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4b2:	d81b      	bhi.n	800a4ec <UART_SetConfig+0x270>
 800a4b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4b8:	d00c      	beq.n	800a4d4 <UART_SetConfig+0x258>
 800a4ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4be:	d815      	bhi.n	800a4ec <UART_SetConfig+0x270>
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d003      	beq.n	800a4cc <UART_SetConfig+0x250>
 800a4c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4c8:	d008      	beq.n	800a4dc <UART_SetConfig+0x260>
 800a4ca:	e00f      	b.n	800a4ec <UART_SetConfig+0x270>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4d2:	e052      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4da:	e04e      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a4dc:	2304      	movs	r3, #4
 800a4de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4e2:	e04a      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a4e4:	2308      	movs	r3, #8
 800a4e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4ea:	e046      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a4ec:	2310      	movs	r3, #16
 800a4ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4f2:	e042      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a17      	ldr	r2, [pc, #92]	@ (800a558 <UART_SetConfig+0x2dc>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d13a      	bne.n	800a574 <UART_SetConfig+0x2f8>
 800a4fe:	4b18      	ldr	r3, [pc, #96]	@ (800a560 <UART_SetConfig+0x2e4>)
 800a500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a504:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a508:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a50c:	d01a      	beq.n	800a544 <UART_SetConfig+0x2c8>
 800a50e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a512:	d81b      	bhi.n	800a54c <UART_SetConfig+0x2d0>
 800a514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a518:	d00c      	beq.n	800a534 <UART_SetConfig+0x2b8>
 800a51a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a51e:	d815      	bhi.n	800a54c <UART_SetConfig+0x2d0>
 800a520:	2b00      	cmp	r3, #0
 800a522:	d003      	beq.n	800a52c <UART_SetConfig+0x2b0>
 800a524:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a528:	d008      	beq.n	800a53c <UART_SetConfig+0x2c0>
 800a52a:	e00f      	b.n	800a54c <UART_SetConfig+0x2d0>
 800a52c:	2300      	movs	r3, #0
 800a52e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a532:	e022      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a534:	2302      	movs	r3, #2
 800a536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a53a:	e01e      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a53c:	2304      	movs	r3, #4
 800a53e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a542:	e01a      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a544:	2308      	movs	r3, #8
 800a546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a54a:	e016      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a54c:	2310      	movs	r3, #16
 800a54e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a552:	e012      	b.n	800a57a <UART_SetConfig+0x2fe>
 800a554:	cfff69f3 	.word	0xcfff69f3
 800a558:	40008000 	.word	0x40008000
 800a55c:	40013800 	.word	0x40013800
 800a560:	40021000 	.word	0x40021000
 800a564:	40004400 	.word	0x40004400
 800a568:	40004800 	.word	0x40004800
 800a56c:	40004c00 	.word	0x40004c00
 800a570:	40005000 	.word	0x40005000
 800a574:	2310      	movs	r3, #16
 800a576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4ab0      	ldr	r2, [pc, #704]	@ (800a840 <UART_SetConfig+0x5c4>)
 800a580:	4293      	cmp	r3, r2
 800a582:	f040 809b 	bne.w	800a6bc <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a586:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a58a:	2b08      	cmp	r3, #8
 800a58c:	d827      	bhi.n	800a5de <UART_SetConfig+0x362>
 800a58e:	a201      	add	r2, pc, #4	@ (adr r2, 800a594 <UART_SetConfig+0x318>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a5b9 	.word	0x0800a5b9
 800a598:	0800a5c1 	.word	0x0800a5c1
 800a59c:	0800a5c9 	.word	0x0800a5c9
 800a5a0:	0800a5df 	.word	0x0800a5df
 800a5a4:	0800a5cf 	.word	0x0800a5cf
 800a5a8:	0800a5df 	.word	0x0800a5df
 800a5ac:	0800a5df 	.word	0x0800a5df
 800a5b0:	0800a5df 	.word	0x0800a5df
 800a5b4:	0800a5d7 	.word	0x0800a5d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5b8:	f7fd ff04 	bl	80083c4 <HAL_RCC_GetPCLK1Freq>
 800a5bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5be:	e014      	b.n	800a5ea <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5c0:	f7fd ff14 	bl	80083ec <HAL_RCC_GetPCLK2Freq>
 800a5c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5c6:	e010      	b.n	800a5ea <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5c8:	4b9e      	ldr	r3, [pc, #632]	@ (800a844 <UART_SetConfig+0x5c8>)
 800a5ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a5cc:	e00d      	b.n	800a5ea <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5ce:	f7fd fe47 	bl	8008260 <HAL_RCC_GetSysClockFreq>
 800a5d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5d4:	e009      	b.n	800a5ea <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a5dc:	e005      	b.n	800a5ea <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a5e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 8130 	beq.w	800a852 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f6:	4a94      	ldr	r2, [pc, #592]	@ (800a848 <UART_SetConfig+0x5cc>)
 800a5f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a600:	fbb3 f3f2 	udiv	r3, r3, r2
 800a604:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	685a      	ldr	r2, [r3, #4]
 800a60a:	4613      	mov	r3, r2
 800a60c:	005b      	lsls	r3, r3, #1
 800a60e:	4413      	add	r3, r2
 800a610:	69ba      	ldr	r2, [r7, #24]
 800a612:	429a      	cmp	r2, r3
 800a614:	d305      	bcc.n	800a622 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a61c:	69ba      	ldr	r2, [r7, #24]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d903      	bls.n	800a62a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a628:	e113      	b.n	800a852 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62c:	2200      	movs	r2, #0
 800a62e:	60bb      	str	r3, [r7, #8]
 800a630:	60fa      	str	r2, [r7, #12]
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a636:	4a84      	ldr	r2, [pc, #528]	@ (800a848 <UART_SetConfig+0x5cc>)
 800a638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	2200      	movs	r2, #0
 800a640:	603b      	str	r3, [r7, #0]
 800a642:	607a      	str	r2, [r7, #4]
 800a644:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a648:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a64c:	f7f5 ffd0 	bl	80005f0 <__aeabi_uldivmod>
 800a650:	4602      	mov	r2, r0
 800a652:	460b      	mov	r3, r1
 800a654:	4610      	mov	r0, r2
 800a656:	4619      	mov	r1, r3
 800a658:	f04f 0200 	mov.w	r2, #0
 800a65c:	f04f 0300 	mov.w	r3, #0
 800a660:	020b      	lsls	r3, r1, #8
 800a662:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a666:	0202      	lsls	r2, r0, #8
 800a668:	6979      	ldr	r1, [r7, #20]
 800a66a:	6849      	ldr	r1, [r1, #4]
 800a66c:	0849      	lsrs	r1, r1, #1
 800a66e:	2000      	movs	r0, #0
 800a670:	460c      	mov	r4, r1
 800a672:	4605      	mov	r5, r0
 800a674:	eb12 0804 	adds.w	r8, r2, r4
 800a678:	eb43 0905 	adc.w	r9, r3, r5
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	469a      	mov	sl, r3
 800a684:	4693      	mov	fp, r2
 800a686:	4652      	mov	r2, sl
 800a688:	465b      	mov	r3, fp
 800a68a:	4640      	mov	r0, r8
 800a68c:	4649      	mov	r1, r9
 800a68e:	f7f5 ffaf 	bl	80005f0 <__aeabi_uldivmod>
 800a692:	4602      	mov	r2, r0
 800a694:	460b      	mov	r3, r1
 800a696:	4613      	mov	r3, r2
 800a698:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a6a0:	d308      	bcc.n	800a6b4 <UART_SetConfig+0x438>
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6a8:	d204      	bcs.n	800a6b4 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	6a3a      	ldr	r2, [r7, #32]
 800a6b0:	60da      	str	r2, [r3, #12]
 800a6b2:	e0ce      	b.n	800a852 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a6ba:	e0ca      	b.n	800a852 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	69db      	ldr	r3, [r3, #28]
 800a6c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a6c4:	d166      	bne.n	800a794 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800a6c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a6ca:	2b08      	cmp	r3, #8
 800a6cc:	d827      	bhi.n	800a71e <UART_SetConfig+0x4a2>
 800a6ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a6d4 <UART_SetConfig+0x458>)
 800a6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d4:	0800a6f9 	.word	0x0800a6f9
 800a6d8:	0800a701 	.word	0x0800a701
 800a6dc:	0800a709 	.word	0x0800a709
 800a6e0:	0800a71f 	.word	0x0800a71f
 800a6e4:	0800a70f 	.word	0x0800a70f
 800a6e8:	0800a71f 	.word	0x0800a71f
 800a6ec:	0800a71f 	.word	0x0800a71f
 800a6f0:	0800a71f 	.word	0x0800a71f
 800a6f4:	0800a717 	.word	0x0800a717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6f8:	f7fd fe64 	bl	80083c4 <HAL_RCC_GetPCLK1Freq>
 800a6fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a6fe:	e014      	b.n	800a72a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a700:	f7fd fe74 	bl	80083ec <HAL_RCC_GetPCLK2Freq>
 800a704:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a706:	e010      	b.n	800a72a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a708:	4b4e      	ldr	r3, [pc, #312]	@ (800a844 <UART_SetConfig+0x5c8>)
 800a70a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a70c:	e00d      	b.n	800a72a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a70e:	f7fd fda7 	bl	8008260 <HAL_RCC_GetSysClockFreq>
 800a712:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a714:	e009      	b.n	800a72a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a71a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a71c:	e005      	b.n	800a72a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800a71e:	2300      	movs	r3, #0
 800a720:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a728:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f000 8090 	beq.w	800a852 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a736:	4a44      	ldr	r2, [pc, #272]	@ (800a848 <UART_SetConfig+0x5cc>)
 800a738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a73c:	461a      	mov	r2, r3
 800a73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a740:	fbb3 f3f2 	udiv	r3, r3, r2
 800a744:	005a      	lsls	r2, r3, #1
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	085b      	lsrs	r3, r3, #1
 800a74c:	441a      	add	r2, r3
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	fbb2 f3f3 	udiv	r3, r2, r3
 800a756:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a758:	6a3b      	ldr	r3, [r7, #32]
 800a75a:	2b0f      	cmp	r3, #15
 800a75c:	d916      	bls.n	800a78c <UART_SetConfig+0x510>
 800a75e:	6a3b      	ldr	r3, [r7, #32]
 800a760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a764:	d212      	bcs.n	800a78c <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	b29b      	uxth	r3, r3
 800a76a:	f023 030f 	bic.w	r3, r3, #15
 800a76e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	085b      	lsrs	r3, r3, #1
 800a774:	b29b      	uxth	r3, r3
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	8bfb      	ldrh	r3, [r7, #30]
 800a77e:	4313      	orrs	r3, r2
 800a780:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	8bfa      	ldrh	r2, [r7, #30]
 800a788:	60da      	str	r2, [r3, #12]
 800a78a:	e062      	b.n	800a852 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a792:	e05e      	b.n	800a852 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a794:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a798:	2b08      	cmp	r3, #8
 800a79a:	d828      	bhi.n	800a7ee <UART_SetConfig+0x572>
 800a79c:	a201      	add	r2, pc, #4	@ (adr r2, 800a7a4 <UART_SetConfig+0x528>)
 800a79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a2:	bf00      	nop
 800a7a4:	0800a7c9 	.word	0x0800a7c9
 800a7a8:	0800a7d1 	.word	0x0800a7d1
 800a7ac:	0800a7d9 	.word	0x0800a7d9
 800a7b0:	0800a7ef 	.word	0x0800a7ef
 800a7b4:	0800a7df 	.word	0x0800a7df
 800a7b8:	0800a7ef 	.word	0x0800a7ef
 800a7bc:	0800a7ef 	.word	0x0800a7ef
 800a7c0:	0800a7ef 	.word	0x0800a7ef
 800a7c4:	0800a7e7 	.word	0x0800a7e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7c8:	f7fd fdfc 	bl	80083c4 <HAL_RCC_GetPCLK1Freq>
 800a7cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a7ce:	e014      	b.n	800a7fa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7d0:	f7fd fe0c 	bl	80083ec <HAL_RCC_GetPCLK2Freq>
 800a7d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a7d6:	e010      	b.n	800a7fa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a844 <UART_SetConfig+0x5c8>)
 800a7da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a7dc:	e00d      	b.n	800a7fa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7de:	f7fd fd3f 	bl	8008260 <HAL_RCC_GetSysClockFreq>
 800a7e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a7e4:	e009      	b.n	800a7fa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a7ec:	e005      	b.n	800a7fa <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a7f8:	bf00      	nop
    }

    if (pclk != 0U)
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d028      	beq.n	800a852 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a804:	4a10      	ldr	r2, [pc, #64]	@ (800a848 <UART_SetConfig+0x5cc>)
 800a806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a80a:	461a      	mov	r2, r3
 800a80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	085b      	lsrs	r3, r3, #1
 800a818:	441a      	add	r2, r3
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a822:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a824:	6a3b      	ldr	r3, [r7, #32]
 800a826:	2b0f      	cmp	r3, #15
 800a828:	d910      	bls.n	800a84c <UART_SetConfig+0x5d0>
 800a82a:	6a3b      	ldr	r3, [r7, #32]
 800a82c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a830:	d20c      	bcs.n	800a84c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	b29a      	uxth	r2, r3
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	60da      	str	r2, [r3, #12]
 800a83c:	e009      	b.n	800a852 <UART_SetConfig+0x5d6>
 800a83e:	bf00      	nop
 800a840:	40008000 	.word	0x40008000
 800a844:	00f42400 	.word	0x00f42400
 800a848:	0800c4e0 	.word	0x0800c4e0
      }
      else
      {
        ret = HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	2201      	movs	r2, #1
 800a856:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	2200      	movs	r2, #0
 800a866:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	2200      	movs	r2, #0
 800a86c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a86e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a872:	4618      	mov	r0, r3
 800a874:	3730      	adds	r7, #48	@ 0x30
 800a876:	46bd      	mov	sp, r7
 800a878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a87c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a888:	f003 0308 	and.w	r3, r3, #8
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00a      	beq.n	800a8a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	430a      	orrs	r2, r1
 800a8a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8aa:	f003 0301 	and.w	r3, r3, #1
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00a      	beq.n	800a8c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	430a      	orrs	r2, r1
 800a8c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8cc:	f003 0302 	and.w	r3, r3, #2
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00a      	beq.n	800a8ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ee:	f003 0304 	and.w	r3, r3, #4
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00a      	beq.n	800a90c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	430a      	orrs	r2, r1
 800a90a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a910:	f003 0310 	and.w	r3, r3, #16
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00a      	beq.n	800a92e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	430a      	orrs	r2, r1
 800a92c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a932:	f003 0320 	and.w	r3, r3, #32
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00a      	beq.n	800a950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	430a      	orrs	r2, r1
 800a94e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d01a      	beq.n	800a992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	430a      	orrs	r2, r1
 800a970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a97a:	d10a      	bne.n	800a992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	430a      	orrs	r2, r1
 800a990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00a      	beq.n	800a9b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	430a      	orrs	r2, r1
 800a9b2:	605a      	str	r2, [r3, #4]
  }
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b098      	sub	sp, #96	@ 0x60
 800a9c4:	af02      	add	r7, sp, #8
 800a9c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a9d0:	f7fa fb84 	bl	80050dc <HAL_GetTick>
 800a9d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f003 0308 	and.w	r3, r3, #8
 800a9e0:	2b08      	cmp	r3, #8
 800a9e2:	d12f      	bne.n	800aa44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 f88e 	bl	800ab14 <UART_WaitOnFlagUntilTimeout>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d022      	beq.n	800aa44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa06:	e853 3f00 	ldrex	r3, [r3]
 800aa0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa12:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	461a      	mov	r2, r3
 800aa1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa24:	e841 2300 	strex	r3, r2, [r1]
 800aa28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1e6      	bne.n	800a9fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2220      	movs	r2, #32
 800aa34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e063      	b.n	800ab0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 0304 	and.w	r3, r3, #4
 800aa4e:	2b04      	cmp	r3, #4
 800aa50:	d149      	bne.n	800aae6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f857 	bl	800ab14 <UART_WaitOnFlagUntilTimeout>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d03c      	beq.n	800aae6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa74:	e853 3f00 	ldrex	r3, [r3]
 800aa78:	623b      	str	r3, [r7, #32]
   return(result);
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	461a      	mov	r2, r3
 800aa88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa92:	e841 2300 	strex	r3, r2, [r1]
 800aa96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1e6      	bne.n	800aa6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	60fb      	str	r3, [r7, #12]
   return(result);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f023 0301 	bic.w	r3, r3, #1
 800aab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	3308      	adds	r3, #8
 800aabc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aabe:	61fa      	str	r2, [r7, #28]
 800aac0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac2:	69b9      	ldr	r1, [r7, #24]
 800aac4:	69fa      	ldr	r2, [r7, #28]
 800aac6:	e841 2300 	strex	r3, r2, [r1]
 800aaca:	617b      	str	r3, [r7, #20]
   return(result);
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1e5      	bne.n	800aa9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2220      	movs	r2, #32
 800aad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e012      	b.n	800ab0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2220      	movs	r2, #32
 800aaea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2220      	movs	r2, #32
 800aaf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3758      	adds	r7, #88	@ 0x58
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	603b      	str	r3, [r7, #0]
 800ab20:	4613      	mov	r3, r2
 800ab22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab24:	e04f      	b.n	800abc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab2c:	d04b      	beq.n	800abc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab2e:	f7fa fad5 	bl	80050dc <HAL_GetTick>
 800ab32:	4602      	mov	r2, r0
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	69ba      	ldr	r2, [r7, #24]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d302      	bcc.n	800ab44 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d101      	bne.n	800ab48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e04e      	b.n	800abe6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 0304 	and.w	r3, r3, #4
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d037      	beq.n	800abc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	2b80      	cmp	r3, #128	@ 0x80
 800ab5a:	d034      	beq.n	800abc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	2b40      	cmp	r3, #64	@ 0x40
 800ab60:	d031      	beq.n	800abc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	69db      	ldr	r3, [r3, #28]
 800ab68:	f003 0308 	and.w	r3, r3, #8
 800ab6c:	2b08      	cmp	r3, #8
 800ab6e:	d110      	bne.n	800ab92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2208      	movs	r2, #8
 800ab76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f000 f838 	bl	800abee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2208      	movs	r2, #8
 800ab82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e029      	b.n	800abe6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	69db      	ldr	r3, [r3, #28]
 800ab98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aba0:	d111      	bne.n	800abc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800abaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800abac:	68f8      	ldr	r0, [r7, #12]
 800abae:	f000 f81e 	bl	800abee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2220      	movs	r2, #32
 800abb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800abc2:	2303      	movs	r3, #3
 800abc4:	e00f      	b.n	800abe6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	69da      	ldr	r2, [r3, #28]
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	4013      	ands	r3, r2
 800abd0:	68ba      	ldr	r2, [r7, #8]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	bf0c      	ite	eq
 800abd6:	2301      	moveq	r3, #1
 800abd8:	2300      	movne	r3, #0
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	461a      	mov	r2, r3
 800abde:	79fb      	ldrb	r3, [r7, #7]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d0a0      	beq.n	800ab26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abee:	b480      	push	{r7}
 800abf0:	b095      	sub	sp, #84	@ 0x54
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abfe:	e853 3f00 	ldrex	r3, [r3]
 800ac02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ac04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	461a      	mov	r2, r3
 800ac12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac14:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac1c:	e841 2300 	strex	r3, r2, [r1]
 800ac20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1e6      	bne.n	800abf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	3308      	adds	r3, #8
 800ac2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac30:	6a3b      	ldr	r3, [r7, #32]
 800ac32:	e853 3f00 	ldrex	r3, [r3]
 800ac36:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac3e:	f023 0301 	bic.w	r3, r3, #1
 800ac42:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	3308      	adds	r3, #8
 800ac4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac54:	e841 2300 	strex	r3, r2, [r1]
 800ac58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1e3      	bne.n	800ac28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d118      	bne.n	800ac9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	e853 3f00 	ldrex	r3, [r3]
 800ac74:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	f023 0310 	bic.w	r3, r3, #16
 800ac7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	461a      	mov	r2, r3
 800ac84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac86:	61bb      	str	r3, [r7, #24]
 800ac88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8a:	6979      	ldr	r1, [r7, #20]
 800ac8c:	69ba      	ldr	r2, [r7, #24]
 800ac8e:	e841 2300 	strex	r3, r2, [r1]
 800ac92:	613b      	str	r3, [r7, #16]
   return(result);
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1e6      	bne.n	800ac68 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2220      	movs	r2, #32
 800ac9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800acae:	bf00      	nop
 800acb0:	3754      	adds	r7, #84	@ 0x54
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800acba:	b480      	push	{r7}
 800acbc:	b085      	sub	sp, #20
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d101      	bne.n	800acd0 <HAL_UARTEx_DisableFifoMode+0x16>
 800accc:	2302      	movs	r3, #2
 800acce:	e027      	b.n	800ad20 <HAL_UARTEx_DisableFifoMode+0x66>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2201      	movs	r2, #1
 800acd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2224      	movs	r2, #36	@ 0x24
 800acdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f022 0201 	bic.w	r2, r2, #1
 800acf6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800acfe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2220      	movs	r2, #32
 800ad12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3714      	adds	r7, #20
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d101      	bne.n	800ad44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad40:	2302      	movs	r3, #2
 800ad42:	e02d      	b.n	800ada0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2224      	movs	r2, #36	@ 0x24
 800ad50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f022 0201 	bic.w	r2, r2, #1
 800ad6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	430a      	orrs	r2, r1
 800ad7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f84f 	bl	800ae24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2220      	movs	r2, #32
 800ad92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3710      	adds	r7, #16
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d101      	bne.n	800adc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800adbc:	2302      	movs	r3, #2
 800adbe:	e02d      	b.n	800ae1c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2224      	movs	r2, #36	@ 0x24
 800adcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f022 0201 	bic.w	r2, r2, #1
 800ade6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	430a      	orrs	r2, r1
 800adfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 f811 	bl	800ae24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d108      	bne.n	800ae46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae44:	e031      	b.n	800aeaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae46:	2308      	movs	r3, #8
 800ae48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae4a:	2308      	movs	r3, #8
 800ae4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	0e5b      	lsrs	r3, r3, #25
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	f003 0307 	and.w	r3, r3, #7
 800ae5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	0f5b      	lsrs	r3, r3, #29
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	f003 0307 	and.w	r3, r3, #7
 800ae6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae6e:	7bbb      	ldrb	r3, [r7, #14]
 800ae70:	7b3a      	ldrb	r2, [r7, #12]
 800ae72:	4911      	ldr	r1, [pc, #68]	@ (800aeb8 <UARTEx_SetNbDataToProcess+0x94>)
 800ae74:	5c8a      	ldrb	r2, [r1, r2]
 800ae76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae7a:	7b3a      	ldrb	r2, [r7, #12]
 800ae7c:	490f      	ldr	r1, [pc, #60]	@ (800aebc <UARTEx_SetNbDataToProcess+0x98>)
 800ae7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae80:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae8c:	7bfb      	ldrb	r3, [r7, #15]
 800ae8e:	7b7a      	ldrb	r2, [r7, #13]
 800ae90:	4909      	ldr	r1, [pc, #36]	@ (800aeb8 <UARTEx_SetNbDataToProcess+0x94>)
 800ae92:	5c8a      	ldrb	r2, [r1, r2]
 800ae94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae98:	7b7a      	ldrb	r2, [r7, #13]
 800ae9a:	4908      	ldr	r1, [pc, #32]	@ (800aebc <UARTEx_SetNbDataToProcess+0x98>)
 800ae9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aeaa:	bf00      	nop
 800aeac:	3714      	adds	r7, #20
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	0800c4f8 	.word	0x0800c4f8
 800aebc:	0800c500 	.word	0x0800c500

0800aec0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b08b      	sub	sp, #44	@ 0x2c
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	fa93 f3a3 	rbit	r3, r3
 800aeda:	613b      	str	r3, [r7, #16]
  return result;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d101      	bne.n	800aeea <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800aee6:	2320      	movs	r3, #32
 800aee8:	e003      	b.n	800aef2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	fab3 f383 	clz	r3, r3
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	005b      	lsls	r3, r3, #1
 800aef4:	2103      	movs	r1, #3
 800aef6:	fa01 f303 	lsl.w	r3, r1, r3
 800aefa:	43db      	mvns	r3, r3
 800aefc:	401a      	ands	r2, r3
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af02:	6a3b      	ldr	r3, [r7, #32]
 800af04:	fa93 f3a3 	rbit	r3, r3
 800af08:	61fb      	str	r3, [r7, #28]
  return result;
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800af0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af10:	2b00      	cmp	r3, #0
 800af12:	d101      	bne.n	800af18 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800af14:	2320      	movs	r3, #32
 800af16:	e003      	b.n	800af20 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800af18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1a:	fab3 f383 	clz	r3, r3
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	005b      	lsls	r3, r3, #1
 800af22:	6879      	ldr	r1, [r7, #4]
 800af24:	fa01 f303 	lsl.w	r3, r1, r3
 800af28:	431a      	orrs	r2, r3
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	601a      	str	r2, [r3, #0]
}
 800af2e:	bf00      	nop
 800af30:	372c      	adds	r7, #44	@ 0x2c
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b085      	sub	sp, #20
 800af3e:	af00      	add	r7, sp, #0
 800af40:	60f8      	str	r0, [r7, #12]
 800af42:	60b9      	str	r1, [r7, #8]
 800af44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	685a      	ldr	r2, [r3, #4]
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	43db      	mvns	r3, r3
 800af4e:	401a      	ands	r2, r3
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	6879      	ldr	r1, [r7, #4]
 800af54:	fb01 f303 	mul.w	r3, r1, r3
 800af58:	431a      	orrs	r2, r3
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	605a      	str	r2, [r3, #4]
}
 800af5e:	bf00      	nop
 800af60:	3714      	adds	r7, #20
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr

0800af6a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800af6a:	b480      	push	{r7}
 800af6c:	b08b      	sub	sp, #44	@ 0x2c
 800af6e:	af00      	add	r7, sp, #0
 800af70:	60f8      	str	r0, [r7, #12]
 800af72:	60b9      	str	r1, [r7, #8]
 800af74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	689a      	ldr	r2, [r3, #8]
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	fa93 f3a3 	rbit	r3, r3
 800af84:	613b      	str	r3, [r7, #16]
  return result;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d101      	bne.n	800af94 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800af90:	2320      	movs	r3, #32
 800af92:	e003      	b.n	800af9c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	fab3 f383 	clz	r3, r3
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	005b      	lsls	r3, r3, #1
 800af9e:	2103      	movs	r1, #3
 800afa0:	fa01 f303 	lsl.w	r3, r1, r3
 800afa4:	43db      	mvns	r3, r3
 800afa6:	401a      	ands	r2, r3
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afac:	6a3b      	ldr	r3, [r7, #32]
 800afae:	fa93 f3a3 	rbit	r3, r3
 800afb2:	61fb      	str	r3, [r7, #28]
  return result;
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800afb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d101      	bne.n	800afc2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800afbe:	2320      	movs	r3, #32
 800afc0:	e003      	b.n	800afca <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800afc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc4:	fab3 f383 	clz	r3, r3
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	005b      	lsls	r3, r3, #1
 800afcc:	6879      	ldr	r1, [r7, #4]
 800afce:	fa01 f303 	lsl.w	r3, r1, r3
 800afd2:	431a      	orrs	r2, r3
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800afd8:	bf00      	nop
 800afda:	372c      	adds	r7, #44	@ 0x2c
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b08b      	sub	sp, #44	@ 0x2c
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	68da      	ldr	r2, [r3, #12]
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	fa93 f3a3 	rbit	r3, r3
 800affe:	613b      	str	r3, [r7, #16]
  return result;
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d101      	bne.n	800b00e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b00a:	2320      	movs	r3, #32
 800b00c:	e003      	b.n	800b016 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	fab3 f383 	clz	r3, r3
 800b014:	b2db      	uxtb	r3, r3
 800b016:	005b      	lsls	r3, r3, #1
 800b018:	2103      	movs	r1, #3
 800b01a:	fa01 f303 	lsl.w	r3, r1, r3
 800b01e:	43db      	mvns	r3, r3
 800b020:	401a      	ands	r2, r3
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b026:	6a3b      	ldr	r3, [r7, #32]
 800b028:	fa93 f3a3 	rbit	r3, r3
 800b02c:	61fb      	str	r3, [r7, #28]
  return result;
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b038:	2320      	movs	r3, #32
 800b03a:	e003      	b.n	800b044 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03e:	fab3 f383 	clz	r3, r3
 800b042:	b2db      	uxtb	r3, r3
 800b044:	005b      	lsls	r3, r3, #1
 800b046:	6879      	ldr	r1, [r7, #4]
 800b048:	fa01 f303 	lsl.w	r3, r1, r3
 800b04c:	431a      	orrs	r2, r3
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	60da      	str	r2, [r3, #12]
}
 800b052:	bf00      	nop
 800b054:	372c      	adds	r7, #44	@ 0x2c
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr

0800b05e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b05e:	b480      	push	{r7}
 800b060:	b08b      	sub	sp, #44	@ 0x2c
 800b062:	af00      	add	r7, sp, #0
 800b064:	60f8      	str	r0, [r7, #12]
 800b066:	60b9      	str	r1, [r7, #8]
 800b068:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	6a1a      	ldr	r2, [r3, #32]
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	fa93 f3a3 	rbit	r3, r3
 800b078:	613b      	str	r3, [r7, #16]
  return result;
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d101      	bne.n	800b088 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800b084:	2320      	movs	r3, #32
 800b086:	e003      	b.n	800b090 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	fab3 f383 	clz	r3, r3
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	210f      	movs	r1, #15
 800b094:	fa01 f303 	lsl.w	r3, r1, r3
 800b098:	43db      	mvns	r3, r3
 800b09a:	401a      	ands	r2, r3
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0a0:	6a3b      	ldr	r3, [r7, #32]
 800b0a2:	fa93 f3a3 	rbit	r3, r3
 800b0a6:	61fb      	str	r3, [r7, #28]
  return result;
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d101      	bne.n	800b0b6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b0b2:	2320      	movs	r3, #32
 800b0b4:	e003      	b.n	800b0be <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b8:	fab3 f383 	clz	r3, r3
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	6879      	ldr	r1, [r7, #4]
 800b0c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b0c6:	431a      	orrs	r2, r3
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800b0cc:	bf00      	nop
 800b0ce:	372c      	adds	r7, #44	@ 0x2c
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b08b      	sub	sp, #44	@ 0x2c
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	0a1b      	lsrs	r3, r3, #8
 800b0ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	fa93 f3a3 	rbit	r3, r3
 800b0f4:	613b      	str	r3, [r7, #16]
  return result;
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b100:	2320      	movs	r3, #32
 800b102:	e003      	b.n	800b10c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	fab3 f383 	clz	r3, r3
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	210f      	movs	r1, #15
 800b110:	fa01 f303 	lsl.w	r3, r1, r3
 800b114:	43db      	mvns	r3, r3
 800b116:	401a      	ands	r2, r3
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	0a1b      	lsrs	r3, r3, #8
 800b11c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b11e:	6a3b      	ldr	r3, [r7, #32]
 800b120:	fa93 f3a3 	rbit	r3, r3
 800b124:	61fb      	str	r3, [r7, #28]
  return result;
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b130:	2320      	movs	r3, #32
 800b132:	e003      	b.n	800b13c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b136:	fab3 f383 	clz	r3, r3
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	6879      	ldr	r1, [r7, #4]
 800b140:	fa01 f303 	lsl.w	r3, r1, r3
 800b144:	431a      	orrs	r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800b14a:	bf00      	nop
 800b14c:	372c      	adds	r7, #44	@ 0x2c
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b088      	sub	sp, #32
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	fa93 f3a3 	rbit	r3, r3
 800b16c:	60fb      	str	r3, [r7, #12]
  return result;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d101      	bne.n	800b17c <LL_GPIO_Init+0x26>
    return 32U;
 800b178:	2320      	movs	r3, #32
 800b17a:	e003      	b.n	800b184 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	fab3 f383 	clz	r3, r3
 800b182:	b2db      	uxtb	r3, r3
 800b184:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b186:	e047      	b.n	800b218 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	2101      	movs	r1, #1
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	fa01 f303 	lsl.w	r3, r1, r3
 800b194:	4013      	ands	r3, r2
 800b196:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d039      	beq.n	800b212 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d003      	beq.n	800b1ae <LL_GPIO_Init+0x58>
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	2b02      	cmp	r3, #2
 800b1ac:	d10d      	bne.n	800b1ca <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	69b9      	ldr	r1, [r7, #24]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f7ff fed7 	bl	800af6a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	69b9      	ldr	r1, [r7, #24]
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f7ff feb8 	bl	800af3a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	691b      	ldr	r3, [r3, #16]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	69b9      	ldr	r1, [r7, #24]
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7ff ff06 	bl	800afe4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	d111      	bne.n	800b204 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	2bff      	cmp	r3, #255	@ 0xff
 800b1e4:	d807      	bhi.n	800b1f6 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	695b      	ldr	r3, [r3, #20]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	69b9      	ldr	r1, [r7, #24]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f7ff ff35 	bl	800b05e <LL_GPIO_SetAFPin_0_7>
 800b1f4:	e006      	b.n	800b204 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	695b      	ldr	r3, [r3, #20]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	69b9      	ldr	r1, [r7, #24]
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7ff ff6a 	bl	800b0d8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	461a      	mov	r2, r3
 800b20a:	69b9      	ldr	r1, [r7, #24]
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f7ff fe57 	bl	800aec0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	3301      	adds	r3, #1
 800b216:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	fa22 f303 	lsr.w	r3, r2, r3
 800b222:	2b00      	cmp	r3, #0
 800b224:	d1b0      	bne.n	800b188 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3720      	adds	r7, #32
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b230:	b480      	push	{r7}
 800b232:	b085      	sub	sp, #20
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b238:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b23c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b244:	b29a      	uxth	r2, r3
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	b29b      	uxth	r3, r3
 800b24a:	43db      	mvns	r3, r3
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	4013      	ands	r3, r2
 800b250:	b29a      	uxth	r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b266:	b480      	push	{r7}
 800b268:	b085      	sub	sp, #20
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	1d3b      	adds	r3, r7, #4
 800b270:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2201      	movs	r2, #1
 800b278:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2200      	movs	r2, #0
 800b288:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2200      	movs	r2, #0
 800b290:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3714      	adds	r7, #20
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
	...

0800b2a4 <std>:
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	b510      	push	{r4, lr}
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	6083      	str	r3, [r0, #8]
 800b2ac:	8181      	strh	r1, [r0, #12]
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	6643      	str	r3, [r0, #100]	@ 0x64
 800b2b2:	81c2      	strh	r2, [r0, #14]
 800b2b4:	2208      	movs	r2, #8
 800b2b6:	6183      	str	r3, [r0, #24]
 800b2b8:	e9c0 3300 	strd	r3, r3, [r0]
 800b2bc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2c0:	305c      	adds	r0, #92	@ 0x5c
 800b2c2:	f000 fa01 	bl	800b6c8 <memset>
 800b2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b2fc <std+0x58>)
 800b2c8:	6224      	str	r4, [r4, #32]
 800b2ca:	6263      	str	r3, [r4, #36]	@ 0x24
 800b2cc:	4b0c      	ldr	r3, [pc, #48]	@ (800b300 <std+0x5c>)
 800b2ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b2d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b304 <std+0x60>)
 800b2d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b2d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b308 <std+0x64>)
 800b2d6:	6323      	str	r3, [r4, #48]	@ 0x30
 800b2d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b30c <std+0x68>)
 800b2da:	429c      	cmp	r4, r3
 800b2dc:	d006      	beq.n	800b2ec <std+0x48>
 800b2de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b2e2:	4294      	cmp	r4, r2
 800b2e4:	d002      	beq.n	800b2ec <std+0x48>
 800b2e6:	33d0      	adds	r3, #208	@ 0xd0
 800b2e8:	429c      	cmp	r4, r3
 800b2ea:	d105      	bne.n	800b2f8 <std+0x54>
 800b2ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2f4:	f000 ba80 	b.w	800b7f8 <__retarget_lock_init_recursive>
 800b2f8:	bd10      	pop	{r4, pc}
 800b2fa:	bf00      	nop
 800b2fc:	0800b519 	.word	0x0800b519
 800b300:	0800b53b 	.word	0x0800b53b
 800b304:	0800b573 	.word	0x0800b573
 800b308:	0800b597 	.word	0x0800b597
 800b30c:	20000a08 	.word	0x20000a08

0800b310 <stdio_exit_handler>:
 800b310:	4a02      	ldr	r2, [pc, #8]	@ (800b31c <stdio_exit_handler+0xc>)
 800b312:	4903      	ldr	r1, [pc, #12]	@ (800b320 <stdio_exit_handler+0x10>)
 800b314:	4803      	ldr	r0, [pc, #12]	@ (800b324 <stdio_exit_handler+0x14>)
 800b316:	f000 b869 	b.w	800b3ec <_fwalk_sglue>
 800b31a:	bf00      	nop
 800b31c:	2000000c 	.word	0x2000000c
 800b320:	0800c0b9 	.word	0x0800c0b9
 800b324:	2000001c 	.word	0x2000001c

0800b328 <cleanup_stdio>:
 800b328:	6841      	ldr	r1, [r0, #4]
 800b32a:	4b0c      	ldr	r3, [pc, #48]	@ (800b35c <cleanup_stdio+0x34>)
 800b32c:	4299      	cmp	r1, r3
 800b32e:	b510      	push	{r4, lr}
 800b330:	4604      	mov	r4, r0
 800b332:	d001      	beq.n	800b338 <cleanup_stdio+0x10>
 800b334:	f000 fec0 	bl	800c0b8 <_fflush_r>
 800b338:	68a1      	ldr	r1, [r4, #8]
 800b33a:	4b09      	ldr	r3, [pc, #36]	@ (800b360 <cleanup_stdio+0x38>)
 800b33c:	4299      	cmp	r1, r3
 800b33e:	d002      	beq.n	800b346 <cleanup_stdio+0x1e>
 800b340:	4620      	mov	r0, r4
 800b342:	f000 feb9 	bl	800c0b8 <_fflush_r>
 800b346:	68e1      	ldr	r1, [r4, #12]
 800b348:	4b06      	ldr	r3, [pc, #24]	@ (800b364 <cleanup_stdio+0x3c>)
 800b34a:	4299      	cmp	r1, r3
 800b34c:	d004      	beq.n	800b358 <cleanup_stdio+0x30>
 800b34e:	4620      	mov	r0, r4
 800b350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b354:	f000 beb0 	b.w	800c0b8 <_fflush_r>
 800b358:	bd10      	pop	{r4, pc}
 800b35a:	bf00      	nop
 800b35c:	20000a08 	.word	0x20000a08
 800b360:	20000a70 	.word	0x20000a70
 800b364:	20000ad8 	.word	0x20000ad8

0800b368 <global_stdio_init.part.0>:
 800b368:	b510      	push	{r4, lr}
 800b36a:	4b0b      	ldr	r3, [pc, #44]	@ (800b398 <global_stdio_init.part.0+0x30>)
 800b36c:	2104      	movs	r1, #4
 800b36e:	4c0b      	ldr	r4, [pc, #44]	@ (800b39c <global_stdio_init.part.0+0x34>)
 800b370:	4a0b      	ldr	r2, [pc, #44]	@ (800b3a0 <global_stdio_init.part.0+0x38>)
 800b372:	4620      	mov	r0, r4
 800b374:	601a      	str	r2, [r3, #0]
 800b376:	2200      	movs	r2, #0
 800b378:	f7ff ff94 	bl	800b2a4 <std>
 800b37c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b380:	2201      	movs	r2, #1
 800b382:	2109      	movs	r1, #9
 800b384:	f7ff ff8e 	bl	800b2a4 <std>
 800b388:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b38c:	2202      	movs	r2, #2
 800b38e:	2112      	movs	r1, #18
 800b390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b394:	f7ff bf86 	b.w	800b2a4 <std>
 800b398:	20000b40 	.word	0x20000b40
 800b39c:	20000a08 	.word	0x20000a08
 800b3a0:	0800b311 	.word	0x0800b311

0800b3a4 <__sfp_lock_acquire>:
 800b3a4:	4801      	ldr	r0, [pc, #4]	@ (800b3ac <__sfp_lock_acquire+0x8>)
 800b3a6:	f000 ba28 	b.w	800b7fa <__retarget_lock_acquire_recursive>
 800b3aa:	bf00      	nop
 800b3ac:	20000b49 	.word	0x20000b49

0800b3b0 <__sfp_lock_release>:
 800b3b0:	4801      	ldr	r0, [pc, #4]	@ (800b3b8 <__sfp_lock_release+0x8>)
 800b3b2:	f000 ba23 	b.w	800b7fc <__retarget_lock_release_recursive>
 800b3b6:	bf00      	nop
 800b3b8:	20000b49 	.word	0x20000b49

0800b3bc <__sinit>:
 800b3bc:	b510      	push	{r4, lr}
 800b3be:	4604      	mov	r4, r0
 800b3c0:	f7ff fff0 	bl	800b3a4 <__sfp_lock_acquire>
 800b3c4:	6a23      	ldr	r3, [r4, #32]
 800b3c6:	b11b      	cbz	r3, 800b3d0 <__sinit+0x14>
 800b3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3cc:	f7ff bff0 	b.w	800b3b0 <__sfp_lock_release>
 800b3d0:	4b04      	ldr	r3, [pc, #16]	@ (800b3e4 <__sinit+0x28>)
 800b3d2:	6223      	str	r3, [r4, #32]
 800b3d4:	4b04      	ldr	r3, [pc, #16]	@ (800b3e8 <__sinit+0x2c>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1f5      	bne.n	800b3c8 <__sinit+0xc>
 800b3dc:	f7ff ffc4 	bl	800b368 <global_stdio_init.part.0>
 800b3e0:	e7f2      	b.n	800b3c8 <__sinit+0xc>
 800b3e2:	bf00      	nop
 800b3e4:	0800b329 	.word	0x0800b329
 800b3e8:	20000b40 	.word	0x20000b40

0800b3ec <_fwalk_sglue>:
 800b3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3f0:	4607      	mov	r7, r0
 800b3f2:	4688      	mov	r8, r1
 800b3f4:	4614      	mov	r4, r2
 800b3f6:	2600      	movs	r6, #0
 800b3f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3fc:	f1b9 0901 	subs.w	r9, r9, #1
 800b400:	d505      	bpl.n	800b40e <_fwalk_sglue+0x22>
 800b402:	6824      	ldr	r4, [r4, #0]
 800b404:	2c00      	cmp	r4, #0
 800b406:	d1f7      	bne.n	800b3f8 <_fwalk_sglue+0xc>
 800b408:	4630      	mov	r0, r6
 800b40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b40e:	89ab      	ldrh	r3, [r5, #12]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d907      	bls.n	800b424 <_fwalk_sglue+0x38>
 800b414:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b418:	3301      	adds	r3, #1
 800b41a:	d003      	beq.n	800b424 <_fwalk_sglue+0x38>
 800b41c:	4629      	mov	r1, r5
 800b41e:	4638      	mov	r0, r7
 800b420:	47c0      	blx	r8
 800b422:	4306      	orrs	r6, r0
 800b424:	3568      	adds	r5, #104	@ 0x68
 800b426:	e7e9      	b.n	800b3fc <_fwalk_sglue+0x10>

0800b428 <iprintf>:
 800b428:	b40f      	push	{r0, r1, r2, r3}
 800b42a:	b507      	push	{r0, r1, r2, lr}
 800b42c:	4906      	ldr	r1, [pc, #24]	@ (800b448 <iprintf+0x20>)
 800b42e:	ab04      	add	r3, sp, #16
 800b430:	6808      	ldr	r0, [r1, #0]
 800b432:	f853 2b04 	ldr.w	r2, [r3], #4
 800b436:	6881      	ldr	r1, [r0, #8]
 800b438:	9301      	str	r3, [sp, #4]
 800b43a:	f000 fb0f 	bl	800ba5c <_vfiprintf_r>
 800b43e:	b003      	add	sp, #12
 800b440:	f85d eb04 	ldr.w	lr, [sp], #4
 800b444:	b004      	add	sp, #16
 800b446:	4770      	bx	lr
 800b448:	20000018 	.word	0x20000018

0800b44c <putchar>:
 800b44c:	4b02      	ldr	r3, [pc, #8]	@ (800b458 <putchar+0xc>)
 800b44e:	4601      	mov	r1, r0
 800b450:	6818      	ldr	r0, [r3, #0]
 800b452:	6882      	ldr	r2, [r0, #8]
 800b454:	f000 beb9 	b.w	800c1ca <_putc_r>
 800b458:	20000018 	.word	0x20000018

0800b45c <_puts_r>:
 800b45c:	6a03      	ldr	r3, [r0, #32]
 800b45e:	b570      	push	{r4, r5, r6, lr}
 800b460:	4605      	mov	r5, r0
 800b462:	460e      	mov	r6, r1
 800b464:	6884      	ldr	r4, [r0, #8]
 800b466:	b90b      	cbnz	r3, 800b46c <_puts_r+0x10>
 800b468:	f7ff ffa8 	bl	800b3bc <__sinit>
 800b46c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b46e:	07db      	lsls	r3, r3, #31
 800b470:	d405      	bmi.n	800b47e <_puts_r+0x22>
 800b472:	89a3      	ldrh	r3, [r4, #12]
 800b474:	0598      	lsls	r0, r3, #22
 800b476:	d402      	bmi.n	800b47e <_puts_r+0x22>
 800b478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b47a:	f000 f9be 	bl	800b7fa <__retarget_lock_acquire_recursive>
 800b47e:	89a3      	ldrh	r3, [r4, #12]
 800b480:	0719      	lsls	r1, r3, #28
 800b482:	d502      	bpl.n	800b48a <_puts_r+0x2e>
 800b484:	6923      	ldr	r3, [r4, #16]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d135      	bne.n	800b4f6 <_puts_r+0x9a>
 800b48a:	4621      	mov	r1, r4
 800b48c:	4628      	mov	r0, r5
 800b48e:	f000 f8c5 	bl	800b61c <__swsetup_r>
 800b492:	b380      	cbz	r0, 800b4f6 <_puts_r+0x9a>
 800b494:	f04f 35ff 	mov.w	r5, #4294967295
 800b498:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b49a:	07da      	lsls	r2, r3, #31
 800b49c:	d405      	bmi.n	800b4aa <_puts_r+0x4e>
 800b49e:	89a3      	ldrh	r3, [r4, #12]
 800b4a0:	059b      	lsls	r3, r3, #22
 800b4a2:	d402      	bmi.n	800b4aa <_puts_r+0x4e>
 800b4a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4a6:	f000 f9a9 	bl	800b7fc <__retarget_lock_release_recursive>
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	bd70      	pop	{r4, r5, r6, pc}
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	da04      	bge.n	800b4bc <_puts_r+0x60>
 800b4b2:	69a2      	ldr	r2, [r4, #24]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	dc17      	bgt.n	800b4e8 <_puts_r+0x8c>
 800b4b8:	290a      	cmp	r1, #10
 800b4ba:	d015      	beq.n	800b4e8 <_puts_r+0x8c>
 800b4bc:	6823      	ldr	r3, [r4, #0]
 800b4be:	1c5a      	adds	r2, r3, #1
 800b4c0:	6022      	str	r2, [r4, #0]
 800b4c2:	7019      	strb	r1, [r3, #0]
 800b4c4:	68a3      	ldr	r3, [r4, #8]
 800b4c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	60a3      	str	r3, [r4, #8]
 800b4ce:	2900      	cmp	r1, #0
 800b4d0:	d1ed      	bne.n	800b4ae <_puts_r+0x52>
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	da11      	bge.n	800b4fa <_puts_r+0x9e>
 800b4d6:	4622      	mov	r2, r4
 800b4d8:	210a      	movs	r1, #10
 800b4da:	4628      	mov	r0, r5
 800b4dc:	f000 f85f 	bl	800b59e <__swbuf_r>
 800b4e0:	3001      	adds	r0, #1
 800b4e2:	d0d7      	beq.n	800b494 <_puts_r+0x38>
 800b4e4:	250a      	movs	r5, #10
 800b4e6:	e7d7      	b.n	800b498 <_puts_r+0x3c>
 800b4e8:	4622      	mov	r2, r4
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	f000 f857 	bl	800b59e <__swbuf_r>
 800b4f0:	3001      	adds	r0, #1
 800b4f2:	d1e7      	bne.n	800b4c4 <_puts_r+0x68>
 800b4f4:	e7ce      	b.n	800b494 <_puts_r+0x38>
 800b4f6:	3e01      	subs	r6, #1
 800b4f8:	e7e4      	b.n	800b4c4 <_puts_r+0x68>
 800b4fa:	6823      	ldr	r3, [r4, #0]
 800b4fc:	1c5a      	adds	r2, r3, #1
 800b4fe:	6022      	str	r2, [r4, #0]
 800b500:	220a      	movs	r2, #10
 800b502:	701a      	strb	r2, [r3, #0]
 800b504:	e7ee      	b.n	800b4e4 <_puts_r+0x88>
	...

0800b508 <puts>:
 800b508:	4b02      	ldr	r3, [pc, #8]	@ (800b514 <puts+0xc>)
 800b50a:	4601      	mov	r1, r0
 800b50c:	6818      	ldr	r0, [r3, #0]
 800b50e:	f7ff bfa5 	b.w	800b45c <_puts_r>
 800b512:	bf00      	nop
 800b514:	20000018 	.word	0x20000018

0800b518 <__sread>:
 800b518:	b510      	push	{r4, lr}
 800b51a:	460c      	mov	r4, r1
 800b51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b520:	f000 f91c 	bl	800b75c <_read_r>
 800b524:	2800      	cmp	r0, #0
 800b526:	bfab      	itete	ge
 800b528:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b52a:	89a3      	ldrhlt	r3, [r4, #12]
 800b52c:	181b      	addge	r3, r3, r0
 800b52e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b532:	bfac      	ite	ge
 800b534:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b536:	81a3      	strhlt	r3, [r4, #12]
 800b538:	bd10      	pop	{r4, pc}

0800b53a <__swrite>:
 800b53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b53e:	461f      	mov	r7, r3
 800b540:	898b      	ldrh	r3, [r1, #12]
 800b542:	4605      	mov	r5, r0
 800b544:	460c      	mov	r4, r1
 800b546:	05db      	lsls	r3, r3, #23
 800b548:	4616      	mov	r6, r2
 800b54a:	d505      	bpl.n	800b558 <__swrite+0x1e>
 800b54c:	2302      	movs	r3, #2
 800b54e:	2200      	movs	r2, #0
 800b550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b554:	f000 f8f0 	bl	800b738 <_lseek_r>
 800b558:	89a3      	ldrh	r3, [r4, #12]
 800b55a:	4632      	mov	r2, r6
 800b55c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b560:	4628      	mov	r0, r5
 800b562:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b566:	81a3      	strh	r3, [r4, #12]
 800b568:	463b      	mov	r3, r7
 800b56a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b56e:	f000 b907 	b.w	800b780 <_write_r>

0800b572 <__sseek>:
 800b572:	b510      	push	{r4, lr}
 800b574:	460c      	mov	r4, r1
 800b576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b57a:	f000 f8dd 	bl	800b738 <_lseek_r>
 800b57e:	1c43      	adds	r3, r0, #1
 800b580:	89a3      	ldrh	r3, [r4, #12]
 800b582:	bf15      	itete	ne
 800b584:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b586:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b58a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b58e:	81a3      	strheq	r3, [r4, #12]
 800b590:	bf18      	it	ne
 800b592:	81a3      	strhne	r3, [r4, #12]
 800b594:	bd10      	pop	{r4, pc}

0800b596 <__sclose>:
 800b596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b59a:	f000 b8bd 	b.w	800b718 <_close_r>

0800b59e <__swbuf_r>:
 800b59e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a0:	460e      	mov	r6, r1
 800b5a2:	4614      	mov	r4, r2
 800b5a4:	4605      	mov	r5, r0
 800b5a6:	b118      	cbz	r0, 800b5b0 <__swbuf_r+0x12>
 800b5a8:	6a03      	ldr	r3, [r0, #32]
 800b5aa:	b90b      	cbnz	r3, 800b5b0 <__swbuf_r+0x12>
 800b5ac:	f7ff ff06 	bl	800b3bc <__sinit>
 800b5b0:	69a3      	ldr	r3, [r4, #24]
 800b5b2:	60a3      	str	r3, [r4, #8]
 800b5b4:	89a3      	ldrh	r3, [r4, #12]
 800b5b6:	071a      	lsls	r2, r3, #28
 800b5b8:	d501      	bpl.n	800b5be <__swbuf_r+0x20>
 800b5ba:	6923      	ldr	r3, [r4, #16]
 800b5bc:	b943      	cbnz	r3, 800b5d0 <__swbuf_r+0x32>
 800b5be:	4621      	mov	r1, r4
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	f000 f82b 	bl	800b61c <__swsetup_r>
 800b5c6:	b118      	cbz	r0, 800b5d0 <__swbuf_r+0x32>
 800b5c8:	f04f 37ff 	mov.w	r7, #4294967295
 800b5cc:	4638      	mov	r0, r7
 800b5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5d0:	6823      	ldr	r3, [r4, #0]
 800b5d2:	b2f6      	uxtb	r6, r6
 800b5d4:	6922      	ldr	r2, [r4, #16]
 800b5d6:	4637      	mov	r7, r6
 800b5d8:	1a98      	subs	r0, r3, r2
 800b5da:	6963      	ldr	r3, [r4, #20]
 800b5dc:	4283      	cmp	r3, r0
 800b5de:	dc05      	bgt.n	800b5ec <__swbuf_r+0x4e>
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	f000 fd68 	bl	800c0b8 <_fflush_r>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d1ed      	bne.n	800b5c8 <__swbuf_r+0x2a>
 800b5ec:	68a3      	ldr	r3, [r4, #8]
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	60a3      	str	r3, [r4, #8]
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	1c5a      	adds	r2, r3, #1
 800b5f6:	6022      	str	r2, [r4, #0]
 800b5f8:	701e      	strb	r6, [r3, #0]
 800b5fa:	1c43      	adds	r3, r0, #1
 800b5fc:	6962      	ldr	r2, [r4, #20]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d004      	beq.n	800b60c <__swbuf_r+0x6e>
 800b602:	89a3      	ldrh	r3, [r4, #12]
 800b604:	07db      	lsls	r3, r3, #31
 800b606:	d5e1      	bpl.n	800b5cc <__swbuf_r+0x2e>
 800b608:	2e0a      	cmp	r6, #10
 800b60a:	d1df      	bne.n	800b5cc <__swbuf_r+0x2e>
 800b60c:	4621      	mov	r1, r4
 800b60e:	4628      	mov	r0, r5
 800b610:	f000 fd52 	bl	800c0b8 <_fflush_r>
 800b614:	2800      	cmp	r0, #0
 800b616:	d0d9      	beq.n	800b5cc <__swbuf_r+0x2e>
 800b618:	e7d6      	b.n	800b5c8 <__swbuf_r+0x2a>
	...

0800b61c <__swsetup_r>:
 800b61c:	b538      	push	{r3, r4, r5, lr}
 800b61e:	4b29      	ldr	r3, [pc, #164]	@ (800b6c4 <__swsetup_r+0xa8>)
 800b620:	4605      	mov	r5, r0
 800b622:	460c      	mov	r4, r1
 800b624:	6818      	ldr	r0, [r3, #0]
 800b626:	b118      	cbz	r0, 800b630 <__swsetup_r+0x14>
 800b628:	6a03      	ldr	r3, [r0, #32]
 800b62a:	b90b      	cbnz	r3, 800b630 <__swsetup_r+0x14>
 800b62c:	f7ff fec6 	bl	800b3bc <__sinit>
 800b630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b634:	0719      	lsls	r1, r3, #28
 800b636:	d422      	bmi.n	800b67e <__swsetup_r+0x62>
 800b638:	06da      	lsls	r2, r3, #27
 800b63a:	d407      	bmi.n	800b64c <__swsetup_r+0x30>
 800b63c:	2209      	movs	r2, #9
 800b63e:	602a      	str	r2, [r5, #0]
 800b640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b644:	f04f 30ff 	mov.w	r0, #4294967295
 800b648:	81a3      	strh	r3, [r4, #12]
 800b64a:	e033      	b.n	800b6b4 <__swsetup_r+0x98>
 800b64c:	0758      	lsls	r0, r3, #29
 800b64e:	d512      	bpl.n	800b676 <__swsetup_r+0x5a>
 800b650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b652:	b141      	cbz	r1, 800b666 <__swsetup_r+0x4a>
 800b654:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b658:	4299      	cmp	r1, r3
 800b65a:	d002      	beq.n	800b662 <__swsetup_r+0x46>
 800b65c:	4628      	mov	r0, r5
 800b65e:	f000 f8db 	bl	800b818 <_free_r>
 800b662:	2300      	movs	r3, #0
 800b664:	6363      	str	r3, [r4, #52]	@ 0x34
 800b666:	89a3      	ldrh	r3, [r4, #12]
 800b668:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b66c:	81a3      	strh	r3, [r4, #12]
 800b66e:	2300      	movs	r3, #0
 800b670:	6063      	str	r3, [r4, #4]
 800b672:	6923      	ldr	r3, [r4, #16]
 800b674:	6023      	str	r3, [r4, #0]
 800b676:	89a3      	ldrh	r3, [r4, #12]
 800b678:	f043 0308 	orr.w	r3, r3, #8
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	6923      	ldr	r3, [r4, #16]
 800b680:	b94b      	cbnz	r3, 800b696 <__swsetup_r+0x7a>
 800b682:	89a3      	ldrh	r3, [r4, #12]
 800b684:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b68c:	d003      	beq.n	800b696 <__swsetup_r+0x7a>
 800b68e:	4621      	mov	r1, r4
 800b690:	4628      	mov	r0, r5
 800b692:	f000 fd5e 	bl	800c152 <__smakebuf_r>
 800b696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b69a:	f013 0201 	ands.w	r2, r3, #1
 800b69e:	d00a      	beq.n	800b6b6 <__swsetup_r+0x9a>
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	60a2      	str	r2, [r4, #8]
 800b6a4:	6962      	ldr	r2, [r4, #20]
 800b6a6:	4252      	negs	r2, r2
 800b6a8:	61a2      	str	r2, [r4, #24]
 800b6aa:	6922      	ldr	r2, [r4, #16]
 800b6ac:	b942      	cbnz	r2, 800b6c0 <__swsetup_r+0xa4>
 800b6ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6b2:	d1c5      	bne.n	800b640 <__swsetup_r+0x24>
 800b6b4:	bd38      	pop	{r3, r4, r5, pc}
 800b6b6:	0799      	lsls	r1, r3, #30
 800b6b8:	bf58      	it	pl
 800b6ba:	6962      	ldrpl	r2, [r4, #20]
 800b6bc:	60a2      	str	r2, [r4, #8]
 800b6be:	e7f4      	b.n	800b6aa <__swsetup_r+0x8e>
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	e7f7      	b.n	800b6b4 <__swsetup_r+0x98>
 800b6c4:	20000018 	.word	0x20000018

0800b6c8 <memset>:
 800b6c8:	4402      	add	r2, r0
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d100      	bne.n	800b6d2 <memset+0xa>
 800b6d0:	4770      	bx	lr
 800b6d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b6d6:	e7f9      	b.n	800b6cc <memset+0x4>

0800b6d8 <strncpy>:
 800b6d8:	3901      	subs	r1, #1
 800b6da:	4603      	mov	r3, r0
 800b6dc:	b510      	push	{r4, lr}
 800b6de:	b132      	cbz	r2, 800b6ee <strncpy+0x16>
 800b6e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b6e4:	3a01      	subs	r2, #1
 800b6e6:	f803 4b01 	strb.w	r4, [r3], #1
 800b6ea:	2c00      	cmp	r4, #0
 800b6ec:	d1f7      	bne.n	800b6de <strncpy+0x6>
 800b6ee:	441a      	add	r2, r3
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d100      	bne.n	800b6f8 <strncpy+0x20>
 800b6f6:	bd10      	pop	{r4, pc}
 800b6f8:	f803 1b01 	strb.w	r1, [r3], #1
 800b6fc:	e7f9      	b.n	800b6f2 <strncpy+0x1a>

0800b6fe <strnlen>:
 800b6fe:	4602      	mov	r2, r0
 800b700:	4401      	add	r1, r0
 800b702:	b510      	push	{r4, lr}
 800b704:	428a      	cmp	r2, r1
 800b706:	4613      	mov	r3, r2
 800b708:	d003      	beq.n	800b712 <strnlen+0x14>
 800b70a:	781c      	ldrb	r4, [r3, #0]
 800b70c:	3201      	adds	r2, #1
 800b70e:	2c00      	cmp	r4, #0
 800b710:	d1f8      	bne.n	800b704 <strnlen+0x6>
 800b712:	1a18      	subs	r0, r3, r0
 800b714:	bd10      	pop	{r4, pc}
	...

0800b718 <_close_r>:
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	2300      	movs	r3, #0
 800b71c:	4d05      	ldr	r5, [pc, #20]	@ (800b734 <_close_r+0x1c>)
 800b71e:	4604      	mov	r4, r0
 800b720:	4608      	mov	r0, r1
 800b722:	602b      	str	r3, [r5, #0]
 800b724:	f7f8 fedf 	bl	80044e6 <_close>
 800b728:	1c43      	adds	r3, r0, #1
 800b72a:	d102      	bne.n	800b732 <_close_r+0x1a>
 800b72c:	682b      	ldr	r3, [r5, #0]
 800b72e:	b103      	cbz	r3, 800b732 <_close_r+0x1a>
 800b730:	6023      	str	r3, [r4, #0]
 800b732:	bd38      	pop	{r3, r4, r5, pc}
 800b734:	20000b44 	.word	0x20000b44

0800b738 <_lseek_r>:
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	4604      	mov	r4, r0
 800b73c:	4d06      	ldr	r5, [pc, #24]	@ (800b758 <_lseek_r+0x20>)
 800b73e:	4608      	mov	r0, r1
 800b740:	4611      	mov	r1, r2
 800b742:	2200      	movs	r2, #0
 800b744:	602a      	str	r2, [r5, #0]
 800b746:	461a      	mov	r2, r3
 800b748:	f7f8 fef4 	bl	8004534 <_lseek>
 800b74c:	1c43      	adds	r3, r0, #1
 800b74e:	d102      	bne.n	800b756 <_lseek_r+0x1e>
 800b750:	682b      	ldr	r3, [r5, #0]
 800b752:	b103      	cbz	r3, 800b756 <_lseek_r+0x1e>
 800b754:	6023      	str	r3, [r4, #0]
 800b756:	bd38      	pop	{r3, r4, r5, pc}
 800b758:	20000b44 	.word	0x20000b44

0800b75c <_read_r>:
 800b75c:	b538      	push	{r3, r4, r5, lr}
 800b75e:	4604      	mov	r4, r0
 800b760:	4d06      	ldr	r5, [pc, #24]	@ (800b77c <_read_r+0x20>)
 800b762:	4608      	mov	r0, r1
 800b764:	4611      	mov	r1, r2
 800b766:	2200      	movs	r2, #0
 800b768:	602a      	str	r2, [r5, #0]
 800b76a:	461a      	mov	r2, r3
 800b76c:	f7f8 fe82 	bl	8004474 <_read>
 800b770:	1c43      	adds	r3, r0, #1
 800b772:	d102      	bne.n	800b77a <_read_r+0x1e>
 800b774:	682b      	ldr	r3, [r5, #0]
 800b776:	b103      	cbz	r3, 800b77a <_read_r+0x1e>
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	bd38      	pop	{r3, r4, r5, pc}
 800b77c:	20000b44 	.word	0x20000b44

0800b780 <_write_r>:
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	4604      	mov	r4, r0
 800b784:	4d06      	ldr	r5, [pc, #24]	@ (800b7a0 <_write_r+0x20>)
 800b786:	4608      	mov	r0, r1
 800b788:	4611      	mov	r1, r2
 800b78a:	2200      	movs	r2, #0
 800b78c:	602a      	str	r2, [r5, #0]
 800b78e:	461a      	mov	r2, r3
 800b790:	f7f8 fe8d 	bl	80044ae <_write>
 800b794:	1c43      	adds	r3, r0, #1
 800b796:	d102      	bne.n	800b79e <_write_r+0x1e>
 800b798:	682b      	ldr	r3, [r5, #0]
 800b79a:	b103      	cbz	r3, 800b79e <_write_r+0x1e>
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	bd38      	pop	{r3, r4, r5, pc}
 800b7a0:	20000b44 	.word	0x20000b44

0800b7a4 <__errno>:
 800b7a4:	4b01      	ldr	r3, [pc, #4]	@ (800b7ac <__errno+0x8>)
 800b7a6:	6818      	ldr	r0, [r3, #0]
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	20000018 	.word	0x20000018

0800b7b0 <__libc_init_array>:
 800b7b0:	b570      	push	{r4, r5, r6, lr}
 800b7b2:	4d0d      	ldr	r5, [pc, #52]	@ (800b7e8 <__libc_init_array+0x38>)
 800b7b4:	2600      	movs	r6, #0
 800b7b6:	4c0d      	ldr	r4, [pc, #52]	@ (800b7ec <__libc_init_array+0x3c>)
 800b7b8:	1b64      	subs	r4, r4, r5
 800b7ba:	10a4      	asrs	r4, r4, #2
 800b7bc:	42a6      	cmp	r6, r4
 800b7be:	d109      	bne.n	800b7d4 <__libc_init_array+0x24>
 800b7c0:	4d0b      	ldr	r5, [pc, #44]	@ (800b7f0 <__libc_init_array+0x40>)
 800b7c2:	2600      	movs	r6, #0
 800b7c4:	4c0b      	ldr	r4, [pc, #44]	@ (800b7f4 <__libc_init_array+0x44>)
 800b7c6:	f000 fd75 	bl	800c2b4 <_init>
 800b7ca:	1b64      	subs	r4, r4, r5
 800b7cc:	10a4      	asrs	r4, r4, #2
 800b7ce:	42a6      	cmp	r6, r4
 800b7d0:	d105      	bne.n	800b7de <__libc_init_array+0x2e>
 800b7d2:	bd70      	pop	{r4, r5, r6, pc}
 800b7d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7d8:	3601      	adds	r6, #1
 800b7da:	4798      	blx	r3
 800b7dc:	e7ee      	b.n	800b7bc <__libc_init_array+0xc>
 800b7de:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7e2:	3601      	adds	r6, #1
 800b7e4:	4798      	blx	r3
 800b7e6:	e7f2      	b.n	800b7ce <__libc_init_array+0x1e>
 800b7e8:	0800c544 	.word	0x0800c544
 800b7ec:	0800c544 	.word	0x0800c544
 800b7f0:	0800c544 	.word	0x0800c544
 800b7f4:	0800c548 	.word	0x0800c548

0800b7f8 <__retarget_lock_init_recursive>:
 800b7f8:	4770      	bx	lr

0800b7fa <__retarget_lock_acquire_recursive>:
 800b7fa:	4770      	bx	lr

0800b7fc <__retarget_lock_release_recursive>:
 800b7fc:	4770      	bx	lr

0800b7fe <memcpy>:
 800b7fe:	440a      	add	r2, r1
 800b800:	1e43      	subs	r3, r0, #1
 800b802:	4291      	cmp	r1, r2
 800b804:	d100      	bne.n	800b808 <memcpy+0xa>
 800b806:	4770      	bx	lr
 800b808:	b510      	push	{r4, lr}
 800b80a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b80e:	4291      	cmp	r1, r2
 800b810:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b814:	d1f9      	bne.n	800b80a <memcpy+0xc>
 800b816:	bd10      	pop	{r4, pc}

0800b818 <_free_r>:
 800b818:	b538      	push	{r3, r4, r5, lr}
 800b81a:	4605      	mov	r5, r0
 800b81c:	2900      	cmp	r1, #0
 800b81e:	d041      	beq.n	800b8a4 <_free_r+0x8c>
 800b820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b824:	1f0c      	subs	r4, r1, #4
 800b826:	2b00      	cmp	r3, #0
 800b828:	bfb8      	it	lt
 800b82a:	18e4      	addlt	r4, r4, r3
 800b82c:	f000 f8e0 	bl	800b9f0 <__malloc_lock>
 800b830:	4a1d      	ldr	r2, [pc, #116]	@ (800b8a8 <_free_r+0x90>)
 800b832:	6813      	ldr	r3, [r2, #0]
 800b834:	b933      	cbnz	r3, 800b844 <_free_r+0x2c>
 800b836:	6063      	str	r3, [r4, #4]
 800b838:	6014      	str	r4, [r2, #0]
 800b83a:	4628      	mov	r0, r5
 800b83c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b840:	f000 b8dc 	b.w	800b9fc <__malloc_unlock>
 800b844:	42a3      	cmp	r3, r4
 800b846:	d908      	bls.n	800b85a <_free_r+0x42>
 800b848:	6820      	ldr	r0, [r4, #0]
 800b84a:	1821      	adds	r1, r4, r0
 800b84c:	428b      	cmp	r3, r1
 800b84e:	bf01      	itttt	eq
 800b850:	6819      	ldreq	r1, [r3, #0]
 800b852:	685b      	ldreq	r3, [r3, #4]
 800b854:	1809      	addeq	r1, r1, r0
 800b856:	6021      	streq	r1, [r4, #0]
 800b858:	e7ed      	b.n	800b836 <_free_r+0x1e>
 800b85a:	461a      	mov	r2, r3
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	b10b      	cbz	r3, 800b864 <_free_r+0x4c>
 800b860:	42a3      	cmp	r3, r4
 800b862:	d9fa      	bls.n	800b85a <_free_r+0x42>
 800b864:	6811      	ldr	r1, [r2, #0]
 800b866:	1850      	adds	r0, r2, r1
 800b868:	42a0      	cmp	r0, r4
 800b86a:	d10b      	bne.n	800b884 <_free_r+0x6c>
 800b86c:	6820      	ldr	r0, [r4, #0]
 800b86e:	4401      	add	r1, r0
 800b870:	1850      	adds	r0, r2, r1
 800b872:	6011      	str	r1, [r2, #0]
 800b874:	4283      	cmp	r3, r0
 800b876:	d1e0      	bne.n	800b83a <_free_r+0x22>
 800b878:	6818      	ldr	r0, [r3, #0]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	4408      	add	r0, r1
 800b87e:	6053      	str	r3, [r2, #4]
 800b880:	6010      	str	r0, [r2, #0]
 800b882:	e7da      	b.n	800b83a <_free_r+0x22>
 800b884:	d902      	bls.n	800b88c <_free_r+0x74>
 800b886:	230c      	movs	r3, #12
 800b888:	602b      	str	r3, [r5, #0]
 800b88a:	e7d6      	b.n	800b83a <_free_r+0x22>
 800b88c:	6820      	ldr	r0, [r4, #0]
 800b88e:	1821      	adds	r1, r4, r0
 800b890:	428b      	cmp	r3, r1
 800b892:	bf02      	ittt	eq
 800b894:	6819      	ldreq	r1, [r3, #0]
 800b896:	685b      	ldreq	r3, [r3, #4]
 800b898:	1809      	addeq	r1, r1, r0
 800b89a:	6063      	str	r3, [r4, #4]
 800b89c:	bf08      	it	eq
 800b89e:	6021      	streq	r1, [r4, #0]
 800b8a0:	6054      	str	r4, [r2, #4]
 800b8a2:	e7ca      	b.n	800b83a <_free_r+0x22>
 800b8a4:	bd38      	pop	{r3, r4, r5, pc}
 800b8a6:	bf00      	nop
 800b8a8:	20000b50 	.word	0x20000b50

0800b8ac <sbrk_aligned>:
 800b8ac:	b570      	push	{r4, r5, r6, lr}
 800b8ae:	4e0f      	ldr	r6, [pc, #60]	@ (800b8ec <sbrk_aligned+0x40>)
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	4605      	mov	r5, r0
 800b8b4:	6831      	ldr	r1, [r6, #0]
 800b8b6:	b911      	cbnz	r1, 800b8be <sbrk_aligned+0x12>
 800b8b8:	f000 fcde 	bl	800c278 <_sbrk_r>
 800b8bc:	6030      	str	r0, [r6, #0]
 800b8be:	4621      	mov	r1, r4
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	f000 fcd9 	bl	800c278 <_sbrk_r>
 800b8c6:	1c43      	adds	r3, r0, #1
 800b8c8:	d103      	bne.n	800b8d2 <sbrk_aligned+0x26>
 800b8ca:	f04f 34ff 	mov.w	r4, #4294967295
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	bd70      	pop	{r4, r5, r6, pc}
 800b8d2:	1cc4      	adds	r4, r0, #3
 800b8d4:	f024 0403 	bic.w	r4, r4, #3
 800b8d8:	42a0      	cmp	r0, r4
 800b8da:	d0f8      	beq.n	800b8ce <sbrk_aligned+0x22>
 800b8dc:	1a21      	subs	r1, r4, r0
 800b8de:	4628      	mov	r0, r5
 800b8e0:	f000 fcca 	bl	800c278 <_sbrk_r>
 800b8e4:	3001      	adds	r0, #1
 800b8e6:	d1f2      	bne.n	800b8ce <sbrk_aligned+0x22>
 800b8e8:	e7ef      	b.n	800b8ca <sbrk_aligned+0x1e>
 800b8ea:	bf00      	nop
 800b8ec:	20000b4c 	.word	0x20000b4c

0800b8f0 <_malloc_r>:
 800b8f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8f4:	1ccd      	adds	r5, r1, #3
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	f025 0503 	bic.w	r5, r5, #3
 800b8fc:	3508      	adds	r5, #8
 800b8fe:	2d0c      	cmp	r5, #12
 800b900:	bf38      	it	cc
 800b902:	250c      	movcc	r5, #12
 800b904:	2d00      	cmp	r5, #0
 800b906:	db01      	blt.n	800b90c <_malloc_r+0x1c>
 800b908:	42a9      	cmp	r1, r5
 800b90a:	d904      	bls.n	800b916 <_malloc_r+0x26>
 800b90c:	230c      	movs	r3, #12
 800b90e:	6033      	str	r3, [r6, #0]
 800b910:	2000      	movs	r0, #0
 800b912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b9ec <_malloc_r+0xfc>
 800b91a:	f000 f869 	bl	800b9f0 <__malloc_lock>
 800b91e:	f8d8 3000 	ldr.w	r3, [r8]
 800b922:	461c      	mov	r4, r3
 800b924:	bb44      	cbnz	r4, 800b978 <_malloc_r+0x88>
 800b926:	4629      	mov	r1, r5
 800b928:	4630      	mov	r0, r6
 800b92a:	f7ff ffbf 	bl	800b8ac <sbrk_aligned>
 800b92e:	1c43      	adds	r3, r0, #1
 800b930:	4604      	mov	r4, r0
 800b932:	d158      	bne.n	800b9e6 <_malloc_r+0xf6>
 800b934:	f8d8 4000 	ldr.w	r4, [r8]
 800b938:	4627      	mov	r7, r4
 800b93a:	2f00      	cmp	r7, #0
 800b93c:	d143      	bne.n	800b9c6 <_malloc_r+0xd6>
 800b93e:	2c00      	cmp	r4, #0
 800b940:	d04b      	beq.n	800b9da <_malloc_r+0xea>
 800b942:	6823      	ldr	r3, [r4, #0]
 800b944:	4639      	mov	r1, r7
 800b946:	4630      	mov	r0, r6
 800b948:	eb04 0903 	add.w	r9, r4, r3
 800b94c:	f000 fc94 	bl	800c278 <_sbrk_r>
 800b950:	4581      	cmp	r9, r0
 800b952:	d142      	bne.n	800b9da <_malloc_r+0xea>
 800b954:	6821      	ldr	r1, [r4, #0]
 800b956:	4630      	mov	r0, r6
 800b958:	1a6d      	subs	r5, r5, r1
 800b95a:	4629      	mov	r1, r5
 800b95c:	f7ff ffa6 	bl	800b8ac <sbrk_aligned>
 800b960:	3001      	adds	r0, #1
 800b962:	d03a      	beq.n	800b9da <_malloc_r+0xea>
 800b964:	6823      	ldr	r3, [r4, #0]
 800b966:	442b      	add	r3, r5
 800b968:	6023      	str	r3, [r4, #0]
 800b96a:	f8d8 3000 	ldr.w	r3, [r8]
 800b96e:	685a      	ldr	r2, [r3, #4]
 800b970:	bb62      	cbnz	r2, 800b9cc <_malloc_r+0xdc>
 800b972:	f8c8 7000 	str.w	r7, [r8]
 800b976:	e00f      	b.n	800b998 <_malloc_r+0xa8>
 800b978:	6822      	ldr	r2, [r4, #0]
 800b97a:	1b52      	subs	r2, r2, r5
 800b97c:	d420      	bmi.n	800b9c0 <_malloc_r+0xd0>
 800b97e:	2a0b      	cmp	r2, #11
 800b980:	d917      	bls.n	800b9b2 <_malloc_r+0xc2>
 800b982:	1961      	adds	r1, r4, r5
 800b984:	42a3      	cmp	r3, r4
 800b986:	6025      	str	r5, [r4, #0]
 800b988:	bf18      	it	ne
 800b98a:	6059      	strne	r1, [r3, #4]
 800b98c:	6863      	ldr	r3, [r4, #4]
 800b98e:	bf08      	it	eq
 800b990:	f8c8 1000 	streq.w	r1, [r8]
 800b994:	5162      	str	r2, [r4, r5]
 800b996:	604b      	str	r3, [r1, #4]
 800b998:	4630      	mov	r0, r6
 800b99a:	f000 f82f 	bl	800b9fc <__malloc_unlock>
 800b99e:	f104 000b 	add.w	r0, r4, #11
 800b9a2:	1d23      	adds	r3, r4, #4
 800b9a4:	f020 0007 	bic.w	r0, r0, #7
 800b9a8:	1ac2      	subs	r2, r0, r3
 800b9aa:	bf1c      	itt	ne
 800b9ac:	1a1b      	subne	r3, r3, r0
 800b9ae:	50a3      	strne	r3, [r4, r2]
 800b9b0:	e7af      	b.n	800b912 <_malloc_r+0x22>
 800b9b2:	6862      	ldr	r2, [r4, #4]
 800b9b4:	42a3      	cmp	r3, r4
 800b9b6:	bf0c      	ite	eq
 800b9b8:	f8c8 2000 	streq.w	r2, [r8]
 800b9bc:	605a      	strne	r2, [r3, #4]
 800b9be:	e7eb      	b.n	800b998 <_malloc_r+0xa8>
 800b9c0:	4623      	mov	r3, r4
 800b9c2:	6864      	ldr	r4, [r4, #4]
 800b9c4:	e7ae      	b.n	800b924 <_malloc_r+0x34>
 800b9c6:	463c      	mov	r4, r7
 800b9c8:	687f      	ldr	r7, [r7, #4]
 800b9ca:	e7b6      	b.n	800b93a <_malloc_r+0x4a>
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	42a3      	cmp	r3, r4
 800b9d2:	d1fb      	bne.n	800b9cc <_malloc_r+0xdc>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	6053      	str	r3, [r2, #4]
 800b9d8:	e7de      	b.n	800b998 <_malloc_r+0xa8>
 800b9da:	230c      	movs	r3, #12
 800b9dc:	4630      	mov	r0, r6
 800b9de:	6033      	str	r3, [r6, #0]
 800b9e0:	f000 f80c 	bl	800b9fc <__malloc_unlock>
 800b9e4:	e794      	b.n	800b910 <_malloc_r+0x20>
 800b9e6:	6005      	str	r5, [r0, #0]
 800b9e8:	e7d6      	b.n	800b998 <_malloc_r+0xa8>
 800b9ea:	bf00      	nop
 800b9ec:	20000b50 	.word	0x20000b50

0800b9f0 <__malloc_lock>:
 800b9f0:	4801      	ldr	r0, [pc, #4]	@ (800b9f8 <__malloc_lock+0x8>)
 800b9f2:	f7ff bf02 	b.w	800b7fa <__retarget_lock_acquire_recursive>
 800b9f6:	bf00      	nop
 800b9f8:	20000b48 	.word	0x20000b48

0800b9fc <__malloc_unlock>:
 800b9fc:	4801      	ldr	r0, [pc, #4]	@ (800ba04 <__malloc_unlock+0x8>)
 800b9fe:	f7ff befd 	b.w	800b7fc <__retarget_lock_release_recursive>
 800ba02:	bf00      	nop
 800ba04:	20000b48 	.word	0x20000b48

0800ba08 <__sfputc_r>:
 800ba08:	6893      	ldr	r3, [r2, #8]
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	6093      	str	r3, [r2, #8]
 800ba10:	b410      	push	{r4}
 800ba12:	da08      	bge.n	800ba26 <__sfputc_r+0x1e>
 800ba14:	6994      	ldr	r4, [r2, #24]
 800ba16:	42a3      	cmp	r3, r4
 800ba18:	db01      	blt.n	800ba1e <__sfputc_r+0x16>
 800ba1a:	290a      	cmp	r1, #10
 800ba1c:	d103      	bne.n	800ba26 <__sfputc_r+0x1e>
 800ba1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba22:	f7ff bdbc 	b.w	800b59e <__swbuf_r>
 800ba26:	6813      	ldr	r3, [r2, #0]
 800ba28:	1c58      	adds	r0, r3, #1
 800ba2a:	6010      	str	r0, [r2, #0]
 800ba2c:	4608      	mov	r0, r1
 800ba2e:	7019      	strb	r1, [r3, #0]
 800ba30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba34:	4770      	bx	lr

0800ba36 <__sfputs_r>:
 800ba36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba38:	4606      	mov	r6, r0
 800ba3a:	460f      	mov	r7, r1
 800ba3c:	4614      	mov	r4, r2
 800ba3e:	18d5      	adds	r5, r2, r3
 800ba40:	42ac      	cmp	r4, r5
 800ba42:	d101      	bne.n	800ba48 <__sfputs_r+0x12>
 800ba44:	2000      	movs	r0, #0
 800ba46:	e007      	b.n	800ba58 <__sfputs_r+0x22>
 800ba48:	463a      	mov	r2, r7
 800ba4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f7ff ffda 	bl	800ba08 <__sfputc_r>
 800ba54:	1c43      	adds	r3, r0, #1
 800ba56:	d1f3      	bne.n	800ba40 <__sfputs_r+0xa>
 800ba58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba5c <_vfiprintf_r>:
 800ba5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba60:	460d      	mov	r5, r1
 800ba62:	b09d      	sub	sp, #116	@ 0x74
 800ba64:	4614      	mov	r4, r2
 800ba66:	4698      	mov	r8, r3
 800ba68:	4606      	mov	r6, r0
 800ba6a:	b118      	cbz	r0, 800ba74 <_vfiprintf_r+0x18>
 800ba6c:	6a03      	ldr	r3, [r0, #32]
 800ba6e:	b90b      	cbnz	r3, 800ba74 <_vfiprintf_r+0x18>
 800ba70:	f7ff fca4 	bl	800b3bc <__sinit>
 800ba74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba76:	07d9      	lsls	r1, r3, #31
 800ba78:	d405      	bmi.n	800ba86 <_vfiprintf_r+0x2a>
 800ba7a:	89ab      	ldrh	r3, [r5, #12]
 800ba7c:	059a      	lsls	r2, r3, #22
 800ba7e:	d402      	bmi.n	800ba86 <_vfiprintf_r+0x2a>
 800ba80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba82:	f7ff feba 	bl	800b7fa <__retarget_lock_acquire_recursive>
 800ba86:	89ab      	ldrh	r3, [r5, #12]
 800ba88:	071b      	lsls	r3, r3, #28
 800ba8a:	d501      	bpl.n	800ba90 <_vfiprintf_r+0x34>
 800ba8c:	692b      	ldr	r3, [r5, #16]
 800ba8e:	b99b      	cbnz	r3, 800bab8 <_vfiprintf_r+0x5c>
 800ba90:	4629      	mov	r1, r5
 800ba92:	4630      	mov	r0, r6
 800ba94:	f7ff fdc2 	bl	800b61c <__swsetup_r>
 800ba98:	b170      	cbz	r0, 800bab8 <_vfiprintf_r+0x5c>
 800ba9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba9c:	07dc      	lsls	r4, r3, #31
 800ba9e:	d504      	bpl.n	800baaa <_vfiprintf_r+0x4e>
 800baa0:	f04f 30ff 	mov.w	r0, #4294967295
 800baa4:	b01d      	add	sp, #116	@ 0x74
 800baa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baaa:	89ab      	ldrh	r3, [r5, #12]
 800baac:	0598      	lsls	r0, r3, #22
 800baae:	d4f7      	bmi.n	800baa0 <_vfiprintf_r+0x44>
 800bab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bab2:	f7ff fea3 	bl	800b7fc <__retarget_lock_release_recursive>
 800bab6:	e7f3      	b.n	800baa0 <_vfiprintf_r+0x44>
 800bab8:	2300      	movs	r3, #0
 800baba:	f8cd 800c 	str.w	r8, [sp, #12]
 800babe:	f04f 0901 	mov.w	r9, #1
 800bac2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800bc78 <_vfiprintf_r+0x21c>
 800bac6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bac8:	2320      	movs	r3, #32
 800baca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bace:	2330      	movs	r3, #48	@ 0x30
 800bad0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bad4:	4623      	mov	r3, r4
 800bad6:	469a      	mov	sl, r3
 800bad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800badc:	b10a      	cbz	r2, 800bae2 <_vfiprintf_r+0x86>
 800bade:	2a25      	cmp	r2, #37	@ 0x25
 800bae0:	d1f9      	bne.n	800bad6 <_vfiprintf_r+0x7a>
 800bae2:	ebba 0b04 	subs.w	fp, sl, r4
 800bae6:	d00b      	beq.n	800bb00 <_vfiprintf_r+0xa4>
 800bae8:	465b      	mov	r3, fp
 800baea:	4622      	mov	r2, r4
 800baec:	4629      	mov	r1, r5
 800baee:	4630      	mov	r0, r6
 800baf0:	f7ff ffa1 	bl	800ba36 <__sfputs_r>
 800baf4:	3001      	adds	r0, #1
 800baf6:	f000 80a7 	beq.w	800bc48 <_vfiprintf_r+0x1ec>
 800bafa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bafc:	445a      	add	r2, fp
 800bafe:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb00:	f89a 3000 	ldrb.w	r3, [sl]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f000 809f 	beq.w	800bc48 <_vfiprintf_r+0x1ec>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb10:	f10a 0a01 	add.w	sl, sl, #1
 800bb14:	9304      	str	r3, [sp, #16]
 800bb16:	9307      	str	r3, [sp, #28]
 800bb18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb1c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb22:	4654      	mov	r4, sl
 800bb24:	2205      	movs	r2, #5
 800bb26:	4854      	ldr	r0, [pc, #336]	@ (800bc78 <_vfiprintf_r+0x21c>)
 800bb28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb2c:	f000 fbb4 	bl	800c298 <memchr>
 800bb30:	9a04      	ldr	r2, [sp, #16]
 800bb32:	b9d8      	cbnz	r0, 800bb6c <_vfiprintf_r+0x110>
 800bb34:	06d1      	lsls	r1, r2, #27
 800bb36:	bf44      	itt	mi
 800bb38:	2320      	movmi	r3, #32
 800bb3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb3e:	0713      	lsls	r3, r2, #28
 800bb40:	bf44      	itt	mi
 800bb42:	232b      	movmi	r3, #43	@ 0x2b
 800bb44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb48:	f89a 3000 	ldrb.w	r3, [sl]
 800bb4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb4e:	d015      	beq.n	800bb7c <_vfiprintf_r+0x120>
 800bb50:	9a07      	ldr	r2, [sp, #28]
 800bb52:	4654      	mov	r4, sl
 800bb54:	2000      	movs	r0, #0
 800bb56:	f04f 0c0a 	mov.w	ip, #10
 800bb5a:	4621      	mov	r1, r4
 800bb5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb60:	3b30      	subs	r3, #48	@ 0x30
 800bb62:	2b09      	cmp	r3, #9
 800bb64:	d94b      	bls.n	800bbfe <_vfiprintf_r+0x1a2>
 800bb66:	b1b0      	cbz	r0, 800bb96 <_vfiprintf_r+0x13a>
 800bb68:	9207      	str	r2, [sp, #28]
 800bb6a:	e014      	b.n	800bb96 <_vfiprintf_r+0x13a>
 800bb6c:	eba0 0308 	sub.w	r3, r0, r8
 800bb70:	46a2      	mov	sl, r4
 800bb72:	fa09 f303 	lsl.w	r3, r9, r3
 800bb76:	4313      	orrs	r3, r2
 800bb78:	9304      	str	r3, [sp, #16]
 800bb7a:	e7d2      	b.n	800bb22 <_vfiprintf_r+0xc6>
 800bb7c:	9b03      	ldr	r3, [sp, #12]
 800bb7e:	1d19      	adds	r1, r3, #4
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	9103      	str	r1, [sp, #12]
 800bb86:	bfbb      	ittet	lt
 800bb88:	425b      	neglt	r3, r3
 800bb8a:	f042 0202 	orrlt.w	r2, r2, #2
 800bb8e:	9307      	strge	r3, [sp, #28]
 800bb90:	9307      	strlt	r3, [sp, #28]
 800bb92:	bfb8      	it	lt
 800bb94:	9204      	strlt	r2, [sp, #16]
 800bb96:	7823      	ldrb	r3, [r4, #0]
 800bb98:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb9a:	d10a      	bne.n	800bbb2 <_vfiprintf_r+0x156>
 800bb9c:	7863      	ldrb	r3, [r4, #1]
 800bb9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bba0:	d132      	bne.n	800bc08 <_vfiprintf_r+0x1ac>
 800bba2:	9b03      	ldr	r3, [sp, #12]
 800bba4:	3402      	adds	r4, #2
 800bba6:	1d1a      	adds	r2, r3, #4
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbae:	9203      	str	r2, [sp, #12]
 800bbb0:	9305      	str	r3, [sp, #20]
 800bbb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc88 <_vfiprintf_r+0x22c>
 800bbb6:	2203      	movs	r2, #3
 800bbb8:	7821      	ldrb	r1, [r4, #0]
 800bbba:	4650      	mov	r0, sl
 800bbbc:	f000 fb6c 	bl	800c298 <memchr>
 800bbc0:	b138      	cbz	r0, 800bbd2 <_vfiprintf_r+0x176>
 800bbc2:	eba0 000a 	sub.w	r0, r0, sl
 800bbc6:	2240      	movs	r2, #64	@ 0x40
 800bbc8:	9b04      	ldr	r3, [sp, #16]
 800bbca:	3401      	adds	r4, #1
 800bbcc:	4082      	lsls	r2, r0
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	9304      	str	r3, [sp, #16]
 800bbd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd6:	2206      	movs	r2, #6
 800bbd8:	4828      	ldr	r0, [pc, #160]	@ (800bc7c <_vfiprintf_r+0x220>)
 800bbda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbde:	f000 fb5b 	bl	800c298 <memchr>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d03f      	beq.n	800bc66 <_vfiprintf_r+0x20a>
 800bbe6:	4b26      	ldr	r3, [pc, #152]	@ (800bc80 <_vfiprintf_r+0x224>)
 800bbe8:	bb1b      	cbnz	r3, 800bc32 <_vfiprintf_r+0x1d6>
 800bbea:	9b03      	ldr	r3, [sp, #12]
 800bbec:	3307      	adds	r3, #7
 800bbee:	f023 0307 	bic.w	r3, r3, #7
 800bbf2:	3308      	adds	r3, #8
 800bbf4:	9303      	str	r3, [sp, #12]
 800bbf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf8:	443b      	add	r3, r7
 800bbfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbfc:	e76a      	b.n	800bad4 <_vfiprintf_r+0x78>
 800bbfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc02:	460c      	mov	r4, r1
 800bc04:	2001      	movs	r0, #1
 800bc06:	e7a8      	b.n	800bb5a <_vfiprintf_r+0xfe>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	3401      	adds	r4, #1
 800bc0c:	f04f 0c0a 	mov.w	ip, #10
 800bc10:	4619      	mov	r1, r3
 800bc12:	9305      	str	r3, [sp, #20]
 800bc14:	4620      	mov	r0, r4
 800bc16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc1a:	3a30      	subs	r2, #48	@ 0x30
 800bc1c:	2a09      	cmp	r2, #9
 800bc1e:	d903      	bls.n	800bc28 <_vfiprintf_r+0x1cc>
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d0c6      	beq.n	800bbb2 <_vfiprintf_r+0x156>
 800bc24:	9105      	str	r1, [sp, #20]
 800bc26:	e7c4      	b.n	800bbb2 <_vfiprintf_r+0x156>
 800bc28:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc2c:	4604      	mov	r4, r0
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e7f0      	b.n	800bc14 <_vfiprintf_r+0x1b8>
 800bc32:	ab03      	add	r3, sp, #12
 800bc34:	462a      	mov	r2, r5
 800bc36:	a904      	add	r1, sp, #16
 800bc38:	4630      	mov	r0, r6
 800bc3a:	9300      	str	r3, [sp, #0]
 800bc3c:	4b11      	ldr	r3, [pc, #68]	@ (800bc84 <_vfiprintf_r+0x228>)
 800bc3e:	f3af 8000 	nop.w
 800bc42:	4607      	mov	r7, r0
 800bc44:	1c78      	adds	r0, r7, #1
 800bc46:	d1d6      	bne.n	800bbf6 <_vfiprintf_r+0x19a>
 800bc48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc4a:	07d9      	lsls	r1, r3, #31
 800bc4c:	d405      	bmi.n	800bc5a <_vfiprintf_r+0x1fe>
 800bc4e:	89ab      	ldrh	r3, [r5, #12]
 800bc50:	059a      	lsls	r2, r3, #22
 800bc52:	d402      	bmi.n	800bc5a <_vfiprintf_r+0x1fe>
 800bc54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc56:	f7ff fdd1 	bl	800b7fc <__retarget_lock_release_recursive>
 800bc5a:	89ab      	ldrh	r3, [r5, #12]
 800bc5c:	065b      	lsls	r3, r3, #25
 800bc5e:	f53f af1f 	bmi.w	800baa0 <_vfiprintf_r+0x44>
 800bc62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc64:	e71e      	b.n	800baa4 <_vfiprintf_r+0x48>
 800bc66:	ab03      	add	r3, sp, #12
 800bc68:	462a      	mov	r2, r5
 800bc6a:	a904      	add	r1, sp, #16
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	4b04      	ldr	r3, [pc, #16]	@ (800bc84 <_vfiprintf_r+0x228>)
 800bc72:	f000 f87d 	bl	800bd70 <_printf_i>
 800bc76:	e7e4      	b.n	800bc42 <_vfiprintf_r+0x1e6>
 800bc78:	0800c508 	.word	0x0800c508
 800bc7c:	0800c512 	.word	0x0800c512
 800bc80:	00000000 	.word	0x00000000
 800bc84:	0800ba37 	.word	0x0800ba37
 800bc88:	0800c50e 	.word	0x0800c50e

0800bc8c <_printf_common>:
 800bc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc90:	4616      	mov	r6, r2
 800bc92:	4698      	mov	r8, r3
 800bc94:	688a      	ldr	r2, [r1, #8]
 800bc96:	4607      	mov	r7, r0
 800bc98:	690b      	ldr	r3, [r1, #16]
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bca0:	4293      	cmp	r3, r2
 800bca2:	bfb8      	it	lt
 800bca4:	4613      	movlt	r3, r2
 800bca6:	6033      	str	r3, [r6, #0]
 800bca8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bcac:	b10a      	cbz	r2, 800bcb2 <_printf_common+0x26>
 800bcae:	3301      	adds	r3, #1
 800bcb0:	6033      	str	r3, [r6, #0]
 800bcb2:	6823      	ldr	r3, [r4, #0]
 800bcb4:	0699      	lsls	r1, r3, #26
 800bcb6:	bf42      	ittt	mi
 800bcb8:	6833      	ldrmi	r3, [r6, #0]
 800bcba:	3302      	addmi	r3, #2
 800bcbc:	6033      	strmi	r3, [r6, #0]
 800bcbe:	6825      	ldr	r5, [r4, #0]
 800bcc0:	f015 0506 	ands.w	r5, r5, #6
 800bcc4:	d106      	bne.n	800bcd4 <_printf_common+0x48>
 800bcc6:	f104 0a19 	add.w	sl, r4, #25
 800bcca:	68e3      	ldr	r3, [r4, #12]
 800bccc:	6832      	ldr	r2, [r6, #0]
 800bcce:	1a9b      	subs	r3, r3, r2
 800bcd0:	42ab      	cmp	r3, r5
 800bcd2:	dc2b      	bgt.n	800bd2c <_printf_common+0xa0>
 800bcd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bcd8:	6822      	ldr	r2, [r4, #0]
 800bcda:	3b00      	subs	r3, #0
 800bcdc:	bf18      	it	ne
 800bcde:	2301      	movne	r3, #1
 800bce0:	0692      	lsls	r2, r2, #26
 800bce2:	d430      	bmi.n	800bd46 <_printf_common+0xba>
 800bce4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bce8:	4641      	mov	r1, r8
 800bcea:	4638      	mov	r0, r7
 800bcec:	47c8      	blx	r9
 800bcee:	3001      	adds	r0, #1
 800bcf0:	d023      	beq.n	800bd3a <_printf_common+0xae>
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	341a      	adds	r4, #26
 800bcf6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800bcfa:	f003 0306 	and.w	r3, r3, #6
 800bcfe:	2b04      	cmp	r3, #4
 800bd00:	bf0a      	itet	eq
 800bd02:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800bd06:	2500      	movne	r5, #0
 800bd08:	6833      	ldreq	r3, [r6, #0]
 800bd0a:	f04f 0600 	mov.w	r6, #0
 800bd0e:	bf08      	it	eq
 800bd10:	1aed      	subeq	r5, r5, r3
 800bd12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bd16:	bf08      	it	eq
 800bd18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	bfc4      	itt	gt
 800bd20:	1a9b      	subgt	r3, r3, r2
 800bd22:	18ed      	addgt	r5, r5, r3
 800bd24:	42b5      	cmp	r5, r6
 800bd26:	d11a      	bne.n	800bd5e <_printf_common+0xd2>
 800bd28:	2000      	movs	r0, #0
 800bd2a:	e008      	b.n	800bd3e <_printf_common+0xb2>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	4652      	mov	r2, sl
 800bd30:	4641      	mov	r1, r8
 800bd32:	4638      	mov	r0, r7
 800bd34:	47c8      	blx	r9
 800bd36:	3001      	adds	r0, #1
 800bd38:	d103      	bne.n	800bd42 <_printf_common+0xb6>
 800bd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd42:	3501      	adds	r5, #1
 800bd44:	e7c1      	b.n	800bcca <_printf_common+0x3e>
 800bd46:	18e1      	adds	r1, r4, r3
 800bd48:	1c5a      	adds	r2, r3, #1
 800bd4a:	2030      	movs	r0, #48	@ 0x30
 800bd4c:	3302      	adds	r3, #2
 800bd4e:	4422      	add	r2, r4
 800bd50:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bd54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bd58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bd5c:	e7c2      	b.n	800bce4 <_printf_common+0x58>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	4622      	mov	r2, r4
 800bd62:	4641      	mov	r1, r8
 800bd64:	4638      	mov	r0, r7
 800bd66:	47c8      	blx	r9
 800bd68:	3001      	adds	r0, #1
 800bd6a:	d0e6      	beq.n	800bd3a <_printf_common+0xae>
 800bd6c:	3601      	adds	r6, #1
 800bd6e:	e7d9      	b.n	800bd24 <_printf_common+0x98>

0800bd70 <_printf_i>:
 800bd70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd74:	7e0f      	ldrb	r7, [r1, #24]
 800bd76:	4691      	mov	r9, r2
 800bd78:	4680      	mov	r8, r0
 800bd7a:	460c      	mov	r4, r1
 800bd7c:	2f78      	cmp	r7, #120	@ 0x78
 800bd7e:	469a      	mov	sl, r3
 800bd80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bd86:	d807      	bhi.n	800bd98 <_printf_i+0x28>
 800bd88:	2f62      	cmp	r7, #98	@ 0x62
 800bd8a:	d80a      	bhi.n	800bda2 <_printf_i+0x32>
 800bd8c:	2f00      	cmp	r7, #0
 800bd8e:	f000 80d2 	beq.w	800bf36 <_printf_i+0x1c6>
 800bd92:	2f58      	cmp	r7, #88	@ 0x58
 800bd94:	f000 80b9 	beq.w	800bf0a <_printf_i+0x19a>
 800bd98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bda0:	e03a      	b.n	800be18 <_printf_i+0xa8>
 800bda2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bda6:	2b15      	cmp	r3, #21
 800bda8:	d8f6      	bhi.n	800bd98 <_printf_i+0x28>
 800bdaa:	a101      	add	r1, pc, #4	@ (adr r1, 800bdb0 <_printf_i+0x40>)
 800bdac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bdb0:	0800be09 	.word	0x0800be09
 800bdb4:	0800be1d 	.word	0x0800be1d
 800bdb8:	0800bd99 	.word	0x0800bd99
 800bdbc:	0800bd99 	.word	0x0800bd99
 800bdc0:	0800bd99 	.word	0x0800bd99
 800bdc4:	0800bd99 	.word	0x0800bd99
 800bdc8:	0800be1d 	.word	0x0800be1d
 800bdcc:	0800bd99 	.word	0x0800bd99
 800bdd0:	0800bd99 	.word	0x0800bd99
 800bdd4:	0800bd99 	.word	0x0800bd99
 800bdd8:	0800bd99 	.word	0x0800bd99
 800bddc:	0800bf1d 	.word	0x0800bf1d
 800bde0:	0800be47 	.word	0x0800be47
 800bde4:	0800bed7 	.word	0x0800bed7
 800bde8:	0800bd99 	.word	0x0800bd99
 800bdec:	0800bd99 	.word	0x0800bd99
 800bdf0:	0800bf3f 	.word	0x0800bf3f
 800bdf4:	0800bd99 	.word	0x0800bd99
 800bdf8:	0800be47 	.word	0x0800be47
 800bdfc:	0800bd99 	.word	0x0800bd99
 800be00:	0800bd99 	.word	0x0800bd99
 800be04:	0800bedf 	.word	0x0800bedf
 800be08:	6833      	ldr	r3, [r6, #0]
 800be0a:	1d1a      	adds	r2, r3, #4
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	6032      	str	r2, [r6, #0]
 800be10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be18:	2301      	movs	r3, #1
 800be1a:	e09d      	b.n	800bf58 <_printf_i+0x1e8>
 800be1c:	6833      	ldr	r3, [r6, #0]
 800be1e:	6820      	ldr	r0, [r4, #0]
 800be20:	1d19      	adds	r1, r3, #4
 800be22:	6031      	str	r1, [r6, #0]
 800be24:	0606      	lsls	r6, r0, #24
 800be26:	d501      	bpl.n	800be2c <_printf_i+0xbc>
 800be28:	681d      	ldr	r5, [r3, #0]
 800be2a:	e003      	b.n	800be34 <_printf_i+0xc4>
 800be2c:	0645      	lsls	r5, r0, #25
 800be2e:	d5fb      	bpl.n	800be28 <_printf_i+0xb8>
 800be30:	f9b3 5000 	ldrsh.w	r5, [r3]
 800be34:	2d00      	cmp	r5, #0
 800be36:	da03      	bge.n	800be40 <_printf_i+0xd0>
 800be38:	232d      	movs	r3, #45	@ 0x2d
 800be3a:	426d      	negs	r5, r5
 800be3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be40:	4859      	ldr	r0, [pc, #356]	@ (800bfa8 <_printf_i+0x238>)
 800be42:	230a      	movs	r3, #10
 800be44:	e011      	b.n	800be6a <_printf_i+0xfa>
 800be46:	6821      	ldr	r1, [r4, #0]
 800be48:	6833      	ldr	r3, [r6, #0]
 800be4a:	0608      	lsls	r0, r1, #24
 800be4c:	f853 5b04 	ldr.w	r5, [r3], #4
 800be50:	d402      	bmi.n	800be58 <_printf_i+0xe8>
 800be52:	0649      	lsls	r1, r1, #25
 800be54:	bf48      	it	mi
 800be56:	b2ad      	uxthmi	r5, r5
 800be58:	2f6f      	cmp	r7, #111	@ 0x6f
 800be5a:	6033      	str	r3, [r6, #0]
 800be5c:	4852      	ldr	r0, [pc, #328]	@ (800bfa8 <_printf_i+0x238>)
 800be5e:	bf14      	ite	ne
 800be60:	230a      	movne	r3, #10
 800be62:	2308      	moveq	r3, #8
 800be64:	2100      	movs	r1, #0
 800be66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800be6a:	6866      	ldr	r6, [r4, #4]
 800be6c:	2e00      	cmp	r6, #0
 800be6e:	60a6      	str	r6, [r4, #8]
 800be70:	bfa2      	ittt	ge
 800be72:	6821      	ldrge	r1, [r4, #0]
 800be74:	f021 0104 	bicge.w	r1, r1, #4
 800be78:	6021      	strge	r1, [r4, #0]
 800be7a:	b90d      	cbnz	r5, 800be80 <_printf_i+0x110>
 800be7c:	2e00      	cmp	r6, #0
 800be7e:	d04b      	beq.n	800bf18 <_printf_i+0x1a8>
 800be80:	4616      	mov	r6, r2
 800be82:	fbb5 f1f3 	udiv	r1, r5, r3
 800be86:	fb03 5711 	mls	r7, r3, r1, r5
 800be8a:	5dc7      	ldrb	r7, [r0, r7]
 800be8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be90:	462f      	mov	r7, r5
 800be92:	460d      	mov	r5, r1
 800be94:	42bb      	cmp	r3, r7
 800be96:	d9f4      	bls.n	800be82 <_printf_i+0x112>
 800be98:	2b08      	cmp	r3, #8
 800be9a:	d10b      	bne.n	800beb4 <_printf_i+0x144>
 800be9c:	6823      	ldr	r3, [r4, #0]
 800be9e:	07df      	lsls	r7, r3, #31
 800bea0:	d508      	bpl.n	800beb4 <_printf_i+0x144>
 800bea2:	6923      	ldr	r3, [r4, #16]
 800bea4:	6861      	ldr	r1, [r4, #4]
 800bea6:	4299      	cmp	r1, r3
 800bea8:	bfde      	ittt	le
 800beaa:	2330      	movle	r3, #48	@ 0x30
 800beac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800beb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800beb4:	1b92      	subs	r2, r2, r6
 800beb6:	6122      	str	r2, [r4, #16]
 800beb8:	464b      	mov	r3, r9
 800beba:	aa03      	add	r2, sp, #12
 800bebc:	4621      	mov	r1, r4
 800bebe:	4640      	mov	r0, r8
 800bec0:	f8cd a000 	str.w	sl, [sp]
 800bec4:	f7ff fee2 	bl	800bc8c <_printf_common>
 800bec8:	3001      	adds	r0, #1
 800beca:	d14a      	bne.n	800bf62 <_printf_i+0x1f2>
 800becc:	f04f 30ff 	mov.w	r0, #4294967295
 800bed0:	b004      	add	sp, #16
 800bed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bed6:	6823      	ldr	r3, [r4, #0]
 800bed8:	f043 0320 	orr.w	r3, r3, #32
 800bedc:	6023      	str	r3, [r4, #0]
 800bede:	2778      	movs	r7, #120	@ 0x78
 800bee0:	4832      	ldr	r0, [pc, #200]	@ (800bfac <_printf_i+0x23c>)
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bee8:	061f      	lsls	r7, r3, #24
 800beea:	6831      	ldr	r1, [r6, #0]
 800beec:	f851 5b04 	ldr.w	r5, [r1], #4
 800bef0:	d402      	bmi.n	800bef8 <_printf_i+0x188>
 800bef2:	065f      	lsls	r7, r3, #25
 800bef4:	bf48      	it	mi
 800bef6:	b2ad      	uxthmi	r5, r5
 800bef8:	6031      	str	r1, [r6, #0]
 800befa:	07d9      	lsls	r1, r3, #31
 800befc:	bf44      	itt	mi
 800befe:	f043 0320 	orrmi.w	r3, r3, #32
 800bf02:	6023      	strmi	r3, [r4, #0]
 800bf04:	b11d      	cbz	r5, 800bf0e <_printf_i+0x19e>
 800bf06:	2310      	movs	r3, #16
 800bf08:	e7ac      	b.n	800be64 <_printf_i+0xf4>
 800bf0a:	4827      	ldr	r0, [pc, #156]	@ (800bfa8 <_printf_i+0x238>)
 800bf0c:	e7e9      	b.n	800bee2 <_printf_i+0x172>
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	f023 0320 	bic.w	r3, r3, #32
 800bf14:	6023      	str	r3, [r4, #0]
 800bf16:	e7f6      	b.n	800bf06 <_printf_i+0x196>
 800bf18:	4616      	mov	r6, r2
 800bf1a:	e7bd      	b.n	800be98 <_printf_i+0x128>
 800bf1c:	6833      	ldr	r3, [r6, #0]
 800bf1e:	6825      	ldr	r5, [r4, #0]
 800bf20:	1d18      	adds	r0, r3, #4
 800bf22:	6961      	ldr	r1, [r4, #20]
 800bf24:	6030      	str	r0, [r6, #0]
 800bf26:	062e      	lsls	r6, r5, #24
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	d501      	bpl.n	800bf30 <_printf_i+0x1c0>
 800bf2c:	6019      	str	r1, [r3, #0]
 800bf2e:	e002      	b.n	800bf36 <_printf_i+0x1c6>
 800bf30:	0668      	lsls	r0, r5, #25
 800bf32:	d5fb      	bpl.n	800bf2c <_printf_i+0x1bc>
 800bf34:	8019      	strh	r1, [r3, #0]
 800bf36:	2300      	movs	r3, #0
 800bf38:	4616      	mov	r6, r2
 800bf3a:	6123      	str	r3, [r4, #16]
 800bf3c:	e7bc      	b.n	800beb8 <_printf_i+0x148>
 800bf3e:	6833      	ldr	r3, [r6, #0]
 800bf40:	2100      	movs	r1, #0
 800bf42:	1d1a      	adds	r2, r3, #4
 800bf44:	6032      	str	r2, [r6, #0]
 800bf46:	681e      	ldr	r6, [r3, #0]
 800bf48:	6862      	ldr	r2, [r4, #4]
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	f000 f9a4 	bl	800c298 <memchr>
 800bf50:	b108      	cbz	r0, 800bf56 <_printf_i+0x1e6>
 800bf52:	1b80      	subs	r0, r0, r6
 800bf54:	6060      	str	r0, [r4, #4]
 800bf56:	6863      	ldr	r3, [r4, #4]
 800bf58:	6123      	str	r3, [r4, #16]
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf60:	e7aa      	b.n	800beb8 <_printf_i+0x148>
 800bf62:	6923      	ldr	r3, [r4, #16]
 800bf64:	4632      	mov	r2, r6
 800bf66:	4649      	mov	r1, r9
 800bf68:	4640      	mov	r0, r8
 800bf6a:	47d0      	blx	sl
 800bf6c:	3001      	adds	r0, #1
 800bf6e:	d0ad      	beq.n	800becc <_printf_i+0x15c>
 800bf70:	6823      	ldr	r3, [r4, #0]
 800bf72:	079b      	lsls	r3, r3, #30
 800bf74:	d413      	bmi.n	800bf9e <_printf_i+0x22e>
 800bf76:	68e0      	ldr	r0, [r4, #12]
 800bf78:	9b03      	ldr	r3, [sp, #12]
 800bf7a:	4298      	cmp	r0, r3
 800bf7c:	bfb8      	it	lt
 800bf7e:	4618      	movlt	r0, r3
 800bf80:	e7a6      	b.n	800bed0 <_printf_i+0x160>
 800bf82:	2301      	movs	r3, #1
 800bf84:	4632      	mov	r2, r6
 800bf86:	4649      	mov	r1, r9
 800bf88:	4640      	mov	r0, r8
 800bf8a:	47d0      	blx	sl
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	d09d      	beq.n	800becc <_printf_i+0x15c>
 800bf90:	3501      	adds	r5, #1
 800bf92:	68e3      	ldr	r3, [r4, #12]
 800bf94:	9903      	ldr	r1, [sp, #12]
 800bf96:	1a5b      	subs	r3, r3, r1
 800bf98:	42ab      	cmp	r3, r5
 800bf9a:	dcf2      	bgt.n	800bf82 <_printf_i+0x212>
 800bf9c:	e7eb      	b.n	800bf76 <_printf_i+0x206>
 800bf9e:	2500      	movs	r5, #0
 800bfa0:	f104 0619 	add.w	r6, r4, #25
 800bfa4:	e7f5      	b.n	800bf92 <_printf_i+0x222>
 800bfa6:	bf00      	nop
 800bfa8:	0800c519 	.word	0x0800c519
 800bfac:	0800c52a 	.word	0x0800c52a

0800bfb0 <__sflush_r>:
 800bfb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb8:	0716      	lsls	r6, r2, #28
 800bfba:	4605      	mov	r5, r0
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	d454      	bmi.n	800c06a <__sflush_r+0xba>
 800bfc0:	684b      	ldr	r3, [r1, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	dc02      	bgt.n	800bfcc <__sflush_r+0x1c>
 800bfc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	dd48      	ble.n	800c05e <__sflush_r+0xae>
 800bfcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bfce:	2e00      	cmp	r6, #0
 800bfd0:	d045      	beq.n	800c05e <__sflush_r+0xae>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bfd8:	682f      	ldr	r7, [r5, #0]
 800bfda:	6a21      	ldr	r1, [r4, #32]
 800bfdc:	602b      	str	r3, [r5, #0]
 800bfde:	d030      	beq.n	800c042 <__sflush_r+0x92>
 800bfe0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	0759      	lsls	r1, r3, #29
 800bfe6:	d505      	bpl.n	800bff4 <__sflush_r+0x44>
 800bfe8:	6863      	ldr	r3, [r4, #4]
 800bfea:	1ad2      	subs	r2, r2, r3
 800bfec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bfee:	b10b      	cbz	r3, 800bff4 <__sflush_r+0x44>
 800bff0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bff2:	1ad2      	subs	r2, r2, r3
 800bff4:	2300      	movs	r3, #0
 800bff6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bff8:	6a21      	ldr	r1, [r4, #32]
 800bffa:	4628      	mov	r0, r5
 800bffc:	47b0      	blx	r6
 800bffe:	1c43      	adds	r3, r0, #1
 800c000:	89a3      	ldrh	r3, [r4, #12]
 800c002:	d106      	bne.n	800c012 <__sflush_r+0x62>
 800c004:	6829      	ldr	r1, [r5, #0]
 800c006:	291d      	cmp	r1, #29
 800c008:	d82b      	bhi.n	800c062 <__sflush_r+0xb2>
 800c00a:	4a2a      	ldr	r2, [pc, #168]	@ (800c0b4 <__sflush_r+0x104>)
 800c00c:	410a      	asrs	r2, r1
 800c00e:	07d6      	lsls	r6, r2, #31
 800c010:	d427      	bmi.n	800c062 <__sflush_r+0xb2>
 800c012:	2200      	movs	r2, #0
 800c014:	04d9      	lsls	r1, r3, #19
 800c016:	6062      	str	r2, [r4, #4]
 800c018:	6922      	ldr	r2, [r4, #16]
 800c01a:	6022      	str	r2, [r4, #0]
 800c01c:	d504      	bpl.n	800c028 <__sflush_r+0x78>
 800c01e:	1c42      	adds	r2, r0, #1
 800c020:	d101      	bne.n	800c026 <__sflush_r+0x76>
 800c022:	682b      	ldr	r3, [r5, #0]
 800c024:	b903      	cbnz	r3, 800c028 <__sflush_r+0x78>
 800c026:	6560      	str	r0, [r4, #84]	@ 0x54
 800c028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c02a:	602f      	str	r7, [r5, #0]
 800c02c:	b1b9      	cbz	r1, 800c05e <__sflush_r+0xae>
 800c02e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c032:	4299      	cmp	r1, r3
 800c034:	d002      	beq.n	800c03c <__sflush_r+0x8c>
 800c036:	4628      	mov	r0, r5
 800c038:	f7ff fbee 	bl	800b818 <_free_r>
 800c03c:	2300      	movs	r3, #0
 800c03e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c040:	e00d      	b.n	800c05e <__sflush_r+0xae>
 800c042:	2301      	movs	r3, #1
 800c044:	4628      	mov	r0, r5
 800c046:	47b0      	blx	r6
 800c048:	4602      	mov	r2, r0
 800c04a:	1c50      	adds	r0, r2, #1
 800c04c:	d1c9      	bne.n	800bfe2 <__sflush_r+0x32>
 800c04e:	682b      	ldr	r3, [r5, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d0c6      	beq.n	800bfe2 <__sflush_r+0x32>
 800c054:	2b1d      	cmp	r3, #29
 800c056:	d001      	beq.n	800c05c <__sflush_r+0xac>
 800c058:	2b16      	cmp	r3, #22
 800c05a:	d11d      	bne.n	800c098 <__sflush_r+0xe8>
 800c05c:	602f      	str	r7, [r5, #0]
 800c05e:	2000      	movs	r0, #0
 800c060:	e021      	b.n	800c0a6 <__sflush_r+0xf6>
 800c062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c066:	b21b      	sxth	r3, r3
 800c068:	e01a      	b.n	800c0a0 <__sflush_r+0xf0>
 800c06a:	690f      	ldr	r7, [r1, #16]
 800c06c:	2f00      	cmp	r7, #0
 800c06e:	d0f6      	beq.n	800c05e <__sflush_r+0xae>
 800c070:	0793      	lsls	r3, r2, #30
 800c072:	680e      	ldr	r6, [r1, #0]
 800c074:	600f      	str	r7, [r1, #0]
 800c076:	bf0c      	ite	eq
 800c078:	694b      	ldreq	r3, [r1, #20]
 800c07a:	2300      	movne	r3, #0
 800c07c:	eba6 0807 	sub.w	r8, r6, r7
 800c080:	608b      	str	r3, [r1, #8]
 800c082:	f1b8 0f00 	cmp.w	r8, #0
 800c086:	ddea      	ble.n	800c05e <__sflush_r+0xae>
 800c088:	4643      	mov	r3, r8
 800c08a:	463a      	mov	r2, r7
 800c08c:	6a21      	ldr	r1, [r4, #32]
 800c08e:	4628      	mov	r0, r5
 800c090:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c092:	47b0      	blx	r6
 800c094:	2800      	cmp	r0, #0
 800c096:	dc08      	bgt.n	800c0aa <__sflush_r+0xfa>
 800c098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c09c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a4:	81a3      	strh	r3, [r4, #12]
 800c0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0aa:	4407      	add	r7, r0
 800c0ac:	eba8 0800 	sub.w	r8, r8, r0
 800c0b0:	e7e7      	b.n	800c082 <__sflush_r+0xd2>
 800c0b2:	bf00      	nop
 800c0b4:	dfbffffe 	.word	0xdfbffffe

0800c0b8 <_fflush_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	690b      	ldr	r3, [r1, #16]
 800c0bc:	4605      	mov	r5, r0
 800c0be:	460c      	mov	r4, r1
 800c0c0:	b913      	cbnz	r3, 800c0c8 <_fflush_r+0x10>
 800c0c2:	2500      	movs	r5, #0
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	bd38      	pop	{r3, r4, r5, pc}
 800c0c8:	b118      	cbz	r0, 800c0d2 <_fflush_r+0x1a>
 800c0ca:	6a03      	ldr	r3, [r0, #32]
 800c0cc:	b90b      	cbnz	r3, 800c0d2 <_fflush_r+0x1a>
 800c0ce:	f7ff f975 	bl	800b3bc <__sinit>
 800c0d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d0f3      	beq.n	800c0c2 <_fflush_r+0xa>
 800c0da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c0dc:	07d0      	lsls	r0, r2, #31
 800c0de:	d404      	bmi.n	800c0ea <_fflush_r+0x32>
 800c0e0:	0599      	lsls	r1, r3, #22
 800c0e2:	d402      	bmi.n	800c0ea <_fflush_r+0x32>
 800c0e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0e6:	f7ff fb88 	bl	800b7fa <__retarget_lock_acquire_recursive>
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	4621      	mov	r1, r4
 800c0ee:	f7ff ff5f 	bl	800bfb0 <__sflush_r>
 800c0f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0f4:	4605      	mov	r5, r0
 800c0f6:	07da      	lsls	r2, r3, #31
 800c0f8:	d4e4      	bmi.n	800c0c4 <_fflush_r+0xc>
 800c0fa:	89a3      	ldrh	r3, [r4, #12]
 800c0fc:	059b      	lsls	r3, r3, #22
 800c0fe:	d4e1      	bmi.n	800c0c4 <_fflush_r+0xc>
 800c100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c102:	f7ff fb7b 	bl	800b7fc <__retarget_lock_release_recursive>
 800c106:	e7dd      	b.n	800c0c4 <_fflush_r+0xc>

0800c108 <__swhatbuf_r>:
 800c108:	b570      	push	{r4, r5, r6, lr}
 800c10a:	460c      	mov	r4, r1
 800c10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c110:	b096      	sub	sp, #88	@ 0x58
 800c112:	4615      	mov	r5, r2
 800c114:	2900      	cmp	r1, #0
 800c116:	461e      	mov	r6, r3
 800c118:	da0c      	bge.n	800c134 <__swhatbuf_r+0x2c>
 800c11a:	89a3      	ldrh	r3, [r4, #12]
 800c11c:	2100      	movs	r1, #0
 800c11e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c122:	bf14      	ite	ne
 800c124:	2340      	movne	r3, #64	@ 0x40
 800c126:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c12a:	2000      	movs	r0, #0
 800c12c:	6031      	str	r1, [r6, #0]
 800c12e:	602b      	str	r3, [r5, #0]
 800c130:	b016      	add	sp, #88	@ 0x58
 800c132:	bd70      	pop	{r4, r5, r6, pc}
 800c134:	466a      	mov	r2, sp
 800c136:	f000 f87d 	bl	800c234 <_fstat_r>
 800c13a:	2800      	cmp	r0, #0
 800c13c:	dbed      	blt.n	800c11a <__swhatbuf_r+0x12>
 800c13e:	9901      	ldr	r1, [sp, #4]
 800c140:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c144:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c148:	4259      	negs	r1, r3
 800c14a:	4159      	adcs	r1, r3
 800c14c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c150:	e7eb      	b.n	800c12a <__swhatbuf_r+0x22>

0800c152 <__smakebuf_r>:
 800c152:	898b      	ldrh	r3, [r1, #12]
 800c154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c156:	079d      	lsls	r5, r3, #30
 800c158:	4606      	mov	r6, r0
 800c15a:	460c      	mov	r4, r1
 800c15c:	d507      	bpl.n	800c16e <__smakebuf_r+0x1c>
 800c15e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c162:	6023      	str	r3, [r4, #0]
 800c164:	6123      	str	r3, [r4, #16]
 800c166:	2301      	movs	r3, #1
 800c168:	6163      	str	r3, [r4, #20]
 800c16a:	b003      	add	sp, #12
 800c16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c16e:	ab01      	add	r3, sp, #4
 800c170:	466a      	mov	r2, sp
 800c172:	f7ff ffc9 	bl	800c108 <__swhatbuf_r>
 800c176:	9f00      	ldr	r7, [sp, #0]
 800c178:	4605      	mov	r5, r0
 800c17a:	4630      	mov	r0, r6
 800c17c:	4639      	mov	r1, r7
 800c17e:	f7ff fbb7 	bl	800b8f0 <_malloc_r>
 800c182:	b948      	cbnz	r0, 800c198 <__smakebuf_r+0x46>
 800c184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c188:	059a      	lsls	r2, r3, #22
 800c18a:	d4ee      	bmi.n	800c16a <__smakebuf_r+0x18>
 800c18c:	f023 0303 	bic.w	r3, r3, #3
 800c190:	f043 0302 	orr.w	r3, r3, #2
 800c194:	81a3      	strh	r3, [r4, #12]
 800c196:	e7e2      	b.n	800c15e <__smakebuf_r+0xc>
 800c198:	89a3      	ldrh	r3, [r4, #12]
 800c19a:	6020      	str	r0, [r4, #0]
 800c19c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1a0:	81a3      	strh	r3, [r4, #12]
 800c1a2:	9b01      	ldr	r3, [sp, #4]
 800c1a4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1a8:	b15b      	cbz	r3, 800c1c2 <__smakebuf_r+0x70>
 800c1aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	f000 f852 	bl	800c258 <_isatty_r>
 800c1b4:	b128      	cbz	r0, 800c1c2 <__smakebuf_r+0x70>
 800c1b6:	89a3      	ldrh	r3, [r4, #12]
 800c1b8:	f023 0303 	bic.w	r3, r3, #3
 800c1bc:	f043 0301 	orr.w	r3, r3, #1
 800c1c0:	81a3      	strh	r3, [r4, #12]
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	431d      	orrs	r5, r3
 800c1c6:	81a5      	strh	r5, [r4, #12]
 800c1c8:	e7cf      	b.n	800c16a <__smakebuf_r+0x18>

0800c1ca <_putc_r>:
 800c1ca:	b570      	push	{r4, r5, r6, lr}
 800c1cc:	460d      	mov	r5, r1
 800c1ce:	4614      	mov	r4, r2
 800c1d0:	4606      	mov	r6, r0
 800c1d2:	b118      	cbz	r0, 800c1dc <_putc_r+0x12>
 800c1d4:	6a03      	ldr	r3, [r0, #32]
 800c1d6:	b90b      	cbnz	r3, 800c1dc <_putc_r+0x12>
 800c1d8:	f7ff f8f0 	bl	800b3bc <__sinit>
 800c1dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1de:	07d8      	lsls	r0, r3, #31
 800c1e0:	d405      	bmi.n	800c1ee <_putc_r+0x24>
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	0599      	lsls	r1, r3, #22
 800c1e6:	d402      	bmi.n	800c1ee <_putc_r+0x24>
 800c1e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1ea:	f7ff fb06 	bl	800b7fa <__retarget_lock_acquire_recursive>
 800c1ee:	68a3      	ldr	r3, [r4, #8]
 800c1f0:	3b01      	subs	r3, #1
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	60a3      	str	r3, [r4, #8]
 800c1f6:	da05      	bge.n	800c204 <_putc_r+0x3a>
 800c1f8:	69a2      	ldr	r2, [r4, #24]
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	db12      	blt.n	800c224 <_putc_r+0x5a>
 800c1fe:	b2eb      	uxtb	r3, r5
 800c200:	2b0a      	cmp	r3, #10
 800c202:	d00f      	beq.n	800c224 <_putc_r+0x5a>
 800c204:	6823      	ldr	r3, [r4, #0]
 800c206:	1c5a      	adds	r2, r3, #1
 800c208:	6022      	str	r2, [r4, #0]
 800c20a:	701d      	strb	r5, [r3, #0]
 800c20c:	b2ed      	uxtb	r5, r5
 800c20e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c210:	07da      	lsls	r2, r3, #31
 800c212:	d405      	bmi.n	800c220 <_putc_r+0x56>
 800c214:	89a3      	ldrh	r3, [r4, #12]
 800c216:	059b      	lsls	r3, r3, #22
 800c218:	d402      	bmi.n	800c220 <_putc_r+0x56>
 800c21a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c21c:	f7ff faee 	bl	800b7fc <__retarget_lock_release_recursive>
 800c220:	4628      	mov	r0, r5
 800c222:	bd70      	pop	{r4, r5, r6, pc}
 800c224:	4629      	mov	r1, r5
 800c226:	4622      	mov	r2, r4
 800c228:	4630      	mov	r0, r6
 800c22a:	f7ff f9b8 	bl	800b59e <__swbuf_r>
 800c22e:	4605      	mov	r5, r0
 800c230:	e7ed      	b.n	800c20e <_putc_r+0x44>
	...

0800c234 <_fstat_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	2300      	movs	r3, #0
 800c238:	4d06      	ldr	r5, [pc, #24]	@ (800c254 <_fstat_r+0x20>)
 800c23a:	4604      	mov	r4, r0
 800c23c:	4608      	mov	r0, r1
 800c23e:	4611      	mov	r1, r2
 800c240:	602b      	str	r3, [r5, #0]
 800c242:	f7f8 f95c 	bl	80044fe <_fstat>
 800c246:	1c43      	adds	r3, r0, #1
 800c248:	d102      	bne.n	800c250 <_fstat_r+0x1c>
 800c24a:	682b      	ldr	r3, [r5, #0]
 800c24c:	b103      	cbz	r3, 800c250 <_fstat_r+0x1c>
 800c24e:	6023      	str	r3, [r4, #0]
 800c250:	bd38      	pop	{r3, r4, r5, pc}
 800c252:	bf00      	nop
 800c254:	20000b44 	.word	0x20000b44

0800c258 <_isatty_r>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	2300      	movs	r3, #0
 800c25c:	4d05      	ldr	r5, [pc, #20]	@ (800c274 <_isatty_r+0x1c>)
 800c25e:	4604      	mov	r4, r0
 800c260:	4608      	mov	r0, r1
 800c262:	602b      	str	r3, [r5, #0]
 800c264:	f7f8 f95b 	bl	800451e <_isatty>
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	d102      	bne.n	800c272 <_isatty_r+0x1a>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	b103      	cbz	r3, 800c272 <_isatty_r+0x1a>
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	bd38      	pop	{r3, r4, r5, pc}
 800c274:	20000b44 	.word	0x20000b44

0800c278 <_sbrk_r>:
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	2300      	movs	r3, #0
 800c27c:	4d05      	ldr	r5, [pc, #20]	@ (800c294 <_sbrk_r+0x1c>)
 800c27e:	4604      	mov	r4, r0
 800c280:	4608      	mov	r0, r1
 800c282:	602b      	str	r3, [r5, #0]
 800c284:	f7f8 f964 	bl	8004550 <_sbrk>
 800c288:	1c43      	adds	r3, r0, #1
 800c28a:	d102      	bne.n	800c292 <_sbrk_r+0x1a>
 800c28c:	682b      	ldr	r3, [r5, #0]
 800c28e:	b103      	cbz	r3, 800c292 <_sbrk_r+0x1a>
 800c290:	6023      	str	r3, [r4, #0]
 800c292:	bd38      	pop	{r3, r4, r5, pc}
 800c294:	20000b44 	.word	0x20000b44

0800c298 <memchr>:
 800c298:	b2c9      	uxtb	r1, r1
 800c29a:	4603      	mov	r3, r0
 800c29c:	4402      	add	r2, r0
 800c29e:	b510      	push	{r4, lr}
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	d101      	bne.n	800c2aa <memchr+0x12>
 800c2a6:	2000      	movs	r0, #0
 800c2a8:	e003      	b.n	800c2b2 <memchr+0x1a>
 800c2aa:	7804      	ldrb	r4, [r0, #0]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	428c      	cmp	r4, r1
 800c2b0:	d1f6      	bne.n	800c2a0 <memchr+0x8>
 800c2b2:	bd10      	pop	{r4, pc}

0800c2b4 <_init>:
 800c2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2b6:	bf00      	nop
 800c2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ba:	bc08      	pop	{r3}
 800c2bc:	469e      	mov	lr, r3
 800c2be:	4770      	bx	lr

0800c2c0 <_fini>:
 800c2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2c2:	bf00      	nop
 800c2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2c6:	bc08      	pop	{r3}
 800c2c8:	469e      	mov	lr, r3
 800c2ca:	4770      	bx	lr
