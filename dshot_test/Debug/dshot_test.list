
dshot_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e10  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08007004  08007004  00017004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007084  08007084  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007084  08007084  00017084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800708c  0800708c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800708c  0800708c  0001708c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007090  08007090  00017090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  2000000c  080070a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  080070a0  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020e84  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f57  00000000  00000000  00040f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c28  00000000  00000000  00044e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015d3  00000000  00000000  00046a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002eeba  00000000  00000000  0004805b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020d7c  00000000  00000000  00076f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00132bd0  00000000  00000000  00097c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000079f4  00000000  00000000  001ca864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001d2258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08006fec 	.word	0x08006fec

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08006fec 	.word	0x08006fec

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d146      	bne.n	8000302 <__udivmoddi4+0x9e>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d95e      	bls.n	8000338 <__udivmoddi4+0xd4>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	409c      	lsls	r4, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	4317      	orrs	r7, r2
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d908      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f200 8134 	bhi.w	8000528 <__udivmoddi4+0x2c4>
 80002c0:	4639      	mov	r1, r7
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x88>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x86>
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	f200 8119 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80002ea:	4610      	mov	r0, r2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xb4>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80fc 	beq.w	8000504 <__udivmoddi4+0x2a0>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d14c      	bne.n	80003ba <__udivmoddi4+0x156>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f0c0 80f2 	bcc.w	800050a <__udivmoddi4+0x2a6>
 8000326:	4282      	cmp	r2, r0
 8000328:	f240 80ef 	bls.w	800050a <__udivmoddi4+0x2a6>
 800032c:	4608      	mov	r0, r1
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e5      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000332:	e9c6 4700 	strd	r4, r7, [r6]
 8000336:	e7e2      	b.n	80002fe <__udivmoddi4+0x9a>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xd8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f382 	clz	r3, r2
 8000340:	2b00      	cmp	r3, #0
 8000342:	f040 809f 	bne.w	8000484 <__udivmoddi4+0x220>
 8000346:	1a8a      	subs	r2, r1, r2
 8000348:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 f5fe 	udiv	r5, r2, lr
 8000356:	fb0e 2015 	mls	r0, lr, r5, r2
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb07 f005 	mul.w	r0, r7, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90f      	bls.n	8000388 <__udivmoddi4+0x124>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	bf2c      	ite	cs
 8000372:	f04f 0901 	movcs.w	r9, #1
 8000376:	f04f 0900 	movcc.w	r9, #0
 800037a:	4290      	cmp	r0, r2
 800037c:	d903      	bls.n	8000386 <__udivmoddi4+0x122>
 800037e:	f1b9 0f00 	cmp.w	r9, #0
 8000382:	f000 80ce 	beq.w	8000522 <__udivmoddi4+0x2be>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000390:	fb0e 2210 	mls	r2, lr, r0, r2
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	42a7      	cmp	r7, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	f200 80b3 	bhi.w	8000516 <__udivmoddi4+0x2b2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0x90>
 80003ba:	f1c1 0420 	rsb	r4, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003c4:	fa22 f704 	lsr.w	r7, r2, r4
 80003c8:	40e5      	lsrs	r5, r4
 80003ca:	408a      	lsls	r2, r1
 80003cc:	431f      	orrs	r7, r3
 80003ce:	fa20 f304 	lsr.w	r3, r0, r4
 80003d2:	4088      	lsls	r0, r1
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb5 fef8 	udiv	lr, r5, r8
 80003e8:	fb08 551e 	mls	r5, r8, lr, r5
 80003ec:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80003f0:	fb0e f90c 	mul.w	r9, lr, ip
 80003f4:	45a9      	cmp	r9, r5
 80003f6:	d90e      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003f8:	197d      	adds	r5, r7, r5
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	bf2c      	ite	cs
 8000400:	f04f 0b01 	movcs.w	fp, #1
 8000404:	f04f 0b00 	movcc.w	fp, #0
 8000408:	45a9      	cmp	r9, r5
 800040a:	d903      	bls.n	8000414 <__udivmoddi4+0x1b0>
 800040c:	f1bb 0f00 	cmp.w	fp, #0
 8000410:	f000 808d 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000414:	46d6      	mov	lr, sl
 8000416:	eba5 0509 	sub.w	r5, r5, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000422:	fb08 5513 	mls	r5, r8, r3, r5
 8000426:	fb03 fc0c 	mul.w	ip, r3, ip
 800042a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800042e:	45ac      	cmp	ip, r5
 8000430:	d906      	bls.n	8000440 <__udivmoddi4+0x1dc>
 8000432:	197d      	adds	r5, r7, r5
 8000434:	f103 38ff 	add.w	r8, r3, #4294967295
 8000438:	d201      	bcs.n	800043e <__udivmoddi4+0x1da>
 800043a:	45ac      	cmp	ip, r5
 800043c:	d87e      	bhi.n	800053c <__udivmoddi4+0x2d8>
 800043e:	4643      	mov	r3, r8
 8000440:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000444:	eba5 050c 	sub.w	r5, r5, ip
 8000448:	fba3 9802 	umull	r9, r8, r3, r2
 800044c:	4545      	cmp	r5, r8
 800044e:	46ce      	mov	lr, r9
 8000450:	46c4      	mov	ip, r8
 8000452:	d302      	bcc.n	800045a <__udivmoddi4+0x1f6>
 8000454:	d106      	bne.n	8000464 <__udivmoddi4+0x200>
 8000456:	4548      	cmp	r0, r9
 8000458:	d204      	bcs.n	8000464 <__udivmoddi4+0x200>
 800045a:	3b01      	subs	r3, #1
 800045c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000460:	eb68 0c07 	sbc.w	ip, r8, r7
 8000464:	2e00      	cmp	r6, #0
 8000466:	d06f      	beq.n	8000548 <__udivmoddi4+0x2e4>
 8000468:	ebb0 020e 	subs.w	r2, r0, lr
 800046c:	eb65 050c 	sbc.w	r5, r5, ip
 8000470:	40ca      	lsrs	r2, r1
 8000472:	fa05 f404 	lsl.w	r4, r5, r4
 8000476:	40cd      	lsrs	r5, r1
 8000478:	4618      	mov	r0, r3
 800047a:	4314      	orrs	r4, r2
 800047c:	2100      	movs	r1, #0
 800047e:	e9c6 4500 	strd	r4, r5, [r6]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0220 	rsb	r2, r3, #32
 800048c:	4099      	lsls	r1, r3
 800048e:	409c      	lsls	r4, r3
 8000490:	40d5      	lsrs	r5, r2
 8000492:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000496:	fa20 f202 	lsr.w	r2, r0, r2
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fbb5 f0fe 	udiv	r0, r5, lr
 80004a2:	430a      	orrs	r2, r1
 80004a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004a8:	0c11      	lsrs	r1, r2, #16
 80004aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ae:	fb00 f507 	mul.w	r5, r0, r7
 80004b2:	428d      	cmp	r5, r1
 80004b4:	d90e      	bls.n	80004d4 <__udivmoddi4+0x270>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	bf2c      	ite	cs
 80004c0:	f04f 0901 	movcs.w	r9, #1
 80004c4:	f04f 0900 	movcc.w	r9, #0
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d902      	bls.n	80004d2 <__udivmoddi4+0x26e>
 80004cc:	f1b9 0f00 	cmp.w	r9, #0
 80004d0:	d031      	beq.n	8000536 <__udivmoddi4+0x2d2>
 80004d2:	4640      	mov	r0, r8
 80004d4:	1b49      	subs	r1, r1, r5
 80004d6:	b292      	uxth	r2, r2
 80004d8:	fbb1 f5fe 	udiv	r5, r1, lr
 80004dc:	fb0e 1115 	mls	r1, lr, r5, r1
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	fb05 f107 	mul.w	r1, r5, r7
 80004e8:	4291      	cmp	r1, r2
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x298>
 80004ec:	eb1c 0202 	adds.w	r2, ip, r2
 80004f0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f4:	d201      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004f6:	4291      	cmp	r1, r2
 80004f8:	d823      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004fa:	4645      	mov	r5, r8
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000502:	e726      	b.n	8000352 <__udivmoddi4+0xee>
 8000504:	4631      	mov	r1, r6
 8000506:	4630      	mov	r0, r6
 8000508:	e6f9      	b.n	80002fe <__udivmoddi4+0x9a>
 800050a:	1a84      	subs	r4, r0, r2
 800050c:	eb65 0203 	sbc.w	r2, r5, r3
 8000510:	2001      	movs	r0, #1
 8000512:	4617      	mov	r7, r2
 8000514:	e70b      	b.n	800032e <__udivmoddi4+0xca>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14e>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	e6e4      	b.n	80002ec <__udivmoddi4+0x88>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	e72f      	b.n	8000388 <__udivmoddi4+0x124>
 8000528:	3902      	subs	r1, #2
 800052a:	4462      	add	r2, ip
 800052c:	e6c9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800052e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000532:	443d      	add	r5, r7
 8000534:	e76f      	b.n	8000416 <__udivmoddi4+0x1b2>
 8000536:	3802      	subs	r0, #2
 8000538:	4461      	add	r1, ip
 800053a:	e7cb      	b.n	80004d4 <__udivmoddi4+0x270>
 800053c:	3b02      	subs	r3, #2
 800053e:	443d      	add	r5, r7
 8000540:	e77e      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000542:	3d02      	subs	r5, #2
 8000544:	4462      	add	r2, ip
 8000546:	e7d9      	b.n	80004fc <__udivmoddi4+0x298>
 8000548:	4618      	mov	r0, r3
 800054a:	4631      	mov	r1, r6
 800054c:	e6d7      	b.n	80002fe <__udivmoddi4+0x9a>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <dshotInit>:
 *      Author: Stanley
 */

#include "DShot.h"

void dshotInit(DShotConfig_t dshotConfig) {
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b08b      	sub	sp, #44	; 0x2c
 8000558:	af02      	add	r7, sp, #8
 800055a:	463c      	mov	r4, r7
 800055c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_TIM_PWM_Start(dshotConfig.timer, dshotConfig.timerChannel);
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	88ba      	ldrh	r2, [r7, #4]
 8000564:	4611      	mov	r1, r2
 8000566:	4618      	mov	r0, r3
 8000568:	f004 fde0 	bl	800512c <HAL_TIM_PWM_Start>

	DMA_HandleTypeDef* dmaHandle = dshotConfig.timer->hdma[dshotConfig.timDMAHandleIndex];
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	88fa      	ldrh	r2, [r7, #6]
 8000570:	3208      	adds	r2, #8
 8000572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000576:	61bb      	str	r3, [r7, #24]
	uint32_t dmaSrcAddr = (uint32_t)(dshotConfig.dmaBuffer);
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	617b      	str	r3, [r7, #20]
	uint32_t dmaDestAddr = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]

	switch (dshotConfig.timerChannel) {
 8000580:	88bb      	ldrh	r3, [r7, #4]
 8000582:	2b0c      	cmp	r3, #12
 8000584:	d830      	bhi.n	80005e8 <dshotInit+0x94>
 8000586:	a201      	add	r2, pc, #4	; (adr r2, 800058c <dshotInit+0x38>)
 8000588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058c:	080005c1 	.word	0x080005c1
 8000590:	080005e9 	.word	0x080005e9
 8000594:	080005e9 	.word	0x080005e9
 8000598:	080005e9 	.word	0x080005e9
 800059c:	080005cb 	.word	0x080005cb
 80005a0:	080005e9 	.word	0x080005e9
 80005a4:	080005e9 	.word	0x080005e9
 80005a8:	080005e9 	.word	0x080005e9
 80005ac:	080005d5 	.word	0x080005d5
 80005b0:	080005e9 	.word	0x080005e9
 80005b4:	080005e9 	.word	0x080005e9
 80005b8:	080005e9 	.word	0x080005e9
 80005bc:	080005df 	.word	0x080005df
		case TIM_CHANNEL_1:
			dmaDestAddr = (uint32_t)&dshotConfig.timer->Instance->CCR1;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3334      	adds	r3, #52	; 0x34
 80005c6:	61fb      	str	r3, [r7, #28]
			break;
 80005c8:	e00e      	b.n	80005e8 <dshotInit+0x94>

		case TIM_CHANNEL_2:
			dmaDestAddr = (uint32_t)&dshotConfig.timer->Instance->CCR2;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	3338      	adds	r3, #56	; 0x38
 80005d0:	61fb      	str	r3, [r7, #28]
			break;
 80005d2:	e009      	b.n	80005e8 <dshotInit+0x94>

		case TIM_CHANNEL_3:
			dmaDestAddr = (uint32_t)&dshotConfig.timer->Instance->CCR3;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	333c      	adds	r3, #60	; 0x3c
 80005da:	61fb      	str	r3, [r7, #28]
			break;
 80005dc:	e004      	b.n	80005e8 <dshotInit+0x94>

		case TIM_CHANNEL_4:
			dmaDestAddr = (uint32_t)&dshotConfig.timer->Instance->CCR4;
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	3340      	adds	r3, #64	; 0x40
 80005e4:	61fb      	str	r3, [r7, #28]
			break;
 80005e6:	bf00      	nop
	}

	// DMA should be started in circular mode
	HAL_DMA_Start(dmaHandle, dmaSrcAddr, dmaDestAddr, DSHOT_DMA_BUFFER_LEN);
 80005e8:	2312      	movs	r3, #18
 80005ea:	69fa      	ldr	r2, [r7, #28]
 80005ec:	6979      	ldr	r1, [r7, #20]
 80005ee:	69b8      	ldr	r0, [r7, #24]
 80005f0:	f002 f9b8 	bl	8002964 <HAL_DMA_Start>

	// Write initial throttle of 0%
	dshotWrite(dshotConfig, 33.0f, 0);
 80005f4:	2300      	movs	r3, #0
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800060c <dshotInit+0xb8>
 80005fc:	463b      	mov	r3, r7
 80005fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000600:	f000 f806 	bl	8000610 <dshotWrite>
}
 8000604:	bf00      	nop
 8000606:	3724      	adds	r7, #36	; 0x24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd90      	pop	{r4, r7, pc}
 800060c:	42040000 	.word	0x42040000

08000610 <dshotWrite>:

void dshotWrite(DShotConfig_t dshotConfig, float throttlePercentage, uint8_t telemetry) {
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b087      	sub	sp, #28
 8000614:	af00      	add	r7, sp, #0
 8000616:	f107 0408 	add.w	r4, r7, #8
 800061a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800061e:	ed87 0a01 	vstr	s0, [r7, #4]
	// Disable timer DMA to avoid DMA transfers while the DMA buffer is being updated
	__HAL_TIM_DISABLE_DMA(dshotConfig.timer, dshotConfig.timDMASource);
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	68da      	ldr	r2, [r3, #12]
 8000628:	8a3b      	ldrh	r3, [r7, #16]
 800062a:	43db      	mvns	r3, r3
 800062c:	4619      	mov	r1, r3
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	400a      	ands	r2, r1
 8000634:	60da      	str	r2, [r3, #12]

	dshotUpdateDMABuffer(dshotConfig.dmaBuffer, throttlePercentage, telemetry);
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800063c:	4611      	mov	r1, r2
 800063e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f80e 	bl	8000664 <dshotUpdateDMABuffer>

	__HAL_TIM_ENABLE_DMA(dshotConfig.timer, dshotConfig.timDMASource);
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	68da      	ldr	r2, [r3, #12]
 800064e:	8a3b      	ldrh	r3, [r7, #16]
 8000650:	4619      	mov	r1, r3
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	430a      	orrs	r2, r1
 8000658:	60da      	str	r2, [r3, #12]
}
 800065a:	bf00      	nop
 800065c:	371c      	adds	r7, #28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}
	...

08000664 <dshotUpdateDMABuffer>:

void dshotUpdateDMABuffer(uint32_t *buffer, float throttlePercentage, uint8_t telemetry) {
 8000664:	b480      	push	{r7}
 8000666:	b087      	sub	sp, #28
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000670:	460b      	mov	r3, r1
 8000672:	71fb      	strb	r3, [r7, #7]
	   *                      Throttle Data           ^     Checksum
	   *                                              |
	   *                                           Telemetry
	   */

	  uint16_t frame = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	82fb      	strh	r3, [r7, #22]

	  // Set throttle bits
	  frame = (uint16_t)(DSHOT_MAX_THROTTLE * throttlePercentage / 100) + DSHOT_RESERVED_VALUES;
 8000678:	edd7 7a02 	vldr	s15, [r7, #8]
 800067c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000744 <dshotUpdateDMABuffer+0xe0>
 8000680:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000684:	eddf 6a30 	vldr	s13, [pc, #192]	; 8000748 <dshotUpdateDMABuffer+0xe4>
 8000688:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800068c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000690:	ee17 3a90 	vmov	r3, s15
 8000694:	b29b      	uxth	r3, r3
 8000696:	332f      	adds	r3, #47	; 0x2f
 8000698:	82fb      	strh	r3, [r7, #22]

	  // Calculating checksum... splitting first 12 bits into 3 nibbles and XORing
	  uint16_t checksum = (~(frame ^ (frame >> 4) ^ (frame >> 8))) & 0x000F;
 800069a:	8afb      	ldrh	r3, [r7, #22]
 800069c:	091b      	lsrs	r3, r3, #4
 800069e:	b29a      	uxth	r2, r3
 80006a0:	8afb      	ldrh	r3, [r7, #22]
 80006a2:	4053      	eors	r3, r2
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	8afb      	ldrh	r3, [r7, #22]
 80006a8:	0a1b      	lsrs	r3, r3, #8
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	4053      	eors	r3, r2
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	43db      	mvns	r3, r3
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	827b      	strh	r3, [r7, #18]

	  // Set telemetry bit
	  frame = (frame << 1 ) | (telemetry ? 1 : 0);
 80006ba:	8afb      	ldrh	r3, [r7, #22]
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	b21a      	sxth	r2, r3
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	bf14      	ite	ne
 80006c6:	2301      	movne	r3, #1
 80006c8:	2300      	moveq	r3, #0
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	b21b      	sxth	r3, r3
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	82fb      	strh	r3, [r7, #22]

	  // Set checksum bits
	  frame = (frame << 4) | checksum;  // adding the checksum to the frame
 80006d4:	8afb      	ldrh	r3, [r7, #22]
 80006d6:	011b      	lsls	r3, r3, #4
 80006d8:	b21a      	sxth	r2, r3
 80006da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80006de:	4313      	orrs	r3, r2
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	82fb      	strh	r3, [r7, #22]

	  // Convert frame bits into PWM duty cycles in DMA buffer
	  for (uint8_t i = 0; i < DSHOT_DATA_FRAME_LEN; ++i) {
 80006e4:	2300      	movs	r3, #0
 80006e6:	757b      	strb	r3, [r7, #21]
 80006e8:	e013      	b.n	8000712 <dshotUpdateDMABuffer+0xae>
		  buffer[i] = (frame & 0x8000 ? DSHOT_150_BIT_1 : DSHOT_150_BIT_0);
 80006ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	da02      	bge.n	80006f8 <dshotUpdateDMABuffer+0x94>
 80006f2:	f240 2226 	movw	r2, #550	; 0x226
 80006f6:	e001      	b.n	80006fc <dshotUpdateDMABuffer+0x98>
 80006f8:	f240 1213 	movw	r2, #275	; 0x113
 80006fc:	7d7b      	ldrb	r3, [r7, #21]
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	68f9      	ldr	r1, [r7, #12]
 8000702:	440b      	add	r3, r1
 8000704:	601a      	str	r2, [r3, #0]
		  frame <<= 1;
 8000706:	8afb      	ldrh	r3, [r7, #22]
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	82fb      	strh	r3, [r7, #22]
	  for (uint8_t i = 0; i < DSHOT_DATA_FRAME_LEN; ++i) {
 800070c:	7d7b      	ldrb	r3, [r7, #21]
 800070e:	3301      	adds	r3, #1
 8000710:	757b      	strb	r3, [r7, #21]
 8000712:	7d7b      	ldrb	r3, [r7, #21]
 8000714:	2b0f      	cmp	r3, #15
 8000716:	d9e8      	bls.n	80006ea <dshotUpdateDMABuffer+0x86>
	  }

	  // Stuff the remainig bits with 0 to generate a low signal indicating frame reset
	  for (uint8_t i = DSHOT_DATA_FRAME_LEN; i < DSHOT_DMA_BUFFER_LEN; ++i) {
 8000718:	2310      	movs	r3, #16
 800071a:	753b      	strb	r3, [r7, #20]
 800071c:	e008      	b.n	8000730 <dshotUpdateDMABuffer+0xcc>
		  buffer[i] = 0;
 800071e:	7d3b      	ldrb	r3, [r7, #20]
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	4413      	add	r3, r2
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
	  for (uint8_t i = DSHOT_DATA_FRAME_LEN; i < DSHOT_DMA_BUFFER_LEN; ++i) {
 800072a:	7d3b      	ldrb	r3, [r7, #20]
 800072c:	3301      	adds	r3, #1
 800072e:	753b      	strb	r3, [r7, #20]
 8000730:	7d3b      	ldrb	r3, [r7, #20]
 8000732:	2b11      	cmp	r3, #17
 8000734:	d9f3      	bls.n	800071e <dshotUpdateDMABuffer+0xba>
	  }
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	371c      	adds	r7, #28
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	44fa0000 	.word	0x44fa0000
 8000748:	42c80000 	.word	0x42c80000

0800074c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000756:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000758:	4907      	ldr	r1, [pc, #28]	; (8000778 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4313      	orrs	r3, r2
 800075e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000762:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4013      	ands	r3, r2
 8000768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800076a:	68fb      	ldr	r3, [r7, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	40021000 	.word	0x40021000

0800077c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000786:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000788:	4907      	ldr	r1, [pc, #28]	; (80007a8 <LL_APB1_GRP2_EnableClock+0x2c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4313      	orrs	r3, r2
 800078e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000792:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4013      	ands	r3, r2
 8000798:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800079a:	68fb      	ldr	r3, [r7, #12]
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40021000 	.word	0x40021000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b098      	sub	sp, #96	; 0x60
 80007b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f000 fee4 	bl	800157e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f877 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 fb15 	bl	8000de8 <MX_GPIO_Init>
  MX_DMA_Init();
 80007be:	f000 fae9 	bl	8000d94 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80007c2:	f000 f95d 	bl	8000a80 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80007c6:	f000 f9a9 	bl	8000b1c <MX_RTC_Init>
  MX_UCPD1_Init();
 80007ca:	f000 fa85 	bl	8000cd8 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80007ce:	f000 fab9 	bl	8000d44 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 80007d2:	f000 f9ed 	bl	8000bb0 <MX_TIM1_Init>
  MX_ICACHE_Init();
 80007d6:	f000 f93f 	bl	8000a58 <MX_ICACHE_Init>
  MX_ADC1_Init();
 80007da:	f000 f8c7 	bl	800096c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t buffer[DSHOT_DMA_BUFFER_LEN] = {0};
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2248      	movs	r2, #72	; 0x48
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f006 fbd3 	bl	8006f92 <memset>
  DShotConfig_t dshotConfig = {};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  dshotConfig.timer = &htim1;
 80007f8:	4b26      	ldr	r3, [pc, #152]	; (8000894 <main+0xe8>)
 80007fa:	603b      	str	r3, [r7, #0]
  dshotConfig.timerChannel = TIM_CHANNEL_1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	80bb      	strh	r3, [r7, #4]
  dshotConfig.timDMAHandleIndex = TIM_DMA_ID_CC1;
 8000800:	2301      	movs	r3, #1
 8000802:	80fb      	strh	r3, [r7, #6]
  dshotConfig.timDMASource = TIM_DMA_CC1;
 8000804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000808:	813b      	strh	r3, [r7, #8]
  dshotConfig.dmaBuffer = buffer;
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	60fb      	str	r3, [r7, #12]

  dshotInit(dshotConfig);
 8000810:	463b      	mov	r3, r7
 8000812:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000814:	f7ff fe9e 	bl	8000554 <dshotInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dshotWrite(dshotConfig, 100.0f, 0);
 8000818:	2300      	movs	r3, #0
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8000898 <main+0xec>
 8000820:	463b      	mov	r3, r7
 8000822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000824:	f7ff fef4 	bl	8000610 <dshotWrite>
	  HAL_Delay(500);
 8000828:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082c:	f000 ff1e 	bl	800166c <HAL_Delay>
	  dshotWrite(dshotConfig, 75.0f, 0);
 8000830:	2300      	movs	r3, #0
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800089c <main+0xf0>
 8000838:	463b      	mov	r3, r7
 800083a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800083c:	f7ff fee8 	bl	8000610 <dshotWrite>
	  HAL_Delay(500);
 8000840:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000844:	f000 ff12 	bl	800166c <HAL_Delay>
	  dshotWrite(dshotConfig, 50.0f, 0);
 8000848:	2300      	movs	r3, #0
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80008a0 <main+0xf4>
 8000850:	463b      	mov	r3, r7
 8000852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000854:	f7ff fedc 	bl	8000610 <dshotWrite>
	  HAL_Delay(500);
 8000858:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085c:	f000 ff06 	bl	800166c <HAL_Delay>
	  dshotWrite(dshotConfig, 25.0f, 0);
 8000860:	2300      	movs	r3, #0
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8000868:	463b      	mov	r3, r7
 800086a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800086c:	f7ff fed0 	bl	8000610 <dshotWrite>
	  HAL_Delay(500);
 8000870:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000874:	f000 fefa 	bl	800166c <HAL_Delay>
	  dshotWrite(dshotConfig, 0.0f, 0);
 8000878:	2300      	movs	r3, #0
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80008a4 <main+0xf8>
 8000880:	463b      	mov	r3, r7
 8000882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000884:	f7ff fec4 	bl	8000610 <dshotWrite>
	  HAL_Delay(500);
 8000888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800088c:	f000 feee 	bl	800166c <HAL_Delay>
	  dshotWrite(dshotConfig, 100.0f, 0);
 8000890:	e7c2      	b.n	8000818 <main+0x6c>
 8000892:	bf00      	nop
 8000894:	2000014c 	.word	0x2000014c
 8000898:	42c80000 	.word	0x42c80000
 800089c:	42960000 	.word	0x42960000
 80008a0:	42480000 	.word	0x42480000
 80008a4:	00000000 	.word	0x00000000

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b098      	sub	sp, #96	; 0x60
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0318 	add.w	r3, r7, #24
 80008b2:	2248      	movs	r2, #72	; 0x48
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f006 fb6b 	bl	8006f92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80008ca:	2000      	movs	r0, #0
 80008cc:	f002 fd3c 	bl	8003348 <HAL_PWREx_ControlVoltageScaling>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x32>
  {
    Error_Handler();
 80008d6:	f000 fb25 	bl	8000f24 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008da:	f002 fd17 	bl	800330c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008de:	4b22      	ldr	r3, [pc, #136]	; (8000968 <SystemClock_Config+0xc0>)
 80008e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008e4:	4a20      	ldr	r2, [pc, #128]	; (8000968 <SystemClock_Config+0xc0>)
 80008e6:	f023 0318 	bic.w	r3, r3, #24
 80008ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 80008ee:	2334      	movs	r3, #52	; 0x34
 80008f0:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008f2:	2381      	movs	r3, #129	; 0x81
 80008f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008f6:	2301      	movs	r3, #1
 80008f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008fa:	2301      	movs	r3, #1
 80008fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008fe:	2300      	movs	r3, #0
 8000900:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000902:	2360      	movs	r3, #96	; 0x60
 8000904:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000906:	2302      	movs	r3, #2
 8000908:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800090a:	2301      	movs	r3, #1
 800090c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800090e:	2301      	movs	r3, #1
 8000910:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000912:	2337      	movs	r3, #55	; 0x37
 8000914:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000916:	2307      	movs	r3, #7
 8000918:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800091a:	2302      	movs	r3, #2
 800091c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800091e:	2302      	movs	r3, #2
 8000920:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000922:	f107 0318 	add.w	r3, r7, #24
 8000926:	4618      	mov	r0, r3
 8000928:	f002 fd9e 	bl	8003468 <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000932:	f000 faf7 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	230f      	movs	r3, #15
 8000938:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2303      	movs	r3, #3
 800093c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2105      	movs	r1, #5
 800094e:	4618      	mov	r0, r3
 8000950:	f003 fa60 	bl	8003e14 <HAL_RCC_ClockConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800095a:	f000 fae3 	bl	8000f24 <Error_Handler>
  }
}
 800095e:	bf00      	nop
 8000960:	3760      	adds	r7, #96	; 0x60
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
 800098c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800098e:	4b2f      	ldr	r3, [pc, #188]	; (8000a4c <MX_ADC1_Init+0xe0>)
 8000990:	4a2f      	ldr	r2, [pc, #188]	; (8000a50 <MX_ADC1_Init+0xe4>)
 8000992:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <MX_ADC1_Init+0xe0>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800099a:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <MX_ADC1_Init+0xe0>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a0:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009ae:	2204      	movs	r2, #4
 80009b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ee:	4817      	ldr	r0, [pc, #92]	; (8000a4c <MX_ADC1_Init+0xe0>)
 80009f0:	f001 f800 	bl	80019f4 <HAL_ADC_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80009fa:	f000 fa93 	bl	8000f24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4810      	ldr	r0, [pc, #64]	; (8000a4c <MX_ADC1_Init+0xe0>)
 8000a0a:	f001 fd4f 	bl	80024ac <HAL_ADCEx_MultiModeConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a14:	f000 fa86 	bl	8000f24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_ADC1_Init+0xe8>)
 8000a1a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a24:	237f      	movs	r3, #127	; 0x7f
 8000a26:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_ADC1_Init+0xe0>)
 8000a36:	f001 f929 	bl	8001c8c <HAL_ADC_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000a40:	f000 fa70 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	; 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000028 	.word	0x20000028
 8000a50:	42028000 	.word	0x42028000
 8000a54:	0c900008 	.word	0x0c900008

08000a58 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f002 fb2d 	bl	80030bc <HAL_ICACHE_ConfigAssociativityMode>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000a68:	f000 fa5c 	bl	8000f24 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000a6c:	f002 fb46 	bl	80030fc <HAL_ICACHE_Enable>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000a76:	f000 fa55 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <MX_LPUART1_UART_Init+0x94>)
 8000a88:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000a8c:	4a22      	ldr	r2, [pc, #136]	; (8000b18 <MX_LPUART1_UART_Init+0x98>)
 8000a8e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000aa4:	220c      	movs	r2, #12
 8000aa6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ac6:	4812      	ldr	r0, [pc, #72]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000ac8:	f005 fa00 	bl	8005ecc <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000ad2:	f000 fa27 	bl	8000f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000ada:	f005 ff9f 	bl	8006a1c <HAL_UARTEx_SetTxFifoThreshold>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000ae4:	f000 fa1e 	bl	8000f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4809      	ldr	r0, [pc, #36]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000aec:	f005 ffd4 	bl	8006a98 <HAL_UARTEx_SetRxFifoThreshold>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8000af6:	f000 fa15 	bl	8000f24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_LPUART1_UART_Init+0x90>)
 8000afc:	f005 ff55 	bl	80069aa <HAL_UARTEx_DisableFifoMode>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8000b06:	f000 fa0d 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000090 	.word	0x20000090
 8000b14:	40008000 	.word	0x40008000
 8000b18:	00033324 	.word	0x00033324

08000b1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000b22:	463b      	mov	r3, r7
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_RTC_Init+0x8c>)
 8000b34:	4a1d      	ldr	r2, [pc, #116]	; (8000bac <MX_RTC_Init+0x90>)
 8000b36:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_RTC_Init+0x8c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_RTC_Init+0x8c>)
 8000b40:	227f      	movs	r2, #127	; 0x7f
 8000b42:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_RTC_Init+0x8c>)
 8000b46:	22ff      	movs	r2, #255	; 0xff
 8000b48:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_RTC_Init+0x8c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_RTC_Init+0x8c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_RTC_Init+0x8c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_RTC_Init+0x8c>)
 8000b5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b62:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_RTC_Init+0x8c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b6a:	480f      	ldr	r0, [pc, #60]	; (8000ba8 <MX_RTC_Init+0x8c>)
 8000b6c:	f004 f94c 	bl	8004e08 <HAL_RTC_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000b76:	f000 f9d5 	bl	8000f24 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <MX_RTC_Init+0x8c>)
 8000b90:	f004 fa48 	bl	8005024 <HAL_RTCEx_PrivilegeModeSet>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000b9a:	f000 f9c3 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000124 	.word	0x20000124
 8000bac:	40002800 	.word	0x40002800

08000bb0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b098      	sub	sp, #96	; 0x60
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
 8000bd2:	615a      	str	r2, [r3, #20]
 8000bd4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2234      	movs	r2, #52	; 0x34
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f006 f9d8 	bl	8006f92 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be2:	4b3b      	ldr	r3, [pc, #236]	; (8000cd0 <MX_TIM1_Init+0x120>)
 8000be4:	4a3b      	ldr	r2, [pc, #236]	; (8000cd4 <MX_TIM1_Init+0x124>)
 8000be6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000be8:	4b39      	ldr	r3, [pc, #228]	; (8000cd0 <MX_TIM1_Init+0x120>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bee:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <MX_TIM1_Init+0x120>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 734;
 8000bf4:	4b36      	ldr	r3, [pc, #216]	; (8000cd0 <MX_TIM1_Init+0x120>)
 8000bf6:	f240 22de 	movw	r2, #734	; 0x2de
 8000bfa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfc:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <MX_TIM1_Init+0x120>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c02:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <MX_TIM1_Init+0x120>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c08:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <MX_TIM1_Init+0x120>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c0e:	4830      	ldr	r0, [pc, #192]	; (8000cd0 <MX_TIM1_Init+0x120>)
 8000c10:	f004 fa34 	bl	800507c <HAL_TIM_PWM_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c1a:	f000 f983 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c22:	2300      	movs	r3, #0
 8000c24:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4827      	ldr	r0, [pc, #156]	; (8000cd0 <MX_TIM1_Init+0x120>)
 8000c32:	f005 f837 	bl	8005ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c3c:	f000 f972 	bl	8000f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c40:	2360      	movs	r3, #96	; 0x60
 8000c42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c54:	2300      	movs	r3, #0
 8000c56:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c60:	2200      	movs	r2, #0
 8000c62:	4619      	mov	r1, r3
 8000c64:	481a      	ldr	r0, [pc, #104]	; (8000cd0 <MX_TIM1_Init+0x120>)
 8000c66:	f004 fb67 	bl	8005338 <HAL_TIM_PWM_ConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c70:	f000 f958 	bl	8000f24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <MX_TIM1_Init+0x120>)
 8000cb2:	f005 f87f 	bl	8005db4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000cbc:	f000 f932 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <MX_TIM1_Init+0x120>)
 8000cc2:	f000 faa7 	bl	8001214 <HAL_TIM_MspPostInit>

}
 8000cc6:	bf00      	nop
 8000cc8:	3760      	adds	r7, #96	; 0x60
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000014c 	.word	0x2000014c
 8000cd4:	40012c00 	.word	0x40012c00

08000cd8 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
 8000cec:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000cee:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000cf2:	f7ff fd43 	bl	800077c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000cf6:	2002      	movs	r0, #2
 8000cf8:	f7ff fd28 	bl	800074c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff fd25 	bl	800074c <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d06:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	463b      	mov	r3, r7
 8000d12:	4619      	mov	r1, r3
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <MX_UCPD1_Init+0x64>)
 8000d16:	f006 f896 	bl	8006e46 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d1e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d20:	2303      	movs	r3, #3
 8000d22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	463b      	mov	r3, r7
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4804      	ldr	r0, [pc, #16]	; (8000d40 <MX_UCPD1_Init+0x68>)
 8000d2e:	f006 f88a 	bl	8006e46 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	42020400 	.word	0x42020400
 8000d40:	42020000 	.word	0x42020000

08000d44 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d4a:	4a11      	ldr	r2, [pc, #68]	; (8000d90 <MX_USB_PCD_Init+0x4c>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d50:	2208      	movs	r2, #8
 8000d52:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d56:	2202      	movs	r2, #2
 8000d58:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_USB_PCD_Init+0x48>)
 8000d7a:	f002 f9cf 	bl	800311c <HAL_PCD_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000d84:	f000 f8ce 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000200 	.word	0x20000200
 8000d90:	4000d400 	.word	0x4000d400

08000d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_DMA_Init+0x50>)
 8000d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d9e:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <MX_DMA_Init+0x50>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6493      	str	r3, [r2, #72]	; 0x48
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_DMA_Init+0x50>)
 8000da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_DMA_Init+0x50>)
 8000db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000db6:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <MX_DMA_Init+0x50>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6493      	str	r3, [r2, #72]	; 0x48
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_DMA_Init+0x50>)
 8000dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	201d      	movs	r0, #29
 8000dd0:	f001 fceb 	bl	80027aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dd4:	201d      	movs	r0, #29
 8000dd6:	f001 fd02 	bl	80027de <HAL_NVIC_EnableIRQ>

}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <MX_GPIO_Init+0x12c>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a44      	ldr	r2, [pc, #272]	; (8000f14 <MX_GPIO_Init+0x12c>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <MX_GPIO_Init+0x12c>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e16:	4b3f      	ldr	r3, [pc, #252]	; (8000f14 <MX_GPIO_Init+0x12c>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a3e      	ldr	r2, [pc, #248]	; (8000f14 <MX_GPIO_Init+0x12c>)
 8000e1c:	f043 0310 	orr.w	r3, r3, #16
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b3c      	ldr	r3, [pc, #240]	; (8000f14 <MX_GPIO_Init+0x12c>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0310 	and.w	r3, r3, #16
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <MX_GPIO_Init+0x12c>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	4a38      	ldr	r2, [pc, #224]	; (8000f14 <MX_GPIO_Init+0x12c>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <MX_GPIO_Init+0x12c>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <MX_GPIO_Init+0x12c>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a32      	ldr	r2, [pc, #200]	; (8000f14 <MX_GPIO_Init+0x12c>)
 8000e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <MX_GPIO_Init+0x12c>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000e5e:	f002 facf 	bl	8003400 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <MX_GPIO_Init+0x12c>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	4a2b      	ldr	r2, [pc, #172]	; (8000f14 <MX_GPIO_Init+0x12c>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6e:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <MX_GPIO_Init+0x12c>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	4826      	ldr	r0, [pc, #152]	; (8000f18 <MX_GPIO_Init+0x130>)
 8000e80:	f002 f904 	bl	800308c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e8a:	4824      	ldr	r0, [pc, #144]	; (8000f1c <MX_GPIO_Init+0x134>)
 8000e8c:	f002 f8fe 	bl	800308c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	21a0      	movs	r1, #160	; 0xa0
 8000e94:	4822      	ldr	r0, [pc, #136]	; (8000f20 <MX_GPIO_Init+0x138>)
 8000e96:	f002 f8f9 	bl	800308c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000e9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481b      	ldr	r0, [pc, #108]	; (8000f20 <MX_GPIO_Init+0x138>)
 8000eb2:	f001 ff6b 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4812      	ldr	r0, [pc, #72]	; (8000f18 <MX_GPIO_Init+0x130>)
 8000ece:	f001 ff5d 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480c      	ldr	r0, [pc, #48]	; (8000f1c <MX_GPIO_Init+0x134>)
 8000eec:	f001 ff4e 	bl	8002d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000ef0:	23a0      	movs	r3, #160	; 0xa0
 8000ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <MX_GPIO_Init+0x138>)
 8000f08:	f001 ff40 	bl	8002d8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f0c:	bf00      	nop
 8000f0e:	3728      	adds	r7, #40	; 0x28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40021000 	.word	0x40021000
 8000f18:	42020800 	.word	0x42020800
 8000f1c:	42020000 	.word	0x42020000
 8000f20:	42020400 	.word	0x42020400

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <Error_Handler+0x8>
	...

08000f30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <HAL_MspInit+0x44>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_MspInit+0x44>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6613      	str	r3, [r2, #96]	; 0x60
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_MspInit+0x44>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_MspInit+0x44>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_MspInit+0x44>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_MspInit+0x44>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000

08000f78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0ae      	sub	sp, #184	; 0xb8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	2294      	movs	r2, #148	; 0x94
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f005 fffa 	bl	8006f92 <memset>
  if(hadc->Instance==ADC1)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	; (8001020 <HAL_ADC_MspInit+0xa8>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d137      	bne.n	8001018 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fa8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000fae:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000fb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb6:	f107 0310 	add.w	r3, r7, #16
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f003 fa0e 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000fc6:	f7ff ffad 	bl	8000f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_ADC_MspInit+0xac>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a15      	ldr	r2, [pc, #84]	; (8001024 <HAL_ADC_MspInit+0xac>)
 8000fd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <HAL_ADC_MspInit+0xac>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <HAL_ADC_MspInit+0xac>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <HAL_ADC_MspInit+0xac>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <HAL_ADC_MspInit+0xac>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001000:	2303      	movs	r3, #3
 8001002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001010:	4619      	mov	r1, r3
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <HAL_ADC_MspInit+0xb0>)
 8001014:	f001 feba 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	37b8      	adds	r7, #184	; 0xb8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	42028000 	.word	0x42028000
 8001024:	40021000 	.word	0x40021000
 8001028:	42020800 	.word	0x42020800

0800102c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0ae      	sub	sp, #184	; 0xb8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	2294      	movs	r2, #148	; 0x94
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f005 ffa0 	bl	8006f92 <memset>
  if(huart->Instance==LPUART1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <HAL_UART_MspInit+0xb4>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d13d      	bne.n	80010d8 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800105c:	2320      	movs	r3, #32
 800105e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001060:	2300      	movs	r3, #0
 8001062:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4618      	mov	r0, r3
 800106a:	f003 f9b7 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001074:	f7ff ff56 	bl	8000f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 800107a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107c:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 8001086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001094:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 8001096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800109a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_UART_MspInit+0xb8>)
 800109e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80010a8:	f002 f9aa 	bl	8003400 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 80010ac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80010c6:	2308      	movs	r3, #8
 80010c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <HAL_UART_MspInit+0xbc>)
 80010d4:	f001 fe5a 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80010d8:	bf00      	nop
 80010da:	37b8      	adds	r7, #184	; 0xb8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40008000 	.word	0x40008000
 80010e4:	40021000 	.word	0x40021000
 80010e8:	42021800 	.word	0x42021800

080010ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0a8      	sub	sp, #160	; 0xa0
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	2294      	movs	r2, #148	; 0x94
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f005 ff48 	bl	8006f92 <memset>
  if(hrtc->Instance==RTC)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a16      	ldr	r2, [pc, #88]	; (8001160 <HAL_RTC_MspInit+0x74>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d124      	bne.n	8001156 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800110c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001110:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001116:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4618      	mov	r0, r3
 8001120:	f003 f95c 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800112a:	f7ff fefb 	bl	8000f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_RTC_MspInit+0x78>)
 8001130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001134:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <HAL_RTC_MspInit+0x78>)
 8001136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800113a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_RTC_MspInit+0x78>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_RTC_MspInit+0x78>)
 8001144:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001148:	6593      	str	r3, [r2, #88]	; 0x58
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_RTC_MspInit+0x78>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	37a0      	adds	r7, #160	; 0xa0
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40002800 	.word	0x40002800
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a23      	ldr	r2, [pc, #140]	; (8001204 <HAL_TIM_PWM_MspInit+0x9c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d13f      	bne.n	80011fa <HAL_TIM_PWM_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <HAL_TIM_PWM_MspInit+0xa0>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	4a22      	ldr	r2, [pc, #136]	; (8001208 <HAL_TIM_PWM_MspInit+0xa0>)
 8001180:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001184:	6613      	str	r3, [r2, #96]	; 0x60
 8001186:	4b20      	ldr	r3, [pc, #128]	; (8001208 <HAL_TIM_PWM_MspInit+0xa0>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <HAL_TIM_PWM_MspInit+0xa4>)
 8001194:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <HAL_TIM_PWM_MspInit+0xa8>)
 8001196:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_TIM_PWM_MspInit+0xa4>)
 800119a:	222a      	movs	r2, #42	; 0x2a
 800119c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_TIM_PWM_MspInit+0xa4>)
 80011a0:	2210      	movs	r2, #16
 80011a2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_TIM_PWM_MspInit+0xa4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_TIM_PWM_MspInit+0xa4>)
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_TIM_PWM_MspInit+0xa4>)
 80011b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_TIM_PWM_MspInit+0xa4>)
 80011ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011be:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_TIM_PWM_MspInit+0xa4>)
 80011c2:	2220      	movs	r2, #32
 80011c4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80011c6:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_TIM_PWM_MspInit+0xa4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80011cc:	480f      	ldr	r0, [pc, #60]	; (800120c <HAL_TIM_PWM_MspInit+0xa4>)
 80011ce:	f001 fb21 	bl	8002814 <HAL_DMA_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 80011d8:	f7ff fea4 	bl	8000f24 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_tim1_ch1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80011dc:	2110      	movs	r1, #16
 80011de:	480b      	ldr	r0, [pc, #44]	; (800120c <HAL_TIM_PWM_MspInit+0xa4>)
 80011e0:	f001 fd03 	bl	8002bea <HAL_DMA_ConfigChannelAttributes>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 80011ea:	f7ff fe9b 	bl	8000f24 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_TIM_PWM_MspInit+0xa4>)
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
 80011f4:	4a05      	ldr	r2, [pc, #20]	; (800120c <HAL_TIM_PWM_MspInit+0xa4>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40012c00 	.word	0x40012c00
 8001208:	40021000 	.word	0x40021000
 800120c:	20000198 	.word	0x20000198
 8001210:	40020008 	.word	0x40020008

08001214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a11      	ldr	r2, [pc, #68]	; (8001278 <HAL_TIM_MspPostInit+0x64>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d11c      	bne.n	8001270 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <HAL_TIM_MspPostInit+0x68>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a10      	ldr	r2, [pc, #64]	; (800127c <HAL_TIM_MspPostInit+0x68>)
 800123c:	f043 0310 	orr.w	r3, r3, #16
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <HAL_TIM_MspPostInit+0x68>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800124e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001252:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001260:	2301      	movs	r3, #1
 8001262:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4619      	mov	r1, r3
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <HAL_TIM_MspPostInit+0x6c>)
 800126c:	f001 fd8e 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001270:	bf00      	nop
 8001272:	3720      	adds	r7, #32
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40012c00 	.word	0x40012c00
 800127c:	40021000 	.word	0x40021000
 8001280:	42021000 	.word	0x42021000

08001284 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b0ae      	sub	sp, #184	; 0xb8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	2294      	movs	r2, #148	; 0x94
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f005 fe74 	bl	8006f92 <memset>
  if(hpcd->Instance==USB)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a22      	ldr	r2, [pc, #136]	; (8001338 <HAL_PCD_MspInit+0xb4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d13d      	bne.n	8001330 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 f889 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80012d0:	f7ff fe28 	bl	8000f24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_PCD_MspInit+0xb8>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	4a18      	ldr	r2, [pc, #96]	; (800133c <HAL_PCD_MspInit+0xb8>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e0:	4b16      	ldr	r3, [pc, #88]	; (800133c <HAL_PCD_MspInit+0xb8>)
 80012e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001306:	230a      	movs	r3, #10
 8001308:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001310:	4619      	mov	r1, r3
 8001312:	480b      	ldr	r0, [pc, #44]	; (8001340 <HAL_PCD_MspInit+0xbc>)
 8001314:	f001 fd3a 	bl	8002d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_PCD_MspInit+0xb8>)
 800131a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_PCD_MspInit+0xb8>)
 800131e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001322:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_PCD_MspInit+0xb8>)
 8001326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001330:	bf00      	nop
 8001332:	37b8      	adds	r7, #184	; 0xb8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	4000d400 	.word	0x4000d400
 800133c:	40021000 	.word	0x40021000
 8001340:	42020000 	.word	0x42020000

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler+0x4>

0800134a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler+0x4>

08001356 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <UsageFault_Handler+0x4>

08001362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001390:	f000 f94c 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <DMA1_Channel1_IRQHandler+0x10>)
 800139e:	f001 fb24 	bl	80029ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000198 	.word	0x20000198

080013ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <SystemInit+0x20>)
 80013b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <SystemInit+0x20>)
 80013b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80013d6:	4b4f      	ldr	r3, [pc, #316]	; (8001514 <SystemCoreClockUpdate+0x144>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d107      	bne.n	80013f2 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80013e2:	4b4c      	ldr	r3, [pc, #304]	; (8001514 <SystemCoreClockUpdate+0x144>)
 80013e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e005      	b.n	80013fe <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80013f2:	4b48      	ldr	r3, [pc, #288]	; (8001514 <SystemCoreClockUpdate+0x144>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80013fe:	4a46      	ldr	r2, [pc, #280]	; (8001518 <SystemCoreClockUpdate+0x148>)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001408:	4b42      	ldr	r3, [pc, #264]	; (8001514 <SystemCoreClockUpdate+0x144>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	2b0c      	cmp	r3, #12
 8001412:	d866      	bhi.n	80014e2 <SystemCoreClockUpdate+0x112>
 8001414:	a201      	add	r2, pc, #4	; (adr r2, 800141c <SystemCoreClockUpdate+0x4c>)
 8001416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141a:	bf00      	nop
 800141c:	08001451 	.word	0x08001451
 8001420:	080014e3 	.word	0x080014e3
 8001424:	080014e3 	.word	0x080014e3
 8001428:	080014e3 	.word	0x080014e3
 800142c:	08001459 	.word	0x08001459
 8001430:	080014e3 	.word	0x080014e3
 8001434:	080014e3 	.word	0x080014e3
 8001438:	080014e3 	.word	0x080014e3
 800143c:	08001461 	.word	0x08001461
 8001440:	080014e3 	.word	0x080014e3
 8001444:	080014e3 	.word	0x080014e3
 8001448:	080014e3 	.word	0x080014e3
 800144c:	08001469 	.word	0x08001469
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001450:	4a32      	ldr	r2, [pc, #200]	; (800151c <SystemCoreClockUpdate+0x14c>)
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	6013      	str	r3, [r2, #0]
      break;
 8001456:	e048      	b.n	80014ea <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001458:	4b30      	ldr	r3, [pc, #192]	; (800151c <SystemCoreClockUpdate+0x14c>)
 800145a:	4a31      	ldr	r2, [pc, #196]	; (8001520 <SystemCoreClockUpdate+0x150>)
 800145c:	601a      	str	r2, [r3, #0]
      break;
 800145e:	e044      	b.n	80014ea <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001460:	4b2e      	ldr	r3, [pc, #184]	; (800151c <SystemCoreClockUpdate+0x14c>)
 8001462:	4a30      	ldr	r2, [pc, #192]	; (8001524 <SystemCoreClockUpdate+0x154>)
 8001464:	601a      	str	r2, [r3, #0]
      break;
 8001466:	e040      	b.n	80014ea <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001468:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <SystemCoreClockUpdate+0x144>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001472:	4b28      	ldr	r3, [pc, #160]	; (8001514 <SystemCoreClockUpdate+0x144>)
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	3301      	adds	r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d003      	beq.n	800148e <SystemCoreClockUpdate+0xbe>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d006      	beq.n	800149a <SystemCoreClockUpdate+0xca>
 800148c:	e00b      	b.n	80014a6 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800148e:	4a24      	ldr	r2, [pc, #144]	; (8001520 <SystemCoreClockUpdate+0x150>)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	fbb2 f3f3 	udiv	r3, r2, r3
 8001496:	613b      	str	r3, [r7, #16]
          break;
 8001498:	e00b      	b.n	80014b2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800149a:	4a22      	ldr	r2, [pc, #136]	; (8001524 <SystemCoreClockUpdate+0x154>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a2:	613b      	str	r3, [r7, #16]
          break;
 80014a4:	e005      	b.n	80014b2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	613b      	str	r3, [r7, #16]
          break;
 80014b0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <SystemCoreClockUpdate+0x144>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	fb02 f303 	mul.w	r3, r2, r3
 80014c2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <SystemCoreClockUpdate+0x144>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0e5b      	lsrs	r3, r3, #25
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	3301      	adds	r3, #1
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014dc:	4a0f      	ldr	r2, [pc, #60]	; (800151c <SystemCoreClockUpdate+0x14c>)
 80014de:	6013      	str	r3, [r2, #0]
      break;
 80014e0:	e003      	b.n	80014ea <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80014e2:	4a0e      	ldr	r2, [pc, #56]	; (800151c <SystemCoreClockUpdate+0x14c>)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	6013      	str	r3, [r2, #0]
      break;
 80014e8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <SystemCoreClockUpdate+0x144>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f003 030f 	and.w	r3, r3, #15
 80014f4:	4a0c      	ldr	r2, [pc, #48]	; (8001528 <SystemCoreClockUpdate+0x158>)
 80014f6:	5cd3      	ldrb	r3, [r2, r3]
 80014f8:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <SystemCoreClockUpdate+0x14c>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
 8001504:	4a05      	ldr	r2, [pc, #20]	; (800151c <SystemCoreClockUpdate+0x14c>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40021000 	.word	0x40021000
 8001518:	0800701c 	.word	0x0800701c
 800151c:	20000000 	.word	0x20000000
 8001520:	00f42400 	.word	0x00f42400
 8001524:	007a1200 	.word	0x007a1200
 8001528:	08007004 	.word	0x08007004

0800152c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001564 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001530:	f7ff ff3c 	bl	80013ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001534:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001536:	e003      	b.n	8001540 <LoopCopyDataInit>

08001538 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800153a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800153c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800153e:	3104      	adds	r1, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001540:	480a      	ldr	r0, [pc, #40]	; (800156c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001544:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001546:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001548:	d3f6      	bcc.n	8001538 <CopyDataInit>
	ldr	r2, =_sbss
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <LoopForever+0x12>)
	b	LoopFillZerobss
 800154c:	e002      	b.n	8001554 <LoopFillZerobss>

0800154e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800154e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001550:	f842 3b04 	str.w	r3, [r2], #4

08001554 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <LoopForever+0x16>)
	cmp	r2, r3
 8001556:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001558:	d3f9      	bcc.n	800154e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800155a:	f005 fd23 	bl	8006fa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800155e:	f7ff f925 	bl	80007ac <main>

08001562 <LoopForever>:

LoopForever:
    b LoopForever
 8001562:	e7fe      	b.n	8001562 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001564:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001568:	08007094 	.word	0x08007094
	ldr	r0, =_sdata
 800156c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001570:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001574:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001578:	200004e0 	.word	0x200004e0

0800157c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC1_2_IRQHandler>

0800157e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001588:	2004      	movs	r0, #4
 800158a:	f001 f903 	bl	8002794 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800158e:	f7ff ff1f 	bl	80013d0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001592:	2000      	movs	r0, #0
 8001594:	f000 f80e 	bl	80015b4 <HAL_InitTick>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	e001      	b.n	80015a8 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015a4:	f7ff fcc4 	bl	8000f30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015a8:	79fb      	ldrb	r3, [r7, #7]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_InitTick+0x6c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d023      	beq.n	8001610 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_InitTick+0x70>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <HAL_InitTick+0x6c>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 f90b 	bl	80027fa <HAL_SYSTICK_Config>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10f      	bne.n	800160a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b07      	cmp	r3, #7
 80015ee:	d809      	bhi.n	8001604 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f0:	2200      	movs	r2, #0
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f001 f8d7 	bl	80027aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015fc:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <HAL_InitTick+0x74>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e007      	b.n	8001614 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e004      	b.n	8001614 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	e001      	b.n	8001614 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000008 	.word	0x20000008
 8001624:	20000000 	.word	0x20000000
 8001628:	20000004 	.word	0x20000004

0800162c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x20>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_IncTick+0x24>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <HAL_IncTick+0x24>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000008 	.word	0x20000008
 8001650:	200004dc 	.word	0x200004dc

08001654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_GetTick+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	200004dc 	.word	0x200004dc

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff ffee 	bl	8001654 <HAL_GetTick>
 8001678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_Delay+0x44>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001692:	bf00      	nop
 8001694:	f7ff ffde 	bl	8001654 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000008 	.word	0x20000008

080016b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	609a      	str	r2, [r3, #8]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	609a      	str	r2, [r3, #8]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3360      	adds	r3, #96	; 0x60
 800172e:	461a      	mov	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <LL_ADC_SetOffset+0x44>)
 800173e:	4013      	ands	r3, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	4313      	orrs	r3, r2
 800174c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001754:	bf00      	nop
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	03fff000 	.word	0x03fff000

08001764 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3360      	adds	r3, #96	; 0x60
 8001772:	461a      	mov	r2, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3360      	adds	r3, #96	; 0x60
 80017a0:	461a      	mov	r2, r3
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	431a      	orrs	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017ba:	bf00      	nop
 80017bc:	371c      	adds	r7, #28
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	615a      	str	r2, [r3, #20]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	3330      	adds	r3, #48	; 0x30
 80017fc:	461a      	mov	r2, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	4413      	add	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	f003 031f 	and.w	r3, r3, #31
 8001816:	211f      	movs	r1, #31
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	401a      	ands	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	0e9b      	lsrs	r3, r3, #26
 8001824:	f003 011f 	and.w	r1, r3, #31
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	f003 031f 	and.w	r3, r3, #31
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	431a      	orrs	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001838:	bf00      	nop
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3314      	adds	r3, #20
 8001854:	461a      	mov	r2, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	0e5b      	lsrs	r3, r3, #25
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	4413      	add	r3, r2
 8001862:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	0d1b      	lsrs	r3, r3, #20
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	2107      	movs	r1, #7
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	401a      	ands	r2, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	0d1b      	lsrs	r3, r3, #20
 800187e:	f003 031f 	and.w	r3, r3, #31
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	431a      	orrs	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800188e:	bf00      	nop
 8001890:	371c      	adds	r7, #28
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018b4:	43db      	mvns	r3, r3
 80018b6:	401a      	ands	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0318 	and.w	r3, r3, #24
 80018be:	4908      	ldr	r1, [pc, #32]	; (80018e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018c0:	40d9      	lsrs	r1, r3
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	400b      	ands	r3, r1
 80018c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ca:	431a      	orrs	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	0007ffff 	.word	0x0007ffff

080018e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6093      	str	r3, [r2, #8]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800191c:	d101      	bne.n	8001922 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001940:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001944:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800196c:	d101      	bne.n	8001972 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <LL_ADC_IsEnabled+0x18>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <LL_ADC_IsEnabled+0x1a>
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d101      	bne.n	80019be <LL_ADC_REG_IsConversionOngoing+0x18>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d101      	bne.n	80019e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e12e      	b.n	8001c6c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d109      	bne.n	8001a30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff faab 	bl	8000f78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff67 	bl	8001908 <LL_ADC_IsDeepPowerDownEnabled>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d004      	beq.n	8001a4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff4d 	bl	80018e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ff82 	bl	8001958 <LL_ADC_IsInternalRegulatorEnabled>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d115      	bne.n	8001a86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff66 	bl	8001930 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a64:	4b83      	ldr	r3, [pc, #524]	; (8001c74 <HAL_ADC_Init+0x280>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	099b      	lsrs	r3, r3, #6
 8001a6a:	4a83      	ldr	r2, [pc, #524]	; (8001c78 <HAL_ADC_Init+0x284>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	099b      	lsrs	r3, r3, #6
 8001a72:	3301      	adds	r3, #1
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a78:	e002      	b.n	8001a80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f9      	bne.n	8001a7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ff64 	bl	8001958 <LL_ADC_IsInternalRegulatorEnabled>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10d      	bne.n	8001ab2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	f043 0210 	orr.w	r2, r3, #16
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa6:	f043 0201 	orr.w	r2, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff75 	bl	80019a6 <LL_ADC_REG_IsConversionOngoing>
 8001abc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f040 80c7 	bne.w	8001c5a <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 80c3 	bne.w	8001c5a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001adc:	f043 0202 	orr.w	r2, r3, #2
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff49 	bl	8001980 <LL_ADC_IsEnabled>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d110      	bne.n	8001b16 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001af4:	4861      	ldr	r0, [pc, #388]	; (8001c7c <HAL_ADC_Init+0x288>)
 8001af6:	f7ff ff43 	bl	8001980 <LL_ADC_IsEnabled>
 8001afa:	4604      	mov	r4, r0
 8001afc:	4860      	ldr	r0, [pc, #384]	; (8001c80 <HAL_ADC_Init+0x28c>)
 8001afe:	f7ff ff3f 	bl	8001980 <LL_ADC_IsEnabled>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4323      	orrs	r3, r4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d105      	bne.n	8001b16 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	485c      	ldr	r0, [pc, #368]	; (8001c84 <HAL_ADC_Init+0x290>)
 8001b12:	f7ff fdcf 	bl	80016b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7e5b      	ldrb	r3, [r3, #25]
 8001b1a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b20:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b26:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b2c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b34:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d106      	bne.n	8001b52 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	045b      	lsls	r3, r3, #17
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <HAL_ADC_Init+0x294>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	69b9      	ldr	r1, [r7, #24]
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff20 	bl	80019cc <LL_ADC_INJ_IsConversionOngoing>
 8001b8c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d140      	bne.n	8001c16 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d13d      	bne.n	8001c16 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7e1b      	ldrb	r3, [r3, #24]
 8001ba2:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ba4:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bac:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bbc:	f023 0306 	bic.w	r3, r3, #6
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	69b9      	ldr	r1, [r7, #24]
 8001bc6:	430b      	orrs	r3, r1
 8001bc8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d118      	bne.n	8001c06 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bde:	f023 0304 	bic.w	r3, r3, #4
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bea:	4311      	orrs	r1, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bf0:	4311      	orrs	r1, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	611a      	str	r2, [r3, #16]
 8001c04:	e007      	b.n	8001c16 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0201 	bic.w	r2, r2, #1
 8001c14:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d10c      	bne.n	8001c38 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	f023 010f 	bic.w	r1, r3, #15
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	1e5a      	subs	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	631a      	str	r2, [r3, #48]	; 0x30
 8001c36:	e007      	b.n	8001c48 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 020f 	bic.w	r2, r2, #15
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	f023 0303 	bic.w	r3, r3, #3
 8001c50:	f043 0201 	orr.w	r2, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	659a      	str	r2, [r3, #88]	; 0x58
 8001c58:	e007      	b.n	8001c6a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5e:	f043 0210 	orr.w	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3724      	adds	r7, #36	; 0x24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}
 8001c74:	20000000 	.word	0x20000000
 8001c78:	053e2d63 	.word	0x053e2d63
 8001c7c:	42028000 	.word	0x42028000
 8001c80:	42028100 	.word	0x42028100
 8001c84:	42028300 	.word	0x42028300
 8001c88:	fff0c007 	.word	0xfff0c007

08001c8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b0b7      	sub	sp, #220	; 0xdc
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x22>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e3c1      	b.n	8002432 <HAL_ADC_ConfigChannel+0x7a6>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fe73 	bl	80019a6 <LL_ADC_REG_IsConversionOngoing>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f040 83a6 	bne.w	8002414 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f7ff fd89 	bl	80017ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fe61 	bl	80019a6 <LL_ADC_REG_IsConversionOngoing>
 8001ce4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fe6d 	bl	80019cc <LL_ADC_INJ_IsConversionOngoing>
 8001cf2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cf6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f040 81c1 	bne.w	8002082 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f040 81bc 	bne.w	8002082 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d12:	d10f      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7ff fd90 	bl	8001844 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fd4a 	bl	80017c6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001d32:	e00e      	b.n	8001d52 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6819      	ldr	r1, [r3, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	461a      	mov	r2, r3
 8001d42:	f7ff fd7f 	bl	8001844 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fd3a 	bl	80017c6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	08db      	lsrs	r3, r3, #3
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d00a      	beq.n	8001d8a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6919      	ldr	r1, [r3, #16]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d84:	f7ff fcca 	bl	800171c <LL_ADC_SetOffset>
 8001d88:	e17b      	b.n	8002082 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fce7 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10a      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x12a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fcdc 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8001dac:	4603      	mov	r3, r0
 8001dae:	0e9b      	lsrs	r3, r3, #26
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	e01e      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x168>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fcd1 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ddc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001de4:	2320      	movs	r3, #32
 8001de6:	e004      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001de8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x180>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	0e9b      	lsrs	r3, r3, #26
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	e018      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x1b2>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001e30:	2320      	movs	r3, #32
 8001e32:	e004      	b.n	8001e3e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001e34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e38:	fab3 f383 	clz	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d106      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fca0 	bl	8001790 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2101      	movs	r1, #1
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fc84 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10a      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x1f0>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fc79 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	0e9b      	lsrs	r3, r3, #26
 8001e76:	f003 021f 	and.w	r2, r3, #31
 8001e7a:	e01e      	b.n	8001eba <HAL_ADC_ConfigChannel+0x22e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fc6e 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001eaa:	2320      	movs	r3, #32
 8001eac:	e004      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001eae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d105      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x246>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	0e9b      	lsrs	r3, r3, #26
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	e018      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x278>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001eee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	e004      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001efa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d106      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2101      	movs	r1, #1
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fc3d 	bl	8001790 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2102      	movs	r1, #2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fc21 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10a      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x2b6>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2102      	movs	r1, #2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fc16 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	0e9b      	lsrs	r3, r3, #26
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	e01e      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x2f4>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2102      	movs	r1, #2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fc0b 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001f70:	2320      	movs	r3, #32
 8001f72:	e004      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001f74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d105      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x30c>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0e9b      	lsrs	r3, r3, #26
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	e016      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x33a>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fa4:	fa93 f3a3 	rbit	r3, r3
 8001fa8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001faa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001fb8:	2320      	movs	r3, #32
 8001fba:	e004      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001fbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d106      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fbdc 	bl	8001790 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2103      	movs	r1, #3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fbc0 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10a      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x378>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2103      	movs	r1, #3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fbb5 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	0e9b      	lsrs	r3, r3, #26
 8001ffe:	f003 021f 	and.w	r2, r3, #31
 8002002:	e017      	b.n	8002034 <HAL_ADC_ConfigChannel+0x3a8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2103      	movs	r1, #3
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fbaa 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800201c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800201e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8002026:	2320      	movs	r3, #32
 8002028:	e003      	b.n	8002032 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800202a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203c:	2b00      	cmp	r3, #0
 800203e:	d105      	bne.n	800204c <HAL_ADC_ConfigChannel+0x3c0>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	0e9b      	lsrs	r3, r3, #26
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	e011      	b.n	8002070 <HAL_ADC_ConfigChannel+0x3e4>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800205a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800205c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800205e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002064:	2320      	movs	r3, #32
 8002066:	e003      	b.n	8002070 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002070:	429a      	cmp	r2, r3
 8002072:	d106      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2200      	movs	r2, #0
 800207a:	2103      	movs	r1, #3
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fb87 	bl	8001790 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff fc7a 	bl	8001980 <LL_ADC_IsEnabled>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 81c9 	bne.w	8002426 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6819      	ldr	r1, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	461a      	mov	r2, r3
 80020a2:	f7ff fbfb 	bl	800189c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	4a8f      	ldr	r2, [pc, #572]	; (80022e8 <HAL_ADC_ConfigChannel+0x65c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	f040 8131 	bne.w	8002314 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10b      	bne.n	80020da <HAL_ADC_ConfigChannel+0x44e>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	0e9b      	lsrs	r3, r3, #26
 80020c8:	3301      	adds	r3, #1
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	2b09      	cmp	r3, #9
 80020d0:	bf94      	ite	ls
 80020d2:	2301      	movls	r3, #1
 80020d4:	2300      	movhi	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	e019      	b.n	800210e <HAL_ADC_ConfigChannel+0x482>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80020e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020ea:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80020ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 80020f2:	2320      	movs	r3, #32
 80020f4:	e003      	b.n	80020fe <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 80020f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	2b09      	cmp	r3, #9
 8002106:	bf94      	ite	ls
 8002108:	2301      	movls	r3, #1
 800210a:	2300      	movhi	r3, #0
 800210c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800210e:	2b00      	cmp	r3, #0
 8002110:	d079      	beq.n	8002206 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <HAL_ADC_ConfigChannel+0x4a2>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	0e9b      	lsrs	r3, r3, #26
 8002124:	3301      	adds	r3, #1
 8002126:	069b      	lsls	r3, r3, #26
 8002128:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800212c:	e015      	b.n	800215a <HAL_ADC_ConfigChannel+0x4ce>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800213c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800213e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002146:	2320      	movs	r3, #32
 8002148:	e003      	b.n	8002152 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800214a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800214c:	fab3 f383 	clz	r3, r3
 8002150:	b2db      	uxtb	r3, r3
 8002152:	3301      	adds	r3, #1
 8002154:	069b      	lsls	r3, r3, #26
 8002156:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_ADC_ConfigChannel+0x4ee>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	0e9b      	lsrs	r3, r3, #26
 800216c:	3301      	adds	r3, #1
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	2101      	movs	r1, #1
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	e017      	b.n	80021aa <HAL_ADC_ConfigChannel+0x51e>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800218a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800218c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002192:	2320      	movs	r3, #32
 8002194:	e003      	b.n	800219e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002198:	fab3 f383 	clz	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	3301      	adds	r3, #1
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	ea42 0103 	orr.w	r1, r2, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x544>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	0e9b      	lsrs	r3, r3, #26
 80021c0:	3301      	adds	r3, #1
 80021c2:	f003 021f 	and.w	r2, r3, #31
 80021c6:	4613      	mov	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4413      	add	r3, r2
 80021cc:	051b      	lsls	r3, r3, #20
 80021ce:	e018      	b.n	8002202 <HAL_ADC_ConfigChannel+0x576>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80021de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80021e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80021e8:	2320      	movs	r3, #32
 80021ea:	e003      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80021ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	f003 021f 	and.w	r2, r3, #31
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002202:	430b      	orrs	r3, r1
 8002204:	e081      	b.n	800230a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220e:	2b00      	cmp	r3, #0
 8002210:	d107      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x596>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	0e9b      	lsrs	r3, r3, #26
 8002218:	3301      	adds	r3, #1
 800221a:	069b      	lsls	r3, r3, #26
 800221c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002220:	e015      	b.n	800224e <HAL_ADC_ConfigChannel+0x5c2>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002232:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800223a:	2320      	movs	r3, #32
 800223c:	e003      	b.n	8002246 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800223e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	3301      	adds	r3, #1
 8002248:	069b      	lsls	r3, r3, #26
 800224a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_ADC_ConfigChannel+0x5e2>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	0e9b      	lsrs	r3, r3, #26
 8002260:	3301      	adds	r3, #1
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	e017      	b.n	800229e <HAL_ADC_ConfigChannel+0x612>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	61fb      	str	r3, [r7, #28]
  return result;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002286:	2320      	movs	r3, #32
 8002288:	e003      	b.n	8002292 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	fab3 f383 	clz	r3, r3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	3301      	adds	r3, #1
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	2101      	movs	r1, #1
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	ea42 0103 	orr.w	r1, r2, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10d      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x63e>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	0e9b      	lsrs	r3, r3, #26
 80022b4:	3301      	adds	r3, #1
 80022b6:	f003 021f 	and.w	r2, r3, #31
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	3b1e      	subs	r3, #30
 80022c2:	051b      	lsls	r3, r3, #20
 80022c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022c8:	e01e      	b.n	8002308 <HAL_ADC_ConfigChannel+0x67c>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	613b      	str	r3, [r7, #16]
  return result;
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d104      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80022e2:	2320      	movs	r3, #32
 80022e4:	e006      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x668>
 80022e6:	bf00      	nop
 80022e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	f003 021f 	and.w	r2, r3, #31
 80022fa:	4613      	mov	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4413      	add	r3, r2
 8002300:	3b1e      	subs	r3, #30
 8002302:	051b      	lsls	r3, r3, #20
 8002304:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002308:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800230e:	4619      	mov	r1, r3
 8002310:	f7ff fa98 	bl	8001844 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b48      	ldr	r3, [pc, #288]	; (800243c <HAL_ADC_ConfigChannel+0x7b0>)
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8082 	beq.w	8002426 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002322:	4847      	ldr	r0, [pc, #284]	; (8002440 <HAL_ADC_ConfigChannel+0x7b4>)
 8002324:	f7ff f9ec 	bl	8001700 <LL_ADC_GetCommonPathInternalCh>
 8002328:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800232c:	4845      	ldr	r0, [pc, #276]	; (8002444 <HAL_ADC_ConfigChannel+0x7b8>)
 800232e:	f7ff fb27 	bl	8001980 <LL_ADC_IsEnabled>
 8002332:	4604      	mov	r4, r0
 8002334:	4844      	ldr	r0, [pc, #272]	; (8002448 <HAL_ADC_ConfigChannel+0x7bc>)
 8002336:	f7ff fb23 	bl	8001980 <LL_ADC_IsEnabled>
 800233a:	4603      	mov	r3, r0
 800233c:	4323      	orrs	r3, r4
 800233e:	2b00      	cmp	r3, #0
 8002340:	d15e      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a41      	ldr	r2, [pc, #260]	; (800244c <HAL_ADC_ConfigChannel+0x7c0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d127      	bne.n	800239c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800234c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d121      	bne.n	800239c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a39      	ldr	r2, [pc, #228]	; (8002444 <HAL_ADC_ConfigChannel+0x7b8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d161      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002362:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002366:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800236a:	4619      	mov	r1, r3
 800236c:	4834      	ldr	r0, [pc, #208]	; (8002440 <HAL_ADC_ConfigChannel+0x7b4>)
 800236e:	f7ff f9b4 	bl	80016da <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002372:	4b37      	ldr	r3, [pc, #220]	; (8002450 <HAL_ADC_ConfigChannel+0x7c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	099b      	lsrs	r3, r3, #6
 8002378:	4a36      	ldr	r2, [pc, #216]	; (8002454 <HAL_ADC_ConfigChannel+0x7c8>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	099b      	lsrs	r3, r3, #6
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800238a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800238c:	e002      	b.n	8002394 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3b01      	subs	r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f9      	bne.n	800238e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800239a:	e044      	b.n	8002426 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2d      	ldr	r2, [pc, #180]	; (8002458 <HAL_ADC_ConfigChannel+0x7cc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d113      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10d      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a23      	ldr	r2, [pc, #140]	; (8002444 <HAL_ADC_ConfigChannel+0x7b8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d134      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c4:	4619      	mov	r1, r3
 80023c6:	481e      	ldr	r0, [pc, #120]	; (8002440 <HAL_ADC_ConfigChannel+0x7b4>)
 80023c8:	f7ff f987 	bl	80016da <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023cc:	e02b      	b.n	8002426 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a22      	ldr	r2, [pc, #136]	; (800245c <HAL_ADC_ConfigChannel+0x7d0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d126      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d120      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a16      	ldr	r2, [pc, #88]	; (8002444 <HAL_ADC_ConfigChannel+0x7b8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d11b      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023f6:	4619      	mov	r1, r3
 80023f8:	4811      	ldr	r0, [pc, #68]	; (8002440 <HAL_ADC_ConfigChannel+0x7b4>)
 80023fa:	f7ff f96e 	bl	80016da <LL_ADC_SetCommonPathInternalCh>
 80023fe:	e012      	b.n	8002426 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	f043 0220 	orr.w	r2, r3, #32
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002412:	e008      	b.n	8002426 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800242e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002432:	4618      	mov	r0, r3
 8002434:	37dc      	adds	r7, #220	; 0xdc
 8002436:	46bd      	mov	sp, r7
 8002438:	bd90      	pop	{r4, r7, pc}
 800243a:	bf00      	nop
 800243c:	80080000 	.word	0x80080000
 8002440:	42028300 	.word	0x42028300
 8002444:	42028000 	.word	0x42028000
 8002448:	42028100 	.word	0x42028100
 800244c:	c7520000 	.word	0xc7520000
 8002450:	20000000 	.word	0x20000000
 8002454:	053e2d63 	.word	0x053e2d63
 8002458:	cb840000 	.word	0xcb840000
 800245c:	80000001 	.word	0x80000001

08002460 <LL_ADC_IsEnabled>:
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <LL_ADC_IsEnabled+0x18>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <LL_ADC_IsEnabled+0x1a>
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <LL_ADC_REG_IsConversionOngoing>:
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b04      	cmp	r3, #4
 8002498:	d101      	bne.n	800249e <LL_ADC_REG_IsConversionOngoing+0x18>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b0a1      	sub	sp, #132	; 0x84
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e089      	b.n	80025de <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80024d2:	2300      	movs	r3, #0
 80024d4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80024d6:	2300      	movs	r3, #0
 80024d8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a42      	ldr	r2, [pc, #264]	; (80025e8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d102      	bne.n	80024ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80024e4:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	e001      	b.n	80024ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10b      	bne.n	800250c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	f043 0220 	orr.w	r2, r3, #32
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e068      	b.n	80025de <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ffb9 	bl	8002486 <LL_ADC_REG_IsConversionOngoing>
 8002514:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff ffb3 	bl	8002486 <LL_ADC_REG_IsConversionOngoing>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d14a      	bne.n	80025bc <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002528:	2b00      	cmp	r3, #0
 800252a:	d147      	bne.n	80025bc <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800252c:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800252e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d027      	beq.n	8002588 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800254a:	035b      	lsls	r3, r3, #13
 800254c:	430b      	orrs	r3, r1
 800254e:	431a      	orrs	r2, r3
 8002550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002552:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002554:	4824      	ldr	r0, [pc, #144]	; (80025e8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002556:	f7ff ff83 	bl	8002460 <LL_ADC_IsEnabled>
 800255a:	4604      	mov	r4, r0
 800255c:	4823      	ldr	r0, [pc, #140]	; (80025ec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800255e:	f7ff ff7f 	bl	8002460 <LL_ADC_IsEnabled>
 8002562:	4603      	mov	r3, r0
 8002564:	4323      	orrs	r3, r4
 8002566:	2b00      	cmp	r3, #0
 8002568:	d132      	bne.n	80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800256a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002572:	f023 030f 	bic.w	r3, r3, #15
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	6811      	ldr	r1, [r2, #0]
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	6892      	ldr	r2, [r2, #8]
 800257e:	430a      	orrs	r2, r1
 8002580:	431a      	orrs	r2, r3
 8002582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002584:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002586:	e023      	b.n	80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002588:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002592:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002594:	4814      	ldr	r0, [pc, #80]	; (80025e8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002596:	f7ff ff63 	bl	8002460 <LL_ADC_IsEnabled>
 800259a:	4604      	mov	r4, r0
 800259c:	4813      	ldr	r0, [pc, #76]	; (80025ec <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800259e:	f7ff ff5f 	bl	8002460 <LL_ADC_IsEnabled>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4323      	orrs	r3, r4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d112      	bne.n	80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025b2:	f023 030f 	bic.w	r3, r3, #15
 80025b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80025b8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025ba:	e009      	b.n	80025d0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	f043 0220 	orr.w	r2, r3, #32
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80025ce:	e000      	b.n	80025d2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80025da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3784      	adds	r7, #132	; 0x84
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd90      	pop	{r4, r7, pc}
 80025e6:	bf00      	nop
 80025e8:	42028000 	.word	0x42028000
 80025ec:	42028100 	.word	0x42028100
 80025f0:	42028300 	.word	0x42028300

080025f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002610:	4013      	ands	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800261c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	60d3      	str	r3, [r2, #12]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <__NVIC_GetPriorityGrouping+0x18>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	f003 0307 	and.w	r3, r3, #7
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	db0b      	blt.n	8002682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	4907      	ldr	r1, [pc, #28]	; (8002690 <__NVIC_EnableIRQ+0x38>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2001      	movs	r0, #1
 800267a:	fa00 f202 	lsl.w	r2, r0, r2
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000e100 	.word	0xe000e100

08002694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	db0a      	blt.n	80026be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	490c      	ldr	r1, [pc, #48]	; (80026e0 <__NVIC_SetPriority+0x4c>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	0152      	lsls	r2, r2, #5
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	440b      	add	r3, r1
 80026b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026bc:	e00a      	b.n	80026d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4908      	ldr	r1, [pc, #32]	; (80026e4 <__NVIC_SetPriority+0x50>)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	3b04      	subs	r3, #4
 80026cc:	0152      	lsls	r2, r2, #5
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	440b      	add	r3, r1
 80026d2:	761a      	strb	r2, [r3, #24]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000e100 	.word	0xe000e100
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f1c3 0307 	rsb	r3, r3, #7
 8002702:	2b03      	cmp	r3, #3
 8002704:	bf28      	it	cs
 8002706:	2303      	movcs	r3, #3
 8002708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3303      	adds	r3, #3
 800270e:	2b06      	cmp	r3, #6
 8002710:	d902      	bls.n	8002718 <NVIC_EncodePriority+0x30>
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3b04      	subs	r3, #4
 8002716:	e000      	b.n	800271a <NVIC_EncodePriority+0x32>
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	f04f 32ff 	mov.w	r2, #4294967295
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	401a      	ands	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002730:	f04f 31ff 	mov.w	r1, #4294967295
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	43d9      	mvns	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	4313      	orrs	r3, r2
         );
}
 8002742:	4618      	mov	r0, r3
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002760:	d301      	bcc.n	8002766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002762:	2301      	movs	r3, #1
 8002764:	e00f      	b.n	8002786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <SysTick_Config+0x40>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276e:	2107      	movs	r1, #7
 8002770:	f04f 30ff 	mov.w	r0, #4294967295
 8002774:	f7ff ff8e 	bl	8002694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <SysTick_Config+0x40>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277e:	4b04      	ldr	r3, [pc, #16]	; (8002790 <SysTick_Config+0x40>)
 8002780:	2207      	movs	r2, #7
 8002782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	e000e010 	.word	0xe000e010

08002794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ff29 	bl	80025f4 <__NVIC_SetPriorityGrouping>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027b8:	f7ff ff40 	bl	800263c <__NVIC_GetPriorityGrouping>
 80027bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	6978      	ldr	r0, [r7, #20]
 80027c4:	f7ff ff90 	bl	80026e8 <NVIC_EncodePriority>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff5f 	bl	8002694 <__NVIC_SetPriority>
}
 80027d6:	bf00      	nop
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	4603      	mov	r3, r0
 80027e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff33 	bl	8002658 <__NVIC_EnableIRQ>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffa4 	bl	8002750 <SysTick_Config>
 8002808:	4603      	mov	r3, r0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e08d      	b.n	8002942 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_DMA_Init+0x138>)
 800282e:	429a      	cmp	r2, r3
 8002830:	d80f      	bhi.n	8002852 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	4b45      	ldr	r3, [pc, #276]	; (8002950 <HAL_DMA_Init+0x13c>)
 800283a:	4413      	add	r3, r2
 800283c:	4a45      	ldr	r2, [pc, #276]	; (8002954 <HAL_DMA_Init+0x140>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	009a      	lsls	r2, r3, #2
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a42      	ldr	r2, [pc, #264]	; (8002958 <HAL_DMA_Init+0x144>)
 800284e:	649a      	str	r2, [r3, #72]	; 0x48
 8002850:	e00e      	b.n	8002870 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	4b40      	ldr	r3, [pc, #256]	; (800295c <HAL_DMA_Init+0x148>)
 800285a:	4413      	add	r3, r2
 800285c:	4a3d      	ldr	r2, [pc, #244]	; (8002954 <HAL_DMA_Init+0x140>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	009a      	lsls	r2, r3, #2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a3c      	ldr	r2, [pc, #240]	; (8002960 <HAL_DMA_Init+0x14c>)
 800286e:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8002886:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800288a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002894:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fa00 	bl	8002cc8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028d0:	d102      	bne.n	80028d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80028ec:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d010      	beq.n	8002918 <HAL_DMA_Init+0x104>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d80c      	bhi.n	8002918 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fa20 	bl	8002d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	e008      	b.n	800292a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40020407 	.word	0x40020407
 8002950:	bffdfff8 	.word	0xbffdfff8
 8002954:	cccccccd 	.word	0xcccccccd
 8002958:	40020000 	.word	0x40020000
 800295c:	bffdfbf8 	.word	0xbffdfbf8
 8002960:	40020400 	.word	0x40020400

08002964 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_DMA_Start+0x20>
 8002980:	2302      	movs	r3, #2
 8002982:	e02e      	b.n	80029e2 <HAL_DMA_Start+0x7e>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d11d      	bne.n	80029d4 <HAL_DMA_Start+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f944 	bl	8002c4a <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0201 	orr.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	e005      	b.n	80029e0 <HAL_DMA_Start+0x7c>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    status = HAL_BUSY;
 80029dc:	2302      	movs	r3, #2
 80029de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a06:	f003 031c 	and.w	r3, r3, #28
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d053      	beq.n	8002abe <HAL_DMA_IRQHandler+0xd4>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d04e      	beq.n	8002abe <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d024      	beq.n	8002a78 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	f003 021c 	and.w	r2, r3, #28
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3a:	2104      	movs	r1, #4
 8002a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a40:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d109      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80c0 	beq.w	8002bda <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002a62:	e0ba      	b.n	8002bda <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80b6 	beq.w	8002bda <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002a76:	e0b0      	b.n	8002bda <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d107      	bne.n	8002a96 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0204 	bic.w	r2, r2, #4
 8002a94:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	f003 021c 	and.w	r2, r3, #28
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa2:	2104      	movs	r1, #4
 8002aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 8093 	beq.w	8002bda <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002abc:	e08d      	b.n	8002bda <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac2:	f003 031c 	and.w	r3, r3, #28
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d04e      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x186>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d049      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d018      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d108      	bne.n	8002b0a <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d06e      	beq.n	8002bde <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002b08:	e069      	b.n	8002bde <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d065      	beq.n	8002bde <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002b1a:	e060      	b.n	8002bde <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10b      	bne.n	8002b42 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 020a 	bic.w	r2, r2, #10
 8002b38:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	f003 021c 	and.w	r2, r3, #28
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4e:	2102      	movs	r1, #2
 8002b50:	fa01 f202 	lsl.w	r2, r1, r2
 8002b54:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d03b      	beq.n	8002bde <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002b6e:	e036      	b.n	8002bde <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b74:	f003 031c 	and.w	r3, r3, #28
 8002b78:	2208      	movs	r2, #8
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d02e      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x1f8>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d029      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 020e 	bic.w	r2, r2, #14
 8002b9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba2:	f003 021c 	and.w	r2, r3, #28
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002baa:	2101      	movs	r1, #1
 8002bac:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002bd8:	e002      	b.n	8002be0 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002bda:	bf00      	nop
 8002bdc:	e000      	b.n	8002be0 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002bde:	bf00      	nop
  return;
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
}
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	72fb      	strb	r3, [r7, #11]
    return status;
 8002c02:	7afb      	ldrb	r3, [r7, #11]
 8002c04:	e01b      	b.n	8002c3e <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00d      	beq.n	8002c34 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e003      	b.n	8002c34 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c32:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	601a      	str	r2, [r3, #0]

  return status;
 8002c3c:	7afb      	ldrb	r3, [r7, #11]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002c60:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d004      	beq.n	8002c74 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002c72:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c78:	f003 021c 	and.w	r2, r3, #28
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c80:	2101      	movs	r1, #1
 8002c82:	fa01 f202 	lsl.w	r2, r1, r2
 8002c86:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d108      	bne.n	8002caa <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8002ca8:	e007      	b.n	8002cba <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	60da      	str	r2, [r3, #12]
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d80a      	bhi.n	8002cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ce8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6513      	str	r3, [r2, #80]	; 0x50
 8002cf0:	e007      	b.n	8002d02 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	009a      	lsls	r2, r3, #2
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002cfc:	4413      	add	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	3b08      	subs	r3, #8
 8002d0a:	4a0c      	ldr	r2, [pc, #48]	; (8002d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2201      	movs	r2, #1
 8002d22:	409a      	lsls	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	40020407 	.word	0x40020407
 8002d38:	40020820 	.word	0x40020820
 8002d3c:	cccccccd 	.word	0xcccccccd
 8002d40:	40020880 	.word	0x40020880

08002d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002d66:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2201      	movs	r2, #1
 8002d72:	409a      	lsls	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	1000823f 	.word	0x1000823f
 8002d88:	40020940 	.word	0x40020940

08002d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d9a:	e158      	b.n	800304e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	2101      	movs	r1, #1
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	4013      	ands	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 814a 	beq.w	8003048 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d005      	beq.n	8002dcc <HAL_GPIO_Init+0x40>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d130      	bne.n	8002e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e02:	2201      	movs	r2, #1
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	f003 0201 	and.w	r2, r3, #1
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d017      	beq.n	8002e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2203      	movs	r2, #3
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d123      	bne.n	8002ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	08da      	lsrs	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3208      	adds	r2, #8
 8002e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	08da      	lsrs	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3208      	adds	r2, #8
 8002eb8:	6939      	ldr	r1, [r7, #16]
 8002eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	2203      	movs	r2, #3
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0203 	and.w	r2, r3, #3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80a4 	beq.w	8003048 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002f00:	4a5a      	ldr	r2, [pc, #360]	; (800306c <HAL_GPIO_Init+0x2e0>)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	089b      	lsrs	r3, r3, #2
 8002f06:	3318      	adds	r3, #24
 8002f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	220f      	movs	r2, #15
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4013      	ands	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a52      	ldr	r2, [pc, #328]	; (8003070 <HAL_GPIO_Init+0x2e4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d025      	beq.n	8002f78 <HAL_GPIO_Init+0x1ec>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a51      	ldr	r2, [pc, #324]	; (8003074 <HAL_GPIO_Init+0x2e8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d01f      	beq.n	8002f74 <HAL_GPIO_Init+0x1e8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a50      	ldr	r2, [pc, #320]	; (8003078 <HAL_GPIO_Init+0x2ec>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d019      	beq.n	8002f70 <HAL_GPIO_Init+0x1e4>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a4f      	ldr	r2, [pc, #316]	; (800307c <HAL_GPIO_Init+0x2f0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d013      	beq.n	8002f6c <HAL_GPIO_Init+0x1e0>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a4e      	ldr	r2, [pc, #312]	; (8003080 <HAL_GPIO_Init+0x2f4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d00d      	beq.n	8002f68 <HAL_GPIO_Init+0x1dc>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a4d      	ldr	r2, [pc, #308]	; (8003084 <HAL_GPIO_Init+0x2f8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d007      	beq.n	8002f64 <HAL_GPIO_Init+0x1d8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a4c      	ldr	r2, [pc, #304]	; (8003088 <HAL_GPIO_Init+0x2fc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d101      	bne.n	8002f60 <HAL_GPIO_Init+0x1d4>
 8002f5c:	2306      	movs	r3, #6
 8002f5e:	e00c      	b.n	8002f7a <HAL_GPIO_Init+0x1ee>
 8002f60:	2307      	movs	r3, #7
 8002f62:	e00a      	b.n	8002f7a <HAL_GPIO_Init+0x1ee>
 8002f64:	2305      	movs	r3, #5
 8002f66:	e008      	b.n	8002f7a <HAL_GPIO_Init+0x1ee>
 8002f68:	2304      	movs	r3, #4
 8002f6a:	e006      	b.n	8002f7a <HAL_GPIO_Init+0x1ee>
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e004      	b.n	8002f7a <HAL_GPIO_Init+0x1ee>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e002      	b.n	8002f7a <HAL_GPIO_Init+0x1ee>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <HAL_GPIO_Init+0x1ee>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	f002 0203 	and.w	r2, r2, #3
 8002f80:	00d2      	lsls	r2, r2, #3
 8002f82:	4093      	lsls	r3, r2
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002f8a:	4938      	ldr	r1, [pc, #224]	; (800306c <HAL_GPIO_Init+0x2e0>)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	089b      	lsrs	r3, r3, #2
 8002f90:	3318      	adds	r3, #24
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f98:	4b34      	ldr	r3, [pc, #208]	; (800306c <HAL_GPIO_Init+0x2e0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fbc:	4a2b      	ldr	r2, [pc, #172]	; (800306c <HAL_GPIO_Init+0x2e0>)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002fc2:	4b2a      	ldr	r3, [pc, #168]	; (800306c <HAL_GPIO_Init+0x2e0>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fe6:	4a21      	ldr	r2, [pc, #132]	; (800306c <HAL_GPIO_Init+0x2e0>)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <HAL_GPIO_Init+0x2e0>)
 8002fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003012:	4a16      	ldr	r2, [pc, #88]	; (800306c <HAL_GPIO_Init+0x2e0>)
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 800301a:	4b14      	ldr	r3, [pc, #80]	; (800306c <HAL_GPIO_Init+0x2e0>)
 800301c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	43db      	mvns	r3, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003040:	4a0a      	ldr	r2, [pc, #40]	; (800306c <HAL_GPIO_Init+0x2e0>)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	3301      	adds	r3, #1
 800304c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	f47f ae9f 	bne.w	8002d9c <HAL_GPIO_Init+0x10>
  }
}
 800305e:	bf00      	nop
 8003060:	bf00      	nop
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	4002f400 	.word	0x4002f400
 8003070:	42020000 	.word	0x42020000
 8003074:	42020400 	.word	0x42020400
 8003078:	42020800 	.word	0x42020800
 800307c:	42020c00 	.word	0x42020c00
 8003080:	42021000 	.word	0x42021000
 8003084:	42021400 	.word	0x42021400
 8003088:	42021800 	.word	0x42021800

0800308c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	807b      	strh	r3, [r7, #2]
 8003098:	4613      	mov	r3, r2
 800309a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800309c:	787b      	ldrb	r3, [r7, #1]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030a2:	887a      	ldrh	r2, [r7, #2]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030a8:	e002      	b.n	80030b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030aa:	887a      	ldrh	r2, [r7, #2]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	e007      	b.n	80030ea <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80030da:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 0204 	bic.w	r2, r3, #4
 80030e2:	4905      	ldr	r1, [pc, #20]	; (80030f8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	40030400 	.word	0x40030400

080030fc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_ICACHE_Enable+0x1c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a04      	ldr	r2, [pc, #16]	; (8003118 <HAL_ICACHE_Enable+0x1c>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	40030400 	.word	0x40030400

0800311c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e0c0      	b.n	80032b0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fe f89e 	bl	8001284 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2203      	movs	r2, #3
 800314c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f003 fee3 	bl	8006f20 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	e03e      	b.n	80031de <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	3311      	adds	r3, #17
 8003170:	2201      	movs	r2, #1
 8003172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003174:	7bfa      	ldrb	r2, [r7, #15]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	440b      	add	r3, r1
 8003182:	3310      	adds	r3, #16
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003188:	7bfa      	ldrb	r2, [r7, #15]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	440b      	add	r3, r1
 8003196:	3313      	adds	r3, #19
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	440b      	add	r3, r1
 80031aa:	3320      	adds	r3, #32
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	3324      	adds	r3, #36	; 0x24
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	440b      	add	r3, r1
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	3301      	adds	r3, #1
 80031dc:	73fb      	strb	r3, [r7, #15]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	791b      	ldrb	r3, [r3, #4]
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d3bb      	bcc.n	8003160 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]
 80031ec:	e044      	b.n	8003278 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031ee:	7bfa      	ldrb	r2, [r7, #15]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	440b      	add	r3, r1
 80031fc:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003204:	7bfa      	ldrb	r2, [r7, #15]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	440b      	add	r3, r1
 8003212:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003216:	7bfa      	ldrb	r2, [r7, #15]
 8003218:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800321a:	7bfa      	ldrb	r2, [r7, #15]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	440b      	add	r3, r1
 8003228:	f203 1353 	addw	r3, r3, #339	; 0x153
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003230:	7bfa      	ldrb	r2, [r7, #15]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	440b      	add	r3, r1
 800323e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003246:	7bfa      	ldrb	r2, [r7, #15]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	440b      	add	r3, r1
 8003254:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	440b      	add	r3, r1
 800326a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	3301      	adds	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	791b      	ldrb	r3, [r3, #4]
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	429a      	cmp	r2, r3
 8003280:	d3b5      	bcc.n	80031ee <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3304      	adds	r3, #4
 800328a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800328e:	f003 fe62 	bl	8006f56 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7a9b      	ldrb	r3, [r3, #10]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d102      	bne.n	80032ae <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f805 	bl	80032b8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f043 0302 	orr.w	r3, r3, #2
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a04      	ldr	r2, [pc, #16]	; (8003328 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331a:	6013      	str	r3, [r2, #0]
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40007000 	.word	0x40007000

0800332c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <HAL_PWREx_GetVoltageRange+0x18>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40007000 	.word	0x40007000

08003348 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003350:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003358:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800335a:	f000 f861 	bl	8003420 <HAL_PWREx_SMPS_GetEffectiveMode>
 800335e:	4603      	mov	r3, r0
 8003360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003364:	d101      	bne.n	800336a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e03e      	b.n	80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800336a:	4b21      	ldr	r3, [pc, #132]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003376:	d101      	bne.n	800337c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e035      	b.n	80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	429a      	cmp	r2, r3
 8003382:	d101      	bne.n	8003388 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	e02f      	b.n	80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003388:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003390:	4917      	ldr	r1, [pc, #92]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003398:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	09db      	lsrs	r3, r3, #7
 80033a6:	2232      	movs	r2, #50	; 0x32
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	4a13      	ldr	r2, [pc, #76]	; (80033fc <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	08db      	lsrs	r3, r3, #3
 80033b4:	3301      	adds	r3, #1
 80033b6:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033b8:	e002      	b.n	80033c0 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3b01      	subs	r3, #1
 80033be:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033cc:	d102      	bne.n	80033d4 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f2      	bne.n	80033ba <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e0:	d101      	bne.n	80033e6 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e000      	b.n	80033e8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40007000 	.word	0x40007000
 80033f4:	20000000 	.word	0x20000000
 80033f8:	0a7c5ac5 	.word	0x0a7c5ac5
 80033fc:	cccccccd 	.word	0xcccccccd

08003400 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4a04      	ldr	r2, [pc, #16]	; (800341c <HAL_PWREx_EnableVddIO2+0x1c>)
 800340a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800340e:	6053      	str	r3, [r2, #4]
}
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40007000 	.word	0x40007000

08003420 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003426:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8003436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800343a:	607b      	str	r3, [r7, #4]
 800343c:	e00a      	b.n	8003454 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d103      	bne.n	8003450 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	e001      	b.n	8003454 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003450:	2300      	movs	r3, #0
 8003452:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003454:	687b      	ldr	r3, [r7, #4]
}
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40007000 	.word	0x40007000

08003468 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d102      	bne.n	800347c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	f000 bcc2 	b.w	8003e00 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800347c:	4b99      	ldr	r3, [pc, #612]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 030c 	and.w	r3, r3, #12
 8003484:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003486:	4b97      	ldr	r3, [pc, #604]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 80e9 	beq.w	8003670 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d006      	beq.n	80034b2 <HAL_RCC_OscConfig+0x4a>
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	2b0c      	cmp	r3, #12
 80034a8:	f040 8083 	bne.w	80035b2 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d17f      	bne.n	80035b2 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034b2:	4b8c      	ldr	r3, [pc, #560]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d006      	beq.n	80034cc <HAL_RCC_OscConfig+0x64>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	f000 bc9a 	b.w	8003e00 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034d0:	4b84      	ldr	r3, [pc, #528]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d004      	beq.n	80034e6 <HAL_RCC_OscConfig+0x7e>
 80034dc:	4b81      	ldr	r3, [pc, #516]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034e4:	e005      	b.n	80034f2 <HAL_RCC_OscConfig+0x8a>
 80034e6:	4b7f      	ldr	r3, [pc, #508]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80034e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d224      	bcs.n	8003540 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fe9c 	bl	8004238 <RCC_SetFlashLatencyFromMSIRange>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f000 bc7a 	b.w	8003e00 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800350c:	4b75      	ldr	r3, [pc, #468]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a74      	ldr	r2, [pc, #464]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003512:	f043 0308 	orr.w	r3, r3, #8
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	4b72      	ldr	r3, [pc, #456]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	496f      	ldr	r1, [pc, #444]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800352a:	4b6e      	ldr	r3, [pc, #440]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	496a      	ldr	r1, [pc, #424]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 800353a:	4313      	orrs	r3, r2
 800353c:	604b      	str	r3, [r1, #4]
 800353e:	e026      	b.n	800358e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003540:	4b68      	ldr	r3, [pc, #416]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a67      	ldr	r2, [pc, #412]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003546:	f043 0308 	orr.w	r3, r3, #8
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	4b65      	ldr	r3, [pc, #404]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	4962      	ldr	r1, [pc, #392]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800355e:	4b61      	ldr	r3, [pc, #388]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	495d      	ldr	r1, [pc, #372]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10a      	bne.n	800358e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fe5b 	bl	8004238 <RCC_SetFlashLatencyFromMSIRange>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	f000 bc39 	b.w	8003e00 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800358e:	f000 fe17 	bl	80041c0 <HAL_RCC_GetHCLKFreq>
 8003592:	4603      	mov	r3, r0
 8003594:	4a54      	ldr	r2, [pc, #336]	; (80036e8 <HAL_RCC_OscConfig+0x280>)
 8003596:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003598:	4b54      	ldr	r3, [pc, #336]	; (80036ec <HAL_RCC_OscConfig+0x284>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe f809 	bl	80015b4 <HAL_InitTick>
 80035a2:	4603      	mov	r3, r0
 80035a4:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d060      	beq.n	800366e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	f000 bc27 	b.w	8003e00 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d039      	beq.n	800362e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035ba:	4b4a      	ldr	r3, [pc, #296]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a49      	ldr	r2, [pc, #292]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035c6:	f7fe f845 	bl	8001654 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035cc:	e00f      	b.n	80035ee <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035ce:	f7fe f841 	bl	8001654 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d908      	bls.n	80035ee <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035dc:	4b41      	ldr	r3, [pc, #260]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	f000 bc09 	b.w	8003e00 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ee:	4b3d      	ldr	r3, [pc, #244]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0e9      	beq.n	80035ce <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035fa:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a39      	ldr	r2, [pc, #228]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003600:	f043 0308 	orr.w	r3, r3, #8
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	4934      	ldr	r1, [pc, #208]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003618:	4b32      	ldr	r3, [pc, #200]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	492f      	ldr	r1, [pc, #188]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]
 800362c:	e020      	b.n	8003670 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800362e:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a2c      	ldr	r2, [pc, #176]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800363a:	f7fe f80b 	bl	8001654 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003640:	e00e      	b.n	8003660 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003642:	f7fe f807 	bl	8001654 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d907      	bls.n	8003660 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003650:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e3cf      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003660:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1ea      	bne.n	8003642 <HAL_RCC_OscConfig+0x1da>
 800366c:	e000      	b.n	8003670 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800366e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d07e      	beq.n	800377a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b08      	cmp	r3, #8
 8003680:	d005      	beq.n	800368e <HAL_RCC_OscConfig+0x226>
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b0c      	cmp	r3, #12
 8003686:	d10e      	bne.n	80036a6 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2b03      	cmp	r3, #3
 800368c:	d10b      	bne.n	80036a6 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d06e      	beq.n	8003778 <HAL_RCC_OscConfig+0x310>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d16a      	bne.n	8003778 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e3ac      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ae:	d106      	bne.n	80036be <HAL_RCC_OscConfig+0x256>
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80036b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	e024      	b.n	8003708 <HAL_RCC_OscConfig+0x2a0>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c6:	d113      	bne.n	80036f0 <HAL_RCC_OscConfig+0x288>
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a05      	ldr	r2, [pc, #20]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80036ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a02      	ldr	r2, [pc, #8]	; (80036e4 <HAL_RCC_OscConfig+0x27c>)
 80036da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	e012      	b.n	8003708 <HAL_RCC_OscConfig+0x2a0>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	20000000 	.word	0x20000000
 80036ec:	20000004 	.word	0x20000004
 80036f0:	4b8b      	ldr	r3, [pc, #556]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a8a      	ldr	r2, [pc, #552]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80036f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	4b88      	ldr	r3, [pc, #544]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a87      	ldr	r2, [pc, #540]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d019      	beq.n	8003744 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fd ffa0 	bl	8001654 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003716:	e00e      	b.n	8003736 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003718:	f7fd ff9c 	bl	8001654 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	; 0x64
 8003724:	d907      	bls.n	8003736 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003726:	4b7e      	ldr	r3, [pc, #504]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e364      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003736:	4b7a      	ldr	r3, [pc, #488]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0ea      	beq.n	8003718 <HAL_RCC_OscConfig+0x2b0>
 8003742:	e01a      	b.n	800377a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fd ff86 	bl	8001654 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800374a:	e00e      	b.n	800376a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800374c:	f7fd ff82 	bl	8001654 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	; 0x64
 8003758:	d907      	bls.n	800376a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800375a:	4b71      	ldr	r3, [pc, #452]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e34a      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800376a:	4b6d      	ldr	r3, [pc, #436]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ea      	bne.n	800374c <HAL_RCC_OscConfig+0x2e4>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d06c      	beq.n	8003860 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b04      	cmp	r3, #4
 800378a:	d005      	beq.n	8003798 <HAL_RCC_OscConfig+0x330>
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b0c      	cmp	r3, #12
 8003790:	d119      	bne.n	80037c6 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d116      	bne.n	80037c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003798:	4b61      	ldr	r3, [pc, #388]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_RCC_OscConfig+0x348>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e327      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b0:	4b5b      	ldr	r3, [pc, #364]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	061b      	lsls	r3, r3, #24
 80037be:	4958      	ldr	r1, [pc, #352]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037c4:	e04c      	b.n	8003860 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d029      	beq.n	8003822 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ce:	4b54      	ldr	r3, [pc, #336]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a53      	ldr	r2, [pc, #332]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80037d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fd ff3b 	bl	8001654 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e0:	e00e      	b.n	8003800 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e2:	f7fd ff37 	bl	8001654 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d907      	bls.n	8003800 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037f0:	4b4b      	ldr	r3, [pc, #300]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e2ff      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003800:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ea      	beq.n	80037e2 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380c:	4b44      	ldr	r3, [pc, #272]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	061b      	lsls	r3, r3, #24
 800381a:	4941      	ldr	r1, [pc, #260]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]
 8003820:	e01e      	b.n	8003860 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003822:	4b3f      	ldr	r3, [pc, #252]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a3e      	ldr	r2, [pc, #248]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800382c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7fd ff11 	bl	8001654 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003834:	e00e      	b.n	8003854 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003836:	f7fd ff0d 	bl	8001654 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d907      	bls.n	8003854 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003844:	4b36      	ldr	r3, [pc, #216]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e2d5      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003854:	4b32      	ldr	r3, [pc, #200]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1ea      	bne.n	8003836 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b00      	cmp	r3, #0
 800386a:	d062      	beq.n	8003932 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d038      	beq.n	80038e6 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800387c:	4b28      	ldr	r3, [pc, #160]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 800387e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003882:	4a27      	ldr	r2, [pc, #156]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003884:	f023 0310 	bic.w	r3, r3, #16
 8003888:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800388c:	e007      	b.n	800389e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003894:	4a22      	ldr	r2, [pc, #136]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 8003896:	f043 0310 	orr.w	r3, r3, #16
 800389a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80038a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a4:	4a1e      	ldr	r2, [pc, #120]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ae:	f7fd fed1 	bl	8001654 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038b4:	e00f      	b.n	80038d6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b6:	f7fd fecd 	bl	8001654 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b07      	cmp	r3, #7
 80038c2:	d908      	bls.n	80038d6 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038c4:	4b16      	ldr	r3, [pc, #88]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80038c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e294      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038d6:	4b12      	ldr	r3, [pc, #72]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80038d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0e8      	beq.n	80038b6 <HAL_RCC_OscConfig+0x44e>
 80038e4:	e025      	b.n	8003932 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80038e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ec:	4a0c      	ldr	r2, [pc, #48]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f6:	f7fd fead 	bl	8001654 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038fc:	e012      	b.n	8003924 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038fe:	f7fd fea9 	bl	8001654 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b07      	cmp	r3, #7
 800390a:	d90b      	bls.n	8003924 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <HAL_RCC_OscConfig+0x4b8>)
 800390e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d004      	beq.n	8003924 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e270      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003924:	4ba8      	ldr	r3, [pc, #672]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e5      	bne.n	80038fe <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 812d 	beq.w	8003b9a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003940:	2300      	movs	r3, #0
 8003942:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003944:	4ba0      	ldr	r3, [pc, #640]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10d      	bne.n	800396c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003950:	4b9d      	ldr	r3, [pc, #628]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003954:	4a9c      	ldr	r2, [pc, #624]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395a:	6593      	str	r3, [r2, #88]	; 0x58
 800395c:	4b9a      	ldr	r3, [pc, #616]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003968:	2301      	movs	r3, #1
 800396a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800396c:	4b97      	ldr	r3, [pc, #604]	; (8003bcc <HAL_RCC_OscConfig+0x764>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d11e      	bne.n	80039b6 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003978:	4b94      	ldr	r3, [pc, #592]	; (8003bcc <HAL_RCC_OscConfig+0x764>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a93      	ldr	r2, [pc, #588]	; (8003bcc <HAL_RCC_OscConfig+0x764>)
 800397e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003982:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003984:	f7fd fe66 	bl	8001654 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800398a:	e00e      	b.n	80039aa <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398c:	f7fd fe62 	bl	8001654 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d907      	bls.n	80039aa <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800399a:	4b8c      	ldr	r3, [pc, #560]	; (8003bcc <HAL_RCC_OscConfig+0x764>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e22a      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039aa:	4b88      	ldr	r3, [pc, #544]	; (8003bcc <HAL_RCC_OscConfig+0x764>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0ea      	beq.n	800398c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d01f      	beq.n	8003a02 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d010      	beq.n	80039f0 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80039ce:	4b7e      	ldr	r3, [pc, #504]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 80039d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d4:	4a7c      	ldr	r2, [pc, #496]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 80039d6:	f043 0304 	orr.w	r3, r3, #4
 80039da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039de:	4b7a      	ldr	r3, [pc, #488]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e4:	4a78      	ldr	r2, [pc, #480]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039ee:	e018      	b.n	8003a22 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039f0:	4b75      	ldr	r3, [pc, #468]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	4a74      	ldr	r2, [pc, #464]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a00:	e00f      	b.n	8003a22 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a02:	4b71      	ldr	r3, [pc, #452]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a08:	4a6f      	ldr	r2, [pc, #444]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a12:	4b6d      	ldr	r3, [pc, #436]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a18:	4a6b      	ldr	r2, [pc, #428]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003a1a:	f023 0304 	bic.w	r3, r3, #4
 8003a1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d068      	beq.n	8003afc <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2a:	f7fd fe13 	bl	8001654 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a30:	e011      	b.n	8003a56 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fd fe0f 	bl	8001654 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d908      	bls.n	8003a56 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a44:	4b60      	ldr	r3, [pc, #384]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e1d4      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a56:	4b5c      	ldr	r3, [pc, #368]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0e6      	beq.n	8003a32 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d022      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a70:	4b55      	ldr	r3, [pc, #340]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a76:	4a54      	ldr	r2, [pc, #336]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a80:	e011      	b.n	8003aa6 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a82:	f7fd fde7 	bl	8001654 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d908      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a94:	4b4c      	ldr	r3, [pc, #304]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e1ac      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003aa6:	4b48      	ldr	r3, [pc, #288]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0e6      	beq.n	8003a82 <HAL_RCC_OscConfig+0x61a>
 8003ab4:	e068      	b.n	8003b88 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ab6:	4b44      	ldr	r3, [pc, #272]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abc:	4a42      	ldr	r2, [pc, #264]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ac6:	e011      	b.n	8003aec <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac8:	f7fd fdc4 	bl	8001654 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d908      	bls.n	8003aec <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ada:	4b3b      	ldr	r3, [pc, #236]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e189      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003aec:	4b36      	ldr	r3, [pc, #216]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1e6      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x660>
 8003afa:	e045      	b.n	8003b88 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fd fdaa 	bl	8001654 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b02:	e011      	b.n	8003b28 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b04:	f7fd fda6 	bl	8001654 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d908      	bls.n	8003b28 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b16:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e16b      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b28:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e6      	bne.n	8003b04 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003b36:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d021      	beq.n	8003b88 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003b44:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	4a1f      	ldr	r2, [pc, #124]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b54:	e011      	b.n	8003b7a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b56:	f7fd fd7d 	bl	8001654 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d908      	bls.n	8003b7a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b68:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e142      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003b7a:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e6      	bne.n	8003b56 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b88:	7ffb      	ldrb	r3, [r7, #31]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d105      	bne.n	8003b9a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b92:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d04f      	beq.n	8003c46 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d028      	beq.n	8003c00 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003bb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bb4:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <HAL_RCC_OscConfig+0x760>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbe:	f7fd fd49 	bl	8001654 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bc4:	e014      	b.n	8003bf0 <HAL_RCC_OscConfig+0x788>
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bd0:	f7fd fd40 	bl	8001654 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d908      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bde:	4b8a      	ldr	r3, [pc, #552]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e107      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bf0:	4b85      	ldr	r3, [pc, #532]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003bf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0e8      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x768>
 8003bfe:	e022      	b.n	8003c46 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c00:	4b81      	ldr	r3, [pc, #516]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c06:	4a80      	ldr	r2, [pc, #512]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 8003c0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fd fd20 	bl	8001654 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c16:	e00f      	b.n	8003c38 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c18:	f7fd fd1c 	bl	8001654 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d908      	bls.n	8003c38 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c26:	4b78      	ldr	r3, [pc, #480]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e0e3      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c38:	4b73      	ldr	r3, [pc, #460]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e8      	bne.n	8003c18 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 80d7 	beq.w	8003dfe <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c50:	4b6d      	ldr	r3, [pc, #436]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b0c      	cmp	r3, #12
 8003c5a:	f000 8091 	beq.w	8003d80 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d166      	bne.n	8003d34 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c66:	4b68      	ldr	r3, [pc, #416]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a67      	ldr	r2, [pc, #412]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003c6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c72:	f7fd fcef 	bl	8001654 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c78:	e00e      	b.n	8003c98 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7a:	f7fd fceb 	bl	8001654 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d907      	bls.n	8003c98 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c88:	4b5f      	ldr	r3, [pc, #380]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e0b3      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c98:	4b5b      	ldr	r3, [pc, #364]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1ea      	bne.n	8003c7a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca4:	4b58      	ldr	r3, [pc, #352]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	4b58      	ldr	r3, [pc, #352]	; (8003e0c <HAL_RCC_OscConfig+0x9a4>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cb4:	3a01      	subs	r2, #1
 8003cb6:	0112      	lsls	r2, r2, #4
 8003cb8:	4311      	orrs	r1, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cbe:	0212      	lsls	r2, r2, #8
 8003cc0:	4311      	orrs	r1, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cc6:	0852      	lsrs	r2, r2, #1
 8003cc8:	3a01      	subs	r2, #1
 8003cca:	0552      	lsls	r2, r2, #21
 8003ccc:	4311      	orrs	r1, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003cd2:	0852      	lsrs	r2, r2, #1
 8003cd4:	3a01      	subs	r2, #1
 8003cd6:	0652      	lsls	r2, r2, #25
 8003cd8:	4311      	orrs	r1, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cde:	06d2      	lsls	r2, r2, #27
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	4949      	ldr	r1, [pc, #292]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ce8:	4b47      	ldr	r3, [pc, #284]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a46      	ldr	r2, [pc, #280]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cf2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cf4:	4b44      	ldr	r3, [pc, #272]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4a43      	ldr	r2, [pc, #268]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fd fca8 	bl	8001654 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d06:	e00e      	b.n	8003d26 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d08:	f7fd fca4 	bl	8001654 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d907      	bls.n	8003d26 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d16:	4b3c      	ldr	r3, [pc, #240]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e06c      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d26:	4b38      	ldr	r3, [pc, #224]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0ea      	beq.n	8003d08 <HAL_RCC_OscConfig+0x8a0>
 8003d32:	e064      	b.n	8003dfe <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d34:	4b34      	ldr	r3, [pc, #208]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a33      	ldr	r2, [pc, #204]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fd fc88 	bl	8001654 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d46:	e00e      	b.n	8003d66 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fd fc84 	bl	8001654 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d907      	bls.n	8003d66 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d56:	4b2c      	ldr	r3, [pc, #176]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e04c      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d66:	4b28      	ldr	r3, [pc, #160]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1ea      	bne.n	8003d48 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d72:	4b25      	ldr	r3, [pc, #148]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	4924      	ldr	r1, [pc, #144]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003d78:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <HAL_RCC_OscConfig+0x9a8>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	60cb      	str	r3, [r1, #12]
 8003d7e:	e03e      	b.n	8003dfe <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e039      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003d8c:	4b1e      	ldr	r3, [pc, #120]	; (8003e08 <HAL_RCC_OscConfig+0x9a0>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f003 0203 	and.w	r2, r3, #3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d12c      	bne.n	8003dfa <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003daa:	3b01      	subs	r3, #1
 8003dac:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d123      	bne.n	8003dfa <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d11b      	bne.n	8003dfa <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dcc:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d113      	bne.n	8003dfa <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	3b01      	subs	r3, #1
 8003de0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d109      	bne.n	8003dfa <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	3b01      	subs	r3, #1
 8003df4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d001      	beq.n	8003dfe <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3720      	adds	r7, #32
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	019f800c 	.word	0x019f800c
 8003e10:	feeefffc 	.word	0xfeeefffc

08003e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e11c      	b.n	8004066 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b90      	ldr	r3, [pc, #576]	; (8004070 <HAL_RCC_ClockConfig+0x25c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d910      	bls.n	8003e5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b8d      	ldr	r3, [pc, #564]	; (8004070 <HAL_RCC_ClockConfig+0x25c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 020f 	bic.w	r2, r3, #15
 8003e42:	498b      	ldr	r1, [pc, #556]	; (8004070 <HAL_RCC_ClockConfig+0x25c>)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b89      	ldr	r3, [pc, #548]	; (8004070 <HAL_RCC_ClockConfig+0x25c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e104      	b.n	8004066 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d010      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	4b81      	ldr	r3, [pc, #516]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d908      	bls.n	8003e8a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e78:	4b7e      	ldr	r3, [pc, #504]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	497b      	ldr	r1, [pc, #492]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 8085 	beq.w	8003fa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d11f      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea0:	4b74      	ldr	r3, [pc, #464]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0da      	b.n	8004066 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003eb0:	f000 fa26 	bl	8004300 <RCC_GetSysClockFreqFromPLLSource>
 8003eb4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4a6f      	ldr	r2, [pc, #444]	; (8004078 <HAL_RCC_ClockConfig+0x264>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d947      	bls.n	8003f4e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ebe:	4b6d      	ldr	r3, [pc, #436]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d141      	bne.n	8003f4e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003eca:	4b6a      	ldr	r3, [pc, #424]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ed2:	4a68      	ldr	r2, [pc, #416]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	e036      	b.n	8003f4e <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d107      	bne.n	8003ef8 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ee8:	4b62      	ldr	r3, [pc, #392]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d115      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0b6      	b.n	8004066 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d107      	bne.n	8003f10 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f00:	4b5c      	ldr	r3, [pc, #368]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d109      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0aa      	b.n	8004066 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f10:	4b58      	ldr	r3, [pc, #352]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0a2      	b.n	8004066 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003f20:	f000 f8b0 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	4a53      	ldr	r2, [pc, #332]	; (8004078 <HAL_RCC_ClockConfig+0x264>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d90f      	bls.n	8003f4e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003f2e:	4b51      	ldr	r3, [pc, #324]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d109      	bne.n	8003f4e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f3a:	4b4e      	ldr	r3, [pc, #312]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f42:	4a4c      	ldr	r2, [pc, #304]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f4a:	2380      	movs	r3, #128	; 0x80
 8003f4c:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f4e:	4b49      	ldr	r3, [pc, #292]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f023 0203 	bic.w	r2, r3, #3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4946      	ldr	r1, [pc, #280]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f60:	f7fd fb78 	bl	8001654 <HAL_GetTick>
 8003f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f66:	e013      	b.n	8003f90 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f68:	f7fd fb74 	bl	8001654 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d90a      	bls.n	8003f90 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7a:	4b3e      	ldr	r3, [pc, #248]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 020c 	and.w	r2, r3, #12
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e06a      	b.n	8004066 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f90:	4b38      	ldr	r3, [pc, #224]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 020c 	and.w	r2, r3, #12
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d1e2      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b80      	cmp	r3, #128	; 0x80
 8003fa6:	d105      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003fa8:	4b32      	ldr	r3, [pc, #200]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4a31      	ldr	r2, [pc, #196]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fb2:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d010      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d208      	bcs.n	8003fe2 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd0:	4b28      	ldr	r3, [pc, #160]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4925      	ldr	r1, [pc, #148]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe2:	4b23      	ldr	r3, [pc, #140]	; (8004070 <HAL_RCC_ClockConfig+0x25c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d210      	bcs.n	8004012 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff0:	4b1f      	ldr	r3, [pc, #124]	; (8004070 <HAL_RCC_ClockConfig+0x25c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f023 020f 	bic.w	r2, r3, #15
 8003ff8:	491d      	ldr	r1, [pc, #116]	; (8004070 <HAL_RCC_ClockConfig+0x25c>)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004000:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <HAL_RCC_ClockConfig+0x25c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d001      	beq.n	8004012 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e029      	b.n	8004066 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800401e:	4b15      	ldr	r3, [pc, #84]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	4912      	ldr	r1, [pc, #72]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 800402c:	4313      	orrs	r3, r2
 800402e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d009      	beq.n	8004050 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800403c:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	490a      	ldr	r1, [pc, #40]	; (8004074 <HAL_RCC_ClockConfig+0x260>)
 800404c:	4313      	orrs	r3, r2
 800404e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004050:	f000 f8b6 	bl	80041c0 <HAL_RCC_GetHCLKFreq>
 8004054:	4603      	mov	r3, r0
 8004056:	4a09      	ldr	r2, [pc, #36]	; (800407c <HAL_RCC_ClockConfig+0x268>)
 8004058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800405a:	4b09      	ldr	r3, [pc, #36]	; (8004080 <HAL_RCC_ClockConfig+0x26c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f7fd faa8 	bl	80015b4 <HAL_InitTick>
 8004064:	4603      	mov	r3, r0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40022000 	.word	0x40022000
 8004074:	40021000 	.word	0x40021000
 8004078:	04c4b400 	.word	0x04c4b400
 800407c:	20000000 	.word	0x20000000
 8004080:	20000004 	.word	0x20000004

08004084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004084:	b480      	push	{r7}
 8004086:	b089      	sub	sp, #36	; 0x24
 8004088:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	2300      	movs	r3, #0
 8004090:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004092:	4b47      	ldr	r3, [pc, #284]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800409c:	4b44      	ldr	r3, [pc, #272]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x12c>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0x34>
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b0c      	cmp	r3, #12
 80040b0:	d121      	bne.n	80040f6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d11e      	bne.n	80040f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040b8:	4b3d      	ldr	r3, [pc, #244]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d107      	bne.n	80040d4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040c4:	4b3a      	ldr	r3, [pc, #232]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80040c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	61fb      	str	r3, [r7, #28]
 80040d2:	e005      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040d4:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80040e0:	4a34      	ldr	r2, [pc, #208]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x130>)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10d      	bne.n	800410c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80040f4:	e00a      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d102      	bne.n	8004102 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040fc:	4b2e      	ldr	r3, [pc, #184]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x134>)
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	e004      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2b08      	cmp	r3, #8
 8004106:	d101      	bne.n	800410c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004108:	4b2c      	ldr	r3, [pc, #176]	; (80041bc <HAL_RCC_GetSysClockFreq+0x138>)
 800410a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	2b0c      	cmp	r3, #12
 8004110:	d146      	bne.n	80041a0 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004112:	4b27      	ldr	r3, [pc, #156]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800411c:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x12c>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	3301      	adds	r3, #1
 8004128:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b02      	cmp	r3, #2
 800412e:	d003      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0xb4>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b03      	cmp	r3, #3
 8004134:	d00d      	beq.n	8004152 <HAL_RCC_GetSysClockFreq+0xce>
 8004136:	e019      	b.n	800416c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004138:	4a1f      	ldr	r2, [pc, #124]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x134>)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	4a1b      	ldr	r2, [pc, #108]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004142:	68d2      	ldr	r2, [r2, #12]
 8004144:	0a12      	lsrs	r2, r2, #8
 8004146:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800414a:	fb02 f303 	mul.w	r3, r2, r3
 800414e:	617b      	str	r3, [r7, #20]
        break;
 8004150:	e019      	b.n	8004186 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004152:	4a1a      	ldr	r2, [pc, #104]	; (80041bc <HAL_RCC_GetSysClockFreq+0x138>)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	fbb2 f3f3 	udiv	r3, r2, r3
 800415a:	4a15      	ldr	r2, [pc, #84]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x12c>)
 800415c:	68d2      	ldr	r2, [r2, #12]
 800415e:	0a12      	lsrs	r2, r2, #8
 8004160:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004164:	fb02 f303 	mul.w	r3, r2, r3
 8004168:	617b      	str	r3, [r7, #20]
        break;
 800416a:	e00c      	b.n	8004186 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	fbb2 f3f3 	udiv	r3, r2, r3
 8004174:	4a0e      	ldr	r2, [pc, #56]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004176:	68d2      	ldr	r2, [r2, #12]
 8004178:	0a12      	lsrs	r2, r2, #8
 800417a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800417e:	fb02 f303 	mul.w	r3, r2, r3
 8004182:	617b      	str	r3, [r7, #20]
        break;
 8004184:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004186:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	0e5b      	lsrs	r3, r3, #25
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	3301      	adds	r3, #1
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	fbb2 f3f3 	udiv	r3, r2, r3
 800419e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041a0:	69bb      	ldr	r3, [r7, #24]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3724      	adds	r7, #36	; 0x24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40021000 	.word	0x40021000
 80041b4:	0800701c 	.word	0x0800701c
 80041b8:	00f42400 	.word	0x00f42400
 80041bc:	007a1200 	.word	0x007a1200

080041c0 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80041c4:	f7ff ff5e 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <HAL_RCC_GetHCLKFreq+0x20>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	4903      	ldr	r1, [pc, #12]	; (80041e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80041d6:	5ccb      	ldrb	r3, [r1, r3]
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041dc:	4618      	mov	r0, r3
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40021000 	.word	0x40021000
 80041e4:	08007004 	.word	0x08007004

080041e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041ec:	f7ff ffe8 	bl	80041c0 <HAL_RCC_GetHCLKFreq>
 80041f0:	4602      	mov	r2, r0
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	0a1b      	lsrs	r3, r3, #8
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	4903      	ldr	r1, [pc, #12]	; (800420c <HAL_RCC_GetPCLK1Freq+0x24>)
 80041fe:	5ccb      	ldrb	r3, [r1, r3]
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004204:	4618      	mov	r0, r3
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000
 800420c:	08007014 	.word	0x08007014

08004210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004214:	f7ff ffd4 	bl	80041c0 <HAL_RCC_GetHCLKFreq>
 8004218:	4602      	mov	r2, r0
 800421a:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	0adb      	lsrs	r3, r3, #11
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	4903      	ldr	r1, [pc, #12]	; (8004234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004226:	5ccb      	ldrb	r3, [r1, r3]
 8004228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800422c:	4618      	mov	r0, r3
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40021000 	.word	0x40021000
 8004234:	08007014 	.word	0x08007014

08004238 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004244:	4b2c      	ldr	r3, [pc, #176]	; (80042f8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004250:	f7ff f86c 	bl	800332c <HAL_PWREx_GetVoltageRange>
 8004254:	6138      	str	r0, [r7, #16]
 8004256:	e014      	b.n	8004282 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004258:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	4a26      	ldr	r2, [pc, #152]	; (80042f8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800425e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004262:	6593      	str	r3, [r2, #88]	; 0x58
 8004264:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004270:	f7ff f85c 	bl	800332c <HAL_PWREx_GetVoltageRange>
 8004274:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004276:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	4a1f      	ldr	r2, [pc, #124]	; (80042f8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800427c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004280:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428e:	d10b      	bne.n	80042a8 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b80      	cmp	r3, #128	; 0x80
 8004294:	d919      	bls.n	80042ca <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2ba0      	cmp	r3, #160	; 0xa0
 800429a:	d902      	bls.n	80042a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800429c:	2302      	movs	r3, #2
 800429e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80042a0:	e013      	b.n	80042ca <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042a2:	2301      	movs	r3, #1
 80042a4:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80042a6:	e010      	b.n	80042ca <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b80      	cmp	r3, #128	; 0x80
 80042ac:	d902      	bls.n	80042b4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042ae:	2303      	movs	r3, #3
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e00a      	b.n	80042ca <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b80      	cmp	r3, #128	; 0x80
 80042b8:	d102      	bne.n	80042c0 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042ba:	2302      	movs	r3, #2
 80042bc:	617b      	str	r3, [r7, #20]
 80042be:	e004      	b.n	80042ca <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b70      	cmp	r3, #112	; 0x70
 80042c4:	d101      	bne.n	80042ca <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042c6:	2301      	movs	r3, #1
 80042c8:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042ca:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 020f 	bic.w	r2, r3, #15
 80042d2:	490a      	ldr	r1, [pc, #40]	; (80042fc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80042da:	4b08      	ldr	r3, [pc, #32]	; (80042fc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40022000 	.word	0x40022000

08004300 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004306:	4b31      	ldr	r3, [pc, #196]	; (80043cc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004310:	4b2e      	ldr	r3, [pc, #184]	; (80043cc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	091b      	lsrs	r3, r3, #4
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	3301      	adds	r3, #1
 800431c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d015      	beq.n	8004350 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b03      	cmp	r3, #3
 8004328:	d839      	bhi.n	800439e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d01c      	beq.n	800436a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d133      	bne.n	800439e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004336:	4a26      	ldr	r2, [pc, #152]	; (80043d0 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	fbb2 f3f3 	udiv	r3, r2, r3
 800433e:	4a23      	ldr	r2, [pc, #140]	; (80043cc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004340:	68d2      	ldr	r2, [r2, #12]
 8004342:	0a12      	lsrs	r2, r2, #8
 8004344:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004348:	fb02 f303 	mul.w	r3, r2, r3
 800434c:	613b      	str	r3, [r7, #16]
      break;
 800434e:	e029      	b.n	80043a4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004350:	4a20      	ldr	r2, [pc, #128]	; (80043d4 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	4a1c      	ldr	r2, [pc, #112]	; (80043cc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800435a:	68d2      	ldr	r2, [r2, #12]
 800435c:	0a12      	lsrs	r2, r2, #8
 800435e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	613b      	str	r3, [r7, #16]
      break;
 8004368:	e01c      	b.n	80043a4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800436a:	4b18      	ldr	r3, [pc, #96]	; (80043cc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d107      	bne.n	8004386 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800437c:	0a1b      	lsrs	r3, r3, #8
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	e005      	b.n	8004392 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004386:	4b11      	ldr	r3, [pc, #68]	; (80043cc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	f003 030f 	and.w	r3, r3, #15
 8004390:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004392:	4a11      	ldr	r2, [pc, #68]	; (80043d8 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439a:	613b      	str	r3, [r7, #16]
        break;
 800439c:	e002      	b.n	80043a4 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800439e:	2300      	movs	r3, #0
 80043a0:	613b      	str	r3, [r7, #16]
      break;
 80043a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80043a4:	4b09      	ldr	r3, [pc, #36]	; (80043cc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	0e5b      	lsrs	r3, r3, #25
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	3301      	adds	r3, #1
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80043be:	683b      	ldr	r3, [r7, #0]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	40021000 	.word	0x40021000
 80043d0:	00f42400 	.word	0x00f42400
 80043d4:	007a1200 	.word	0x007a1200
 80043d8:	0800701c 	.word	0x0800701c

080043dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043e4:	2300      	movs	r3, #0
 80043e6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043e8:	2300      	movs	r3, #0
 80043ea:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d040      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043fc:	2b80      	cmp	r3, #128	; 0x80
 80043fe:	d02a      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004400:	2b80      	cmp	r3, #128	; 0x80
 8004402:	d825      	bhi.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004404:	2b60      	cmp	r3, #96	; 0x60
 8004406:	d026      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004408:	2b60      	cmp	r3, #96	; 0x60
 800440a:	d821      	bhi.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	d006      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004410:	2b40      	cmp	r3, #64	; 0x40
 8004412:	d81d      	bhi.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d009      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004418:	2b20      	cmp	r3, #32
 800441a:	d010      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800441c:	e018      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800441e:	4b8f      	ldr	r3, [pc, #572]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	4a8e      	ldr	r2, [pc, #568]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004428:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800442a:	e015      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fb56 	bl	8004ae4 <RCCEx_PLLSAI1_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800443c:	e00c      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3320      	adds	r3, #32
 8004442:	2100      	movs	r1, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fc33 	bl	8004cb0 <RCCEx_PLLSAI2_Config>
 800444a:	4603      	mov	r3, r0
 800444c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800444e:	e003      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	77fb      	strb	r3, [r7, #31]
        break;
 8004454:	e000      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004456:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004458:	7ffb      	ldrb	r3, [r7, #31]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10b      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800445e:	4b7f      	ldr	r3, [pc, #508]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004460:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004464:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800446c:	497b      	ldr	r1, [pc, #492]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004474:	e001      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004476:	7ffb      	ldrb	r3, [r7, #31]
 8004478:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d047      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448e:	d030      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004494:	d82a      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800449a:	d02a      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800449c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044a0:	d824      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80044a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a6:	d008      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xde>
 80044a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ac:	d81e      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80044b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b6:	d010      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80044b8:	e018      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044ba:	4b68      	ldr	r3, [pc, #416]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	4a67      	ldr	r2, [pc, #412]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c4:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80044c6:	e015      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3304      	adds	r3, #4
 80044cc:	2100      	movs	r1, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fb08 	bl	8004ae4 <RCCEx_PLLSAI1_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80044d8:	e00c      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3320      	adds	r3, #32
 80044de:	2100      	movs	r1, #0
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fbe5 	bl	8004cb0 <RCCEx_PLLSAI2_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80044ea:	e003      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	77fb      	strb	r3, [r7, #31]
        break;
 80044f0:	e000      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80044f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f4:	7ffb      	ldrb	r3, [r7, #31]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10b      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044fa:	4b58      	ldr	r3, [pc, #352]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004500:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	4954      	ldr	r1, [pc, #336]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004510:	e001      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004512:	7ffb      	ldrb	r3, [r7, #31]
 8004514:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 80ab 	beq.w	800467a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004524:	2300      	movs	r3, #0
 8004526:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004528:	4b4c      	ldr	r3, [pc, #304]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10d      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004534:	4b49      	ldr	r3, [pc, #292]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004538:	4a48      	ldr	r2, [pc, #288]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800453a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453e:	6593      	str	r3, [r2, #88]	; 0x58
 8004540:	4b46      	ldr	r3, [pc, #280]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004550:	4b43      	ldr	r3, [pc, #268]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a42      	ldr	r2, [pc, #264]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800455c:	f7fd f87a 	bl	8001654 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004562:	e00f      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004564:	f7fd f876 	bl	8001654 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d908      	bls.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004572:	4b3b      	ldr	r3, [pc, #236]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004582:	e006      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004584:	4b36      	ldr	r3, [pc, #216]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0e9      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004590:	e000      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004592:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004594:	7ffb      	ldrb	r3, [r7, #31]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d164      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800459a:	4b30      	ldr	r3, [pc, #192]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a4:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01f      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x210>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d019      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045b8:	4b28      	ldr	r3, [pc, #160]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c2:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045c4:	4b25      	ldr	r3, [pc, #148]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ca:	4a24      	ldr	r2, [pc, #144]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045d4:	4b21      	ldr	r3, [pc, #132]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045da:	4a20      	ldr	r2, [pc, #128]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045e4:	4a1d      	ldr	r2, [pc, #116]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d01f      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f6:	f7fd f82d 	bl	8001654 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fc:	e012      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fd f829 	bl	8001654 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	; 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d909      	bls.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004610:	4b12      	ldr	r3, [pc, #72]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10a      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8004622:	e007      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004624:	4b0d      	ldr	r3, [pc, #52]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0e5      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004632:	e000      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8004634:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8004636:	7ffb      	ldrb	r3, [r7, #31]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10c      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800463c:	4b07      	ldr	r3, [pc, #28]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004642:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464c:	4903      	ldr	r1, [pc, #12]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004654:	e008      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004656:	7ffb      	ldrb	r3, [r7, #31]
 8004658:	77bb      	strb	r3, [r7, #30]
 800465a:	e005      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800465c:	40021000 	.word	0x40021000
 8004660:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	7ffb      	ldrb	r3, [r7, #31]
 8004666:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004668:	7dfb      	ldrb	r3, [r7, #23]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d105      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466e:	4b9c      	ldr	r3, [pc, #624]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004672:	4a9b      	ldr	r2, [pc, #620]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004678:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004686:	4b96      	ldr	r3, [pc, #600]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468c:	f023 0203 	bic.w	r2, r3, #3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004694:	4992      	ldr	r1, [pc, #584]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046a8:	4b8d      	ldr	r3, [pc, #564]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ae:	f023 020c 	bic.w	r2, r3, #12
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	498a      	ldr	r1, [pc, #552]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046ca:	4b85      	ldr	r3, [pc, #532]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d8:	4981      	ldr	r1, [pc, #516]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046ec:	4b7c      	ldr	r3, [pc, #496]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	4979      	ldr	r1, [pc, #484]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800470e:	4b74      	ldr	r3, [pc, #464]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471c:	4970      	ldr	r1, [pc, #448]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004730:	4b6b      	ldr	r3, [pc, #428]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004736:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473e:	4968      	ldr	r1, [pc, #416]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004752:	4b63      	ldr	r3, [pc, #396]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004758:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004760:	495f      	ldr	r1, [pc, #380]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004774:	4b5a      	ldr	r3, [pc, #360]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004782:	4957      	ldr	r1, [pc, #348]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004796:	4b52      	ldr	r3, [pc, #328]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047a4:	494e      	ldr	r1, [pc, #312]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d031      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047c0:	d00e      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80047c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047c6:	d814      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d015      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80047cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047d0:	d10f      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d2:	4b43      	ldr	r3, [pc, #268]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	4a42      	ldr	r2, [pc, #264]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047dc:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80047de:	e00c      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f97c 	bl	8004ae4 <RCCEx_PLLSAI1_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80047f0:	e003      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	77fb      	strb	r3, [r7, #31]
        break;
 80047f6:	e000      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80047f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fa:	7ffb      	ldrb	r3, [r7, #31]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10b      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004800:	4b37      	ldr	r3, [pc, #220]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004806:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800480e:	4934      	ldr	r1, [pc, #208]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004816:	e001      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004818:	7ffb      	ldrb	r3, [r7, #31]
 800481a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004828:	4b2d      	ldr	r3, [pc, #180]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004836:	492a      	ldr	r1, [pc, #168]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800484a:	4b25      	ldr	r3, [pc, #148]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004858:	4921      	ldr	r1, [pc, #132]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800486c:	4b1c      	ldr	r3, [pc, #112]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487a:	4919      	ldr	r1, [pc, #100]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800488e:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004890:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004894:	f023 0203 	bic.w	r2, r3, #3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489c:	4910      	ldr	r1, [pc, #64]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d02b      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048be:	4908      	ldr	r1, [pc, #32]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ce:	d109      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048d0:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4a02      	ldr	r2, [pc, #8]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80048d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048da:	60d3      	str	r3, [r2, #12]
 80048dc:	e014      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80048de:	bf00      	nop
 80048e0:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048ec:	d10c      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3304      	adds	r3, #4
 80048f2:	2101      	movs	r1, #1
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 f8f5 	bl	8004ae4 <RCCEx_PLLSAI1_Config>
 80048fa:	4603      	mov	r3, r0
 80048fc:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80048fe:	7ffb      	ldrb	r3, [r7, #31]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004904:	7ffb      	ldrb	r3, [r7, #31]
 8004906:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d04a      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800491c:	d108      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x554>
 800491e:	4b70      	ldr	r3, [pc, #448]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004920:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004924:	4a6e      	ldr	r2, [pc, #440]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800492a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800492e:	e012      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004930:	4b6b      	ldr	r3, [pc, #428]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800493e:	4968      	ldr	r1, [pc, #416]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004946:	4b66      	ldr	r3, [pc, #408]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004948:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800494c:	4a64      	ldr	r2, [pc, #400]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800494e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004952:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800495a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800495e:	d10d      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	2101      	movs	r1, #1
 8004966:	4618      	mov	r0, r3
 8004968:	f000 f8bc 	bl	8004ae4 <RCCEx_PLLSAI1_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004970:	7ffb      	ldrb	r3, [r7, #31]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d019      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8004976:	7ffb      	ldrb	r3, [r7, #31]
 8004978:	77bb      	strb	r3, [r7, #30]
 800497a:	e016      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004984:	d106      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004986:	4b56      	ldr	r3, [pc, #344]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	4a55      	ldr	r2, [pc, #340]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800498c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004990:	60d3      	str	r3, [r2, #12]
 8004992:	e00a      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800499c:	d105      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800499e:	4b50      	ldr	r3, [pc, #320]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	4a4f      	ldr	r2, [pc, #316]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a8:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d028      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049b6:	4b4a      	ldr	r3, [pc, #296]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049c4:	4946      	ldr	r1, [pc, #280]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049d4:	d106      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d6:	4b42      	ldr	r3, [pc, #264]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	4a41      	ldr	r2, [pc, #260]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049e0:	60d3      	str	r3, [r2, #12]
 80049e2:	e011      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2101      	movs	r1, #1
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f875 	bl	8004ae4 <RCCEx_PLLSAI1_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80049fe:	7ffb      	ldrb	r3, [r7, #31]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004a04:	7ffb      	ldrb	r3, [r7, #31]
 8004a06:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01e      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a14:	4b32      	ldr	r3, [pc, #200]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a24:	492e      	ldr	r1, [pc, #184]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a36:	d10c      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	2102      	movs	r1, #2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 f850 	bl	8004ae4 <RCCEx_PLLSAI1_Config>
 8004a44:	4603      	mov	r3, r0
 8004a46:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004a48:	7ffb      	ldrb	r3, [r7, #31]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8004a4e:	7ffb      	ldrb	r3, [r7, #31]
 8004a50:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a5e:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a64:	f023 0204 	bic.w	r2, r3, #4
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6e:	491c      	ldr	r1, [pc, #112]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00b      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a82:	4b17      	ldr	r3, [pc, #92]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a88:	f023 0218 	bic.w	r2, r3, #24
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a92:	4913      	ldr	r1, [pc, #76]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d017      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004aa6:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004aa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab6:	490a      	ldr	r1, [pc, #40]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ac8:	d105      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aca:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	4a04      	ldr	r2, [pc, #16]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ad4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004ad6:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3720      	adds	r7, #32
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40021000 	.word	0x40021000

08004ae4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d018      	beq.n	8004b2c <RCCEx_PLLSAI1_Config+0x48>
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d81f      	bhi.n	8004b3e <RCCEx_PLLSAI1_Config+0x5a>
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d002      	beq.n	8004b08 <RCCEx_PLLSAI1_Config+0x24>
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d009      	beq.n	8004b1a <RCCEx_PLLSAI1_Config+0x36>
 8004b06:	e01a      	b.n	8004b3e <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b08:	4b65      	ldr	r3, [pc, #404]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d117      	bne.n	8004b44 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b18:	e014      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b1a:	4b61      	ldr	r3, [pc, #388]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d110      	bne.n	8004b48 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b2a:	e00d      	b.n	8004b48 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004b2c:	4b5c      	ldr	r3, [pc, #368]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d109      	bne.n	8004b4c <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b3c:	e006      	b.n	8004b4c <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
      break;
 8004b42:	e004      	b.n	8004b4e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004b44:	bf00      	nop
 8004b46:	e002      	b.n	8004b4e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004b48:	bf00      	nop
 8004b4a:	e000      	b.n	8004b4e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004b4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f040 809f 	bne.w	8004c94 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b56:	4b52      	ldr	r3, [pc, #328]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a51      	ldr	r2, [pc, #324]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b62:	f7fc fd77 	bl	8001654 <HAL_GetTick>
 8004b66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b68:	e00f      	b.n	8004b8a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b6a:	f7fc fd73 	bl	8001654 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d908      	bls.n	8004b8a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b78:	4b49      	ldr	r3, [pc, #292]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b88:	e006      	b.n	8004b98 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b8a:	4b45      	ldr	r3, [pc, #276]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1e9      	bne.n	8004b6a <RCCEx_PLLSAI1_Config+0x86>
 8004b96:	e000      	b.n	8004b9a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004b98:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d179      	bne.n	8004c94 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d116      	bne.n	8004bd4 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ba6:	4b3e      	ldr	r3, [pc, #248]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	4b3e      	ldr	r3, [pc, #248]	; (8004ca4 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6892      	ldr	r2, [r2, #8]
 8004bb2:	0211      	lsls	r1, r2, #8
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	68d2      	ldr	r2, [r2, #12]
 8004bb8:	06d2      	lsls	r2, r2, #27
 8004bba:	4311      	orrs	r1, r2
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6852      	ldr	r2, [r2, #4]
 8004bc0:	3a01      	subs	r2, #1
 8004bc2:	0112      	lsls	r2, r2, #4
 8004bc4:	4311      	orrs	r1, r2
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6812      	ldr	r2, [r2, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	4934      	ldr	r1, [pc, #208]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	610b      	str	r3, [r1, #16]
 8004bd2:	e033      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d118      	bne.n	8004c0c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bda:	4b31      	ldr	r3, [pc, #196]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bdc:	691a      	ldr	r2, [r3, #16]
 8004bde:	4b32      	ldr	r3, [pc, #200]	; (8004ca8 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6892      	ldr	r2, [r2, #8]
 8004be6:	0211      	lsls	r1, r2, #8
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6912      	ldr	r2, [r2, #16]
 8004bec:	0852      	lsrs	r2, r2, #1
 8004bee:	3a01      	subs	r2, #1
 8004bf0:	0552      	lsls	r2, r2, #21
 8004bf2:	4311      	orrs	r1, r2
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6852      	ldr	r2, [r2, #4]
 8004bf8:	3a01      	subs	r2, #1
 8004bfa:	0112      	lsls	r2, r2, #4
 8004bfc:	4311      	orrs	r1, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	4926      	ldr	r1, [pc, #152]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	610b      	str	r3, [r1, #16]
 8004c0a:	e017      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c0c:	4b24      	ldr	r3, [pc, #144]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	4b26      	ldr	r3, [pc, #152]	; (8004cac <RCCEx_PLLSAI1_Config+0x1c8>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6892      	ldr	r2, [r2, #8]
 8004c18:	0211      	lsls	r1, r2, #8
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6952      	ldr	r2, [r2, #20]
 8004c1e:	0852      	lsrs	r2, r2, #1
 8004c20:	3a01      	subs	r2, #1
 8004c22:	0652      	lsls	r2, r2, #25
 8004c24:	4311      	orrs	r1, r2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6852      	ldr	r2, [r2, #4]
 8004c2a:	3a01      	subs	r2, #1
 8004c2c:	0112      	lsls	r2, r2, #4
 8004c2e:	4311      	orrs	r1, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	491a      	ldr	r1, [pc, #104]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c3c:	4b18      	ldr	r3, [pc, #96]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a17      	ldr	r2, [pc, #92]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fc fd04 	bl	8001654 <HAL_GetTick>
 8004c4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c4e:	e00f      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c50:	f7fc fd00 	bl	8001654 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d908      	bls.n	8004c70 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c5e:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004c6e:	e006      	b.n	8004c7e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0e9      	beq.n	8004c50 <RCCEx_PLLSAI1_Config+0x16c>
 8004c7c:	e000      	b.n	8004c80 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004c7e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	4904      	ldr	r1, [pc, #16]	; (8004ca0 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	07ff800c 	.word	0x07ff800c
 8004ca8:	ff9f800c 	.word	0xff9f800c
 8004cac:	f9ff800c 	.word	0xf9ff800c

08004cb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d018      	beq.n	8004cf8 <RCCEx_PLLSAI2_Config+0x48>
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d81f      	bhi.n	8004d0a <RCCEx_PLLSAI2_Config+0x5a>
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d002      	beq.n	8004cd4 <RCCEx_PLLSAI2_Config+0x24>
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d009      	beq.n	8004ce6 <RCCEx_PLLSAI2_Config+0x36>
 8004cd2:	e01a      	b.n	8004d0a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cd4:	4b4a      	ldr	r3, [pc, #296]	; (8004e00 <RCCEx_PLLSAI2_Config+0x150>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d117      	bne.n	8004d10 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce4:	e014      	b.n	8004d10 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ce6:	4b46      	ldr	r3, [pc, #280]	; (8004e00 <RCCEx_PLLSAI2_Config+0x150>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d110      	bne.n	8004d14 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cf6:	e00d      	b.n	8004d14 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004cf8:	4b41      	ldr	r3, [pc, #260]	; (8004e00 <RCCEx_PLLSAI2_Config+0x150>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d109      	bne.n	8004d18 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d08:	e006      	b.n	8004d18 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d0e:	e004      	b.n	8004d1a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004d10:	bf00      	nop
 8004d12:	e002      	b.n	8004d1a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004d14:	bf00      	nop
 8004d16:	e000      	b.n	8004d1a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004d18:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d169      	bne.n	8004df4 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d20:	4b37      	ldr	r3, [pc, #220]	; (8004e00 <RCCEx_PLLSAI2_Config+0x150>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a36      	ldr	r2, [pc, #216]	; (8004e00 <RCCEx_PLLSAI2_Config+0x150>)
 8004d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2c:	f7fc fc92 	bl	8001654 <HAL_GetTick>
 8004d30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d32:	e00f      	b.n	8004d54 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d34:	f7fc fc8e 	bl	8001654 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d908      	bls.n	8004d54 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d42:	4b2f      	ldr	r3, [pc, #188]	; (8004e00 <RCCEx_PLLSAI2_Config+0x150>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d52:	e006      	b.n	8004d62 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d54:	4b2a      	ldr	r3, [pc, #168]	; (8004e00 <RCCEx_PLLSAI2_Config+0x150>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e9      	bne.n	8004d34 <RCCEx_PLLSAI2_Config+0x84>
 8004d60:	e000      	b.n	8004d64 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004d62:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d144      	bne.n	8004df4 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d115      	bne.n	8004d9c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d70:	4b23      	ldr	r3, [pc, #140]	; (8004e00 <RCCEx_PLLSAI2_Config+0x150>)
 8004d72:	695a      	ldr	r2, [r3, #20]
 8004d74:	4b23      	ldr	r3, [pc, #140]	; (8004e04 <RCCEx_PLLSAI2_Config+0x154>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6892      	ldr	r2, [r2, #8]
 8004d7c:	0211      	lsls	r1, r2, #8
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	68d2      	ldr	r2, [r2, #12]
 8004d82:	06d2      	lsls	r2, r2, #27
 8004d84:	4311      	orrs	r1, r2
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6852      	ldr	r2, [r2, #4]
 8004d8a:	3a01      	subs	r2, #1
 8004d8c:	0112      	lsls	r2, r2, #4
 8004d8e:	4311      	orrs	r1, r2
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6812      	ldr	r2, [r2, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	491a      	ldr	r1, [pc, #104]	; (8004e00 <RCCEx_PLLSAI2_Config+0x150>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d9c:	4b18      	ldr	r3, [pc, #96]	; (8004e00 <RCCEx_PLLSAI2_Config+0x150>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <RCCEx_PLLSAI2_Config+0x150>)
 8004da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da8:	f7fc fc54 	bl	8001654 <HAL_GetTick>
 8004dac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dae:	e00f      	b.n	8004dd0 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004db0:	f7fc fc50 	bl	8001654 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d908      	bls.n	8004dd0 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dbe:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <RCCEx_PLLSAI2_Config+0x150>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004dce:	e006      	b.n	8004dde <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <RCCEx_PLLSAI2_Config+0x150>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0e9      	beq.n	8004db0 <RCCEx_PLLSAI2_Config+0x100>
 8004ddc:	e000      	b.n	8004de0 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004dde:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004de6:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <RCCEx_PLLSAI2_Config+0x150>)
 8004de8:	695a      	ldr	r2, [r3, #20]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	4904      	ldr	r1, [pc, #16]	; (8004e00 <RCCEx_PLLSAI2_Config+0x150>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40021000 	.word	0x40021000
 8004e04:	07ff800c 	.word	0x07ff800c

08004e08 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d066      	beq.n	8004ee8 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fc f95c 	bl	80010ec <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b10      	cmp	r3, #16
 8004e48:	d045      	beq.n	8004ed6 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e4a:	4b2a      	ldr	r3, [pc, #168]	; (8004ef4 <HAL_RTC_Init+0xec>)
 8004e4c:	22ca      	movs	r2, #202	; 0xca
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24
 8004e50:	4b28      	ldr	r3, [pc, #160]	; (8004ef4 <HAL_RTC_Init+0xec>)
 8004e52:	2253      	movs	r2, #83	; 0x53
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f872 	bl	8004f40 <RTC_EnterInitMode>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d121      	bne.n	8004eaa <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004e66:	4b23      	ldr	r3, [pc, #140]	; (8004ef4 <HAL_RTC_Init+0xec>)
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	4a22      	ldr	r2, [pc, #136]	; (8004ef4 <HAL_RTC_Init+0xec>)
 8004e6c:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e74:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004e76:	4b1f      	ldr	r3, [pc, #124]	; (8004ef4 <HAL_RTC_Init+0xec>)
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6859      	ldr	r1, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	4319      	orrs	r1, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	491a      	ldr	r1, [pc, #104]	; (8004ef4 <HAL_RTC_Init+0xec>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	041b      	lsls	r3, r3, #16
 8004e9a:	4916      	ldr	r1, [pc, #88]	; (8004ef4 <HAL_RTC_Init+0xec>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f881 	bl	8004fa8 <RTC_ExitInitMode>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10e      	bne.n	8004ece <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8004eb0:	4b10      	ldr	r3, [pc, #64]	; (8004ef4 <HAL_RTC_Init+0xec>)
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a19      	ldr	r1, [r3, #32]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	4319      	orrs	r1, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	430b      	orrs	r3, r1
 8004ec8:	490a      	ldr	r1, [pc, #40]	; (8004ef4 <HAL_RTC_Init+0xec>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ece:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <HAL_RTC_Init+0xec>)
 8004ed0:	22ff      	movs	r2, #255	; 0xff
 8004ed2:	625a      	str	r2, [r3, #36]	; 0x24
 8004ed4:	e001      	b.n	8004eda <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d103      	bne.n	8004ee8 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40002800 	.word	0x40002800

08004ef8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8004f00:	4b0d      	ldr	r3, [pc, #52]	; (8004f38 <HAL_RTC_WaitForSynchro+0x40>)
 8004f02:	4a0e      	ldr	r2, [pc, #56]	; (8004f3c <HAL_RTC_WaitForSynchro+0x44>)
 8004f04:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004f06:	f7fc fba5 	bl	8001654 <HAL_GetTick>
 8004f0a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004f0c:	e009      	b.n	8004f22 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f0e:	f7fc fba1 	bl	8001654 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f1c:	d901      	bls.n	8004f22 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e006      	b.n	8004f30 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004f22:	4b05      	ldr	r3, [pc, #20]	; (8004f38 <HAL_RTC_WaitForSynchro+0x40>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0ef      	beq.n	8004f0e <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40002800 	.word	0x40002800
 8004f3c:	0001005c 	.word	0x0001005c

08004f40 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004f4c:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <RTC_EnterInitMode+0x64>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d120      	bne.n	8004f9a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004f58:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <RTC_EnterInitMode+0x64>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4a11      	ldr	r2, [pc, #68]	; (8004fa4 <RTC_EnterInitMode+0x64>)
 8004f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f62:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004f64:	f7fc fb76 	bl	8001654 <HAL_GetTick>
 8004f68:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f6a:	e00d      	b.n	8004f88 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004f6c:	f7fc fb72 	bl	8001654 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f7a:	d905      	bls.n	8004f88 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2203      	movs	r2, #3
 8004f84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f88:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <RTC_EnterInitMode+0x64>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d102      	bne.n	8004f9a <RTC_EnterInitMode+0x5a>
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d1e8      	bne.n	8004f6c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40002800 	.word	0x40002800

08004fa8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <RTC_ExitInitMode+0x78>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4a19      	ldr	r2, [pc, #100]	; (8005020 <RTC_ExitInitMode+0x78>)
 8004fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fbe:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004fc0:	4b17      	ldr	r3, [pc, #92]	; (8005020 <RTC_ExitInitMode+0x78>)
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10c      	bne.n	8004fe6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff ff93 	bl	8004ef8 <HAL_RTC_WaitForSynchro>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01e      	beq.n	8005016 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2203      	movs	r2, #3
 8004fdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	73fb      	strb	r3, [r7, #15]
 8004fe4:	e017      	b.n	8005016 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004fe6:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <RTC_ExitInitMode+0x78>)
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	4a0d      	ldr	r2, [pc, #52]	; (8005020 <RTC_ExitInitMode+0x78>)
 8004fec:	f023 0320 	bic.w	r3, r3, #32
 8004ff0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff ff80 	bl	8004ef8 <HAL_RTC_WaitForSynchro>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2203      	movs	r2, #3
 8005002:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <RTC_ExitInitMode+0x78>)
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	4a04      	ldr	r2, [pc, #16]	; (8005020 <RTC_ExitInitMode+0x78>)
 8005010:	f043 0320 	orr.w	r3, r3, #32
 8005014:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005016:	7bfb      	ldrb	r3, [r7, #15]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40002800 	.word	0x40002800

08005024 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	490f      	ldr	r1, [pc, #60]	; (8005074 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8005038:	4313      	orrs	r3, r2
 800503a:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	490c      	ldr	r1, [pc, #48]	; (8005078 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005046:	4313      	orrs	r3, r2
 8005048:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 800504a:	4b0b      	ldr	r3, [pc, #44]	; (8005078 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	6919      	ldr	r1, [r3, #16]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	041b      	lsls	r3, r3, #16
 800505c:	430b      	orrs	r3, r1
 800505e:	4906      	ldr	r1, [pc, #24]	; (8005078 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005060:	4313      	orrs	r3, r2
 8005062:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40002800 	.word	0x40002800
 8005078:	40003400 	.word	0x40003400

0800507c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e049      	b.n	8005122 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d106      	bne.n	80050a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fc f860 	bl	8001168 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f000 fa50 	bl	8005560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d109      	bne.n	8005150 <HAL_TIM_PWM_Start+0x24>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	bf14      	ite	ne
 8005148:	2301      	movne	r3, #1
 800514a:	2300      	moveq	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	e03c      	b.n	80051ca <HAL_TIM_PWM_Start+0x9e>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b04      	cmp	r3, #4
 8005154:	d109      	bne.n	800516a <HAL_TIM_PWM_Start+0x3e>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b01      	cmp	r3, #1
 8005160:	bf14      	ite	ne
 8005162:	2301      	movne	r3, #1
 8005164:	2300      	moveq	r3, #0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	e02f      	b.n	80051ca <HAL_TIM_PWM_Start+0x9e>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b08      	cmp	r3, #8
 800516e:	d109      	bne.n	8005184 <HAL_TIM_PWM_Start+0x58>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	bf14      	ite	ne
 800517c:	2301      	movne	r3, #1
 800517e:	2300      	moveq	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	e022      	b.n	80051ca <HAL_TIM_PWM_Start+0x9e>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b0c      	cmp	r3, #12
 8005188:	d109      	bne.n	800519e <HAL_TIM_PWM_Start+0x72>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b01      	cmp	r3, #1
 8005194:	bf14      	ite	ne
 8005196:	2301      	movne	r3, #1
 8005198:	2300      	moveq	r3, #0
 800519a:	b2db      	uxtb	r3, r3
 800519c:	e015      	b.n	80051ca <HAL_TIM_PWM_Start+0x9e>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d109      	bne.n	80051b8 <HAL_TIM_PWM_Start+0x8c>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	bf14      	ite	ne
 80051b0:	2301      	movne	r3, #1
 80051b2:	2300      	moveq	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	e008      	b.n	80051ca <HAL_TIM_PWM_Start+0x9e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	bf14      	ite	ne
 80051c4:	2301      	movne	r3, #1
 80051c6:	2300      	moveq	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e09c      	b.n	800530c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_PWM_Start+0xb6>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051e0:	e023      	b.n	800522a <HAL_TIM_PWM_Start+0xfe>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_PWM_Start+0xc6>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051f0:	e01b      	b.n	800522a <HAL_TIM_PWM_Start+0xfe>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_PWM_Start+0xd6>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005200:	e013      	b.n	800522a <HAL_TIM_PWM_Start+0xfe>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b0c      	cmp	r3, #12
 8005206:	d104      	bne.n	8005212 <HAL_TIM_PWM_Start+0xe6>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005210:	e00b      	b.n	800522a <HAL_TIM_PWM_Start+0xfe>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b10      	cmp	r3, #16
 8005216:	d104      	bne.n	8005222 <HAL_TIM_PWM_Start+0xf6>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005220:	e003      	b.n	800522a <HAL_TIM_PWM_Start+0xfe>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2202      	movs	r2, #2
 8005226:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2201      	movs	r2, #1
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fd10 	bl	8005c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a35      	ldr	r2, [pc, #212]	; (8005314 <HAL_TIM_PWM_Start+0x1e8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <HAL_TIM_PWM_Start+0x13e>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a34      	ldr	r2, [pc, #208]	; (8005318 <HAL_TIM_PWM_Start+0x1ec>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00e      	beq.n	800526a <HAL_TIM_PWM_Start+0x13e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a32      	ldr	r2, [pc, #200]	; (800531c <HAL_TIM_PWM_Start+0x1f0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d009      	beq.n	800526a <HAL_TIM_PWM_Start+0x13e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a31      	ldr	r2, [pc, #196]	; (8005320 <HAL_TIM_PWM_Start+0x1f4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d004      	beq.n	800526a <HAL_TIM_PWM_Start+0x13e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a2f      	ldr	r2, [pc, #188]	; (8005324 <HAL_TIM_PWM_Start+0x1f8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d101      	bne.n	800526e <HAL_TIM_PWM_Start+0x142>
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <HAL_TIM_PWM_Start+0x144>
 800526e:	2300      	movs	r3, #0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d007      	beq.n	8005284 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005282:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a22      	ldr	r2, [pc, #136]	; (8005314 <HAL_TIM_PWM_Start+0x1e8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d01d      	beq.n	80052ca <HAL_TIM_PWM_Start+0x19e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005296:	d018      	beq.n	80052ca <HAL_TIM_PWM_Start+0x19e>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a22      	ldr	r2, [pc, #136]	; (8005328 <HAL_TIM_PWM_Start+0x1fc>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <HAL_TIM_PWM_Start+0x19e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a21      	ldr	r2, [pc, #132]	; (800532c <HAL_TIM_PWM_Start+0x200>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00e      	beq.n	80052ca <HAL_TIM_PWM_Start+0x19e>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1f      	ldr	r2, [pc, #124]	; (8005330 <HAL_TIM_PWM_Start+0x204>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d009      	beq.n	80052ca <HAL_TIM_PWM_Start+0x19e>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a17      	ldr	r2, [pc, #92]	; (8005318 <HAL_TIM_PWM_Start+0x1ec>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <HAL_TIM_PWM_Start+0x19e>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a15      	ldr	r2, [pc, #84]	; (800531c <HAL_TIM_PWM_Start+0x1f0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d115      	bne.n	80052f6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	4b18      	ldr	r3, [pc, #96]	; (8005334 <HAL_TIM_PWM_Start+0x208>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b06      	cmp	r3, #6
 80052da:	d015      	beq.n	8005308 <HAL_TIM_PWM_Start+0x1dc>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e2:	d011      	beq.n	8005308 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f4:	e008      	b.n	8005308 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0201 	orr.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e000      	b.n	800530a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005308:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40012c00 	.word	0x40012c00
 8005318:	40013400 	.word	0x40013400
 800531c:	40014000 	.word	0x40014000
 8005320:	40014400 	.word	0x40014400
 8005324:	40014800 	.word	0x40014800
 8005328:	40000400 	.word	0x40000400
 800532c:	40000800 	.word	0x40000800
 8005330:	40000c00 	.word	0x40000c00
 8005334:	00010007 	.word	0x00010007

08005338 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005352:	2302      	movs	r3, #2
 8005354:	e0ff      	b.n	8005556 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b14      	cmp	r3, #20
 8005362:	f200 80f0 	bhi.w	8005546 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005366:	a201      	add	r2, pc, #4	; (adr r2, 800536c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536c:	080053c1 	.word	0x080053c1
 8005370:	08005547 	.word	0x08005547
 8005374:	08005547 	.word	0x08005547
 8005378:	08005547 	.word	0x08005547
 800537c:	08005401 	.word	0x08005401
 8005380:	08005547 	.word	0x08005547
 8005384:	08005547 	.word	0x08005547
 8005388:	08005547 	.word	0x08005547
 800538c:	08005443 	.word	0x08005443
 8005390:	08005547 	.word	0x08005547
 8005394:	08005547 	.word	0x08005547
 8005398:	08005547 	.word	0x08005547
 800539c:	08005483 	.word	0x08005483
 80053a0:	08005547 	.word	0x08005547
 80053a4:	08005547 	.word	0x08005547
 80053a8:	08005547 	.word	0x08005547
 80053ac:	080054c5 	.word	0x080054c5
 80053b0:	08005547 	.word	0x08005547
 80053b4:	08005547 	.word	0x08005547
 80053b8:	08005547 	.word	0x08005547
 80053bc:	08005505 	.word	0x08005505
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 f970 	bl	80056ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0208 	orr.w	r2, r2, #8
 80053da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0204 	bic.w	r2, r2, #4
 80053ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6999      	ldr	r1, [r3, #24]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	619a      	str	r2, [r3, #24]
      break;
 80053fe:	e0a5      	b.n	800554c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f9e0 	bl	80057cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800541a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800542a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6999      	ldr	r1, [r3, #24]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	021a      	lsls	r2, r3, #8
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	619a      	str	r2, [r3, #24]
      break;
 8005440:	e084      	b.n	800554c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fa49 	bl	80058e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0208 	orr.w	r2, r2, #8
 800545c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0204 	bic.w	r2, r2, #4
 800546c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69d9      	ldr	r1, [r3, #28]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	61da      	str	r2, [r3, #28]
      break;
 8005480:	e064      	b.n	800554c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fab1 	bl	80059f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800549c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69da      	ldr	r2, [r3, #28]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69d9      	ldr	r1, [r3, #28]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	021a      	lsls	r2, r3, #8
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	61da      	str	r2, [r3, #28]
      break;
 80054c2:	e043      	b.n	800554c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fafa 	bl	8005ac4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0208 	orr.w	r2, r2, #8
 80054de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0204 	bic.w	r2, r2, #4
 80054ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005502:	e023      	b.n	800554c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68b9      	ldr	r1, [r7, #8]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fb3e 	bl	8005b8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800551e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	021a      	lsls	r2, r3, #8
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005544:	e002      	b.n	800554c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	75fb      	strb	r3, [r7, #23]
      break;
 800554a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005554:	7dfb      	ldrb	r3, [r7, #23]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop

08005560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a46      	ldr	r2, [pc, #280]	; (800568c <TIM_Base_SetConfig+0x12c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d013      	beq.n	80055a0 <TIM_Base_SetConfig+0x40>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557e:	d00f      	beq.n	80055a0 <TIM_Base_SetConfig+0x40>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a43      	ldr	r2, [pc, #268]	; (8005690 <TIM_Base_SetConfig+0x130>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00b      	beq.n	80055a0 <TIM_Base_SetConfig+0x40>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a42      	ldr	r2, [pc, #264]	; (8005694 <TIM_Base_SetConfig+0x134>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d007      	beq.n	80055a0 <TIM_Base_SetConfig+0x40>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a41      	ldr	r2, [pc, #260]	; (8005698 <TIM_Base_SetConfig+0x138>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d003      	beq.n	80055a0 <TIM_Base_SetConfig+0x40>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a40      	ldr	r2, [pc, #256]	; (800569c <TIM_Base_SetConfig+0x13c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d108      	bne.n	80055b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a35      	ldr	r2, [pc, #212]	; (800568c <TIM_Base_SetConfig+0x12c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d01f      	beq.n	80055fa <TIM_Base_SetConfig+0x9a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c0:	d01b      	beq.n	80055fa <TIM_Base_SetConfig+0x9a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a32      	ldr	r2, [pc, #200]	; (8005690 <TIM_Base_SetConfig+0x130>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d017      	beq.n	80055fa <TIM_Base_SetConfig+0x9a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a31      	ldr	r2, [pc, #196]	; (8005694 <TIM_Base_SetConfig+0x134>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d013      	beq.n	80055fa <TIM_Base_SetConfig+0x9a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a30      	ldr	r2, [pc, #192]	; (8005698 <TIM_Base_SetConfig+0x138>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00f      	beq.n	80055fa <TIM_Base_SetConfig+0x9a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a2f      	ldr	r2, [pc, #188]	; (800569c <TIM_Base_SetConfig+0x13c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00b      	beq.n	80055fa <TIM_Base_SetConfig+0x9a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2e      	ldr	r2, [pc, #184]	; (80056a0 <TIM_Base_SetConfig+0x140>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d007      	beq.n	80055fa <TIM_Base_SetConfig+0x9a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a2d      	ldr	r2, [pc, #180]	; (80056a4 <TIM_Base_SetConfig+0x144>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d003      	beq.n	80055fa <TIM_Base_SetConfig+0x9a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a2c      	ldr	r2, [pc, #176]	; (80056a8 <TIM_Base_SetConfig+0x148>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d108      	bne.n	800560c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a16      	ldr	r2, [pc, #88]	; (800568c <TIM_Base_SetConfig+0x12c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00f      	beq.n	8005658 <TIM_Base_SetConfig+0xf8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a18      	ldr	r2, [pc, #96]	; (800569c <TIM_Base_SetConfig+0x13c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00b      	beq.n	8005658 <TIM_Base_SetConfig+0xf8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a17      	ldr	r2, [pc, #92]	; (80056a0 <TIM_Base_SetConfig+0x140>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_Base_SetConfig+0xf8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a16      	ldr	r2, [pc, #88]	; (80056a4 <TIM_Base_SetConfig+0x144>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_Base_SetConfig+0xf8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a15      	ldr	r2, [pc, #84]	; (80056a8 <TIM_Base_SetConfig+0x148>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d103      	bne.n	8005660 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b01      	cmp	r3, #1
 8005670:	d105      	bne.n	800567e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f023 0201 	bic.w	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	611a      	str	r2, [r3, #16]
  }
}
 800567e:	bf00      	nop
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40012c00 	.word	0x40012c00
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800
 8005698:	40000c00 	.word	0x40000c00
 800569c:	40013400 	.word	0x40013400
 80056a0:	40014000 	.word	0x40014000
 80056a4:	40014400 	.word	0x40014400
 80056a8:	40014800 	.word	0x40014800

080056ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f023 0201 	bic.w	r2, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0303 	bic.w	r3, r3, #3
 80056e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f023 0302 	bic.w	r3, r3, #2
 80056f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a2c      	ldr	r2, [pc, #176]	; (80057b8 <TIM_OC1_SetConfig+0x10c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00f      	beq.n	800572c <TIM_OC1_SetConfig+0x80>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a2b      	ldr	r2, [pc, #172]	; (80057bc <TIM_OC1_SetConfig+0x110>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00b      	beq.n	800572c <TIM_OC1_SetConfig+0x80>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a2a      	ldr	r2, [pc, #168]	; (80057c0 <TIM_OC1_SetConfig+0x114>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d007      	beq.n	800572c <TIM_OC1_SetConfig+0x80>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a29      	ldr	r2, [pc, #164]	; (80057c4 <TIM_OC1_SetConfig+0x118>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_OC1_SetConfig+0x80>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a28      	ldr	r2, [pc, #160]	; (80057c8 <TIM_OC1_SetConfig+0x11c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d10c      	bne.n	8005746 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f023 0308 	bic.w	r3, r3, #8
 8005732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f023 0304 	bic.w	r3, r3, #4
 8005744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a1b      	ldr	r2, [pc, #108]	; (80057b8 <TIM_OC1_SetConfig+0x10c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00f      	beq.n	800576e <TIM_OC1_SetConfig+0xc2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a1a      	ldr	r2, [pc, #104]	; (80057bc <TIM_OC1_SetConfig+0x110>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00b      	beq.n	800576e <TIM_OC1_SetConfig+0xc2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a19      	ldr	r2, [pc, #100]	; (80057c0 <TIM_OC1_SetConfig+0x114>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d007      	beq.n	800576e <TIM_OC1_SetConfig+0xc2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <TIM_OC1_SetConfig+0x118>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_OC1_SetConfig+0xc2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a17      	ldr	r2, [pc, #92]	; (80057c8 <TIM_OC1_SetConfig+0x11c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d111      	bne.n	8005792 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800577c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	621a      	str	r2, [r3, #32]
}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40013400 	.word	0x40013400
 80057c0:	40014000 	.word	0x40014000
 80057c4:	40014400 	.word	0x40014400
 80057c8:	40014800 	.word	0x40014800

080057cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	f023 0210 	bic.w	r2, r3, #16
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f023 0320 	bic.w	r3, r3, #32
 800581a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a28      	ldr	r2, [pc, #160]	; (80058cc <TIM_OC2_SetConfig+0x100>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d003      	beq.n	8005838 <TIM_OC2_SetConfig+0x6c>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a27      	ldr	r2, [pc, #156]	; (80058d0 <TIM_OC2_SetConfig+0x104>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d10d      	bne.n	8005854 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800583e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005852:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a1d      	ldr	r2, [pc, #116]	; (80058cc <TIM_OC2_SetConfig+0x100>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00f      	beq.n	800587c <TIM_OC2_SetConfig+0xb0>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a1c      	ldr	r2, [pc, #112]	; (80058d0 <TIM_OC2_SetConfig+0x104>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d00b      	beq.n	800587c <TIM_OC2_SetConfig+0xb0>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a1b      	ldr	r2, [pc, #108]	; (80058d4 <TIM_OC2_SetConfig+0x108>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d007      	beq.n	800587c <TIM_OC2_SetConfig+0xb0>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a1a      	ldr	r2, [pc, #104]	; (80058d8 <TIM_OC2_SetConfig+0x10c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d003      	beq.n	800587c <TIM_OC2_SetConfig+0xb0>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a19      	ldr	r2, [pc, #100]	; (80058dc <TIM_OC2_SetConfig+0x110>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d113      	bne.n	80058a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005882:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800588a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40013400 	.word	0x40013400
 80058d4:	40014000 	.word	0x40014000
 80058d8:	40014400 	.word	0x40014400
 80058dc:	40014800 	.word	0x40014800

080058e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800590e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0303 	bic.w	r3, r3, #3
 800591a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800592c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a27      	ldr	r2, [pc, #156]	; (80059dc <TIM_OC3_SetConfig+0xfc>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d003      	beq.n	800594a <TIM_OC3_SetConfig+0x6a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a26      	ldr	r2, [pc, #152]	; (80059e0 <TIM_OC3_SetConfig+0x100>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d10d      	bne.n	8005966 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	021b      	lsls	r3, r3, #8
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a1c      	ldr	r2, [pc, #112]	; (80059dc <TIM_OC3_SetConfig+0xfc>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00f      	beq.n	800598e <TIM_OC3_SetConfig+0xae>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a1b      	ldr	r2, [pc, #108]	; (80059e0 <TIM_OC3_SetConfig+0x100>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d00b      	beq.n	800598e <TIM_OC3_SetConfig+0xae>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a1a      	ldr	r2, [pc, #104]	; (80059e4 <TIM_OC3_SetConfig+0x104>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d007      	beq.n	800598e <TIM_OC3_SetConfig+0xae>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <TIM_OC3_SetConfig+0x108>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d003      	beq.n	800598e <TIM_OC3_SetConfig+0xae>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a18      	ldr	r2, [pc, #96]	; (80059ec <TIM_OC3_SetConfig+0x10c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d113      	bne.n	80059b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800599c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	621a      	str	r2, [r3, #32]
}
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	40012c00 	.word	0x40012c00
 80059e0:	40013400 	.word	0x40013400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40014400 	.word	0x40014400
 80059ec:	40014800 	.word	0x40014800

080059f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	031b      	lsls	r3, r3, #12
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a18      	ldr	r2, [pc, #96]	; (8005ab0 <TIM_OC4_SetConfig+0xc0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00f      	beq.n	8005a74 <TIM_OC4_SetConfig+0x84>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a17      	ldr	r2, [pc, #92]	; (8005ab4 <TIM_OC4_SetConfig+0xc4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00b      	beq.n	8005a74 <TIM_OC4_SetConfig+0x84>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a16      	ldr	r2, [pc, #88]	; (8005ab8 <TIM_OC4_SetConfig+0xc8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d007      	beq.n	8005a74 <TIM_OC4_SetConfig+0x84>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a15      	ldr	r2, [pc, #84]	; (8005abc <TIM_OC4_SetConfig+0xcc>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_OC4_SetConfig+0x84>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a14      	ldr	r2, [pc, #80]	; (8005ac0 <TIM_OC4_SetConfig+0xd0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d109      	bne.n	8005a88 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	019b      	lsls	r3, r3, #6
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	621a      	str	r2, [r3, #32]
}
 8005aa2:	bf00      	nop
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	40013400 	.word	0x40013400
 8005ab8:	40014000 	.word	0x40014000
 8005abc:	40014400 	.word	0x40014400
 8005ac0:	40014800 	.word	0x40014800

08005ac4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b087      	sub	sp, #28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	041b      	lsls	r3, r3, #16
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a17      	ldr	r2, [pc, #92]	; (8005b78 <TIM_OC5_SetConfig+0xb4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00f      	beq.n	8005b3e <TIM_OC5_SetConfig+0x7a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a16      	ldr	r2, [pc, #88]	; (8005b7c <TIM_OC5_SetConfig+0xb8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00b      	beq.n	8005b3e <TIM_OC5_SetConfig+0x7a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a15      	ldr	r2, [pc, #84]	; (8005b80 <TIM_OC5_SetConfig+0xbc>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d007      	beq.n	8005b3e <TIM_OC5_SetConfig+0x7a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a14      	ldr	r2, [pc, #80]	; (8005b84 <TIM_OC5_SetConfig+0xc0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d003      	beq.n	8005b3e <TIM_OC5_SetConfig+0x7a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a13      	ldr	r2, [pc, #76]	; (8005b88 <TIM_OC5_SetConfig+0xc4>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d109      	bne.n	8005b52 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	621a      	str	r2, [r3, #32]
}
 8005b6c:	bf00      	nop
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	40012c00 	.word	0x40012c00
 8005b7c:	40013400 	.word	0x40013400
 8005b80:	40014000 	.word	0x40014000
 8005b84:	40014400 	.word	0x40014400
 8005b88:	40014800 	.word	0x40014800

08005b8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	051b      	lsls	r3, r3, #20
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a18      	ldr	r2, [pc, #96]	; (8005c44 <TIM_OC6_SetConfig+0xb8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00f      	beq.n	8005c08 <TIM_OC6_SetConfig+0x7c>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a17      	ldr	r2, [pc, #92]	; (8005c48 <TIM_OC6_SetConfig+0xbc>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00b      	beq.n	8005c08 <TIM_OC6_SetConfig+0x7c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a16      	ldr	r2, [pc, #88]	; (8005c4c <TIM_OC6_SetConfig+0xc0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d007      	beq.n	8005c08 <TIM_OC6_SetConfig+0x7c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a15      	ldr	r2, [pc, #84]	; (8005c50 <TIM_OC6_SetConfig+0xc4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_OC6_SetConfig+0x7c>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a14      	ldr	r2, [pc, #80]	; (8005c54 <TIM_OC6_SetConfig+0xc8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d109      	bne.n	8005c1c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	029b      	lsls	r3, r3, #10
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	621a      	str	r2, [r3, #32]
}
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	40013400 	.word	0x40013400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40014400 	.word	0x40014400
 8005c54:	40014800 	.word	0x40014800

08005c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 031f 	and.w	r3, r3, #31
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a1a      	ldr	r2, [r3, #32]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	401a      	ands	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a1a      	ldr	r2, [r3, #32]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f003 031f 	and.w	r3, r3, #31
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c90:	431a      	orrs	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	621a      	str	r2, [r3, #32]
}
 8005c96:	bf00      	nop
 8005c98:	371c      	adds	r7, #28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
	...

08005ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e068      	b.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a2e      	ldr	r2, [pc, #184]	; (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d004      	beq.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a2d      	ldr	r2, [pc, #180]	; (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d108      	bne.n	8005d02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1e      	ldr	r2, [pc, #120]	; (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d01d      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2e:	d018      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1b      	ldr	r2, [pc, #108]	; (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d013      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1a      	ldr	r2, [pc, #104]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00e      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a18      	ldr	r2, [pc, #96]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d009      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a13      	ldr	r2, [pc, #76]	; (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d004      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a14      	ldr	r2, [pc, #80]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d10c      	bne.n	8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40012c00 	.word	0x40012c00
 8005da0:	40013400 	.word	0x40013400
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800
 8005dac:	40000c00 	.word	0x40000c00
 8005db0:	40014000 	.word	0x40014000

08005db4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d101      	bne.n	8005dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e073      	b.n	8005eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	041b      	lsls	r3, r3, #16
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a19      	ldr	r2, [pc, #100]	; (8005ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d004      	beq.n	8005e6c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a18      	ldr	r2, [pc, #96]	; (8005ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d11c      	bne.n	8005ea6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	051b      	lsls	r3, r3, #20
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40013400 	.word	0x40013400

08005ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e042      	b.n	8005f64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d106      	bne.n	8005ef6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7fb f89b 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2224      	movs	r2, #36	; 0x24
 8005efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0201 	bic.w	r2, r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fb28 	bl	800656c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f825 	bl	8005f6c <UART_SetConfig>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e01b      	b.n	8005f64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689a      	ldr	r2, [r3, #8]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fba7 	bl	80066b0 <UART_CheckIdleState>
 8005f62:	4603      	mov	r3, r0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f70:	b08c      	sub	sp, #48	; 0x30
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	431a      	orrs	r2, r3
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	4baa      	ldr	r3, [pc, #680]	; (8006244 <UART_SetConfig+0x2d8>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a9f      	ldr	r2, [pc, #636]	; (8006248 <UART_SetConfig+0x2dc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d004      	beq.n	8005fd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005fe2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	6812      	ldr	r2, [r2, #0]
 8005fea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fec:	430b      	orrs	r3, r1
 8005fee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	f023 010f 	bic.w	r1, r3, #15
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a90      	ldr	r2, [pc, #576]	; (800624c <UART_SetConfig+0x2e0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d125      	bne.n	800605c <UART_SetConfig+0xf0>
 8006010:	4b8f      	ldr	r3, [pc, #572]	; (8006250 <UART_SetConfig+0x2e4>)
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	2b03      	cmp	r3, #3
 800601c:	d81a      	bhi.n	8006054 <UART_SetConfig+0xe8>
 800601e:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <UART_SetConfig+0xb8>)
 8006020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006024:	08006035 	.word	0x08006035
 8006028:	08006045 	.word	0x08006045
 800602c:	0800603d 	.word	0x0800603d
 8006030:	0800604d 	.word	0x0800604d
 8006034:	2301      	movs	r3, #1
 8006036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800603a:	e116      	b.n	800626a <UART_SetConfig+0x2fe>
 800603c:	2302      	movs	r3, #2
 800603e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006042:	e112      	b.n	800626a <UART_SetConfig+0x2fe>
 8006044:	2304      	movs	r3, #4
 8006046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800604a:	e10e      	b.n	800626a <UART_SetConfig+0x2fe>
 800604c:	2308      	movs	r3, #8
 800604e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006052:	e10a      	b.n	800626a <UART_SetConfig+0x2fe>
 8006054:	2310      	movs	r3, #16
 8006056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800605a:	e106      	b.n	800626a <UART_SetConfig+0x2fe>
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a7c      	ldr	r2, [pc, #496]	; (8006254 <UART_SetConfig+0x2e8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d138      	bne.n	80060d8 <UART_SetConfig+0x16c>
 8006066:	4b7a      	ldr	r3, [pc, #488]	; (8006250 <UART_SetConfig+0x2e4>)
 8006068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606c:	f003 030c 	and.w	r3, r3, #12
 8006070:	2b0c      	cmp	r3, #12
 8006072:	d82d      	bhi.n	80060d0 <UART_SetConfig+0x164>
 8006074:	a201      	add	r2, pc, #4	; (adr r2, 800607c <UART_SetConfig+0x110>)
 8006076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607a:	bf00      	nop
 800607c:	080060b1 	.word	0x080060b1
 8006080:	080060d1 	.word	0x080060d1
 8006084:	080060d1 	.word	0x080060d1
 8006088:	080060d1 	.word	0x080060d1
 800608c:	080060c1 	.word	0x080060c1
 8006090:	080060d1 	.word	0x080060d1
 8006094:	080060d1 	.word	0x080060d1
 8006098:	080060d1 	.word	0x080060d1
 800609c:	080060b9 	.word	0x080060b9
 80060a0:	080060d1 	.word	0x080060d1
 80060a4:	080060d1 	.word	0x080060d1
 80060a8:	080060d1 	.word	0x080060d1
 80060ac:	080060c9 	.word	0x080060c9
 80060b0:	2300      	movs	r3, #0
 80060b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060b6:	e0d8      	b.n	800626a <UART_SetConfig+0x2fe>
 80060b8:	2302      	movs	r3, #2
 80060ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060be:	e0d4      	b.n	800626a <UART_SetConfig+0x2fe>
 80060c0:	2304      	movs	r3, #4
 80060c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060c6:	e0d0      	b.n	800626a <UART_SetConfig+0x2fe>
 80060c8:	2308      	movs	r3, #8
 80060ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ce:	e0cc      	b.n	800626a <UART_SetConfig+0x2fe>
 80060d0:	2310      	movs	r3, #16
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060d6:	e0c8      	b.n	800626a <UART_SetConfig+0x2fe>
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a5e      	ldr	r2, [pc, #376]	; (8006258 <UART_SetConfig+0x2ec>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d125      	bne.n	800612e <UART_SetConfig+0x1c2>
 80060e2:	4b5b      	ldr	r3, [pc, #364]	; (8006250 <UART_SetConfig+0x2e4>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060ec:	2b30      	cmp	r3, #48	; 0x30
 80060ee:	d016      	beq.n	800611e <UART_SetConfig+0x1b2>
 80060f0:	2b30      	cmp	r3, #48	; 0x30
 80060f2:	d818      	bhi.n	8006126 <UART_SetConfig+0x1ba>
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d00a      	beq.n	800610e <UART_SetConfig+0x1a2>
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	d814      	bhi.n	8006126 <UART_SetConfig+0x1ba>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <UART_SetConfig+0x19a>
 8006100:	2b10      	cmp	r3, #16
 8006102:	d008      	beq.n	8006116 <UART_SetConfig+0x1aa>
 8006104:	e00f      	b.n	8006126 <UART_SetConfig+0x1ba>
 8006106:	2300      	movs	r3, #0
 8006108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800610c:	e0ad      	b.n	800626a <UART_SetConfig+0x2fe>
 800610e:	2302      	movs	r3, #2
 8006110:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006114:	e0a9      	b.n	800626a <UART_SetConfig+0x2fe>
 8006116:	2304      	movs	r3, #4
 8006118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800611c:	e0a5      	b.n	800626a <UART_SetConfig+0x2fe>
 800611e:	2308      	movs	r3, #8
 8006120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006124:	e0a1      	b.n	800626a <UART_SetConfig+0x2fe>
 8006126:	2310      	movs	r3, #16
 8006128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800612c:	e09d      	b.n	800626a <UART_SetConfig+0x2fe>
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a4a      	ldr	r2, [pc, #296]	; (800625c <UART_SetConfig+0x2f0>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d125      	bne.n	8006184 <UART_SetConfig+0x218>
 8006138:	4b45      	ldr	r3, [pc, #276]	; (8006250 <UART_SetConfig+0x2e4>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006142:	2bc0      	cmp	r3, #192	; 0xc0
 8006144:	d016      	beq.n	8006174 <UART_SetConfig+0x208>
 8006146:	2bc0      	cmp	r3, #192	; 0xc0
 8006148:	d818      	bhi.n	800617c <UART_SetConfig+0x210>
 800614a:	2b80      	cmp	r3, #128	; 0x80
 800614c:	d00a      	beq.n	8006164 <UART_SetConfig+0x1f8>
 800614e:	2b80      	cmp	r3, #128	; 0x80
 8006150:	d814      	bhi.n	800617c <UART_SetConfig+0x210>
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <UART_SetConfig+0x1f0>
 8006156:	2b40      	cmp	r3, #64	; 0x40
 8006158:	d008      	beq.n	800616c <UART_SetConfig+0x200>
 800615a:	e00f      	b.n	800617c <UART_SetConfig+0x210>
 800615c:	2300      	movs	r3, #0
 800615e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006162:	e082      	b.n	800626a <UART_SetConfig+0x2fe>
 8006164:	2302      	movs	r3, #2
 8006166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800616a:	e07e      	b.n	800626a <UART_SetConfig+0x2fe>
 800616c:	2304      	movs	r3, #4
 800616e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006172:	e07a      	b.n	800626a <UART_SetConfig+0x2fe>
 8006174:	2308      	movs	r3, #8
 8006176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800617a:	e076      	b.n	800626a <UART_SetConfig+0x2fe>
 800617c:	2310      	movs	r3, #16
 800617e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006182:	e072      	b.n	800626a <UART_SetConfig+0x2fe>
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a35      	ldr	r2, [pc, #212]	; (8006260 <UART_SetConfig+0x2f4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d12a      	bne.n	80061e4 <UART_SetConfig+0x278>
 800618e:	4b30      	ldr	r3, [pc, #192]	; (8006250 <UART_SetConfig+0x2e4>)
 8006190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006198:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800619c:	d01a      	beq.n	80061d4 <UART_SetConfig+0x268>
 800619e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a2:	d81b      	bhi.n	80061dc <UART_SetConfig+0x270>
 80061a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061a8:	d00c      	beq.n	80061c4 <UART_SetConfig+0x258>
 80061aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ae:	d815      	bhi.n	80061dc <UART_SetConfig+0x270>
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <UART_SetConfig+0x250>
 80061b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b8:	d008      	beq.n	80061cc <UART_SetConfig+0x260>
 80061ba:	e00f      	b.n	80061dc <UART_SetConfig+0x270>
 80061bc:	2300      	movs	r3, #0
 80061be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061c2:	e052      	b.n	800626a <UART_SetConfig+0x2fe>
 80061c4:	2302      	movs	r3, #2
 80061c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ca:	e04e      	b.n	800626a <UART_SetConfig+0x2fe>
 80061cc:	2304      	movs	r3, #4
 80061ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061d2:	e04a      	b.n	800626a <UART_SetConfig+0x2fe>
 80061d4:	2308      	movs	r3, #8
 80061d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061da:	e046      	b.n	800626a <UART_SetConfig+0x2fe>
 80061dc:	2310      	movs	r3, #16
 80061de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061e2:	e042      	b.n	800626a <UART_SetConfig+0x2fe>
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a17      	ldr	r2, [pc, #92]	; (8006248 <UART_SetConfig+0x2dc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d13a      	bne.n	8006264 <UART_SetConfig+0x2f8>
 80061ee:	4b18      	ldr	r3, [pc, #96]	; (8006250 <UART_SetConfig+0x2e4>)
 80061f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061fc:	d01a      	beq.n	8006234 <UART_SetConfig+0x2c8>
 80061fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006202:	d81b      	bhi.n	800623c <UART_SetConfig+0x2d0>
 8006204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006208:	d00c      	beq.n	8006224 <UART_SetConfig+0x2b8>
 800620a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800620e:	d815      	bhi.n	800623c <UART_SetConfig+0x2d0>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <UART_SetConfig+0x2b0>
 8006214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006218:	d008      	beq.n	800622c <UART_SetConfig+0x2c0>
 800621a:	e00f      	b.n	800623c <UART_SetConfig+0x2d0>
 800621c:	2300      	movs	r3, #0
 800621e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006222:	e022      	b.n	800626a <UART_SetConfig+0x2fe>
 8006224:	2302      	movs	r3, #2
 8006226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800622a:	e01e      	b.n	800626a <UART_SetConfig+0x2fe>
 800622c:	2304      	movs	r3, #4
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006232:	e01a      	b.n	800626a <UART_SetConfig+0x2fe>
 8006234:	2308      	movs	r3, #8
 8006236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800623a:	e016      	b.n	800626a <UART_SetConfig+0x2fe>
 800623c:	2310      	movs	r3, #16
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006242:	e012      	b.n	800626a <UART_SetConfig+0x2fe>
 8006244:	cfff69f3 	.word	0xcfff69f3
 8006248:	40008000 	.word	0x40008000
 800624c:	40013800 	.word	0x40013800
 8006250:	40021000 	.word	0x40021000
 8006254:	40004400 	.word	0x40004400
 8006258:	40004800 	.word	0x40004800
 800625c:	40004c00 	.word	0x40004c00
 8006260:	40005000 	.word	0x40005000
 8006264:	2310      	movs	r3, #16
 8006266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4ab0      	ldr	r2, [pc, #704]	; (8006530 <UART_SetConfig+0x5c4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	f040 809b 	bne.w	80063ac <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006276:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800627a:	2b08      	cmp	r3, #8
 800627c:	d827      	bhi.n	80062ce <UART_SetConfig+0x362>
 800627e:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <UART_SetConfig+0x318>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	080062a9 	.word	0x080062a9
 8006288:	080062b1 	.word	0x080062b1
 800628c:	080062b9 	.word	0x080062b9
 8006290:	080062cf 	.word	0x080062cf
 8006294:	080062bf 	.word	0x080062bf
 8006298:	080062cf 	.word	0x080062cf
 800629c:	080062cf 	.word	0x080062cf
 80062a0:	080062cf 	.word	0x080062cf
 80062a4:	080062c7 	.word	0x080062c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a8:	f7fd ff9e 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 80062ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062ae:	e014      	b.n	80062da <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b0:	f7fd ffae 	bl	8004210 <HAL_RCC_GetPCLK2Freq>
 80062b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062b6:	e010      	b.n	80062da <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b8:	4b9e      	ldr	r3, [pc, #632]	; (8006534 <UART_SetConfig+0x5c8>)
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062bc:	e00d      	b.n	80062da <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062be:	f7fd fee1 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 80062c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062c4:	e009      	b.n	80062da <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062cc:	e005      	b.n	80062da <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 8130 	beq.w	8006542 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	4a94      	ldr	r2, [pc, #592]	; (8006538 <UART_SetConfig+0x5cc>)
 80062e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ec:	461a      	mov	r2, r3
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	4613      	mov	r3, r2
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	4413      	add	r3, r2
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	429a      	cmp	r2, r3
 8006304:	d305      	bcc.n	8006312 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	429a      	cmp	r2, r3
 8006310:	d903      	bls.n	800631a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006318:	e113      	b.n	8006542 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	2200      	movs	r2, #0
 800631e:	60bb      	str	r3, [r7, #8]
 8006320:	60fa      	str	r2, [r7, #12]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	4a84      	ldr	r2, [pc, #528]	; (8006538 <UART_SetConfig+0x5cc>)
 8006328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800632c:	b29b      	uxth	r3, r3
 800632e:	2200      	movs	r2, #0
 8006330:	603b      	str	r3, [r7, #0]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006338:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800633c:	f7f9 ff7a 	bl	8000234 <__aeabi_uldivmod>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4610      	mov	r0, r2
 8006346:	4619      	mov	r1, r3
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	020b      	lsls	r3, r1, #8
 8006352:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006356:	0202      	lsls	r2, r0, #8
 8006358:	6979      	ldr	r1, [r7, #20]
 800635a:	6849      	ldr	r1, [r1, #4]
 800635c:	0849      	lsrs	r1, r1, #1
 800635e:	2000      	movs	r0, #0
 8006360:	460c      	mov	r4, r1
 8006362:	4605      	mov	r5, r0
 8006364:	eb12 0804 	adds.w	r8, r2, r4
 8006368:	eb43 0905 	adc.w	r9, r3, r5
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	469a      	mov	sl, r3
 8006374:	4693      	mov	fp, r2
 8006376:	4652      	mov	r2, sl
 8006378:	465b      	mov	r3, fp
 800637a:	4640      	mov	r0, r8
 800637c:	4649      	mov	r1, r9
 800637e:	f7f9 ff59 	bl	8000234 <__aeabi_uldivmod>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4613      	mov	r3, r2
 8006388:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006390:	d308      	bcc.n	80063a4 <UART_SetConfig+0x438>
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006398:	d204      	bcs.n	80063a4 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6a3a      	ldr	r2, [r7, #32]
 80063a0:	60da      	str	r2, [r3, #12]
 80063a2:	e0ce      	b.n	8006542 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063aa:	e0ca      	b.n	8006542 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063b4:	d166      	bne.n	8006484 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80063b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063ba:	2b08      	cmp	r3, #8
 80063bc:	d827      	bhi.n	800640e <UART_SetConfig+0x4a2>
 80063be:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <UART_SetConfig+0x458>)
 80063c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c4:	080063e9 	.word	0x080063e9
 80063c8:	080063f1 	.word	0x080063f1
 80063cc:	080063f9 	.word	0x080063f9
 80063d0:	0800640f 	.word	0x0800640f
 80063d4:	080063ff 	.word	0x080063ff
 80063d8:	0800640f 	.word	0x0800640f
 80063dc:	0800640f 	.word	0x0800640f
 80063e0:	0800640f 	.word	0x0800640f
 80063e4:	08006407 	.word	0x08006407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063e8:	f7fd fefe 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 80063ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063ee:	e014      	b.n	800641a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f0:	f7fd ff0e 	bl	8004210 <HAL_RCC_GetPCLK2Freq>
 80063f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063f6:	e010      	b.n	800641a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063f8:	4b4e      	ldr	r3, [pc, #312]	; (8006534 <UART_SetConfig+0x5c8>)
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063fc:	e00d      	b.n	800641a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063fe:	f7fd fe41 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 8006402:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006404:	e009      	b.n	800641a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800640c:	e005      	b.n	800641a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006418:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 8090 	beq.w	8006542 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	4a44      	ldr	r2, [pc, #272]	; (8006538 <UART_SetConfig+0x5cc>)
 8006428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800642c:	461a      	mov	r2, r3
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	fbb3 f3f2 	udiv	r3, r3, r2
 8006434:	005a      	lsls	r2, r3, #1
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	441a      	add	r2, r3
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	fbb2 f3f3 	udiv	r3, r2, r3
 8006446:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	2b0f      	cmp	r3, #15
 800644c:	d916      	bls.n	800647c <UART_SetConfig+0x510>
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006454:	d212      	bcs.n	800647c <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	b29b      	uxth	r3, r3
 800645a:	f023 030f 	bic.w	r3, r3, #15
 800645e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	085b      	lsrs	r3, r3, #1
 8006464:	b29b      	uxth	r3, r3
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	b29a      	uxth	r2, r3
 800646c:	8bfb      	ldrh	r3, [r7, #30]
 800646e:	4313      	orrs	r3, r2
 8006470:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	8bfa      	ldrh	r2, [r7, #30]
 8006478:	60da      	str	r2, [r3, #12]
 800647a:	e062      	b.n	8006542 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006482:	e05e      	b.n	8006542 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006484:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006488:	2b08      	cmp	r3, #8
 800648a:	d828      	bhi.n	80064de <UART_SetConfig+0x572>
 800648c:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <UART_SetConfig+0x528>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	080064b9 	.word	0x080064b9
 8006498:	080064c1 	.word	0x080064c1
 800649c:	080064c9 	.word	0x080064c9
 80064a0:	080064df 	.word	0x080064df
 80064a4:	080064cf 	.word	0x080064cf
 80064a8:	080064df 	.word	0x080064df
 80064ac:	080064df 	.word	0x080064df
 80064b0:	080064df 	.word	0x080064df
 80064b4:	080064d7 	.word	0x080064d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b8:	f7fd fe96 	bl	80041e8 <HAL_RCC_GetPCLK1Freq>
 80064bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064be:	e014      	b.n	80064ea <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c0:	f7fd fea6 	bl	8004210 <HAL_RCC_GetPCLK2Freq>
 80064c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064c6:	e010      	b.n	80064ea <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064c8:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <UART_SetConfig+0x5c8>)
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064cc:	e00d      	b.n	80064ea <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ce:	f7fd fdd9 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 80064d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064d4:	e009      	b.n	80064ea <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064dc:	e005      	b.n	80064ea <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80064e8:	bf00      	nop
    }

    if (pclk != 0U)
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d028      	beq.n	8006542 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	4a10      	ldr	r2, [pc, #64]	; (8006538 <UART_SetConfig+0x5cc>)
 80064f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064fa:	461a      	mov	r2, r3
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	085b      	lsrs	r3, r3, #1
 8006508:	441a      	add	r2, r3
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006512:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	2b0f      	cmp	r3, #15
 8006518:	d910      	bls.n	800653c <UART_SetConfig+0x5d0>
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006520:	d20c      	bcs.n	800653c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	b29a      	uxth	r2, r3
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60da      	str	r2, [r3, #12]
 800652c:	e009      	b.n	8006542 <UART_SetConfig+0x5d6>
 800652e:	bf00      	nop
 8006530:	40008000 	.word	0x40008000
 8006534:	00f42400 	.word	0x00f42400
 8006538:	0800705c 	.word	0x0800705c
      }
      else
      {
        ret = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2201      	movs	r2, #1
 8006546:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2201      	movs	r2, #1
 800654e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2200      	movs	r2, #0
 8006556:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2200      	movs	r2, #0
 800655c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800655e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006562:	4618      	mov	r0, r3
 8006564:	3730      	adds	r7, #48	; 0x30
 8006566:	46bd      	mov	sp, r7
 8006568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800656c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006578:	f003 0308 	and.w	r3, r3, #8
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	f003 0310 	and.w	r3, r3, #16
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01a      	beq.n	8006682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800666a:	d10a      	bne.n	8006682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	605a      	str	r2, [r3, #4]
  }
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b098      	sub	sp, #96	; 0x60
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066c0:	f7fa ffc8 	bl	8001654 <HAL_GetTick>
 80066c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	d12f      	bne.n	8006734 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066dc:	2200      	movs	r2, #0
 80066de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f88e 	bl	8006804 <UART_WaitOnFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d022      	beq.n	8006734 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006702:	653b      	str	r3, [r7, #80]	; 0x50
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800670c:	647b      	str	r3, [r7, #68]	; 0x44
 800670e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800671a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e6      	bne.n	80066ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e063      	b.n	80067fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b04      	cmp	r3, #4
 8006740:	d149      	bne.n	80067d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006742:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800674a:	2200      	movs	r2, #0
 800674c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f857 	bl	8006804 <UART_WaitOnFlagUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d03c      	beq.n	80067d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	623b      	str	r3, [r7, #32]
   return(result);
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006770:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677a:	633b      	str	r3, [r7, #48]	; 0x30
 800677c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e6      	bne.n	800675c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3308      	adds	r3, #8
 8006794:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	60fb      	str	r3, [r7, #12]
   return(result);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3308      	adds	r3, #8
 80067ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067ae:	61fa      	str	r2, [r7, #28]
 80067b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	69b9      	ldr	r1, [r7, #24]
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	617b      	str	r3, [r7, #20]
   return(result);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e5      	bne.n	800678e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e012      	b.n	80067fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2220      	movs	r2, #32
 80067e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3758      	adds	r7, #88	; 0x58
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	603b      	str	r3, [r7, #0]
 8006810:	4613      	mov	r3, r2
 8006812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006814:	e04f      	b.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d04b      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800681e:	f7fa ff19 	bl	8001654 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	429a      	cmp	r2, r3
 800682c:	d302      	bcc.n	8006834 <UART_WaitOnFlagUntilTimeout+0x30>
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e04e      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 0304 	and.w	r3, r3, #4
 8006842:	2b00      	cmp	r3, #0
 8006844:	d037      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b80      	cmp	r3, #128	; 0x80
 800684a:	d034      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2b40      	cmp	r3, #64	; 0x40
 8006850:	d031      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b08      	cmp	r3, #8
 800685e:	d110      	bne.n	8006882 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2208      	movs	r2, #8
 8006866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 f838 	bl	80068de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2208      	movs	r2, #8
 8006872:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e029      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800688c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006890:	d111      	bne.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800689a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f81e 	bl	80068de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e00f      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69da      	ldr	r2, [r3, #28]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4013      	ands	r3, r2
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	bf0c      	ite	eq
 80068c6:	2301      	moveq	r3, #1
 80068c8:	2300      	movne	r3, #0
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	461a      	mov	r2, r3
 80068ce:	79fb      	ldrb	r3, [r7, #7]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d0a0      	beq.n	8006816 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068de:	b480      	push	{r7}
 80068e0:	b095      	sub	sp, #84	; 0x54
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ee:	e853 3f00 	ldrex	r3, [r3]
 80068f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	461a      	mov	r2, r3
 8006902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006904:	643b      	str	r3, [r7, #64]	; 0x40
 8006906:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800690a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800690c:	e841 2300 	strex	r3, r2, [r1]
 8006910:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e6      	bne.n	80068e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3308      	adds	r3, #8
 800691e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	61fb      	str	r3, [r7, #28]
   return(result);
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800692e:	f023 0301 	bic.w	r3, r3, #1
 8006932:	64bb      	str	r3, [r7, #72]	; 0x48
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3308      	adds	r3, #8
 800693a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800693c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800693e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006944:	e841 2300 	strex	r3, r2, [r1]
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e3      	bne.n	8006918 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006954:	2b01      	cmp	r3, #1
 8006956:	d118      	bne.n	800698a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	60bb      	str	r3, [r7, #8]
   return(result);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f023 0310 	bic.w	r3, r3, #16
 800696c:	647b      	str	r3, [r7, #68]	; 0x44
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006976:	61bb      	str	r3, [r7, #24]
 8006978:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6979      	ldr	r1, [r7, #20]
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	613b      	str	r3, [r7, #16]
   return(result);
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e6      	bne.n	8006958 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800699e:	bf00      	nop
 80069a0:	3754      	adds	r7, #84	; 0x54
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b085      	sub	sp, #20
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d101      	bne.n	80069c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80069bc:	2302      	movs	r3, #2
 80069be:	e027      	b.n	8006a10 <HAL_UARTEx_DisableFifoMode+0x66>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2224      	movs	r2, #36	; 0x24
 80069cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0201 	bic.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80069ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e02d      	b.n	8006a90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2224      	movs	r2, #36	; 0x24
 8006a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0201 	bic.w	r2, r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f84f 	bl	8006b14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e02d      	b.n	8006b0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2224      	movs	r2, #36	; 0x24
 8006abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0201 	bic.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f811 	bl	8006b14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d108      	bne.n	8006b36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b34:	e031      	b.n	8006b9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b36:	2308      	movs	r3, #8
 8006b38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b3a:	2308      	movs	r3, #8
 8006b3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	0e5b      	lsrs	r3, r3, #25
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	0f5b      	lsrs	r3, r3, #29
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	7b3a      	ldrb	r2, [r7, #12]
 8006b62:	4911      	ldr	r1, [pc, #68]	; (8006ba8 <UARTEx_SetNbDataToProcess+0x94>)
 8006b64:	5c8a      	ldrb	r2, [r1, r2]
 8006b66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b6a:	7b3a      	ldrb	r2, [r7, #12]
 8006b6c:	490f      	ldr	r1, [pc, #60]	; (8006bac <UARTEx_SetNbDataToProcess+0x98>)
 8006b6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b70:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
 8006b7e:	7b7a      	ldrb	r2, [r7, #13]
 8006b80:	4909      	ldr	r1, [pc, #36]	; (8006ba8 <UARTEx_SetNbDataToProcess+0x94>)
 8006b82:	5c8a      	ldrb	r2, [r1, r2]
 8006b84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b88:	7b7a      	ldrb	r2, [r7, #13]
 8006b8a:	4908      	ldr	r1, [pc, #32]	; (8006bac <UARTEx_SetNbDataToProcess+0x98>)
 8006b8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b9a:	bf00      	nop
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	08007074 	.word	0x08007074
 8006bac:	0800707c 	.word	0x0800707c

08006bb0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b08b      	sub	sp, #44	; 0x2c
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	fa93 f3a3 	rbit	r3, r3
 8006bca:	613b      	str	r3, [r7, #16]
  return result;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006bd6:	2320      	movs	r3, #32
 8006bd8:	e003      	b.n	8006be2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	fab3 f383 	clz	r3, r3
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	2103      	movs	r1, #3
 8006be6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bea:	43db      	mvns	r3, r3
 8006bec:	401a      	ands	r2, r3
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	fa93 f3a3 	rbit	r3, r3
 8006bf8:	61fb      	str	r3, [r7, #28]
  return result;
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006c04:	2320      	movs	r3, #32
 8006c06:	e003      	b.n	8006c10 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	fab3 f383 	clz	r3, r3
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	fa01 f303 	lsl.w	r3, r1, r3
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	601a      	str	r2, [r3, #0]
}
 8006c1e:	bf00      	nop
 8006c20:	372c      	adds	r7, #44	; 0x2c
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b085      	sub	sp, #20
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	60f8      	str	r0, [r7, #12]
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	43db      	mvns	r3, r3
 8006c3e:	401a      	ands	r2, r3
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	6879      	ldr	r1, [r7, #4]
 8006c44:	fb01 f303 	mul.w	r3, r1, r3
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	605a      	str	r2, [r3, #4]
}
 8006c4e:	bf00      	nop
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b08b      	sub	sp, #44	; 0x2c
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	fa93 f3a3 	rbit	r3, r3
 8006c74:	613b      	str	r3, [r7, #16]
  return result;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006c80:	2320      	movs	r3, #32
 8006c82:	e003      	b.n	8006c8c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	fab3 f383 	clz	r3, r3
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	2103      	movs	r1, #3
 8006c90:	fa01 f303 	lsl.w	r3, r1, r3
 8006c94:	43db      	mvns	r3, r3
 8006c96:	401a      	ands	r2, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	fa93 f3a3 	rbit	r3, r3
 8006ca2:	61fb      	str	r3, [r7, #28]
  return result;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006cae:	2320      	movs	r3, #32
 8006cb0:	e003      	b.n	8006cba <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	fab3 f383 	clz	r3, r3
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006cc8:	bf00      	nop
 8006cca:	372c      	adds	r7, #44	; 0x2c
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b08b      	sub	sp, #44	; 0x2c
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	68da      	ldr	r2, [r3, #12]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	fa93 f3a3 	rbit	r3, r3
 8006cee:	613b      	str	r3, [r7, #16]
  return result;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006cfa:	2320      	movs	r3, #32
 8006cfc:	e003      	b.n	8006d06 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	fab3 f383 	clz	r3, r3
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	005b      	lsls	r3, r3, #1
 8006d08:	2103      	movs	r1, #3
 8006d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0e:	43db      	mvns	r3, r3
 8006d10:	401a      	ands	r2, r3
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	fa93 f3a3 	rbit	r3, r3
 8006d1c:	61fb      	str	r3, [r7, #28]
  return result;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006d28:	2320      	movs	r3, #32
 8006d2a:	e003      	b.n	8006d34 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	fab3 f383 	clz	r3, r3
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	60da      	str	r2, [r3, #12]
}
 8006d42:	bf00      	nop
 8006d44:	372c      	adds	r7, #44	; 0x2c
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b08b      	sub	sp, #44	; 0x2c
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a1a      	ldr	r2, [r3, #32]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	fa93 f3a3 	rbit	r3, r3
 8006d68:	613b      	str	r3, [r7, #16]
  return result;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006d74:	2320      	movs	r3, #32
 8006d76:	e003      	b.n	8006d80 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	fab3 f383 	clz	r3, r3
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	210f      	movs	r1, #15
 8006d84:	fa01 f303 	lsl.w	r3, r1, r3
 8006d88:	43db      	mvns	r3, r3
 8006d8a:	401a      	ands	r2, r3
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	fa93 f3a3 	rbit	r3, r3
 8006d96:	61fb      	str	r3, [r7, #28]
  return result;
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006da2:	2320      	movs	r3, #32
 8006da4:	e003      	b.n	8006dae <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	fab3 f383 	clz	r3, r3
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	6879      	ldr	r1, [r7, #4]
 8006db2:	fa01 f303 	lsl.w	r3, r1, r3
 8006db6:	431a      	orrs	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006dbc:	bf00      	nop
 8006dbe:	372c      	adds	r7, #44	; 0x2c
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b08b      	sub	sp, #44	; 0x2c
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	0a1b      	lsrs	r3, r3, #8
 8006ddc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	fa93 f3a3 	rbit	r3, r3
 8006de4:	613b      	str	r3, [r7, #16]
  return result;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006df0:	2320      	movs	r3, #32
 8006df2:	e003      	b.n	8006dfc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	fab3 f383 	clz	r3, r3
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	210f      	movs	r1, #15
 8006e00:	fa01 f303 	lsl.w	r3, r1, r3
 8006e04:	43db      	mvns	r3, r3
 8006e06:	401a      	ands	r2, r3
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	0a1b      	lsrs	r3, r3, #8
 8006e0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	fa93 f3a3 	rbit	r3, r3
 8006e14:	61fb      	str	r3, [r7, #28]
  return result;
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006e20:	2320      	movs	r3, #32
 8006e22:	e003      	b.n	8006e2c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	fab3 f383 	clz	r3, r3
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	fa01 f303 	lsl.w	r3, r1, r3
 8006e34:	431a      	orrs	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006e3a:	bf00      	nop
 8006e3c:	372c      	adds	r7, #44	; 0x2c
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b088      	sub	sp, #32
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	fa93 f3a3 	rbit	r3, r3
 8006e5c:	60fb      	str	r3, [r7, #12]
  return result;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <LL_GPIO_Init+0x26>
    return 32U;
 8006e68:	2320      	movs	r3, #32
 8006e6a:	e003      	b.n	8006e74 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	fab3 f383 	clz	r3, r3
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006e76:	e047      	b.n	8006f08 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	fa01 f303 	lsl.w	r3, r1, r3
 8006e84:	4013      	ands	r3, r2
 8006e86:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d039      	beq.n	8006f02 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d003      	beq.n	8006e9e <LL_GPIO_Init+0x58>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d10d      	bne.n	8006eba <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	69b9      	ldr	r1, [r7, #24]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7ff fed7 	bl	8006c5a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	69b9      	ldr	r1, [r7, #24]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff feb8 	bl	8006c2a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	69b9      	ldr	r1, [r7, #24]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7ff ff06 	bl	8006cd4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d111      	bne.n	8006ef4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	2bff      	cmp	r3, #255	; 0xff
 8006ed4:	d807      	bhi.n	8006ee6 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	461a      	mov	r2, r3
 8006edc:	69b9      	ldr	r1, [r7, #24]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff ff35 	bl	8006d4e <LL_GPIO_SetAFPin_0_7>
 8006ee4:	e006      	b.n	8006ef4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	461a      	mov	r2, r3
 8006eec:	69b9      	ldr	r1, [r7, #24]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff ff6a 	bl	8006dc8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	69b9      	ldr	r1, [r7, #24]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff fe57 	bl	8006bb0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	3301      	adds	r3, #1
 8006f06:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1b0      	bne.n	8006e78 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3720      	adds	r7, #32
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006f28:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006f2c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	43db      	mvns	r3, r3
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	4013      	ands	r3, r2
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b085      	sub	sp, #20
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	1d3b      	adds	r3, r7, #4
 8006f60:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <memset>:
 8006f92:	4402      	add	r2, r0
 8006f94:	4603      	mov	r3, r0
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d100      	bne.n	8006f9c <memset+0xa>
 8006f9a:	4770      	bx	lr
 8006f9c:	f803 1b01 	strb.w	r1, [r3], #1
 8006fa0:	e7f9      	b.n	8006f96 <memset+0x4>
	...

08006fa4 <__libc_init_array>:
 8006fa4:	b570      	push	{r4, r5, r6, lr}
 8006fa6:	4d0d      	ldr	r5, [pc, #52]	; (8006fdc <__libc_init_array+0x38>)
 8006fa8:	2600      	movs	r6, #0
 8006faa:	4c0d      	ldr	r4, [pc, #52]	; (8006fe0 <__libc_init_array+0x3c>)
 8006fac:	1b64      	subs	r4, r4, r5
 8006fae:	10a4      	asrs	r4, r4, #2
 8006fb0:	42a6      	cmp	r6, r4
 8006fb2:	d109      	bne.n	8006fc8 <__libc_init_array+0x24>
 8006fb4:	4d0b      	ldr	r5, [pc, #44]	; (8006fe4 <__libc_init_array+0x40>)
 8006fb6:	2600      	movs	r6, #0
 8006fb8:	4c0b      	ldr	r4, [pc, #44]	; (8006fe8 <__libc_init_array+0x44>)
 8006fba:	f000 f817 	bl	8006fec <_init>
 8006fbe:	1b64      	subs	r4, r4, r5
 8006fc0:	10a4      	asrs	r4, r4, #2
 8006fc2:	42a6      	cmp	r6, r4
 8006fc4:	d105      	bne.n	8006fd2 <__libc_init_array+0x2e>
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fcc:	3601      	adds	r6, #1
 8006fce:	4798      	blx	r3
 8006fd0:	e7ee      	b.n	8006fb0 <__libc_init_array+0xc>
 8006fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd6:	3601      	adds	r6, #1
 8006fd8:	4798      	blx	r3
 8006fda:	e7f2      	b.n	8006fc2 <__libc_init_array+0x1e>
 8006fdc:	0800708c 	.word	0x0800708c
 8006fe0:	0800708c 	.word	0x0800708c
 8006fe4:	0800708c 	.word	0x0800708c
 8006fe8:	08007090 	.word	0x08007090

08006fec <_init>:
 8006fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fee:	bf00      	nop
 8006ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff2:	bc08      	pop	{r3}
 8006ff4:	469e      	mov	lr, r3
 8006ff6:	4770      	bx	lr

08006ff8 <_fini>:
 8006ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffa:	bf00      	nop
 8006ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffe:	bc08      	pop	{r3}
 8007000:	469e      	mov	lr, r3
 8007002:	4770      	bx	lr
