
efs-can-servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a24  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003bb0  08003bb0  00004bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf8  08003bf8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bf8  08003bf8  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bf8  08003bf8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf8  08003bf8  00004bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bfc  08003bfc  00004bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c00  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08003c0c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003c0c  00005154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd73  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e66  00000000  00000000  00010daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00012c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000098c  00000000  00000000  00013890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207ea  00000000  00000000  0001421c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df6b  00000000  00000000  00034a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c758b  00000000  00000000  00042971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109efc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000335c  00000000  00000000  00109f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0010d29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003b98 	.word	0x08003b98

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003b98 	.word	0x08003b98

080001cc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80001d0:	4b17      	ldr	r3, [pc, #92]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001d2:	4a18      	ldr	r2, [pc, #96]	@ (8000234 <MX_CAN1_Init+0x68>)
 80001d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 80001d6:	4b16      	ldr	r3, [pc, #88]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001d8:	220c      	movs	r2, #12
 80001da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80001dc:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001de:	2200      	movs	r2, #0
 80001e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001e2:	4b13      	ldr	r3, [pc, #76]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80001e8:	4b11      	ldr	r3, [pc, #68]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80001ee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80001f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80001f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80001fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001fe:	2200      	movs	r2, #0
 8000200:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000202:	4b0b      	ldr	r3, [pc, #44]	@ (8000230 <MX_CAN1_Init+0x64>)
 8000204:	2200      	movs	r2, #0
 8000206:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000208:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <MX_CAN1_Init+0x64>)
 800020a:	2200      	movs	r2, #0
 800020c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800020e:	4b08      	ldr	r3, [pc, #32]	@ (8000230 <MX_CAN1_Init+0x64>)
 8000210:	2200      	movs	r2, #0
 8000212:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000214:	4b06      	ldr	r3, [pc, #24]	@ (8000230 <MX_CAN1_Init+0x64>)
 8000216:	2200      	movs	r2, #0
 8000218:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800021a:	4805      	ldr	r0, [pc, #20]	@ (8000230 <MX_CAN1_Init+0x64>)
 800021c:	f000 fc74 	bl	8000b08 <HAL_CAN_Init>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000226:	f000 f965 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	20000028 	.word	0x20000028
 8000234:	40006400 	.word	0x40006400

08000238 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b08a      	sub	sp, #40	@ 0x28
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
 800024e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a25      	ldr	r2, [pc, #148]	@ (80002ec <HAL_CAN_MspInit+0xb4>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d143      	bne.n	80002e2 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800025a:	4b25      	ldr	r3, [pc, #148]	@ (80002f0 <HAL_CAN_MspInit+0xb8>)
 800025c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800025e:	4a24      	ldr	r2, [pc, #144]	@ (80002f0 <HAL_CAN_MspInit+0xb8>)
 8000260:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000264:	6593      	str	r3, [r2, #88]	@ 0x58
 8000266:	4b22      	ldr	r3, [pc, #136]	@ (80002f0 <HAL_CAN_MspInit+0xb8>)
 8000268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800026a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800026e:	613b      	str	r3, [r7, #16]
 8000270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b1f      	ldr	r3, [pc, #124]	@ (80002f0 <HAL_CAN_MspInit+0xb8>)
 8000274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000276:	4a1e      	ldr	r2, [pc, #120]	@ (80002f0 <HAL_CAN_MspInit+0xb8>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800027e:	4b1c      	ldr	r3, [pc, #112]	@ (80002f0 <HAL_CAN_MspInit+0xb8>)
 8000280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800028a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800028e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000290:	2302      	movs	r3, #2
 8000292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000294:	2301      	movs	r3, #1
 8000296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000298:	2303      	movs	r3, #3
 800029a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800029c:	2309      	movs	r3, #9
 800029e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a0:	f107 0314 	add.w	r3, r7, #20
 80002a4:	4619      	mov	r1, r3
 80002a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002aa:	f001 fb8f 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80002ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002b4:	2302      	movs	r3, #2
 80002b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b8:	2300      	movs	r3, #0
 80002ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002bc:	2303      	movs	r3, #3
 80002be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80002c0:	2309      	movs	r3, #9
 80002c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c4:	f107 0314 	add.w	r3, r7, #20
 80002c8:	4619      	mov	r1, r3
 80002ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ce:	f001 fb7d 	bl	80019cc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2100      	movs	r1, #0
 80002d6:	2014      	movs	r0, #20
 80002d8:	f001 fb41 	bl	800195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80002dc:	2014      	movs	r0, #20
 80002de:	f001 fb5a 	bl	8001996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002e2:	bf00      	nop
 80002e4:	3728      	adds	r7, #40	@ 0x28
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40006400 	.word	0x40006400
 80002f0:	40021000 	.word	0x40021000

080002f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000338 <MX_GPIO_Init+0x44>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000338 <MX_GPIO_Init+0x44>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000306:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <MX_GPIO_Init+0x44>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030a:	f003 0301 	and.w	r3, r3, #1
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000312:	4b09      	ldr	r3, [pc, #36]	@ (8000338 <MX_GPIO_Init+0x44>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000316:	4a08      	ldr	r2, [pc, #32]	@ (8000338 <MX_GPIO_Init+0x44>)
 8000318:	f043 0302 	orr.w	r3, r3, #2
 800031c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800031e:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <MX_GPIO_Init+0x44>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000322:	f003 0302 	and.w	r3, r3, #2
 8000326:	603b      	str	r3, [r7, #0]
 8000328:	683b      	ldr	r3, [r7, #0]

}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40021000 	.word	0x40021000

0800033c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000342:	f000 fb48 	bl	80009d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000346:	f000 f86b 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034a:	f7ff ffd3 	bl	80002f4 <MX_GPIO_Init>
  MX_CAN1_Init();
 800034e:	f7ff ff3d 	bl	80001cc <MX_CAN1_Init>
  MX_TIM1_Init();
 8000352:	f000 f945 	bl	80005e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000356:	f000 fa11 	bl	800077c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  canfil.FilterBank = 0;
 800035a:	4b2b      	ldr	r3, [pc, #172]	@ (8000408 <main+0xcc>)
 800035c:	2200      	movs	r2, #0
 800035e:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8000360:	4b29      	ldr	r3, [pc, #164]	@ (8000408 <main+0xcc>)
 8000362:	2200      	movs	r2, #0
 8000364:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000366:	4b28      	ldr	r3, [pc, #160]	@ (8000408 <main+0xcc>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0;
 800036c:	4b26      	ldr	r3, [pc, #152]	@ (8000408 <main+0xcc>)
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 8000372:	4b25      	ldr	r3, [pc, #148]	@ (8000408 <main+0xcc>)
 8000374:	2200      	movs	r2, #0
 8000376:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0;
 8000378:	4b23      	ldr	r3, [pc, #140]	@ (8000408 <main+0xcc>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0;
 800037e:	4b22      	ldr	r3, [pc, #136]	@ (8000408 <main+0xcc>)
 8000380:	2200      	movs	r2, #0
 8000382:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8000384:	4b20      	ldr	r3, [pc, #128]	@ (8000408 <main+0xcc>)
 8000386:	2201      	movs	r2, #1
 8000388:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 800038a:	4b1f      	ldr	r3, [pc, #124]	@ (8000408 <main+0xcc>)
 800038c:	2201      	movs	r2, #1
 800038e:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 8000390:	4b1d      	ldr	r3, [pc, #116]	@ (8000408 <main+0xcc>)
 8000392:	220e      	movs	r2, #14
 8000394:	625a      	str	r2, [r3, #36]	@ 0x24

	txHeader.DLC = 8;
 8000396:	4b1d      	ldr	r3, [pc, #116]	@ (800040c <main+0xd0>)
 8000398:	2208      	movs	r2, #8
 800039a:	611a      	str	r2, [r3, #16]
	txHeader.IDE = CAN_ID_STD;
 800039c:	4b1b      	ldr	r3, [pc, #108]	@ (800040c <main+0xd0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80003a2:	4b1a      	ldr	r3, [pc, #104]	@ (800040c <main+0xd0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	60da      	str	r2, [r3, #12]
	txHeader.StdId = 0x030;
 80003a8:	4b18      	ldr	r3, [pc, #96]	@ (800040c <main+0xd0>)
 80003aa:	2230      	movs	r2, #48	@ 0x30
 80003ac:	601a      	str	r2, [r3, #0]
	txHeader.ExtId = 0x02;
 80003ae:	4b17      	ldr	r3, [pc, #92]	@ (800040c <main+0xd0>)
 80003b0:	2202      	movs	r2, #2
 80003b2:	605a      	str	r2, [r3, #4]
	txHeader.TransmitGlobalTime = DISABLE;
 80003b4:	4b15      	ldr	r3, [pc, #84]	@ (800040c <main+0xd0>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	751a      	strb	r2, [r3, #20]

	HAL_CAN_ConfigFilter(&hcan1,&canfil);
 80003ba:	4913      	ldr	r1, [pc, #76]	@ (8000408 <main+0xcc>)
 80003bc:	4814      	ldr	r0, [pc, #80]	@ (8000410 <main+0xd4>)
 80003be:	f000 fc9e 	bl	8000cfe <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 80003c2:	4813      	ldr	r0, [pc, #76]	@ (8000410 <main+0xd4>)
 80003c4:	f000 fd65 	bl	8000e92 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003c8:	2102      	movs	r1, #2
 80003ca:	4811      	ldr	r0, [pc, #68]	@ (8000410 <main+0xd4>)
 80003cc:	f000 ff97 	bl	80012fe <HAL_CAN_ActivateNotification>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003d0:	2100      	movs	r1, #0
 80003d2:	4810      	ldr	r0, [pc, #64]	@ (8000414 <main+0xd8>)
 80003d4:	f002 fbf2 	bl	8002bbc <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 64000*0.05);
 80003d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <main+0xd8>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 80003e0:	635a      	str	r2, [r3, #52]	@ 0x34
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t csend[] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
 80003e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000418 <main+0xdc>)
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003ea:	e883 0003 	stmia.w	r3, {r0, r1}
	  HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(&hcan1,&txHeader,csend,&canMailbox);
 80003ee:	1d3a      	adds	r2, r7, #4
 80003f0:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <main+0xe0>)
 80003f2:	4906      	ldr	r1, [pc, #24]	@ (800040c <main+0xd0>)
 80003f4:	4806      	ldr	r0, [pc, #24]	@ (8000410 <main+0xd4>)
 80003f6:	f000 fd90 	bl	8000f1a <HAL_CAN_AddTxMessage>
 80003fa:	4603      	mov	r3, r0
 80003fc:	73fb      	strb	r3, [r7, #15]

	  HAL_Delay(100);
 80003fe:	2064      	movs	r0, #100	@ 0x64
 8000400:	f000 fb5e 	bl	8000ac0 <HAL_Delay>
  {
 8000404:	bf00      	nop
 8000406:	e7ec      	b.n	80003e2 <main+0xa6>
 8000408:	2000008c 	.word	0x2000008c
 800040c:	2000006c 	.word	0x2000006c
 8000410:	20000028 	.word	0x20000028
 8000414:	200000b8 	.word	0x200000b8
 8000418:	08003bb0 	.word	0x08003bb0
 800041c:	200000b4 	.word	0x200000b4

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b096      	sub	sp, #88	@ 0x58
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0314 	add.w	r3, r7, #20
 800042a:	2244      	movs	r2, #68	@ 0x44
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f003 fb86 	bl	8003b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	463b      	mov	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000442:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000446:	f001 fc49 	bl	8001cdc <HAL_PWREx_ControlVoltageScaling>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000450:	f000 f850 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000454:	2301      	movs	r3, #1
 8000456:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000458:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800045c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045e:	2302      	movs	r3, #2
 8000460:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000462:	2303      	movs	r3, #3
 8000464:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000466:	2301      	movs	r3, #1
 8000468:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 800046a:	230c      	movs	r3, #12
 800046c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800046e:	2307      	movs	r3, #7
 8000470:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000472:	2302      	movs	r3, #2
 8000474:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000476:	2302      	movs	r3, #2
 8000478:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	4618      	mov	r0, r3
 8000480:	f001 fc82 	bl	8001d88 <HAL_RCC_OscConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800048a:	f000 f833 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048e:	230f      	movs	r3, #15
 8000490:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000492:	2303      	movs	r3, #3
 8000494:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004a2:	463b      	mov	r3, r7
 80004a4:	2102      	movs	r1, #2
 80004a6:	4618      	mov	r0, r3
 80004a8:	f002 f882 	bl	80025b0 <HAL_RCC_ClockConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004b2:	f000 f81f 	bl	80004f4 <Error_Handler>
  }
}
 80004b6:	bf00      	nop
 80004b8:	3758      	adds	r7, #88	@ 0x58
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 80004c8:	4b07      	ldr	r3, [pc, #28]	@ (80004e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80004ca:	4a08      	ldr	r2, [pc, #32]	@ (80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004cc:	2100      	movs	r1, #0
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f000 fdf3 	bl	80010ba <HAL_CAN_GetRxMessage>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 64000*0.8);
 80004d4:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f44f 4248 	mov.w	r2, #51200	@ 0xc800
 80004dc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000084 	.word	0x20000084
 80004ec:	20000050 	.word	0x20000050
 80004f0:	200000b8 	.word	0x200000b8

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <Error_Handler+0x8>

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000506:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <HAL_MspInit+0x44>)
 8000508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800050a:	4a0e      	ldr	r2, [pc, #56]	@ (8000544 <HAL_MspInit+0x44>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6613      	str	r3, [r2, #96]	@ 0x60
 8000512:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <HAL_MspInit+0x44>)
 8000514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <HAL_MspInit+0x44>)
 8000520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000522:	4a08      	ldr	r2, [pc, #32]	@ (8000544 <HAL_MspInit+0x44>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000528:	6593      	str	r3, [r2, #88]	@ 0x58
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <HAL_MspInit+0x44>)
 800052c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800052e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000

08000548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <NMI_Handler+0x4>

08000550 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <HardFault_Handler+0x4>

08000558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <MemManage_Handler+0x4>

08000560 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <BusFault_Handler+0x4>

08000568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <UsageFault_Handler+0x4>

08000570 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059e:	f000 fa6f 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <CAN1_RX0_IRQHandler+0x10>)
 80005ae:	f000 fecc 	bl	800134a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028

080005bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <SystemInit+0x20>)
 80005c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005c6:	4a05      	ldr	r2, [pc, #20]	@ (80005dc <SystemInit+0x20>)
 80005c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b09a      	sub	sp, #104	@ 0x68
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000600:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
 8000610:	615a      	str	r2, [r3, #20]
 8000612:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	222c      	movs	r2, #44	@ 0x2c
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fa90 	bl	8003b40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000620:	4b54      	ldr	r3, [pc, #336]	@ (8000774 <MX_TIM1_Init+0x194>)
 8000622:	4a55      	ldr	r2, [pc, #340]	@ (8000778 <MX_TIM1_Init+0x198>)
 8000624:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 8000626:	4b53      	ldr	r3, [pc, #332]	@ (8000774 <MX_TIM1_Init+0x194>)
 8000628:	220e      	movs	r2, #14
 800062a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062c:	4b51      	ldr	r3, [pc, #324]	@ (8000774 <MX_TIM1_Init+0x194>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000;
 8000632:	4b50      	ldr	r3, [pc, #320]	@ (8000774 <MX_TIM1_Init+0x194>)
 8000634:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 8000638:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063a:	4b4e      	ldr	r3, [pc, #312]	@ (8000774 <MX_TIM1_Init+0x194>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000640:	4b4c      	ldr	r3, [pc, #304]	@ (8000774 <MX_TIM1_Init+0x194>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000646:	4b4b      	ldr	r3, [pc, #300]	@ (8000774 <MX_TIM1_Init+0x194>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800064c:	4849      	ldr	r0, [pc, #292]	@ (8000774 <MX_TIM1_Init+0x194>)
 800064e:	f002 f99b 	bl	8002988 <HAL_TIM_Base_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000658:	f7ff ff4c 	bl	80004f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000660:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000662:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000666:	4619      	mov	r1, r3
 8000668:	4842      	ldr	r0, [pc, #264]	@ (8000774 <MX_TIM1_Init+0x194>)
 800066a:	f002 fd13 	bl	8003094 <HAL_TIM_ConfigClockSource>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000674:	f7ff ff3e 	bl	80004f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000678:	483e      	ldr	r0, [pc, #248]	@ (8000774 <MX_TIM1_Init+0x194>)
 800067a:	f002 fa3d 	bl	8002af8 <HAL_TIM_PWM_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000684:	f7ff ff36 	bl	80004f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000688:	483a      	ldr	r0, [pc, #232]	@ (8000774 <MX_TIM1_Init+0x194>)
 800068a:	f002 f9d4 	bl	8002a36 <HAL_TIM_OC_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000694:	f7ff ff2e 	bl	80004f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000698:	2300      	movs	r3, #0
 800069a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006a8:	4619      	mov	r1, r3
 80006aa:	4832      	ldr	r0, [pc, #200]	@ (8000774 <MX_TIM1_Init+0x194>)
 80006ac:	f003 f96a 	bl	8003984 <HAL_TIMEx_MasterConfigSynchronization>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80006b6:	f7ff ff1d 	bl	80004f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ba:	2360      	movs	r3, #96	@ 0x60
 80006bc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c2:	2300      	movs	r3, #0
 80006c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006c6:	2300      	movs	r3, #0
 80006c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006ce:	2300      	movs	r3, #0
 80006d0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006d2:	2300      	movs	r3, #0
 80006d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006da:	2200      	movs	r2, #0
 80006dc:	4619      	mov	r1, r3
 80006de:	4825      	ldr	r0, [pc, #148]	@ (8000774 <MX_TIM1_Init+0x194>)
 80006e0:	f002 fbc4 	bl	8002e6c <HAL_TIM_PWM_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80006ea:	f7ff ff03 	bl	80004f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006f2:	2204      	movs	r2, #4
 80006f4:	4619      	mov	r1, r3
 80006f6:	481f      	ldr	r0, [pc, #124]	@ (8000774 <MX_TIM1_Init+0x194>)
 80006f8:	f002 fbb8 	bl	8002e6c <HAL_TIM_PWM_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000702:	f7ff fef7 	bl	80004f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000706:	2300      	movs	r3, #0
 8000708:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800070a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800070e:	2208      	movs	r2, #8
 8000710:	4619      	mov	r1, r3
 8000712:	4818      	ldr	r0, [pc, #96]	@ (8000774 <MX_TIM1_Init+0x194>)
 8000714:	f002 fb30 	bl	8002d78 <HAL_TIM_OC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800071e:	f7ff fee9 	bl	80004f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000736:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800073a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000744:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000748:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	4807      	ldr	r0, [pc, #28]	@ (8000774 <MX_TIM1_Init+0x194>)
 8000758:	f003 f97a 	bl	8003a50 <HAL_TIMEx_ConfigBreakDeadTime>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 8000762:	f7ff fec7 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000766:	4803      	ldr	r0, [pc, #12]	@ (8000774 <MX_TIM1_Init+0x194>)
 8000768:	f000 f8b0 	bl	80008cc <HAL_TIM_MspPostInit>

}
 800076c:	bf00      	nop
 800076e:	3768      	adds	r7, #104	@ 0x68
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000b8 	.word	0x200000b8
 8000778:	40012c00 	.word	0x40012c00

0800077c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08e      	sub	sp, #56	@ 0x38
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000782:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079c:	463b      	mov	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
 80007aa:	615a      	str	r2, [r3, #20]
 80007ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000864 <MX_TIM2_Init+0xe8>)
 80007b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 80007b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000864 <MX_TIM2_Init+0xe8>)
 80007b8:	220e      	movs	r2, #14
 80007ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b29      	ldr	r3, [pc, #164]	@ (8000864 <MX_TIM2_Init+0xe8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000;
 80007c2:	4b28      	ldr	r3, [pc, #160]	@ (8000864 <MX_TIM2_Init+0xe8>)
 80007c4:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 80007c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ca:	4b26      	ldr	r3, [pc, #152]	@ (8000864 <MX_TIM2_Init+0xe8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d0:	4b24      	ldr	r3, [pc, #144]	@ (8000864 <MX_TIM2_Init+0xe8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007d6:	4823      	ldr	r0, [pc, #140]	@ (8000864 <MX_TIM2_Init+0xe8>)
 80007d8:	f002 f8d6 	bl	8002988 <HAL_TIM_Base_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80007e2:	f7ff fe87 	bl	80004f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007f0:	4619      	mov	r1, r3
 80007f2:	481c      	ldr	r0, [pc, #112]	@ (8000864 <MX_TIM2_Init+0xe8>)
 80007f4:	f002 fc4e 	bl	8003094 <HAL_TIM_ConfigClockSource>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80007fe:	f7ff fe79 	bl	80004f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000802:	4818      	ldr	r0, [pc, #96]	@ (8000864 <MX_TIM2_Init+0xe8>)
 8000804:	f002 f978 	bl	8002af8 <HAL_TIM_PWM_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800080e:	f7ff fe71 	bl	80004f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	4810      	ldr	r0, [pc, #64]	@ (8000864 <MX_TIM2_Init+0xe8>)
 8000822:	f003 f8af 	bl	8003984 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800082c:	f7ff fe62 	bl	80004f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000830:	2360      	movs	r3, #96	@ 0x60
 8000832:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	4619      	mov	r1, r3
 8000846:	4807      	ldr	r0, [pc, #28]	@ (8000864 <MX_TIM2_Init+0xe8>)
 8000848:	f002 fb10 	bl	8002e6c <HAL_TIM_PWM_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000852:	f7ff fe4f 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000856:	4803      	ldr	r0, [pc, #12]	@ (8000864 <MX_TIM2_Init+0xe8>)
 8000858:	f000 f838 	bl	80008cc <HAL_TIM_MspPostInit>

}
 800085c:	bf00      	nop
 800085e:	3738      	adds	r7, #56	@ 0x38
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000104 	.word	0x20000104

08000868 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a13      	ldr	r2, [pc, #76]	@ (80008c4 <HAL_TIM_Base_MspInit+0x5c>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d10c      	bne.n	8000894 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800087a:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <HAL_TIM_Base_MspInit+0x60>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087e:	4a12      	ldr	r2, [pc, #72]	@ (80008c8 <HAL_TIM_Base_MspInit+0x60>)
 8000880:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000884:	6613      	str	r3, [r2, #96]	@ 0x60
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <HAL_TIM_Base_MspInit+0x60>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800088a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000892:	e010      	b.n	80008b6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800089c:	d10b      	bne.n	80008b6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <HAL_TIM_Base_MspInit+0x60>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a2:	4a09      	ldr	r2, [pc, #36]	@ (80008c8 <HAL_TIM_Base_MspInit+0x60>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008aa:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <HAL_TIM_Base_MspInit+0x60>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40012c00 	.word	0x40012c00
 80008c8:	40021000 	.word	0x40021000

080008cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	@ 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a24      	ldr	r2, [pc, #144]	@ (800097c <HAL_TIM_MspPostInit+0xb0>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d11e      	bne.n	800092c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b24      	ldr	r3, [pc, #144]	@ (8000980 <HAL_TIM_MspPostInit+0xb4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	4a23      	ldr	r2, [pc, #140]	@ (8000980 <HAL_TIM_MspPostInit+0xb4>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fa:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <HAL_TIM_MspPostInit+0xb4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000906:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800090a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000918:	2301      	movs	r3, #1
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000926:	f001 f851 	bl	80019cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800092a:	e022      	b.n	8000972 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000934:	d11d      	bne.n	8000972 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <HAL_TIM_MspPostInit+0xb4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	4a11      	ldr	r2, [pc, #68]	@ (8000980 <HAL_TIM_MspPostInit+0xb4>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000942:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <HAL_TIM_MspPostInit+0xb4>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800094e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000960:	2301      	movs	r3, #1
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096e:	f001 f82d 	bl	80019cc <HAL_GPIO_Init>
}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	@ 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40012c00 	.word	0x40012c00
 8000980:	40021000 	.word	0x40021000

08000984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000988:	f7ff fe18 	bl	80005bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800098c:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800098e:	490d      	ldr	r1, [pc, #52]	@ (80009c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000990:	4a0d      	ldr	r2, [pc, #52]	@ (80009c8 <LoopForever+0xe>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0a      	ldr	r2, [pc, #40]	@ (80009cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a4:	4c0a      	ldr	r4, [pc, #40]	@ (80009d0 <LoopForever+0x16>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b2:	f003 f8cd 	bl	8003b50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009b6:	f7ff fcc1 	bl	800033c <main>

080009ba <LoopForever>:

LoopForever:
    b LoopForever
 80009ba:	e7fe      	b.n	80009ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c8:	08003c00 	.word	0x08003c00
  ldr r2, =_sbss
 80009cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d0:	20000154 	.word	0x20000154

080009d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_IRQHandler>

080009d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009dc:	2300      	movs	r3, #0
 80009de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 ffb1 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e6:	200f      	movs	r0, #15
 80009e8:	f000 f80e 	bl	8000a08 <HAL_InitTick>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	e001      	b.n	80009fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f8:	f7ff fd82 	bl	8000500 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009fc:	79fb      	ldrb	r3, [r7, #7]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a14:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <HAL_InitTick+0x6c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d023      	beq.n	8000a64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a1c:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <HAL_InitTick+0x70>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <HAL_InitTick+0x6c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 ffbd 	bl	80019b2 <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10f      	bne.n	8000a5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d809      	bhi.n	8000a58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f000 ff87 	bl	800195e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a50:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <HAL_InitTick+0x74>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	e007      	b.n	8000a68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	e004      	b.n	8000a68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	e001      	b.n	8000a68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_IncTick+0x20>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_IncTick+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <HAL_IncTick+0x24>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000150 	.word	0x20000150

08000aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b03      	ldr	r3, [pc, #12]	@ (8000abc <HAL_GetTick+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000150 	.word	0x20000150

08000ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac8:	f7ff ffee 	bl	8000aa8 <HAL_GetTick>
 8000acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad8:	d005      	beq.n	8000ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ada:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <HAL_Delay+0x44>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ae6:	bf00      	nop
 8000ae8:	f7ff ffde 	bl	8000aa8 <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d8f7      	bhi.n	8000ae8 <HAL_Delay+0x28>
  {
  }
}
 8000af8:	bf00      	nop
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000008 	.word	0x20000008

08000b08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d101      	bne.n	8000b1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e0ed      	b.n	8000cf6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff fb86 	bl	8000238 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f042 0201 	orr.w	r2, r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b3c:	f7ff ffb4 	bl	8000aa8 <HAL_GetTick>
 8000b40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b42:	e012      	b.n	8000b6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b44:	f7ff ffb0 	bl	8000aa8 <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	2b0a      	cmp	r3, #10
 8000b50:	d90b      	bls.n	8000b6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b56:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2205      	movs	r2, #5
 8000b62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e0c5      	b.n	8000cf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0e5      	beq.n	8000b44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f022 0202 	bic.w	r2, r2, #2
 8000b86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b88:	f7ff ff8e 	bl	8000aa8 <HAL_GetTick>
 8000b8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b8e:	e012      	b.n	8000bb6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b90:	f7ff ff8a 	bl	8000aa8 <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	2b0a      	cmp	r3, #10
 8000b9c:	d90b      	bls.n	8000bb6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ba2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2205      	movs	r2, #5
 8000bae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e09f      	b.n	8000cf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1e5      	bne.n	8000b90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7e1b      	ldrb	r3, [r3, #24]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d108      	bne.n	8000bde <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	e007      	b.n	8000bee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7e5b      	ldrb	r3, [r3, #25]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d108      	bne.n	8000c08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	e007      	b.n	8000c18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000c16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7e9b      	ldrb	r3, [r3, #26]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d108      	bne.n	8000c32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f042 0220 	orr.w	r2, r2, #32
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	e007      	b.n	8000c42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f022 0220 	bic.w	r2, r2, #32
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7edb      	ldrb	r3, [r3, #27]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d108      	bne.n	8000c5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f022 0210 	bic.w	r2, r2, #16
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	e007      	b.n	8000c6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f042 0210 	orr.w	r2, r2, #16
 8000c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	7f1b      	ldrb	r3, [r3, #28]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d108      	bne.n	8000c86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f042 0208 	orr.w	r2, r2, #8
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	e007      	b.n	8000c96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f022 0208 	bic.w	r2, r2, #8
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	7f5b      	ldrb	r3, [r3, #29]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d108      	bne.n	8000cb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f042 0204 	orr.w	r2, r2, #4
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e007      	b.n	8000cc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 0204 	bic.w	r2, r2, #4
 8000cbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	ea42 0103 	orr.w	r1, r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	1e5a      	subs	r2, r3, #1
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b087      	sub	sp, #28
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d14:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d16:	7cfb      	ldrb	r3, [r7, #19]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d003      	beq.n	8000d24 <HAL_CAN_ConfigFilter+0x26>
 8000d1c:	7cfb      	ldrb	r3, [r7, #19]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	f040 80aa 	bne.w	8000e78 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d2a:	f043 0201 	orr.w	r2, r3, #1
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	f003 031f 	and.w	r3, r3, #31
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d123      	bne.n	8000da6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	401a      	ands	r2, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3248      	adds	r2, #72	@ 0x48
 8000d86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d9c:	6979      	ldr	r1, [r7, #20]
 8000d9e:	3348      	adds	r3, #72	@ 0x48
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	440b      	add	r3, r1
 8000da4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d122      	bne.n	8000df4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	431a      	orrs	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000dce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3248      	adds	r2, #72	@ 0x48
 8000dd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000de8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dea:	6979      	ldr	r1, [r7, #20]
 8000dec:	3348      	adds	r3, #72	@ 0x48
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	440b      	add	r3, r1
 8000df2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d109      	bne.n	8000e10 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000e0e:	e007      	b.n	8000e20 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d109      	bne.n	8000e3c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000e3a:	e007      	b.n	8000e4c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	431a      	orrs	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d107      	bne.n	8000e64 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e6a:	f023 0201 	bic.w	r2, r3, #1
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e006      	b.n	8000e86 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e7c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
  }
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	371c      	adds	r7, #28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b084      	sub	sp, #16
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d12e      	bne.n	8000f04 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0201 	bic.w	r2, r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ebe:	f7ff fdf3 	bl	8000aa8 <HAL_GetTick>
 8000ec2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ec4:	e012      	b.n	8000eec <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ec6:	f7ff fdef 	bl	8000aa8 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b0a      	cmp	r3, #10
 8000ed2:	d90b      	bls.n	8000eec <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2205      	movs	r2, #5
 8000ee4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e012      	b.n	8000f12 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1e5      	bne.n	8000ec6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	e006      	b.n	8000f12 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f08:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
  }
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b089      	sub	sp, #36	@ 0x24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f38:	7ffb      	ldrb	r3, [r7, #31]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d003      	beq.n	8000f46 <HAL_CAN_AddTxMessage+0x2c>
 8000f3e:	7ffb      	ldrb	r3, [r7, #31]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	f040 80ad 	bne.w	80010a0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10a      	bne.n	8000f66 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d105      	bne.n	8000f66 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 8095 	beq.w	8001090 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	0e1b      	lsrs	r3, r3, #24
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f70:	2201      	movs	r2, #1
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	409a      	lsls	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10d      	bne.n	8000f9e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f8c:	68f9      	ldr	r1, [r7, #12]
 8000f8e:	6809      	ldr	r1, [r1, #0]
 8000f90:	431a      	orrs	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3318      	adds	r3, #24
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	440b      	add	r3, r1
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	e00f      	b.n	8000fbe <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fa8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fae:	68f9      	ldr	r1, [r7, #12]
 8000fb0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000fb2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3318      	adds	r3, #24
 8000fb8:	011b      	lsls	r3, r3, #4
 8000fba:	440b      	add	r3, r1
 8000fbc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6819      	ldr	r1, [r3, #0]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	691a      	ldr	r2, [r3, #16]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3318      	adds	r3, #24
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	440b      	add	r3, r1
 8000fce:	3304      	adds	r3, #4
 8000fd0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	7d1b      	ldrb	r3, [r3, #20]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d111      	bne.n	8000ffe <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3318      	adds	r3, #24
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	6811      	ldr	r1, [r2, #0]
 8000fee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3318      	adds	r3, #24
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3307      	adds	r3, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	061a      	lsls	r2, r3, #24
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3306      	adds	r3, #6
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3305      	adds	r3, #5
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	4313      	orrs	r3, r2
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	3204      	adds	r2, #4
 800101e:	7812      	ldrb	r2, [r2, #0]
 8001020:	4610      	mov	r0, r2
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	6811      	ldr	r1, [r2, #0]
 8001026:	ea43 0200 	orr.w	r2, r3, r0
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	440b      	add	r3, r1
 8001030:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001034:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3303      	adds	r3, #3
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	061a      	lsls	r2, r3, #24
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3302      	adds	r3, #2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	041b      	lsls	r3, r3, #16
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3301      	adds	r3, #1
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	4313      	orrs	r3, r2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	7812      	ldrb	r2, [r2, #0]
 8001056:	4610      	mov	r0, r2
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	6811      	ldr	r1, [r2, #0]
 800105c:	ea43 0200 	orr.w	r2, r3, r0
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	440b      	add	r3, r1
 8001066:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800106a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3318      	adds	r3, #24
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	4413      	add	r3, r2
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	6811      	ldr	r1, [r2, #0]
 800107e:	f043 0201 	orr.w	r2, r3, #1
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3318      	adds	r3, #24
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	440b      	add	r3, r1
 800108a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	e00e      	b.n	80010ae <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001094:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e006      	b.n	80010ae <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
  }
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	@ 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010ba:	b480      	push	{r7}
 80010bc:	b087      	sub	sp, #28
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d003      	beq.n	80010de <HAL_CAN_GetRxMessage+0x24>
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	f040 8103 	bne.w	80012e4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10e      	bne.n	8001102 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d116      	bne.n	8001120 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e0f7      	b.n	80012f2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d107      	bne.n	8001120 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001114:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e0e8      	b.n	80012f2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	331b      	adds	r3, #27
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	4413      	add	r3, r2
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0204 	and.w	r2, r3, #4
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10c      	bne.n	8001158 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	331b      	adds	r3, #27
 8001146:	011b      	lsls	r3, r3, #4
 8001148:	4413      	add	r3, r2
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	0d5b      	lsrs	r3, r3, #21
 800114e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	e00b      	b.n	8001170 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	331b      	adds	r3, #27
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	4413      	add	r3, r2
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	08db      	lsrs	r3, r3, #3
 8001168:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	331b      	adds	r3, #27
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	4413      	add	r3, r2
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0202 	and.w	r2, r3, #2
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	331b      	adds	r3, #27
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	4413      	add	r3, r2
 8001192:	3304      	adds	r3, #4
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2208      	movs	r2, #8
 80011a2:	611a      	str	r2, [r3, #16]
 80011a4:	e00b      	b.n	80011be <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	331b      	adds	r3, #27
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	4413      	add	r3, r2
 80011b2:	3304      	adds	r3, #4
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 020f 	and.w	r2, r3, #15
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	331b      	adds	r3, #27
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4413      	add	r3, r2
 80011ca:	3304      	adds	r3, #4
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	331b      	adds	r3, #27
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	4413      	add	r3, r2
 80011e2:	3304      	adds	r3, #4
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	0c1b      	lsrs	r3, r3, #16
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	4413      	add	r3, r2
 80011f8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	4413      	add	r3, r2
 800120e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	0a1a      	lsrs	r2, r3, #8
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4413      	add	r3, r2
 8001228:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	0c1a      	lsrs	r2, r3, #16
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	3302      	adds	r3, #2
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	4413      	add	r3, r2
 8001242:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	0e1a      	lsrs	r2, r3, #24
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	3303      	adds	r3, #3
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	4413      	add	r3, r2
 800125c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	3304      	adds	r3, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	4413      	add	r3, r2
 8001274:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	0a1a      	lsrs	r2, r3, #8
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	3305      	adds	r3, #5
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	4413      	add	r3, r2
 800128e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	0c1a      	lsrs	r2, r3, #16
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	3306      	adds	r3, #6
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	4413      	add	r3, r2
 80012a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	0e1a      	lsrs	r2, r3, #24
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	3307      	adds	r3, #7
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d108      	bne.n	80012d0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 0220 	orr.w	r2, r2, #32
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	e007      	b.n	80012e0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	691a      	ldr	r2, [r3, #16]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0220 	orr.w	r2, r2, #32
 80012de:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e006      	b.n	80012f2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
  }
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	371c      	adds	r7, #28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012fe:	b480      	push	{r7}
 8001300:	b085      	sub	sp, #20
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d002      	beq.n	800131c <HAL_CAN_ActivateNotification+0x1e>
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d109      	bne.n	8001330 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6959      	ldr	r1, [r3, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	e006      	b.n	800133e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001334:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
  }
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b08a      	sub	sp, #40	@ 0x28
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d07c      	beq.n	800148a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d023      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2201      	movs	r2, #1
 80013a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f983 	bl	80016b8 <HAL_CAN_TxMailbox0CompleteCallback>
 80013b2:	e016      	b.n	80013e2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d004      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013c6:	e00c      	b.n	80013e2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d004      	beq.n	80013dc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013da:	e002      	b.n	80013e2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f989 	bl	80016f4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d024      	beq.n	8001436 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 f963 	bl	80016cc <HAL_CAN_TxMailbox1CompleteCallback>
 8001406:	e016      	b.n	8001436 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
 800141a:	e00c      	b.n	8001436 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
 800142e:	e002      	b.n	8001436 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f969 	bl	8001708 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d024      	beq.n	800148a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001448:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 f943 	bl	80016e0 <HAL_CAN_TxMailbox2CompleteCallback>
 800145a:	e016      	b.n	800148a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d004      	beq.n	8001470 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001468:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
 800146e:	e00c      	b.n	800148a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d004      	beq.n	8001484 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
 8001482:	e002      	b.n	800148a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f949 	bl	800171c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00c      	beq.n	80014ae <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	2b00      	cmp	r3, #0
 800149c:	d007      	beq.n	80014ae <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2210      	movs	r2, #16
 80014ac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00b      	beq.n	80014d0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2208      	movs	r2, #8
 80014c8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f930 	bl	8001730 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d009      	beq.n	80014ee <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7fe ffe9 	bl	80004c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00c      	beq.n	8001512 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2210      	movs	r2, #16
 8001510:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	f003 0320 	and.w	r3, r3, #32
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00b      	beq.n	8001534 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d006      	beq.n	8001534 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2208      	movs	r2, #8
 800152c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 f912 	bl	8001758 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001534:	6a3b      	ldr	r3, [r7, #32]
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	2b00      	cmp	r3, #0
 800153c:	d009      	beq.n	8001552 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f8f9 	bl	8001744 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00b      	beq.n	8001574 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f003 0310 	and.w	r3, r3, #16
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2210      	movs	r2, #16
 800156c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f8fc 	bl	800176c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2208      	movs	r2, #8
 800158e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f8f5 	bl	8001780 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d07b      	beq.n	8001698 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d072      	beq.n	8001690 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d008      	beq.n	80015fe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001604:	2b00      	cmp	r3, #0
 8001606:	d043      	beq.n	8001690 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800160e:	2b00      	cmp	r3, #0
 8001610:	d03e      	beq.n	8001690 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001618:	2b60      	cmp	r3, #96	@ 0x60
 800161a:	d02b      	beq.n	8001674 <HAL_CAN_IRQHandler+0x32a>
 800161c:	2b60      	cmp	r3, #96	@ 0x60
 800161e:	d82e      	bhi.n	800167e <HAL_CAN_IRQHandler+0x334>
 8001620:	2b50      	cmp	r3, #80	@ 0x50
 8001622:	d022      	beq.n	800166a <HAL_CAN_IRQHandler+0x320>
 8001624:	2b50      	cmp	r3, #80	@ 0x50
 8001626:	d82a      	bhi.n	800167e <HAL_CAN_IRQHandler+0x334>
 8001628:	2b40      	cmp	r3, #64	@ 0x40
 800162a:	d019      	beq.n	8001660 <HAL_CAN_IRQHandler+0x316>
 800162c:	2b40      	cmp	r3, #64	@ 0x40
 800162e:	d826      	bhi.n	800167e <HAL_CAN_IRQHandler+0x334>
 8001630:	2b30      	cmp	r3, #48	@ 0x30
 8001632:	d010      	beq.n	8001656 <HAL_CAN_IRQHandler+0x30c>
 8001634:	2b30      	cmp	r3, #48	@ 0x30
 8001636:	d822      	bhi.n	800167e <HAL_CAN_IRQHandler+0x334>
 8001638:	2b10      	cmp	r3, #16
 800163a:	d002      	beq.n	8001642 <HAL_CAN_IRQHandler+0x2f8>
 800163c:	2b20      	cmp	r3, #32
 800163e:	d005      	beq.n	800164c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001640:	e01d      	b.n	800167e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	f043 0308 	orr.w	r3, r3, #8
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800164a:	e019      	b.n	8001680 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800164c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164e:	f043 0310 	orr.w	r3, r3, #16
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001654:	e014      	b.n	8001680 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	f043 0320 	orr.w	r3, r3, #32
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800165e:	e00f      	b.n	8001680 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001668:	e00a      	b.n	8001680 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001672:	e005      	b.n	8001680 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800167c:	e000      	b.n	8001680 <HAL_CAN_IRQHandler+0x336>
            break;
 800167e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699a      	ldr	r2, [r3, #24]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800168e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2204      	movs	r2, #4
 8001696:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f872 	bl	8001794 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	@ 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	@ (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	@ (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	@ (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	@ (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	@ 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	@ 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001914:	d301      	bcc.n	800191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	4a0a      	ldr	r2, [pc, #40]	@ (8001944 <SysTick_Config+0x40>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001922:	210f      	movs	r1, #15
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f7ff ff8e 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <SysTick_Config+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <SysTick_Config+0x40>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff29 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001970:	f7ff ff3e 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 8001974:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	6978      	ldr	r0, [r7, #20]
 800197c:	f7ff ff8e 	bl	800189c <NVIC_EncodePriority>
 8001980:	4602      	mov	r2, r0
 8001982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff5d 	bl	8001848 <__NVIC_SetPriority>
}
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff31 	bl	800180c <__NVIC_EnableIRQ>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffa2 	bl	8001904 <SysTick_Config>
 80019c0:	4603      	mov	r3, r0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019da:	e154      	b.n	8001c86 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 8146 	beq.w	8001c80 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d005      	beq.n	8001a0c <HAL_GPIO_Init+0x40>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d130      	bne.n	8001a6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a42:	2201      	movs	r2, #1
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f003 0201 	and.w	r2, r3, #1
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d017      	beq.n	8001aaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d123      	bne.n	8001afe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	6939      	ldr	r1, [r7, #16]
 8001afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0203 	and.w	r2, r3, #3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80a0 	beq.w	8001c80 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b40:	4b58      	ldr	r3, [pc, #352]	@ (8001ca4 <HAL_GPIO_Init+0x2d8>)
 8001b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b44:	4a57      	ldr	r2, [pc, #348]	@ (8001ca4 <HAL_GPIO_Init+0x2d8>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b4c:	4b55      	ldr	r3, [pc, #340]	@ (8001ca4 <HAL_GPIO_Init+0x2d8>)
 8001b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b58:	4a53      	ldr	r2, [pc, #332]	@ (8001ca8 <HAL_GPIO_Init+0x2dc>)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	3302      	adds	r3, #2
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b82:	d019      	beq.n	8001bb8 <HAL_GPIO_Init+0x1ec>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a49      	ldr	r2, [pc, #292]	@ (8001cac <HAL_GPIO_Init+0x2e0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d013      	beq.n	8001bb4 <HAL_GPIO_Init+0x1e8>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a48      	ldr	r2, [pc, #288]	@ (8001cb0 <HAL_GPIO_Init+0x2e4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00d      	beq.n	8001bb0 <HAL_GPIO_Init+0x1e4>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a47      	ldr	r2, [pc, #284]	@ (8001cb4 <HAL_GPIO_Init+0x2e8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d007      	beq.n	8001bac <HAL_GPIO_Init+0x1e0>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a46      	ldr	r2, [pc, #280]	@ (8001cb8 <HAL_GPIO_Init+0x2ec>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d101      	bne.n	8001ba8 <HAL_GPIO_Init+0x1dc>
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	e008      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001ba8:	2307      	movs	r3, #7
 8001baa:	e006      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bac:	2303      	movs	r3, #3
 8001bae:	e004      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e002      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	f002 0203 	and.w	r2, r2, #3
 8001bc0:	0092      	lsls	r2, r2, #2
 8001bc2:	4093      	lsls	r3, r2
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bca:	4937      	ldr	r1, [pc, #220]	@ (8001ca8 <HAL_GPIO_Init+0x2dc>)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bd8:	4b38      	ldr	r3, [pc, #224]	@ (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bfc:	4a2f      	ldr	r2, [pc, #188]	@ (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c02:	4b2e      	ldr	r3, [pc, #184]	@ (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c26:	4a25      	ldr	r2, [pc, #148]	@ (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c2c:	4b23      	ldr	r3, [pc, #140]	@ (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c50:	4a1a      	ldr	r2, [pc, #104]	@ (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c56:	4b19      	ldr	r3, [pc, #100]	@ (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c7a:	4a10      	ldr	r2, [pc, #64]	@ (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f47f aea3 	bne.w	80019dc <HAL_GPIO_Init+0x10>
  }
}
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	48000400 	.word	0x48000400
 8001cb0:	48000800 	.word	0x48000800
 8001cb4:	48000c00 	.word	0x48000c00
 8001cb8:	48001000 	.word	0x48001000
 8001cbc:	40010400 	.word	0x40010400

08001cc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cc4:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40007000 	.word	0x40007000

08001cdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cea:	d130      	bne.n	8001d4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cec:	4b23      	ldr	r3, [pc, #140]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cf8:	d038      	beq.n	8001d6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cfa:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d02:	4a1e      	ldr	r2, [pc, #120]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2232      	movs	r2, #50	@ 0x32
 8001d10:	fb02 f303 	mul.w	r3, r2, r3
 8001d14:	4a1b      	ldr	r2, [pc, #108]	@ (8001d84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d16:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1a:	0c9b      	lsrs	r3, r3, #18
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d20:	e002      	b.n	8001d28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d28:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d34:	d102      	bne.n	8001d3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f2      	bne.n	8001d22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d48:	d110      	bne.n	8001d6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e00f      	b.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d5a:	d007      	beq.n	8001d6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d5c:	4b07      	ldr	r3, [pc, #28]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d64:	4a05      	ldr	r2, [pc, #20]	@ (8001d7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	20000000 	.word	0x20000000
 8001d84:	431bde83 	.word	0x431bde83

08001d88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d102      	bne.n	8001d9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	f000 bc02 	b.w	80025a0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d9c:	4b96      	ldr	r3, [pc, #600]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da6:	4b94      	ldr	r3, [pc, #592]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80e4 	beq.w	8001f86 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x4c>
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	f040 808b 	bne.w	8001ee2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	f040 8087 	bne.w	8001ee2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dd4:	4b88      	ldr	r3, [pc, #544]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_OscConfig+0x64>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e3d9      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1a      	ldr	r2, [r3, #32]
 8001df0:	4b81      	ldr	r3, [pc, #516]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d004      	beq.n	8001e06 <HAL_RCC_OscConfig+0x7e>
 8001dfc:	4b7e      	ldr	r3, [pc, #504]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e04:	e005      	b.n	8001e12 <HAL_RCC_OscConfig+0x8a>
 8001e06:	4b7c      	ldr	r3, [pc, #496]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d223      	bcs.n	8001e5e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fd54 	bl	80028c8 <RCC_SetFlashLatencyFromMSIRange>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e3ba      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e2a:	4b73      	ldr	r3, [pc, #460]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a72      	ldr	r2, [pc, #456]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b70      	ldr	r3, [pc, #448]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	496d      	ldr	r1, [pc, #436]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e48:	4b6b      	ldr	r3, [pc, #428]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	4968      	ldr	r1, [pc, #416]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
 8001e5c:	e025      	b.n	8001eaa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e5e:	4b66      	ldr	r3, [pc, #408]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a65      	ldr	r2, [pc, #404]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b63      	ldr	r3, [pc, #396]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4960      	ldr	r1, [pc, #384]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	495b      	ldr	r1, [pc, #364]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fd14 	bl	80028c8 <RCC_SetFlashLatencyFromMSIRange>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e37a      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eaa:	f000 fc81 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	4b51      	ldr	r3, [pc, #324]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	4950      	ldr	r1, [pc, #320]	@ (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001ebc:	5ccb      	ldrb	r3, [r1, r3]
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	4a4e      	ldr	r2, [pc, #312]	@ (8002000 <HAL_RCC_OscConfig+0x278>)
 8001ec8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001eca:	4b4e      	ldr	r3, [pc, #312]	@ (8002004 <HAL_RCC_OscConfig+0x27c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fd9a 	bl	8000a08 <HAL_InitTick>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d052      	beq.n	8001f84 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	e35e      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d032      	beq.n	8001f50 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eea:	4b43      	ldr	r3, [pc, #268]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a42      	ldr	r2, [pc, #264]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ef6:	f7fe fdd7 	bl	8000aa8 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001efe:	f7fe fdd3 	bl	8000aa8 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e347      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f10:	4b39      	ldr	r3, [pc, #228]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f1c:	4b36      	ldr	r3, [pc, #216]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a35      	ldr	r2, [pc, #212]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f22:	f043 0308 	orr.w	r3, r3, #8
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b33      	ldr	r3, [pc, #204]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4930      	ldr	r1, [pc, #192]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	492b      	ldr	r1, [pc, #172]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	604b      	str	r3, [r1, #4]
 8001f4e:	e01a      	b.n	8001f86 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f50:	4b29      	ldr	r3, [pc, #164]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a28      	ldr	r2, [pc, #160]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f56:	f023 0301 	bic.w	r3, r3, #1
 8001f5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fda4 	bl	8000aa8 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f64:	f7fe fda0 	bl	8000aa8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e314      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f76:	4b20      	ldr	r3, [pc, #128]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x1dc>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d073      	beq.n	800207a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x21c>
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	2b0c      	cmp	r3, #12
 8001f9c:	d10e      	bne.n	8001fbc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d10b      	bne.n	8001fbc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	4b14      	ldr	r3, [pc, #80]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d063      	beq.n	8002078 <HAL_RCC_OscConfig+0x2f0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d15f      	bne.n	8002078 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e2f1      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fc4:	d106      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x24c>
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e025      	b.n	8002020 <HAL_RCC_OscConfig+0x298>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fdc:	d114      	bne.n	8002008 <HAL_RCC_OscConfig+0x280>
 8001fde:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a05      	ldr	r2, [pc, #20]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b03      	ldr	r3, [pc, #12]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a02      	ldr	r2, [pc, #8]	@ (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e013      	b.n	8002020 <HAL_RCC_OscConfig+0x298>
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08003bb8 	.word	0x08003bb8
 8002000:	20000000 	.word	0x20000000
 8002004:	20000004 	.word	0x20000004
 8002008:	4ba0      	ldr	r3, [pc, #640]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a9f      	ldr	r2, [pc, #636]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800200e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	4b9d      	ldr	r3, [pc, #628]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a9c      	ldr	r2, [pc, #624]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800201a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800201e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d013      	beq.n	8002050 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7fe fd3e 	bl	8000aa8 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002030:	f7fe fd3a 	bl	8000aa8 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	@ 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e2ae      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002042:	4b92      	ldr	r3, [pc, #584]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x2a8>
 800204e:	e014      	b.n	800207a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7fe fd2a 	bl	8000aa8 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002058:	f7fe fd26 	bl	8000aa8 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	@ 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e29a      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800206a:	4b88      	ldr	r3, [pc, #544]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x2d0>
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d060      	beq.n	8002148 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	2b04      	cmp	r3, #4
 800208a:	d005      	beq.n	8002098 <HAL_RCC_OscConfig+0x310>
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d119      	bne.n	80020c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d116      	bne.n	80020c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002098:	4b7c      	ldr	r3, [pc, #496]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_OscConfig+0x328>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e277      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b0:	4b76      	ldr	r3, [pc, #472]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	061b      	lsls	r3, r3, #24
 80020be:	4973      	ldr	r1, [pc, #460]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020c4:	e040      	b.n	8002148 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d023      	beq.n	8002116 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ce:	4b6f      	ldr	r3, [pc, #444]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a6e      	ldr	r2, [pc, #440]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7fe fce5 	bl	8000aa8 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e2:	f7fe fce1 	bl	8000aa8 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e255      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f4:	4b65      	ldr	r3, [pc, #404]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4b62      	ldr	r3, [pc, #392]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	495f      	ldr	r1, [pc, #380]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
 8002114:	e018      	b.n	8002148 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002116:	4b5d      	ldr	r3, [pc, #372]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a5c      	ldr	r2, [pc, #368]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800211c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7fe fcc1 	bl	8000aa8 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212a:	f7fe fcbd 	bl	8000aa8 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e231      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800213c:	4b53      	ldr	r3, [pc, #332]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f0      	bne.n	800212a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d03c      	beq.n	80021ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01c      	beq.n	8002196 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215c:	4b4b      	ldr	r3, [pc, #300]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800215e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002162:	4a4a      	ldr	r2, [pc, #296]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7fe fc9c 	bl	8000aa8 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002174:	f7fe fc98 	bl	8000aa8 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e20c      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002186:	4b41      	ldr	r3, [pc, #260]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ef      	beq.n	8002174 <HAL_RCC_OscConfig+0x3ec>
 8002194:	e01b      	b.n	80021ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002196:	4b3d      	ldr	r3, [pc, #244]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002198:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800219c:	4a3b      	ldr	r2, [pc, #236]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a6:	f7fe fc7f 	bl	8000aa8 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ae:	f7fe fc7b 	bl	8000aa8 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e1ef      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021c0:	4b32      	ldr	r3, [pc, #200]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80021c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1ef      	bne.n	80021ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80a6 	beq.w	8002328 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021dc:	2300      	movs	r3, #0
 80021de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021e0:	4b2a      	ldr	r3, [pc, #168]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80021e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10d      	bne.n	8002208 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ec:	4b27      	ldr	r3, [pc, #156]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f0:	4a26      	ldr	r2, [pc, #152]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80021f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021f8:	4b24      	ldr	r3, [pc, #144]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002204:	2301      	movs	r3, #1
 8002206:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002208:	4b21      	ldr	r3, [pc, #132]	@ (8002290 <HAL_RCC_OscConfig+0x508>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d118      	bne.n	8002246 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002214:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <HAL_RCC_OscConfig+0x508>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1d      	ldr	r2, [pc, #116]	@ (8002290 <HAL_RCC_OscConfig+0x508>)
 800221a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800221e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002220:	f7fe fc42 	bl	8000aa8 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002228:	f7fe fc3e 	bl	8000aa8 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1b2      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223a:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <HAL_RCC_OscConfig+0x508>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d108      	bne.n	8002260 <HAL_RCC_OscConfig+0x4d8>
 800224e:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002254:	4a0d      	ldr	r2, [pc, #52]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800225e:	e029      	b.n	80022b4 <HAL_RCC_OscConfig+0x52c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b05      	cmp	r3, #5
 8002266:	d115      	bne.n	8002294 <HAL_RCC_OscConfig+0x50c>
 8002268:	4b08      	ldr	r3, [pc, #32]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800226e:	4a07      	ldr	r2, [pc, #28]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002278:	4b04      	ldr	r3, [pc, #16]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800227e:	4a03      	ldr	r2, [pc, #12]	@ (800228c <HAL_RCC_OscConfig+0x504>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002288:	e014      	b.n	80022b4 <HAL_RCC_OscConfig+0x52c>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	40007000 	.word	0x40007000
 8002294:	4b9a      	ldr	r3, [pc, #616]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800229a:	4a99      	ldr	r2, [pc, #612]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022a4:	4b96      	ldr	r3, [pc, #600]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022aa:	4a95      	ldr	r2, [pc, #596]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 80022ac:	f023 0304 	bic.w	r3, r3, #4
 80022b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d016      	beq.n	80022ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7fe fbf4 	bl	8000aa8 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c2:	e00a      	b.n	80022da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c4:	f7fe fbf0 	bl	8000aa8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e162      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022da:	4b89      	ldr	r3, [pc, #548]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ed      	beq.n	80022c4 <HAL_RCC_OscConfig+0x53c>
 80022e8:	e015      	b.n	8002316 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7fe fbdd 	bl	8000aa8 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe fbd9 	bl	8000aa8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e14b      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002308:	4b7d      	ldr	r3, [pc, #500]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ed      	bne.n	80022f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002316:	7ffb      	ldrb	r3, [r7, #31]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d105      	bne.n	8002328 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231c:	4b78      	ldr	r3, [pc, #480]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002320:	4a77      	ldr	r2, [pc, #476]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 8002322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002326:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d03c      	beq.n	80023ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01c      	beq.n	8002376 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800233c:	4b70      	ldr	r3, [pc, #448]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 800233e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002342:	4a6f      	ldr	r2, [pc, #444]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7fe fbac 	bl	8000aa8 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002354:	f7fe fba8 	bl	8000aa8 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e11c      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002366:	4b66      	ldr	r3, [pc, #408]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 8002368:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ef      	beq.n	8002354 <HAL_RCC_OscConfig+0x5cc>
 8002374:	e01b      	b.n	80023ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002376:	4b62      	ldr	r3, [pc, #392]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 8002378:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800237c:	4a60      	ldr	r2, [pc, #384]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002386:	f7fe fb8f 	bl	8000aa8 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800238e:	f7fe fb8b 	bl	8000aa8 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e0ff      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023a0:	4b57      	ldr	r3, [pc, #348]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 80023a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1ef      	bne.n	800238e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80f3 	beq.w	800259e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	2b02      	cmp	r3, #2
 80023be:	f040 80c9 	bne.w	8002554 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023c2:	4b4f      	ldr	r3, [pc, #316]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 0203 	and.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d12c      	bne.n	8002430 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e0:	3b01      	subs	r3, #1
 80023e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d123      	bne.n	8002430 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d11b      	bne.n	8002430 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002402:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d113      	bne.n	8002430 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002412:	085b      	lsrs	r3, r3, #1
 8002414:	3b01      	subs	r3, #1
 8002416:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d109      	bne.n	8002430 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	085b      	lsrs	r3, r3, #1
 8002428:	3b01      	subs	r3, #1
 800242a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d06b      	beq.n	8002508 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b0c      	cmp	r3, #12
 8002434:	d062      	beq.n	80024fc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002436:	4b32      	ldr	r3, [pc, #200]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0ac      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002446:	4b2e      	ldr	r3, [pc, #184]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a2d      	ldr	r2, [pc, #180]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 800244c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002450:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002452:	f7fe fb29 	bl	8000aa8 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245a:	f7fe fb25 	bl	8000aa8 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e099      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800246c:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002478:	4b21      	ldr	r3, [pc, #132]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	4b21      	ldr	r3, [pc, #132]	@ (8002504 <HAL_RCC_OscConfig+0x77c>)
 800247e:	4013      	ands	r3, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002488:	3a01      	subs	r2, #1
 800248a:	0112      	lsls	r2, r2, #4
 800248c:	4311      	orrs	r1, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002492:	0212      	lsls	r2, r2, #8
 8002494:	4311      	orrs	r1, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800249a:	0852      	lsrs	r2, r2, #1
 800249c:	3a01      	subs	r2, #1
 800249e:	0552      	lsls	r2, r2, #21
 80024a0:	4311      	orrs	r1, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80024a6:	0852      	lsrs	r2, r2, #1
 80024a8:	3a01      	subs	r2, #1
 80024aa:	0652      	lsls	r2, r2, #25
 80024ac:	4311      	orrs	r1, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024b2:	06d2      	lsls	r2, r2, #27
 80024b4:	430a      	orrs	r2, r1
 80024b6:	4912      	ldr	r1, [pc, #72]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024bc:	4b10      	ldr	r3, [pc, #64]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0f      	ldr	r2, [pc, #60]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 80024c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 80024ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024d4:	f7fe fae8 	bl	8000aa8 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024dc:	f7fe fae4 	bl	8000aa8 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e058      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ee:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <HAL_RCC_OscConfig+0x778>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024fa:	e050      	b.n	800259e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e04f      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
 8002500:	40021000 	.word	0x40021000
 8002504:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002508:	4b27      	ldr	r3, [pc, #156]	@ (80025a8 <HAL_RCC_OscConfig+0x820>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d144      	bne.n	800259e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002514:	4b24      	ldr	r3, [pc, #144]	@ (80025a8 <HAL_RCC_OscConfig+0x820>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a23      	ldr	r2, [pc, #140]	@ (80025a8 <HAL_RCC_OscConfig+0x820>)
 800251a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800251e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002520:	4b21      	ldr	r3, [pc, #132]	@ (80025a8 <HAL_RCC_OscConfig+0x820>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4a20      	ldr	r2, [pc, #128]	@ (80025a8 <HAL_RCC_OscConfig+0x820>)
 8002526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800252a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800252c:	f7fe fabc 	bl	8000aa8 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7fe fab8 	bl	8000aa8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e02c      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002546:	4b18      	ldr	r3, [pc, #96]	@ (80025a8 <HAL_RCC_OscConfig+0x820>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x7ac>
 8002552:	e024      	b.n	800259e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b0c      	cmp	r3, #12
 8002558:	d01f      	beq.n	800259a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b13      	ldr	r3, [pc, #76]	@ (80025a8 <HAL_RCC_OscConfig+0x820>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a12      	ldr	r2, [pc, #72]	@ (80025a8 <HAL_RCC_OscConfig+0x820>)
 8002560:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7fe fa9f 	bl	8000aa8 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256e:	f7fe fa9b 	bl	8000aa8 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e00f      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002580:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <HAL_RCC_OscConfig+0x820>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f0      	bne.n	800256e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800258c:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <HAL_RCC_OscConfig+0x820>)
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	4905      	ldr	r1, [pc, #20]	@ (80025a8 <HAL_RCC_OscConfig+0x820>)
 8002592:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_RCC_OscConfig+0x824>)
 8002594:	4013      	ands	r3, r2
 8002596:	60cb      	str	r3, [r1, #12]
 8002598:	e001      	b.n	800259e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000
 80025ac:	feeefffc 	.word	0xfeeefffc

080025b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0e7      	b.n	8002794 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025c4:	4b75      	ldr	r3, [pc, #468]	@ (800279c <HAL_RCC_ClockConfig+0x1ec>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d910      	bls.n	80025f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b72      	ldr	r3, [pc, #456]	@ (800279c <HAL_RCC_ClockConfig+0x1ec>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 0207 	bic.w	r2, r3, #7
 80025da:	4970      	ldr	r1, [pc, #448]	@ (800279c <HAL_RCC_ClockConfig+0x1ec>)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b6e      	ldr	r3, [pc, #440]	@ (800279c <HAL_RCC_ClockConfig+0x1ec>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0cf      	b.n	8002794 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d010      	beq.n	8002622 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	4b66      	ldr	r3, [pc, #408]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800260c:	429a      	cmp	r2, r3
 800260e:	d908      	bls.n	8002622 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002610:	4b63      	ldr	r3, [pc, #396]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4960      	ldr	r1, [pc, #384]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d04c      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d107      	bne.n	8002646 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002636:	4b5a      	ldr	r3, [pc, #360]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d121      	bne.n	8002686 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0a6      	b.n	8002794 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d107      	bne.n	800265e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800264e:	4b54      	ldr	r3, [pc, #336]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d115      	bne.n	8002686 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e09a      	b.n	8002794 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002666:	4b4e      	ldr	r3, [pc, #312]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e08e      	b.n	8002794 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002676:	4b4a      	ldr	r3, [pc, #296]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e086      	b.n	8002794 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002686:	4b46      	ldr	r3, [pc, #280]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4943      	ldr	r1, [pc, #268]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002694:	4313      	orrs	r3, r2
 8002696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002698:	f7fe fa06 	bl	8000aa8 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7fe fa02 	bl	8000aa8 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e06e      	b.n	8002794 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	4b3a      	ldr	r3, [pc, #232]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 020c 	and.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1eb      	bne.n	80026a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d010      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	4b31      	ldr	r3, [pc, #196]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d208      	bcs.n	80026f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e4:	4b2e      	ldr	r3, [pc, #184]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	492b      	ldr	r1, [pc, #172]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f6:	4b29      	ldr	r3, [pc, #164]	@ (800279c <HAL_RCC_ClockConfig+0x1ec>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d210      	bcs.n	8002726 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002704:	4b25      	ldr	r3, [pc, #148]	@ (800279c <HAL_RCC_ClockConfig+0x1ec>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 0207 	bic.w	r2, r3, #7
 800270c:	4923      	ldr	r1, [pc, #140]	@ (800279c <HAL_RCC_ClockConfig+0x1ec>)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002714:	4b21      	ldr	r3, [pc, #132]	@ (800279c <HAL_RCC_ClockConfig+0x1ec>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d001      	beq.n	8002726 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e036      	b.n	8002794 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d008      	beq.n	8002744 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002732:	4b1b      	ldr	r3, [pc, #108]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	4918      	ldr	r1, [pc, #96]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002740:	4313      	orrs	r3, r2
 8002742:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d009      	beq.n	8002764 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002750:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4910      	ldr	r1, [pc, #64]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002764:	f000 f824 	bl	80027b0 <HAL_RCC_GetSysClockFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b0d      	ldr	r3, [pc, #52]	@ (80027a0 <HAL_RCC_ClockConfig+0x1f0>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	091b      	lsrs	r3, r3, #4
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	490b      	ldr	r1, [pc, #44]	@ (80027a4 <HAL_RCC_ClockConfig+0x1f4>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
 8002780:	4a09      	ldr	r2, [pc, #36]	@ (80027a8 <HAL_RCC_ClockConfig+0x1f8>)
 8002782:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002784:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <HAL_RCC_ClockConfig+0x1fc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe f93d 	bl	8000a08 <HAL_InitTick>
 800278e:	4603      	mov	r3, r0
 8002790:	72fb      	strb	r3, [r7, #11]

  return status;
 8002792:	7afb      	ldrb	r3, [r7, #11]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40022000 	.word	0x40022000
 80027a0:	40021000 	.word	0x40021000
 80027a4:	08003bb8 	.word	0x08003bb8
 80027a8:	20000000 	.word	0x20000000
 80027ac:	20000004 	.word	0x20000004

080027b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	@ 0x24
 80027b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027be:	4b3e      	ldr	r3, [pc, #248]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027c8:	4b3b      	ldr	r3, [pc, #236]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x34>
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d121      	bne.n	8002822 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d11e      	bne.n	8002822 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027e4:	4b34      	ldr	r3, [pc, #208]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027f0:	4b31      	ldr	r3, [pc, #196]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	e005      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002800:	4b2d      	ldr	r3, [pc, #180]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800280c:	4a2b      	ldr	r2, [pc, #172]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002814:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10d      	bne.n	8002838 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002820:	e00a      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b04      	cmp	r3, #4
 8002826:	d102      	bne.n	800282e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002828:	4b25      	ldr	r3, [pc, #148]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	e004      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d101      	bne.n	8002838 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002834:	4b23      	ldr	r3, [pc, #140]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002836:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b0c      	cmp	r3, #12
 800283c:	d134      	bne.n	80028a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800283e:	4b1e      	ldr	r3, [pc, #120]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d003      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0xa6>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b03      	cmp	r3, #3
 8002852:	d003      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0xac>
 8002854:	e005      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002856:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002858:	617b      	str	r3, [r7, #20]
      break;
 800285a:	e005      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800285c:	4b19      	ldr	r3, [pc, #100]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800285e:	617b      	str	r3, [r7, #20]
      break;
 8002860:	e002      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	617b      	str	r3, [r7, #20]
      break;
 8002866:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002868:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	3301      	adds	r3, #1
 8002874:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002876:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	fb03 f202 	mul.w	r2, r3, r2
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800288e:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	0e5b      	lsrs	r3, r3, #25
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	3301      	adds	r3, #1
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028a8:	69bb      	ldr	r3, [r7, #24]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	@ 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	08003bc8 	.word	0x08003bc8
 80028c0:	00f42400 	.word	0x00f42400
 80028c4:	007a1200 	.word	0x007a1200

080028c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028d0:	2300      	movs	r3, #0
 80028d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028e0:	f7ff f9ee 	bl	8001cc0 <HAL_PWREx_GetVoltageRange>
 80028e4:	6178      	str	r0, [r7, #20]
 80028e6:	e014      	b.n	8002912 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028e8:	4b25      	ldr	r3, [pc, #148]	@ (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ec:	4a24      	ldr	r2, [pc, #144]	@ (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80028f4:	4b22      	ldr	r3, [pc, #136]	@ (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002900:	f7ff f9de 	bl	8001cc0 <HAL_PWREx_GetVoltageRange>
 8002904:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002906:	4b1e      	ldr	r3, [pc, #120]	@ (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290a:	4a1d      	ldr	r2, [pc, #116]	@ (8002980 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800290c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002910:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002918:	d10b      	bne.n	8002932 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b80      	cmp	r3, #128	@ 0x80
 800291e:	d919      	bls.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2ba0      	cmp	r3, #160	@ 0xa0
 8002924:	d902      	bls.n	800292c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002926:	2302      	movs	r3, #2
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	e013      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800292c:	2301      	movs	r3, #1
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	e010      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b80      	cmp	r3, #128	@ 0x80
 8002936:	d902      	bls.n	800293e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002938:	2303      	movs	r3, #3
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	e00a      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b80      	cmp	r3, #128	@ 0x80
 8002942:	d102      	bne.n	800294a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002944:	2302      	movs	r3, #2
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	e004      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b70      	cmp	r3, #112	@ 0x70
 800294e:	d101      	bne.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002950:	2301      	movs	r3, #1
 8002952:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002954:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 0207 	bic.w	r2, r3, #7
 800295c:	4909      	ldr	r1, [pc, #36]	@ (8002984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002964:	4b07      	ldr	r3, [pc, #28]	@ (8002984 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	429a      	cmp	r2, r3
 8002970:	d001      	beq.n	8002976 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	40022000 	.word	0x40022000

08002988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e049      	b.n	8002a2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fd ff5a 	bl	8000868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3304      	adds	r3, #4
 80029c4:	4619      	mov	r1, r3
 80029c6:	4610      	mov	r0, r2
 80029c8:	f000 fc2e 	bl	8003228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e049      	b.n	8002adc <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d106      	bne.n	8002a62 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f841 	bl	8002ae4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3304      	adds	r3, #4
 8002a72:	4619      	mov	r1, r3
 8002a74:	4610      	mov	r0, r2
 8002a76:	f000 fbd7 	bl	8003228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e049      	b.n	8002b9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f841 	bl	8002ba6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3304      	adds	r3, #4
 8002b34:	4619      	mov	r1, r3
 8002b36:	4610      	mov	r0, r2
 8002b38:	f000 fb76 	bl	8003228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d109      	bne.n	8002be0 <HAL_TIM_PWM_Start+0x24>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	bf14      	ite	ne
 8002bd8:	2301      	movne	r3, #1
 8002bda:	2300      	moveq	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	e03c      	b.n	8002c5a <HAL_TIM_PWM_Start+0x9e>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d109      	bne.n	8002bfa <HAL_TIM_PWM_Start+0x3e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	bf14      	ite	ne
 8002bf2:	2301      	movne	r3, #1
 8002bf4:	2300      	moveq	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	e02f      	b.n	8002c5a <HAL_TIM_PWM_Start+0x9e>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d109      	bne.n	8002c14 <HAL_TIM_PWM_Start+0x58>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	bf14      	ite	ne
 8002c0c:	2301      	movne	r3, #1
 8002c0e:	2300      	moveq	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	e022      	b.n	8002c5a <HAL_TIM_PWM_Start+0x9e>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b0c      	cmp	r3, #12
 8002c18:	d109      	bne.n	8002c2e <HAL_TIM_PWM_Start+0x72>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e015      	b.n	8002c5a <HAL_TIM_PWM_Start+0x9e>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b10      	cmp	r3, #16
 8002c32:	d109      	bne.n	8002c48 <HAL_TIM_PWM_Start+0x8c>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e008      	b.n	8002c5a <HAL_TIM_PWM_Start+0x9e>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e07e      	b.n	8002d60 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d104      	bne.n	8002c72 <HAL_TIM_PWM_Start+0xb6>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c70:	e023      	b.n	8002cba <HAL_TIM_PWM_Start+0xfe>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_PWM_Start+0xc6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c80:	e01b      	b.n	8002cba <HAL_TIM_PWM_Start+0xfe>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d104      	bne.n	8002c92 <HAL_TIM_PWM_Start+0xd6>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c90:	e013      	b.n	8002cba <HAL_TIM_PWM_Start+0xfe>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b0c      	cmp	r3, #12
 8002c96:	d104      	bne.n	8002ca2 <HAL_TIM_PWM_Start+0xe6>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ca0:	e00b      	b.n	8002cba <HAL_TIM_PWM_Start+0xfe>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	d104      	bne.n	8002cb2 <HAL_TIM_PWM_Start+0xf6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cb0:	e003      	b.n	8002cba <HAL_TIM_PWM_Start+0xfe>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	6839      	ldr	r1, [r7, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fe38 	bl	8003938 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a26      	ldr	r2, [pc, #152]	@ (8002d68 <HAL_TIM_PWM_Start+0x1ac>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d009      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0x12a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a25      	ldr	r2, [pc, #148]	@ (8002d6c <HAL_TIM_PWM_Start+0x1b0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0x12a>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a23      	ldr	r2, [pc, #140]	@ (8002d70 <HAL_TIM_PWM_Start+0x1b4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_TIM_PWM_Start+0x12e>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <HAL_TIM_PWM_Start+0x130>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cfe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a18      	ldr	r2, [pc, #96]	@ (8002d68 <HAL_TIM_PWM_Start+0x1ac>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d009      	beq.n	8002d1e <HAL_TIM_PWM_Start+0x162>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d12:	d004      	beq.n	8002d1e <HAL_TIM_PWM_Start+0x162>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a14      	ldr	r2, [pc, #80]	@ (8002d6c <HAL_TIM_PWM_Start+0x1b0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d115      	bne.n	8002d4a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	4b13      	ldr	r3, [pc, #76]	@ (8002d74 <HAL_TIM_PWM_Start+0x1b8>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b06      	cmp	r3, #6
 8002d2e:	d015      	beq.n	8002d5c <HAL_TIM_PWM_Start+0x1a0>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d36:	d011      	beq.n	8002d5c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d48:	e008      	b.n	8002d5c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e000      	b.n	8002d5e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40012c00 	.word	0x40012c00
 8002d6c:	40014000 	.word	0x40014000
 8002d70:	40014400 	.word	0x40014400
 8002d74:	00010007 	.word	0x00010007

08002d78 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e066      	b.n	8002e64 <HAL_TIM_OC_ConfigChannel+0xec>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b14      	cmp	r3, #20
 8002da2:	d857      	bhi.n	8002e54 <HAL_TIM_OC_ConfigChannel+0xdc>
 8002da4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dac <HAL_TIM_OC_ConfigChannel+0x34>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002e01 	.word	0x08002e01
 8002db0:	08002e55 	.word	0x08002e55
 8002db4:	08002e55 	.word	0x08002e55
 8002db8:	08002e55 	.word	0x08002e55
 8002dbc:	08002e0f 	.word	0x08002e0f
 8002dc0:	08002e55 	.word	0x08002e55
 8002dc4:	08002e55 	.word	0x08002e55
 8002dc8:	08002e55 	.word	0x08002e55
 8002dcc:	08002e1d 	.word	0x08002e1d
 8002dd0:	08002e55 	.word	0x08002e55
 8002dd4:	08002e55 	.word	0x08002e55
 8002dd8:	08002e55 	.word	0x08002e55
 8002ddc:	08002e2b 	.word	0x08002e2b
 8002de0:	08002e55 	.word	0x08002e55
 8002de4:	08002e55 	.word	0x08002e55
 8002de8:	08002e55 	.word	0x08002e55
 8002dec:	08002e39 	.word	0x08002e39
 8002df0:	08002e55 	.word	0x08002e55
 8002df4:	08002e55 	.word	0x08002e55
 8002df8:	08002e55 	.word	0x08002e55
 8002dfc:	08002e47 	.word	0x08002e47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fa7e 	bl	8003308 <TIM_OC1_SetConfig>
      break;
 8002e0c:	e025      	b.n	8002e5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 faf3 	bl	8003400 <TIM_OC2_SetConfig>
      break;
 8002e1a:	e01e      	b.n	8002e5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fb66 	bl	80034f4 <TIM_OC3_SetConfig>
      break;
 8002e28:	e017      	b.n	8002e5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fbd7 	bl	80035e4 <TIM_OC4_SetConfig>
      break;
 8002e36:	e010      	b.n	8002e5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fc2e 	bl	80036a0 <TIM_OC5_SetConfig>
      break;
 8002e44:	e009      	b.n	8002e5a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fc7f 	bl	8003750 <TIM_OC6_SetConfig>
      break;
 8002e52:	e002      	b.n	8002e5a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	75fb      	strb	r3, [r7, #23]
      break;
 8002e58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e0ff      	b.n	800308a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b14      	cmp	r3, #20
 8002e96:	f200 80f0 	bhi.w	800307a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002ef5 	.word	0x08002ef5
 8002ea4:	0800307b 	.word	0x0800307b
 8002ea8:	0800307b 	.word	0x0800307b
 8002eac:	0800307b 	.word	0x0800307b
 8002eb0:	08002f35 	.word	0x08002f35
 8002eb4:	0800307b 	.word	0x0800307b
 8002eb8:	0800307b 	.word	0x0800307b
 8002ebc:	0800307b 	.word	0x0800307b
 8002ec0:	08002f77 	.word	0x08002f77
 8002ec4:	0800307b 	.word	0x0800307b
 8002ec8:	0800307b 	.word	0x0800307b
 8002ecc:	0800307b 	.word	0x0800307b
 8002ed0:	08002fb7 	.word	0x08002fb7
 8002ed4:	0800307b 	.word	0x0800307b
 8002ed8:	0800307b 	.word	0x0800307b
 8002edc:	0800307b 	.word	0x0800307b
 8002ee0:	08002ff9 	.word	0x08002ff9
 8002ee4:	0800307b 	.word	0x0800307b
 8002ee8:	0800307b 	.word	0x0800307b
 8002eec:	0800307b 	.word	0x0800307b
 8002ef0:	08003039 	.word	0x08003039
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fa04 	bl	8003308 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0208 	orr.w	r2, r2, #8
 8002f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0204 	bic.w	r2, r2, #4
 8002f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6999      	ldr	r1, [r3, #24]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	619a      	str	r2, [r3, #24]
      break;
 8002f32:	e0a5      	b.n	8003080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fa60 	bl	8003400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	699a      	ldr	r2, [r3, #24]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6999      	ldr	r1, [r3, #24]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	021a      	lsls	r2, r3, #8
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	619a      	str	r2, [r3, #24]
      break;
 8002f74:	e084      	b.n	8003080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fab9 	bl	80034f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69da      	ldr	r2, [r3, #28]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0208 	orr.w	r2, r2, #8
 8002f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0204 	bic.w	r2, r2, #4
 8002fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69d9      	ldr	r1, [r3, #28]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	61da      	str	r2, [r3, #28]
      break;
 8002fb4:	e064      	b.n	8003080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68b9      	ldr	r1, [r7, #8]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fb11 	bl	80035e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69da      	ldr	r2, [r3, #28]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69da      	ldr	r2, [r3, #28]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69d9      	ldr	r1, [r3, #28]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	021a      	lsls	r2, r3, #8
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	61da      	str	r2, [r3, #28]
      break;
 8002ff6:	e043      	b.n	8003080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68b9      	ldr	r1, [r7, #8]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fb4e 	bl	80036a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0208 	orr.w	r2, r2, #8
 8003012:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0204 	bic.w	r2, r2, #4
 8003022:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003036:	e023      	b.n	8003080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fb86 	bl	8003750 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003052:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003062:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	021a      	lsls	r2, r3, #8
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003078:	e002      	b.n	8003080 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	75fb      	strb	r3, [r7, #23]
      break;
 800307e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003088:	7dfb      	ldrb	r3, [r7, #23]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop

08003094 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_TIM_ConfigClockSource+0x1c>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e0b6      	b.n	800321e <HAL_TIM_ConfigClockSource+0x18a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ec:	d03e      	beq.n	800316c <HAL_TIM_ConfigClockSource+0xd8>
 80030ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030f2:	f200 8087 	bhi.w	8003204 <HAL_TIM_ConfigClockSource+0x170>
 80030f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030fa:	f000 8086 	beq.w	800320a <HAL_TIM_ConfigClockSource+0x176>
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003102:	d87f      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x170>
 8003104:	2b70      	cmp	r3, #112	@ 0x70
 8003106:	d01a      	beq.n	800313e <HAL_TIM_ConfigClockSource+0xaa>
 8003108:	2b70      	cmp	r3, #112	@ 0x70
 800310a:	d87b      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x170>
 800310c:	2b60      	cmp	r3, #96	@ 0x60
 800310e:	d050      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x11e>
 8003110:	2b60      	cmp	r3, #96	@ 0x60
 8003112:	d877      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x170>
 8003114:	2b50      	cmp	r3, #80	@ 0x50
 8003116:	d03c      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0xfe>
 8003118:	2b50      	cmp	r3, #80	@ 0x50
 800311a:	d873      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x170>
 800311c:	2b40      	cmp	r3, #64	@ 0x40
 800311e:	d058      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0x13e>
 8003120:	2b40      	cmp	r3, #64	@ 0x40
 8003122:	d86f      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x170>
 8003124:	2b30      	cmp	r3, #48	@ 0x30
 8003126:	d064      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x15e>
 8003128:	2b30      	cmp	r3, #48	@ 0x30
 800312a:	d86b      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x170>
 800312c:	2b20      	cmp	r3, #32
 800312e:	d060      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x15e>
 8003130:	2b20      	cmp	r3, #32
 8003132:	d867      	bhi.n	8003204 <HAL_TIM_ConfigClockSource+0x170>
 8003134:	2b00      	cmp	r3, #0
 8003136:	d05c      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x15e>
 8003138:	2b10      	cmp	r3, #16
 800313a:	d05a      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x15e>
 800313c:	e062      	b.n	8003204 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800314e:	f000 fbd3 	bl	80038f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003160:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	609a      	str	r2, [r3, #8]
      break;
 800316a:	e04f      	b.n	800320c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800317c:	f000 fbbc 	bl	80038f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800318e:	609a      	str	r2, [r3, #8]
      break;
 8003190:	e03c      	b.n	800320c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800319e:	461a      	mov	r2, r3
 80031a0:	f000 fb30 	bl	8003804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2150      	movs	r1, #80	@ 0x50
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fb89 	bl	80038c2 <TIM_ITRx_SetConfig>
      break;
 80031b0:	e02c      	b.n	800320c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031be:	461a      	mov	r2, r3
 80031c0:	f000 fb4f 	bl	8003862 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2160      	movs	r1, #96	@ 0x60
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fb79 	bl	80038c2 <TIM_ITRx_SetConfig>
      break;
 80031d0:	e01c      	b.n	800320c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031de:	461a      	mov	r2, r3
 80031e0:	f000 fb10 	bl	8003804 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2140      	movs	r1, #64	@ 0x40
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fb69 	bl	80038c2 <TIM_ITRx_SetConfig>
      break;
 80031f0:	e00c      	b.n	800320c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4619      	mov	r1, r3
 80031fc:	4610      	mov	r0, r2
 80031fe:	f000 fb60 	bl	80038c2 <TIM_ITRx_SetConfig>
      break;
 8003202:	e003      	b.n	800320c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	73fb      	strb	r3, [r7, #15]
      break;
 8003208:	e000      	b.n	800320c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800320a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800321c:	7bfb      	ldrb	r3, [r7, #15]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a30      	ldr	r2, [pc, #192]	@ (80032fc <TIM_Base_SetConfig+0xd4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d003      	beq.n	8003248 <TIM_Base_SetConfig+0x20>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003246:	d108      	bne.n	800325a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800324e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a27      	ldr	r2, [pc, #156]	@ (80032fc <TIM_Base_SetConfig+0xd4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00b      	beq.n	800327a <TIM_Base_SetConfig+0x52>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003268:	d007      	beq.n	800327a <TIM_Base_SetConfig+0x52>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a24      	ldr	r2, [pc, #144]	@ (8003300 <TIM_Base_SetConfig+0xd8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d003      	beq.n	800327a <TIM_Base_SetConfig+0x52>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a23      	ldr	r2, [pc, #140]	@ (8003304 <TIM_Base_SetConfig+0xdc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d108      	bne.n	800328c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4313      	orrs	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a12      	ldr	r2, [pc, #72]	@ (80032fc <TIM_Base_SetConfig+0xd4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d007      	beq.n	80032c8 <TIM_Base_SetConfig+0xa0>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a11      	ldr	r2, [pc, #68]	@ (8003300 <TIM_Base_SetConfig+0xd8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_Base_SetConfig+0xa0>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a10      	ldr	r2, [pc, #64]	@ (8003304 <TIM_Base_SetConfig+0xdc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d103      	bne.n	80032d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d105      	bne.n	80032ee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f023 0201 	bic.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	611a      	str	r2, [r3, #16]
  }
}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40012c00 	.word	0x40012c00
 8003300:	40014000 	.word	0x40014000
 8003304:	40014400 	.word	0x40014400

08003308 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f023 0201 	bic.w	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800333a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f023 0302 	bic.w	r3, r3, #2
 8003354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a24      	ldr	r2, [pc, #144]	@ (80033f4 <TIM_OC1_SetConfig+0xec>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d007      	beq.n	8003378 <TIM_OC1_SetConfig+0x70>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a23      	ldr	r2, [pc, #140]	@ (80033f8 <TIM_OC1_SetConfig+0xf0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d003      	beq.n	8003378 <TIM_OC1_SetConfig+0x70>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a22      	ldr	r2, [pc, #136]	@ (80033fc <TIM_OC1_SetConfig+0xf4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d10c      	bne.n	8003392 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f023 0308 	bic.w	r3, r3, #8
 800337e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f023 0304 	bic.w	r3, r3, #4
 8003390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a17      	ldr	r2, [pc, #92]	@ (80033f4 <TIM_OC1_SetConfig+0xec>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <TIM_OC1_SetConfig+0xa2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a16      	ldr	r2, [pc, #88]	@ (80033f8 <TIM_OC1_SetConfig+0xf0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d003      	beq.n	80033aa <TIM_OC1_SetConfig+0xa2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a15      	ldr	r2, [pc, #84]	@ (80033fc <TIM_OC1_SetConfig+0xf4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d111      	bne.n	80033ce <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	621a      	str	r2, [r3, #32]
}
 80033e8:	bf00      	nop
 80033ea:	371c      	adds	r7, #28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40014000 	.word	0x40014000
 80033fc:	40014400 	.word	0x40014400

08003400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	f023 0210 	bic.w	r2, r3, #16
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800342e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800343a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f023 0320 	bic.w	r3, r3, #32
 800344e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a22      	ldr	r2, [pc, #136]	@ (80034e8 <TIM_OC2_SetConfig+0xe8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d10d      	bne.n	8003480 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800346a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800347e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a19      	ldr	r2, [pc, #100]	@ (80034e8 <TIM_OC2_SetConfig+0xe8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d007      	beq.n	8003498 <TIM_OC2_SetConfig+0x98>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a18      	ldr	r2, [pc, #96]	@ (80034ec <TIM_OC2_SetConfig+0xec>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d003      	beq.n	8003498 <TIM_OC2_SetConfig+0x98>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a17      	ldr	r2, [pc, #92]	@ (80034f0 <TIM_OC2_SetConfig+0xf0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d113      	bne.n	80034c0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800349e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40012c00 	.word	0x40012c00
 80034ec:	40014000 	.word	0x40014000
 80034f0:	40014400 	.word	0x40014400

080034f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0303 	bic.w	r3, r3, #3
 800352e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a21      	ldr	r2, [pc, #132]	@ (80035d8 <TIM_OC3_SetConfig+0xe4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10d      	bne.n	8003572 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800355c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a18      	ldr	r2, [pc, #96]	@ (80035d8 <TIM_OC3_SetConfig+0xe4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d007      	beq.n	800358a <TIM_OC3_SetConfig+0x96>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a17      	ldr	r2, [pc, #92]	@ (80035dc <TIM_OC3_SetConfig+0xe8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d003      	beq.n	800358a <TIM_OC3_SetConfig+0x96>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a16      	ldr	r2, [pc, #88]	@ (80035e0 <TIM_OC3_SetConfig+0xec>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d113      	bne.n	80035b2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	621a      	str	r2, [r3, #32]
}
 80035cc:	bf00      	nop
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	40012c00 	.word	0x40012c00
 80035dc:	40014000 	.word	0x40014000
 80035e0:	40014400 	.word	0x40014400

080035e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800361e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	031b      	lsls	r3, r3, #12
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a14      	ldr	r2, [pc, #80]	@ (8003694 <TIM_OC4_SetConfig+0xb0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d007      	beq.n	8003658 <TIM_OC4_SetConfig+0x74>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a13      	ldr	r2, [pc, #76]	@ (8003698 <TIM_OC4_SetConfig+0xb4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_OC4_SetConfig+0x74>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a12      	ldr	r2, [pc, #72]	@ (800369c <TIM_OC4_SetConfig+0xb8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d109      	bne.n	800366c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800365e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	019b      	lsls	r3, r3, #6
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40012c00 	.word	0x40012c00
 8003698:	40014000 	.word	0x40014000
 800369c:	40014400 	.word	0x40014400

080036a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80036e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	041b      	lsls	r3, r3, #16
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a13      	ldr	r2, [pc, #76]	@ (8003744 <TIM_OC5_SetConfig+0xa4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d007      	beq.n	800370a <TIM_OC5_SetConfig+0x6a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a12      	ldr	r2, [pc, #72]	@ (8003748 <TIM_OC5_SetConfig+0xa8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d003      	beq.n	800370a <TIM_OC5_SetConfig+0x6a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a11      	ldr	r2, [pc, #68]	@ (800374c <TIM_OC5_SetConfig+0xac>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d109      	bne.n	800371e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003710:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	621a      	str	r2, [r3, #32]
}
 8003738:	bf00      	nop
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40014000 	.word	0x40014000
 800374c:	40014400 	.word	0x40014400

08003750 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800377e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	021b      	lsls	r3, r3, #8
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003796:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	051b      	lsls	r3, r3, #20
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a14      	ldr	r2, [pc, #80]	@ (80037f8 <TIM_OC6_SetConfig+0xa8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d007      	beq.n	80037bc <TIM_OC6_SetConfig+0x6c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a13      	ldr	r2, [pc, #76]	@ (80037fc <TIM_OC6_SetConfig+0xac>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d003      	beq.n	80037bc <TIM_OC6_SetConfig+0x6c>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a12      	ldr	r2, [pc, #72]	@ (8003800 <TIM_OC6_SetConfig+0xb0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d109      	bne.n	80037d0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	029b      	lsls	r3, r3, #10
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	621a      	str	r2, [r3, #32]
}
 80037ea:	bf00      	nop
 80037ec:	371c      	adds	r7, #28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40014000 	.word	0x40014000
 8003800:	40014400 	.word	0x40014400

08003804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f023 0201 	bic.w	r2, r3, #1
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800382e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f023 030a 	bic.w	r3, r3, #10
 8003840:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	621a      	str	r2, [r3, #32]
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003862:	b480      	push	{r7}
 8003864:	b087      	sub	sp, #28
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f023 0210 	bic.w	r2, r3, #16
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800388c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	031b      	lsls	r3, r3, #12
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800389e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	621a      	str	r2, [r3, #32]
}
 80038b6:	bf00      	nop
 80038b8:	371c      	adds	r7, #28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	f043 0307 	orr.w	r3, r3, #7
 80038e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	609a      	str	r2, [r3, #8]
}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003912:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	021a      	lsls	r2, r3, #8
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	431a      	orrs	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4313      	orrs	r3, r2
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	609a      	str	r2, [r3, #8]
}
 800392c:	bf00      	nop
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	2201      	movs	r2, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a1a      	ldr	r2, [r3, #32]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	43db      	mvns	r3, r3
 800395a:	401a      	ands	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a1a      	ldr	r2, [r3, #32]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f003 031f 	and.w	r3, r3, #31
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	431a      	orrs	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	621a      	str	r2, [r3, #32]
}
 8003976:	bf00      	nop
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003998:	2302      	movs	r3, #2
 800399a:	e04f      	b.n	8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a21      	ldr	r2, [pc, #132]	@ (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d108      	bne.n	80039d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80039cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a14      	ldr	r2, [pc, #80]	@ (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d009      	beq.n	8003a10 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a04:	d004      	beq.n	8003a10 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a10      	ldr	r2, [pc, #64]	@ (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d10c      	bne.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	40012c00 	.word	0x40012c00
 8003a4c:	40014000 	.word	0x40014000

08003a50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e060      	b.n	8003b2e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	041b      	lsls	r3, r3, #16
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a14      	ldr	r2, [pc, #80]	@ (8003b3c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d115      	bne.n	8003b1c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	051b      	lsls	r3, r3, #20
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40012c00 	.word	0x40012c00

08003b40 <memset>:
 8003b40:	4402      	add	r2, r0
 8003b42:	4603      	mov	r3, r0
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d100      	bne.n	8003b4a <memset+0xa>
 8003b48:	4770      	bx	lr
 8003b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b4e:	e7f9      	b.n	8003b44 <memset+0x4>

08003b50 <__libc_init_array>:
 8003b50:	b570      	push	{r4, r5, r6, lr}
 8003b52:	4d0d      	ldr	r5, [pc, #52]	@ (8003b88 <__libc_init_array+0x38>)
 8003b54:	4c0d      	ldr	r4, [pc, #52]	@ (8003b8c <__libc_init_array+0x3c>)
 8003b56:	1b64      	subs	r4, r4, r5
 8003b58:	10a4      	asrs	r4, r4, #2
 8003b5a:	2600      	movs	r6, #0
 8003b5c:	42a6      	cmp	r6, r4
 8003b5e:	d109      	bne.n	8003b74 <__libc_init_array+0x24>
 8003b60:	4d0b      	ldr	r5, [pc, #44]	@ (8003b90 <__libc_init_array+0x40>)
 8003b62:	4c0c      	ldr	r4, [pc, #48]	@ (8003b94 <__libc_init_array+0x44>)
 8003b64:	f000 f818 	bl	8003b98 <_init>
 8003b68:	1b64      	subs	r4, r4, r5
 8003b6a:	10a4      	asrs	r4, r4, #2
 8003b6c:	2600      	movs	r6, #0
 8003b6e:	42a6      	cmp	r6, r4
 8003b70:	d105      	bne.n	8003b7e <__libc_init_array+0x2e>
 8003b72:	bd70      	pop	{r4, r5, r6, pc}
 8003b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b78:	4798      	blx	r3
 8003b7a:	3601      	adds	r6, #1
 8003b7c:	e7ee      	b.n	8003b5c <__libc_init_array+0xc>
 8003b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b82:	4798      	blx	r3
 8003b84:	3601      	adds	r6, #1
 8003b86:	e7f2      	b.n	8003b6e <__libc_init_array+0x1e>
 8003b88:	08003bf8 	.word	0x08003bf8
 8003b8c:	08003bf8 	.word	0x08003bf8
 8003b90:	08003bf8 	.word	0x08003bf8
 8003b94:	08003bfc 	.word	0x08003bfc

08003b98 <_init>:
 8003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9a:	bf00      	nop
 8003b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9e:	bc08      	pop	{r3}
 8003ba0:	469e      	mov	lr, r3
 8003ba2:	4770      	bx	lr

08003ba4 <_fini>:
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	bf00      	nop
 8003ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003baa:	bc08      	pop	{r3}
 8003bac:	469e      	mov	lr, r3
 8003bae:	4770      	bx	lr
