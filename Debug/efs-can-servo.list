
efs-can-servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003214  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080033a0  080033a0  000043a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033e0  080033e0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080033e0  080033e0  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033e0  080033e0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033e0  080033e0  000043e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033e4  080033e4  000043e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080033e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  080033f4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080033f4  000050ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b72d  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d2c  00000000  00000000  00010769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00012498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000986  00000000  00000000  00013108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207ea  00000000  00000000  00013a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df5a  00000000  00000000  00034278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7577  00000000  00000000  000421d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109749  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003340  00000000  00000000  0010978c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0010cacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003388 	.word	0x08003388

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003388 	.word	0x08003388

080001cc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80001d0:	4b17      	ldr	r3, [pc, #92]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001d2:	4a18      	ldr	r2, [pc, #96]	@ (8000234 <MX_CAN1_Init+0x68>)
 80001d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 80001d6:	4b16      	ldr	r3, [pc, #88]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001d8:	220c      	movs	r2, #12
 80001da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80001dc:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001de:	2200      	movs	r2, #0
 80001e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80001e2:	4b13      	ldr	r3, [pc, #76]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80001e8:	4b11      	ldr	r3, [pc, #68]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80001ee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80001f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80001f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80001fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000230 <MX_CAN1_Init+0x64>)
 80001fe:	2200      	movs	r2, #0
 8000200:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000202:	4b0b      	ldr	r3, [pc, #44]	@ (8000230 <MX_CAN1_Init+0x64>)
 8000204:	2200      	movs	r2, #0
 8000206:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000208:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <MX_CAN1_Init+0x64>)
 800020a:	2200      	movs	r2, #0
 800020c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800020e:	4b08      	ldr	r3, [pc, #32]	@ (8000230 <MX_CAN1_Init+0x64>)
 8000210:	2200      	movs	r2, #0
 8000212:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000214:	4b06      	ldr	r3, [pc, #24]	@ (8000230 <MX_CAN1_Init+0x64>)
 8000216:	2200      	movs	r2, #0
 8000218:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800021a:	4805      	ldr	r0, [pc, #20]	@ (8000230 <MX_CAN1_Init+0x64>)
 800021c:	f000 fc2c 	bl	8000a78 <HAL_CAN_Init>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000226:	f000 f926 	bl	8000476 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	20000028 	.word	0x20000028
 8000234:	40006400 	.word	0x40006400

08000238 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b08a      	sub	sp, #40	@ 0x28
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
 800024e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a18      	ldr	r2, [pc, #96]	@ (80002b8 <HAL_CAN_MspInit+0x80>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d129      	bne.n	80002ae <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800025a:	4b18      	ldr	r3, [pc, #96]	@ (80002bc <HAL_CAN_MspInit+0x84>)
 800025c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800025e:	4a17      	ldr	r2, [pc, #92]	@ (80002bc <HAL_CAN_MspInit+0x84>)
 8000260:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000264:	6593      	str	r3, [r2, #88]	@ 0x58
 8000266:	4b15      	ldr	r3, [pc, #84]	@ (80002bc <HAL_CAN_MspInit+0x84>)
 8000268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800026a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800026e:	613b      	str	r3, [r7, #16]
 8000270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b12      	ldr	r3, [pc, #72]	@ (80002bc <HAL_CAN_MspInit+0x84>)
 8000274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000276:	4a11      	ldr	r2, [pc, #68]	@ (80002bc <HAL_CAN_MspInit+0x84>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800027e:	4b0f      	ldr	r3, [pc, #60]	@ (80002bc <HAL_CAN_MspInit+0x84>)
 8000280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800028a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800028e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000290:	2302      	movs	r3, #2
 8000292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000294:	2300      	movs	r3, #0
 8000296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000298:	2303      	movs	r3, #3
 800029a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800029c:	2309      	movs	r3, #9
 800029e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a0:	f107 0314 	add.w	r3, r7, #20
 80002a4:	4619      	mov	r1, r3
 80002a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002aa:	f000 ff87 	bl	80011bc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80002ae:	bf00      	nop
 80002b0:	3728      	adds	r7, #40	@ 0x28
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40006400 	.word	0x40006400
 80002bc:	40021000 	.word	0x40021000

080002c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <MX_GPIO_Init+0x44>)
 80002c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000304 <MX_GPIO_Init+0x44>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <MX_GPIO_Init+0x44>)
 80002d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002d6:	f003 0301 	and.w	r3, r3, #1
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <MX_GPIO_Init+0x44>)
 80002e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002e2:	4a08      	ldr	r2, [pc, #32]	@ (8000304 <MX_GPIO_Init+0x44>)
 80002e4:	f043 0302 	orr.w	r3, r3, #2
 80002e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002ea:	4b06      	ldr	r3, [pc, #24]	@ (8000304 <MX_GPIO_Init+0x44>)
 80002ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ee:	f003 0302 	and.w	r3, r3, #2
 80002f2:	603b      	str	r3, [r7, #0]
 80002f4:	683b      	ldr	r3, [r7, #0]

}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000

08000308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b094      	sub	sp, #80	@ 0x50
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030e:	f000 fb1a 	bl	8000946 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000312:	f000 f861 	bl	80003d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000316:	f7ff ffd3 	bl	80002c0 <MX_GPIO_Init>
  MX_CAN1_Init();
 800031a:	f7ff ff57 	bl	80001cc <MX_CAN1_Init>
  MX_TIM1_Init();
 800031e:	f000 f917 	bl	8000550 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000322:	f000 f9e3 	bl	80006ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000326:	2301      	movs	r3, #1
 8000328:	64bb      	str	r3, [r7, #72]	@ 0x48
	canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 800032a:	2312      	movs	r3, #18
 800032c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800032e:	2300      	movs	r3, #0
 8000330:	63bb      	str	r3, [r7, #56]	@ 0x38
	canfilterconfig.FilterIdHigh = 0x446<<5;
 8000332:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 8000336:	62bb      	str	r3, [r7, #40]	@ 0x28
	canfilterconfig.FilterIdLow = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	canfilterconfig.FilterMaskIdHigh = 0x446<<5;
 800033c:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 8000340:	633b      	str	r3, [r7, #48]	@ 0x30
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000342:	2300      	movs	r3, #0
 8000344:	637b      	str	r3, [r7, #52]	@ 0x34
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000346:	2300      	movs	r3, #0
 8000348:	643b      	str	r3, [r7, #64]	@ 0x40
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800034a:	2301      	movs	r3, #1
 800034c:	647b      	str	r3, [r7, #68]	@ 0x44
	canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 800034e:	2314      	movs	r3, #20
 8000350:	64fb      	str	r3, [r7, #76]	@ 0x4c

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000352:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000356:	4619      	mov	r1, r3
 8000358:	481d      	ldr	r0, [pc, #116]	@ (80003d0 <main+0xc8>)
 800035a:	f000 fc88 	bl	8000c6e <HAL_CAN_ConfigFilter>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800035e:	2100      	movs	r1, #0
 8000360:	481c      	ldr	r0, [pc, #112]	@ (80003d4 <main+0xcc>)
 8000362:	f002 f823 	bl	80023ac <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 64000*0.05);
 8000366:	4b1b      	ldr	r3, [pc, #108]	@ (80003d4 <main+0xcc>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800036e:	635a      	str	r2, [r3, #52]	@ 0x34

  CAN_TxHeaderTypeDef   TxHeader;
  uint8_t               TxData[8];
  uint32_t              TxMailbox;
  TxHeader.IDE = CAN_ID_STD;
 8000370:	2300      	movs	r3, #0
 8000372:	61bb      	str	r3, [r7, #24]
  TxHeader.StdId = 0x446;
 8000374:	f240 4346 	movw	r3, #1094	@ 0x446
 8000378:	613b      	str	r3, [r7, #16]
  TxHeader.RTR = CAN_RTR_DATA;
 800037a:	2300      	movs	r3, #0
 800037c:	61fb      	str	r3, [r7, #28]
  TxHeader.DLC = 2;
 800037e:	2302      	movs	r3, #2
 8000380:	623b      	str	r3, [r7, #32]

  TxData[0] = 50;
 8000382:	2332      	movs	r3, #50	@ 0x32
 8000384:	723b      	strb	r3, [r7, #8]
  TxData[1] = 0xAA;
 8000386:	23aa      	movs	r3, #170	@ 0xaa
 8000388:	727b      	strb	r3, [r7, #9]

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800038a:	2102      	movs	r1, #2
 800038c:	4810      	ldr	r0, [pc, #64]	@ (80003d0 <main+0xc8>)
 800038e:	f000 fe08 	bl	8000fa2 <HAL_CAN_ActivateNotification>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <main+0x94>
	{
	  Error_Handler();
 8000398:	f000 f86d 	bl	8000476 <Error_Handler>
	}
  hcan1.Instance->MCR &= ~(0x01<<4);
 800039c:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <main+0xc8>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4b0b      	ldr	r3, [pc, #44]	@ (80003d0 <main+0xc8>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f022 0210 	bic.w	r2, r2, #16
 80003aa:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	f107 0208 	add.w	r2, r7, #8
 80003b2:	f107 0110 	add.w	r1, r7, #16
 80003b6:	4806      	ldr	r0, [pc, #24]	@ (80003d0 <main+0xc8>)
 80003b8:	f000 fd23 	bl	8000e02 <HAL_CAN_AddTxMessage>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <main+0xbe>
	  {
	     Error_Handler ();
 80003c2:	f000 f858 	bl	8000476 <Error_Handler>
	  }

	  HAL_Delay(100);
 80003c6:	2064      	movs	r0, #100	@ 0x64
 80003c8:	f000 fb32 	bl	8000a30 <HAL_Delay>
	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80003cc:	e7ee      	b.n	80003ac <main+0xa4>
 80003ce:	bf00      	nop
 80003d0:	20000028 	.word	0x20000028
 80003d4:	20000050 	.word	0x20000050

080003d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b096      	sub	sp, #88	@ 0x58
 80003dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003de:	f107 0314 	add.w	r3, r7, #20
 80003e2:	2244      	movs	r2, #68	@ 0x44
 80003e4:	2100      	movs	r1, #0
 80003e6:	4618      	mov	r0, r3
 80003e8:	f002 ffa2 	bl	8003330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ec:	463b      	mov	r3, r7
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
 80003f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80003fe:	f001 f865 	bl	80014cc <HAL_PWREx_ControlVoltageScaling>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000408:	f000 f835 	bl	8000476 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800040c:	2301      	movs	r3, #1
 800040e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000410:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000414:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000416:	2302      	movs	r3, #2
 8000418:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041a:	2303      	movs	r3, #3
 800041c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800041e:	2301      	movs	r3, #1
 8000420:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000422:	230c      	movs	r3, #12
 8000424:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000426:	2307      	movs	r3, #7
 8000428:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800042a:	2302      	movs	r3, #2
 800042c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800042e:	2302      	movs	r3, #2
 8000430:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	4618      	mov	r0, r3
 8000438:	f001 f89e 	bl	8001578 <HAL_RCC_OscConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000442:	f000 f818 	bl	8000476 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000446:	230f      	movs	r3, #15
 8000448:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044a:	2303      	movs	r3, #3
 800044c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800045a:	463b      	mov	r3, r7
 800045c:	2102      	movs	r1, #2
 800045e:	4618      	mov	r0, r3
 8000460:	f001 fc9e 	bl	8001da0 <HAL_RCC_ClockConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800046a:	f000 f804 	bl	8000476 <Error_Handler>
  }
}
 800046e:	bf00      	nop
 8000470:	3758      	adds	r7, #88	@ 0x58
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}

08000476 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047a:	b672      	cpsid	i
}
 800047c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047e:	bf00      	nop
 8000480:	e7fd      	b.n	800047e <Error_Handler+0x8>
	...

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <HAL_MspInit+0x44>)
 800048c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800048e:	4a0e      	ldr	r2, [pc, #56]	@ (80004c8 <HAL_MspInit+0x44>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6613      	str	r3, [r2, #96]	@ 0x60
 8000496:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <HAL_MspInit+0x44>)
 8000498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <HAL_MspInit+0x44>)
 80004a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004a6:	4a08      	ldr	r2, [pc, #32]	@ (80004c8 <HAL_MspInit+0x44>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80004ae:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <HAL_MspInit+0x44>)
 80004b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <NMI_Handler+0x4>

080004d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <HardFault_Handler+0x4>

080004dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <MemManage_Handler+0x4>

080004e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <BusFault_Handler+0x4>

080004ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <UsageFault_Handler+0x4>

080004f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000522:	f000 fa65 	bl	80009f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000530:	4b06      	ldr	r3, [pc, #24]	@ (800054c <SystemInit+0x20>)
 8000532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000536:	4a05      	ldr	r2, [pc, #20]	@ (800054c <SystemInit+0x20>)
 8000538:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800053c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b09a      	sub	sp, #104	@ 0x68
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000556:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000564:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000570:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
 8000580:	615a      	str	r2, [r3, #20]
 8000582:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	222c      	movs	r2, #44	@ 0x2c
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f002 fed0 	bl	8003330 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000590:	4b54      	ldr	r3, [pc, #336]	@ (80006e4 <MX_TIM1_Init+0x194>)
 8000592:	4a55      	ldr	r2, [pc, #340]	@ (80006e8 <MX_TIM1_Init+0x198>)
 8000594:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 8000596:	4b53      	ldr	r3, [pc, #332]	@ (80006e4 <MX_TIM1_Init+0x194>)
 8000598:	220e      	movs	r2, #14
 800059a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059c:	4b51      	ldr	r3, [pc, #324]	@ (80006e4 <MX_TIM1_Init+0x194>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000;
 80005a2:	4b50      	ldr	r3, [pc, #320]	@ (80006e4 <MX_TIM1_Init+0x194>)
 80005a4:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 80005a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005aa:	4b4e      	ldr	r3, [pc, #312]	@ (80006e4 <MX_TIM1_Init+0x194>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005b0:	4b4c      	ldr	r3, [pc, #304]	@ (80006e4 <MX_TIM1_Init+0x194>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b6:	4b4b      	ldr	r3, [pc, #300]	@ (80006e4 <MX_TIM1_Init+0x194>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005bc:	4849      	ldr	r0, [pc, #292]	@ (80006e4 <MX_TIM1_Init+0x194>)
 80005be:	f001 fddb 	bl	8002178 <HAL_TIM_Base_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80005c8:	f7ff ff55 	bl	8000476 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80005d6:	4619      	mov	r1, r3
 80005d8:	4842      	ldr	r0, [pc, #264]	@ (80006e4 <MX_TIM1_Init+0x194>)
 80005da:	f002 f953 	bl	8002884 <HAL_TIM_ConfigClockSource>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80005e4:	f7ff ff47 	bl	8000476 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005e8:	483e      	ldr	r0, [pc, #248]	@ (80006e4 <MX_TIM1_Init+0x194>)
 80005ea:	f001 fe7d 	bl	80022e8 <HAL_TIM_PWM_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80005f4:	f7ff ff3f 	bl	8000476 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80005f8:	483a      	ldr	r0, [pc, #232]	@ (80006e4 <MX_TIM1_Init+0x194>)
 80005fa:	f001 fe14 	bl	8002226 <HAL_TIM_OC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000604:	f7ff ff37 	bl	8000476 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000608:	2300      	movs	r3, #0
 800060a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800060c:	2300      	movs	r3, #0
 800060e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000614:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000618:	4619      	mov	r1, r3
 800061a:	4832      	ldr	r0, [pc, #200]	@ (80006e4 <MX_TIM1_Init+0x194>)
 800061c:	f002 fdaa 	bl	8003174 <HAL_TIMEx_MasterConfigSynchronization>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000626:	f7ff ff26 	bl	8000476 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800062a:	2360      	movs	r3, #96	@ 0x60
 800062c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000632:	2300      	movs	r3, #0
 8000634:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000636:	2300      	movs	r3, #0
 8000638:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800063a:	2300      	movs	r3, #0
 800063c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800063e:	2300      	movs	r3, #0
 8000640:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000642:	2300      	movs	r3, #0
 8000644:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000646:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800064a:	2200      	movs	r2, #0
 800064c:	4619      	mov	r1, r3
 800064e:	4825      	ldr	r0, [pc, #148]	@ (80006e4 <MX_TIM1_Init+0x194>)
 8000650:	f002 f804 	bl	800265c <HAL_TIM_PWM_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800065a:	f7ff ff0c 	bl	8000476 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800065e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000662:	2204      	movs	r2, #4
 8000664:	4619      	mov	r1, r3
 8000666:	481f      	ldr	r0, [pc, #124]	@ (80006e4 <MX_TIM1_Init+0x194>)
 8000668:	f001 fff8 	bl	800265c <HAL_TIM_PWM_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000672:	f7ff ff00 	bl	8000476 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000676:	2300      	movs	r3, #0
 8000678:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800067a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800067e:	2208      	movs	r2, #8
 8000680:	4619      	mov	r1, r3
 8000682:	4818      	ldr	r0, [pc, #96]	@ (80006e4 <MX_TIM1_Init+0x194>)
 8000684:	f001 ff70 	bl	8002568 <HAL_TIM_OC_ConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800068e:	f7ff fef2 	bl	8000476 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80006b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <MX_TIM1_Init+0x194>)
 80006c8:	f002 fdba 	bl	8003240 <HAL_TIMEx_ConfigBreakDeadTime>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 80006d2:	f7ff fed0 	bl	8000476 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006d6:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <MX_TIM1_Init+0x194>)
 80006d8:	f000 f8b0 	bl	800083c <HAL_TIM_MspPostInit>

}
 80006dc:	bf00      	nop
 80006de:	3768      	adds	r7, #104	@ 0x68
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000050 	.word	0x20000050
 80006e8:	40012c00 	.word	0x40012c00

080006ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08e      	sub	sp, #56	@ 0x38
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070c:	463b      	mov	r3, r7
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	615a      	str	r2, [r3, #20]
 800071c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800071e:	4b2d      	ldr	r3, [pc, #180]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 8000720:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000724:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 8000726:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 8000728:	220e      	movs	r2, #14
 800072a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072c:	4b29      	ldr	r3, [pc, #164]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000;
 8000732:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 8000734:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 8000738:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073a:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000740:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000746:	4823      	ldr	r0, [pc, #140]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 8000748:	f001 fd16 	bl	8002178 <HAL_TIM_Base_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000752:	f7ff fe90 	bl	8000476 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800075c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000760:	4619      	mov	r1, r3
 8000762:	481c      	ldr	r0, [pc, #112]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 8000764:	f002 f88e 	bl	8002884 <HAL_TIM_ConfigClockSource>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800076e:	f7ff fe82 	bl	8000476 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000772:	4818      	ldr	r0, [pc, #96]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 8000774:	f001 fdb8 	bl	80022e8 <HAL_TIM_PWM_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800077e:	f7ff fe7a 	bl	8000476 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4810      	ldr	r0, [pc, #64]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 8000792:	f002 fcef 	bl	8003174 <HAL_TIMEx_MasterConfigSynchronization>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800079c:	f7ff fe6b 	bl	8000476 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a0:	2360      	movs	r3, #96	@ 0x60
 80007a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	2200      	movs	r2, #0
 80007b4:	4619      	mov	r1, r3
 80007b6:	4807      	ldr	r0, [pc, #28]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 80007b8:	f001 ff50 	bl	800265c <HAL_TIM_PWM_ConfigChannel>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80007c2:	f7ff fe58 	bl	8000476 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007c6:	4803      	ldr	r0, [pc, #12]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 80007c8:	f000 f838 	bl	800083c <HAL_TIM_MspPostInit>

}
 80007cc:	bf00      	nop
 80007ce:	3738      	adds	r7, #56	@ 0x38
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000009c 	.word	0x2000009c

080007d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <HAL_TIM_Base_MspInit+0x5c>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d10c      	bne.n	8000804 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <HAL_TIM_Base_MspInit+0x60>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ee:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <HAL_TIM_Base_MspInit+0x60>)
 80007f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80007f6:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <HAL_TIM_Base_MspInit+0x60>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000802:	e010      	b.n	8000826 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800080c:	d10b      	bne.n	8000826 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <HAL_TIM_Base_MspInit+0x60>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000812:	4a09      	ldr	r2, [pc, #36]	@ (8000838 <HAL_TIM_Base_MspInit+0x60>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6593      	str	r3, [r2, #88]	@ 0x58
 800081a:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <HAL_TIM_Base_MspInit+0x60>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40012c00 	.word	0x40012c00
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	@ 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a24      	ldr	r2, [pc, #144]	@ (80008ec <HAL_TIM_MspPostInit+0xb0>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d11e      	bne.n	800089c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <HAL_TIM_MspPostInit+0xb4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	4a23      	ldr	r2, [pc, #140]	@ (80008f0 <HAL_TIM_MspPostInit+0xb4>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086a:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <HAL_TIM_MspPostInit+0xb4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000876:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800087a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000888:	2301      	movs	r3, #1
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000896:	f000 fc91 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800089a:	e022      	b.n	80008e2 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008a4:	d11d      	bne.n	80008e2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <HAL_TIM_MspPostInit+0xb4>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	4a11      	ldr	r2, [pc, #68]	@ (80008f0 <HAL_TIM_MspPostInit+0xb4>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <HAL_TIM_MspPostInit+0xb4>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008d0:	2301      	movs	r3, #1
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008de:	f000 fc6d 	bl	80011bc <HAL_GPIO_Init>
}
 80008e2:	bf00      	nop
 80008e4:	3728      	adds	r7, #40	@ 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40012c00 	.word	0x40012c00
 80008f0:	40021000 	.word	0x40021000

080008f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800092c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f8:	f7ff fe18 	bl	800052c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480c      	ldr	r0, [pc, #48]	@ (8000930 <LoopForever+0x6>)
  ldr r1, =_edata
 80008fe:	490d      	ldr	r1, [pc, #52]	@ (8000934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000900:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <LoopForever+0xe>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000914:	4c0a      	ldr	r4, [pc, #40]	@ (8000940 <LoopForever+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000922:	f002 fd0d 	bl	8003340 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000926:	f7ff fcef 	bl	8000308 <main>

0800092a <LoopForever>:

LoopForever:
    b LoopForever
 800092a:	e7fe      	b.n	800092a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800092c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000938:	080033e8 	.word	0x080033e8
  ldr r2, =_sbss
 800093c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000940:	200000ec 	.word	0x200000ec

08000944 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_IRQHandler>

08000946 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 fbff 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000956:	200f      	movs	r0, #15
 8000958:	f000 f80e 	bl	8000978 <HAL_InitTick>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d002      	beq.n	8000968 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	e001      	b.n	800096c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000968:	f7ff fd8c 	bl	8000484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800096c:	79fb      	ldrb	r3, [r7, #7]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000984:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <HAL_InitTick+0x6c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d023      	beq.n	80009d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800098c:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <HAL_InitTick+0x70>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <HAL_InitTick+0x6c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099a:	fbb3 f3f1 	udiv	r3, r3, r1
 800099e:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 fbfd 	bl	80011a2 <HAL_SYSTICK_Config>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d10f      	bne.n	80009ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b0f      	cmp	r3, #15
 80009b2:	d809      	bhi.n	80009c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b4:	2200      	movs	r2, #0
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	f000 fbd5 	bl	800116a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c0:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <HAL_InitTick+0x74>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6013      	str	r3, [r2, #0]
 80009c6:	e007      	b.n	80009d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	73fb      	strb	r3, [r7, #15]
 80009cc:	e004      	b.n	80009d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	e001      	b.n	80009d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000004 	.word	0x20000004

080009f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <HAL_IncTick+0x20>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_IncTick+0x24>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <HAL_IncTick+0x24>)
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008
 8000a14:	200000e8 	.word	0x200000e8

08000a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	@ (8000a2c <HAL_GetTick+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200000e8 	.word	0x200000e8

08000a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a38:	f7ff ffee 	bl	8000a18 <HAL_GetTick>
 8000a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a48:	d005      	beq.n	8000a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <HAL_Delay+0x44>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4413      	add	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a56:	bf00      	nop
 8000a58:	f7ff ffde 	bl	8000a18 <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d8f7      	bhi.n	8000a58 <HAL_Delay+0x28>
  {
  }
}
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008

08000a78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d101      	bne.n	8000a8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e0ed      	b.n	8000c66 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d102      	bne.n	8000a9c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff fbce 	bl	8000238 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f042 0201 	orr.w	r2, r2, #1
 8000aaa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000aac:	f7ff ffb4 	bl	8000a18 <HAL_GetTick>
 8000ab0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ab2:	e012      	b.n	8000ada <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ab4:	f7ff ffb0 	bl	8000a18 <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	2b0a      	cmp	r3, #10
 8000ac0:	d90b      	bls.n	8000ada <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ac6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2205      	movs	r2, #5
 8000ad2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e0c5      	b.n	8000c66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0e5      	beq.n	8000ab4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f022 0202 	bic.w	r2, r2, #2
 8000af6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000af8:	f7ff ff8e 	bl	8000a18 <HAL_GetTick>
 8000afc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000afe:	e012      	b.n	8000b26 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b00:	f7ff ff8a 	bl	8000a18 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	2b0a      	cmp	r3, #10
 8000b0c:	d90b      	bls.n	8000b26 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b12:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2205      	movs	r2, #5
 8000b1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e09f      	b.n	8000c66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1e5      	bne.n	8000b00 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	7e1b      	ldrb	r3, [r3, #24]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d108      	bne.n	8000b4e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	e007      	b.n	8000b5e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	7e5b      	ldrb	r3, [r3, #25]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d108      	bne.n	8000b78 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	e007      	b.n	8000b88 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b86:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	7e9b      	ldrb	r3, [r3, #26]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d108      	bne.n	8000ba2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f042 0220 	orr.w	r2, r2, #32
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	e007      	b.n	8000bb2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f022 0220 	bic.w	r2, r2, #32
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	7edb      	ldrb	r3, [r3, #27]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d108      	bne.n	8000bcc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 0210 	bic.w	r2, r2, #16
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	e007      	b.n	8000bdc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f042 0210 	orr.w	r2, r2, #16
 8000bda:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7f1b      	ldrb	r3, [r3, #28]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d108      	bne.n	8000bf6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f042 0208 	orr.w	r2, r2, #8
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	e007      	b.n	8000c06 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 0208 	bic.w	r2, r2, #8
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7f5b      	ldrb	r3, [r3, #29]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d108      	bne.n	8000c20 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f042 0204 	orr.w	r2, r2, #4
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	e007      	b.n	8000c30 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f022 0204 	bic.w	r2, r2, #4
 8000c2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	ea42 0103 	orr.w	r1, r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	1e5a      	subs	r2, r3, #1
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	430a      	orrs	r2, r1
 8000c54:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b087      	sub	sp, #28
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c84:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c86:	7cfb      	ldrb	r3, [r7, #19]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d003      	beq.n	8000c94 <HAL_CAN_ConfigFilter+0x26>
 8000c8c:	7cfb      	ldrb	r3, [r7, #19]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	f040 80aa 	bne.w	8000de8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c9a:	f043 0201 	orr.w	r2, r3, #1
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	f003 031f 	and.w	r3, r3, #31
 8000cac:	2201      	movs	r2, #1
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d123      	bne.n	8000d16 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	401a      	ands	r2, r3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cf0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3248      	adds	r2, #72	@ 0x48
 8000cf6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d0a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d0c:	6979      	ldr	r1, [r7, #20]
 8000d0e:	3348      	adds	r3, #72	@ 0x48
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	440b      	add	r3, r1
 8000d14:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d122      	bne.n	8000d64 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	431a      	orrs	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d3a:	683a      	ldr	r2, [r7, #0]
 8000d3c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d3e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	3248      	adds	r2, #72	@ 0x48
 8000d44:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d58:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d5a:	6979      	ldr	r1, [r7, #20]
 8000d5c:	3348      	adds	r3, #72	@ 0x48
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	440b      	add	r3, r1
 8000d62:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d109      	bne.n	8000d80 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000d7e:	e007      	b.n	8000d90 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d109      	bne.n	8000dac <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000daa:	e007      	b.n	8000dbc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	431a      	orrs	r2, r3
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	6a1b      	ldr	r3, [r3, #32]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d107      	bne.n	8000dd4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000dda:	f023 0201 	bic.w	r2, r3, #1
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000de4:	2300      	movs	r3, #0
 8000de6:	e006      	b.n	8000df6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
  }
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	371c      	adds	r7, #28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b089      	sub	sp, #36	@ 0x24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e16:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e20:	7ffb      	ldrb	r3, [r7, #31]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d003      	beq.n	8000e2e <HAL_CAN_AddTxMessage+0x2c>
 8000e26:	7ffb      	ldrb	r3, [r7, #31]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	f040 80ad 	bne.w	8000f88 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d10a      	bne.n	8000e4e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d105      	bne.n	8000e4e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 8095 	beq.w	8000f78 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	0e1b      	lsrs	r3, r3, #24
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10d      	bne.n	8000e86 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e74:	68f9      	ldr	r1, [r7, #12]
 8000e76:	6809      	ldr	r1, [r1, #0]
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3318      	adds	r3, #24
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	440b      	add	r3, r1
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	e00f      	b.n	8000ea6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e90:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e96:	68f9      	ldr	r1, [r7, #12]
 8000e98:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e9a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	3318      	adds	r3, #24
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	440b      	add	r3, r1
 8000ea4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6819      	ldr	r1, [r3, #0]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	691a      	ldr	r2, [r3, #16]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3318      	adds	r3, #24
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	440b      	add	r3, r1
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	7d1b      	ldrb	r3, [r3, #20]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d111      	bne.n	8000ee6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3318      	adds	r3, #24
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4413      	add	r3, r2
 8000ece:	3304      	adds	r3, #4
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	6811      	ldr	r1, [r2, #0]
 8000ed6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	3318      	adds	r3, #24
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	440b      	add	r3, r1
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3307      	adds	r3, #7
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	061a      	lsls	r2, r3, #24
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3306      	adds	r3, #6
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	041b      	lsls	r3, r3, #16
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3305      	adds	r3, #5
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	4313      	orrs	r3, r2
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	3204      	adds	r2, #4
 8000f06:	7812      	ldrb	r2, [r2, #0]
 8000f08:	4610      	mov	r0, r2
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	6811      	ldr	r1, [r2, #0]
 8000f0e:	ea43 0200 	orr.w	r2, r3, r0
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	440b      	add	r3, r1
 8000f18:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000f1c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3303      	adds	r3, #3
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	061a      	lsls	r2, r3, #24
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3302      	adds	r3, #2
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	041b      	lsls	r3, r3, #16
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3301      	adds	r3, #1
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	7812      	ldrb	r2, [r2, #0]
 8000f3e:	4610      	mov	r0, r2
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	6811      	ldr	r1, [r2, #0]
 8000f44:	ea43 0200 	orr.w	r2, r3, r0
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	440b      	add	r3, r1
 8000f4e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000f52:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3318      	adds	r3, #24
 8000f5c:	011b      	lsls	r3, r3, #4
 8000f5e:	4413      	add	r3, r2
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	6811      	ldr	r1, [r2, #0]
 8000f66:	f043 0201 	orr.w	r2, r3, #1
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3318      	adds	r3, #24
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	440b      	add	r3, r1
 8000f72:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e00e      	b.n	8000f96 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e006      	b.n	8000f96 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f8c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
  }
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	@ 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b085      	sub	sp, #20
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d002      	beq.n	8000fc0 <HAL_CAN_ActivateNotification+0x1e>
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d109      	bne.n	8000fd4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6959      	ldr	r1, [r3, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e006      	b.n	8000fe2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
  }
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	@ (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	@ (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	@ (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	@ 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	@ 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff8e 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff47 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff5c 	bl	8001038 <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff8e 	bl	80010a8 <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffb0 	bl	8001110 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b480      	push	{r7}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ca:	e154      	b.n	8001476 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	2101      	movs	r1, #1
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	4013      	ands	r3, r2
 80011da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 8146 	beq.w	8001470 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d005      	beq.n	80011fc <HAL_GPIO_Init+0x40>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d130      	bne.n	800125e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001232:	2201      	movs	r2, #1
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	f003 0201 	and.w	r2, r3, #1
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b03      	cmp	r3, #3
 8001268:	d017      	beq.n	800129a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d123      	bne.n	80012ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	691a      	ldr	r2, [r3, #16]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	6939      	ldr	r1, [r7, #16]
 80012ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2203      	movs	r2, #3
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0203 	and.w	r2, r3, #3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 80a0 	beq.w	8001470 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001330:	4b58      	ldr	r3, [pc, #352]	@ (8001494 <HAL_GPIO_Init+0x2d8>)
 8001332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001334:	4a57      	ldr	r2, [pc, #348]	@ (8001494 <HAL_GPIO_Init+0x2d8>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6613      	str	r3, [r2, #96]	@ 0x60
 800133c:	4b55      	ldr	r3, [pc, #340]	@ (8001494 <HAL_GPIO_Init+0x2d8>)
 800133e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001348:	4a53      	ldr	r2, [pc, #332]	@ (8001498 <HAL_GPIO_Init+0x2dc>)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001372:	d019      	beq.n	80013a8 <HAL_GPIO_Init+0x1ec>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a49      	ldr	r2, [pc, #292]	@ (800149c <HAL_GPIO_Init+0x2e0>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d013      	beq.n	80013a4 <HAL_GPIO_Init+0x1e8>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a48      	ldr	r2, [pc, #288]	@ (80014a0 <HAL_GPIO_Init+0x2e4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d00d      	beq.n	80013a0 <HAL_GPIO_Init+0x1e4>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a47      	ldr	r2, [pc, #284]	@ (80014a4 <HAL_GPIO_Init+0x2e8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d007      	beq.n	800139c <HAL_GPIO_Init+0x1e0>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a46      	ldr	r2, [pc, #280]	@ (80014a8 <HAL_GPIO_Init+0x2ec>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d101      	bne.n	8001398 <HAL_GPIO_Init+0x1dc>
 8001394:	2304      	movs	r3, #4
 8001396:	e008      	b.n	80013aa <HAL_GPIO_Init+0x1ee>
 8001398:	2307      	movs	r3, #7
 800139a:	e006      	b.n	80013aa <HAL_GPIO_Init+0x1ee>
 800139c:	2303      	movs	r3, #3
 800139e:	e004      	b.n	80013aa <HAL_GPIO_Init+0x1ee>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e002      	b.n	80013aa <HAL_GPIO_Init+0x1ee>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <HAL_GPIO_Init+0x1ee>
 80013a8:	2300      	movs	r3, #0
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	f002 0203 	and.w	r2, r2, #3
 80013b0:	0092      	lsls	r2, r2, #2
 80013b2:	4093      	lsls	r3, r2
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ba:	4937      	ldr	r1, [pc, #220]	@ (8001498 <HAL_GPIO_Init+0x2dc>)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3302      	adds	r3, #2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013c8:	4b38      	ldr	r3, [pc, #224]	@ (80014ac <HAL_GPIO_Init+0x2f0>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ec:	4a2f      	ldr	r2, [pc, #188]	@ (80014ac <HAL_GPIO_Init+0x2f0>)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013f2:	4b2e      	ldr	r3, [pc, #184]	@ (80014ac <HAL_GPIO_Init+0x2f0>)
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001416:	4a25      	ldr	r2, [pc, #148]	@ (80014ac <HAL_GPIO_Init+0x2f0>)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800141c:	4b23      	ldr	r3, [pc, #140]	@ (80014ac <HAL_GPIO_Init+0x2f0>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001440:	4a1a      	ldr	r2, [pc, #104]	@ (80014ac <HAL_GPIO_Init+0x2f0>)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001446:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <HAL_GPIO_Init+0x2f0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800146a:	4a10      	ldr	r2, [pc, #64]	@ (80014ac <HAL_GPIO_Init+0x2f0>)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3301      	adds	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	fa22 f303 	lsr.w	r3, r2, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	f47f aea3 	bne.w	80011cc <HAL_GPIO_Init+0x10>
  }
}
 8001486:	bf00      	nop
 8001488:	bf00      	nop
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40021000 	.word	0x40021000
 8001498:	40010000 	.word	0x40010000
 800149c:	48000400 	.word	0x48000400
 80014a0:	48000800 	.word	0x48000800
 80014a4:	48000c00 	.word	0x48000c00
 80014a8:	48001000 	.word	0x48001000
 80014ac:	40010400 	.word	0x40010400

080014b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40007000 	.word	0x40007000

080014cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014da:	d130      	bne.n	800153e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014dc:	4b23      	ldr	r3, [pc, #140]	@ (800156c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014e8:	d038      	beq.n	800155c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ea:	4b20      	ldr	r3, [pc, #128]	@ (800156c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014f2:	4a1e      	ldr	r2, [pc, #120]	@ (800156c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2232      	movs	r2, #50	@ 0x32
 8001500:	fb02 f303 	mul.w	r3, r2, r3
 8001504:	4a1b      	ldr	r2, [pc, #108]	@ (8001574 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	0c9b      	lsrs	r3, r3, #18
 800150c:	3301      	adds	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001510:	e002      	b.n	8001518 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	3b01      	subs	r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001524:	d102      	bne.n	800152c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f2      	bne.n	8001512 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001538:	d110      	bne.n	800155c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e00f      	b.n	800155e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800154a:	d007      	beq.n	800155c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001554:	4a05      	ldr	r2, [pc, #20]	@ (800156c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001556:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800155a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40007000 	.word	0x40007000
 8001570:	20000000 	.word	0x20000000
 8001574:	431bde83 	.word	0x431bde83

08001578 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	f000 bc02 	b.w	8001d90 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800158c:	4b96      	ldr	r3, [pc, #600]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001596:	4b94      	ldr	r3, [pc, #592]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 80e4 	beq.w	8001776 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d007      	beq.n	80015c4 <HAL_RCC_OscConfig+0x4c>
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2b0c      	cmp	r3, #12
 80015b8:	f040 808b 	bne.w	80016d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	f040 8087 	bne.w	80016d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015c4:	4b88      	ldr	r3, [pc, #544]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_OscConfig+0x64>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e3d9      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1a      	ldr	r2, [r3, #32]
 80015e0:	4b81      	ldr	r3, [pc, #516]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d004      	beq.n	80015f6 <HAL_RCC_OscConfig+0x7e>
 80015ec:	4b7e      	ldr	r3, [pc, #504]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015f4:	e005      	b.n	8001602 <HAL_RCC_OscConfig+0x8a>
 80015f6:	4b7c      	ldr	r3, [pc, #496]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 80015f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015fc:	091b      	lsrs	r3, r3, #4
 80015fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001602:	4293      	cmp	r3, r2
 8001604:	d223      	bcs.n	800164e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fd54 	bl	80020b8 <RCC_SetFlashLatencyFromMSIRange>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e3ba      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800161a:	4b73      	ldr	r3, [pc, #460]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a72      	ldr	r2, [pc, #456]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b70      	ldr	r3, [pc, #448]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	496d      	ldr	r1, [pc, #436]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 8001634:	4313      	orrs	r3, r2
 8001636:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001638:	4b6b      	ldr	r3, [pc, #428]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	4968      	ldr	r1, [pc, #416]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
 800164c:	e025      	b.n	800169a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800164e:	4b66      	ldr	r3, [pc, #408]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a65      	ldr	r2, [pc, #404]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 8001654:	f043 0308 	orr.w	r3, r3, #8
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b63      	ldr	r3, [pc, #396]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4960      	ldr	r1, [pc, #384]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 8001668:	4313      	orrs	r3, r2
 800166a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800166c:	4b5e      	ldr	r3, [pc, #376]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	495b      	ldr	r1, [pc, #364]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fd14 	bl	80020b8 <RCC_SetFlashLatencyFromMSIRange>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e37a      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800169a:	f000 fc81 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 800169e:	4602      	mov	r2, r0
 80016a0:	4b51      	ldr	r3, [pc, #324]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	4950      	ldr	r1, [pc, #320]	@ (80017ec <HAL_RCC_OscConfig+0x274>)
 80016ac:	5ccb      	ldrb	r3, [r1, r3]
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	fa22 f303 	lsr.w	r3, r2, r3
 80016b6:	4a4e      	ldr	r2, [pc, #312]	@ (80017f0 <HAL_RCC_OscConfig+0x278>)
 80016b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016ba:	4b4e      	ldr	r3, [pc, #312]	@ (80017f4 <HAL_RCC_OscConfig+0x27c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff f95a 	bl	8000978 <HAL_InitTick>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d052      	beq.n	8001774 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	e35e      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d032      	beq.n	8001740 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016da:	4b43      	ldr	r3, [pc, #268]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a42      	ldr	r2, [pc, #264]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016e6:	f7ff f997 	bl	8000a18 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ee:	f7ff f993 	bl	8000a18 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e347      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001700:	4b39      	ldr	r3, [pc, #228]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800170c:	4b36      	ldr	r3, [pc, #216]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a35      	ldr	r2, [pc, #212]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b33      	ldr	r3, [pc, #204]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4930      	ldr	r1, [pc, #192]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800172a:	4b2f      	ldr	r3, [pc, #188]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	492b      	ldr	r1, [pc, #172]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
 800173e:	e01a      	b.n	8001776 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001740:	4b29      	ldr	r3, [pc, #164]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a28      	ldr	r2, [pc, #160]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800174c:	f7ff f964 	bl	8000a18 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001754:	f7ff f960 	bl	8000a18 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e314      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001766:	4b20      	ldr	r3, [pc, #128]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x1dc>
 8001772:	e000      	b.n	8001776 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001774:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d073      	beq.n	800186a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b08      	cmp	r3, #8
 8001786:	d005      	beq.n	8001794 <HAL_RCC_OscConfig+0x21c>
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2b0c      	cmp	r3, #12
 800178c:	d10e      	bne.n	80017ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d10b      	bne.n	80017ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d063      	beq.n	8001868 <HAL_RCC_OscConfig+0x2f0>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d15f      	bne.n	8001868 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e2f1      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b4:	d106      	bne.n	80017c4 <HAL_RCC_OscConfig+0x24c>
 80017b6:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a0b      	ldr	r2, [pc, #44]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 80017bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e025      	b.n	8001810 <HAL_RCC_OscConfig+0x298>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017cc:	d114      	bne.n	80017f8 <HAL_RCC_OscConfig+0x280>
 80017ce:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a05      	ldr	r2, [pc, #20]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 80017d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b03      	ldr	r3, [pc, #12]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a02      	ldr	r2, [pc, #8]	@ (80017e8 <HAL_RCC_OscConfig+0x270>)
 80017e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e013      	b.n	8001810 <HAL_RCC_OscConfig+0x298>
 80017e8:	40021000 	.word	0x40021000
 80017ec:	080033a0 	.word	0x080033a0
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000004 	.word	0x20000004
 80017f8:	4ba0      	ldr	r3, [pc, #640]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a9f      	ldr	r2, [pc, #636]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 80017fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b9d      	ldr	r3, [pc, #628]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a9c      	ldr	r2, [pc, #624]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 800180a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800180e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d013      	beq.n	8001840 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff f8fe 	bl	8000a18 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff f8fa 	bl	8000a18 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	@ 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e2ae      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001832:	4b92      	ldr	r3, [pc, #584]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x2a8>
 800183e:	e014      	b.n	800186a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff f8ea 	bl	8000a18 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff f8e6 	bl	8000a18 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	@ 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e29a      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800185a:	4b88      	ldr	r3, [pc, #544]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x2d0>
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d060      	beq.n	8001938 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2b04      	cmp	r3, #4
 800187a:	d005      	beq.n	8001888 <HAL_RCC_OscConfig+0x310>
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	2b0c      	cmp	r3, #12
 8001880:	d119      	bne.n	80018b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d116      	bne.n	80018b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001888:	4b7c      	ldr	r3, [pc, #496]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_OscConfig+0x328>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e277      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b76      	ldr	r3, [pc, #472]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	061b      	lsls	r3, r3, #24
 80018ae:	4973      	ldr	r1, [pc, #460]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b4:	e040      	b.n	8001938 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d023      	beq.n	8001906 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018be:	4b6f      	ldr	r3, [pc, #444]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a6e      	ldr	r2, [pc, #440]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 80018c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ca:	f7ff f8a5 	bl	8000a18 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d2:	f7ff f8a1 	bl	8000a18 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e255      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e4:	4b65      	ldr	r3, [pc, #404]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f0:	4b62      	ldr	r3, [pc, #392]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	061b      	lsls	r3, r3, #24
 80018fe:	495f      	ldr	r1, [pc, #380]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
 8001904:	e018      	b.n	8001938 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001906:	4b5d      	ldr	r3, [pc, #372]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a5c      	ldr	r2, [pc, #368]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 800190c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001912:	f7ff f881 	bl	8000a18 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191a:	f7ff f87d 	bl	8000a18 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e231      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800192c:	4b53      	ldr	r3, [pc, #332]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f0      	bne.n	800191a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	2b00      	cmp	r3, #0
 8001942:	d03c      	beq.n	80019be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d01c      	beq.n	8001986 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 800194e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001952:	4a4a      	ldr	r2, [pc, #296]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195c:	f7ff f85c 	bl	8000a18 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001964:	f7ff f858 	bl	8000a18 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e20c      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001976:	4b41      	ldr	r3, [pc, #260]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 8001978:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0ef      	beq.n	8001964 <HAL_RCC_OscConfig+0x3ec>
 8001984:	e01b      	b.n	80019be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001986:	4b3d      	ldr	r3, [pc, #244]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 8001988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800198c:	4a3b      	ldr	r2, [pc, #236]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001996:	f7ff f83f 	bl	8000a18 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199e:	f7ff f83b 	bl	8000a18 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e1ef      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019b0:	4b32      	ldr	r3, [pc, #200]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 80019b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1ef      	bne.n	800199e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 80a6 	beq.w	8001b18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019cc:	2300      	movs	r3, #0
 80019ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019d0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10d      	bne.n	80019f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019dc:	4b27      	ldr	r3, [pc, #156]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 80019de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e0:	4a26      	ldr	r2, [pc, #152]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 80019e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80019e8:	4b24      	ldr	r3, [pc, #144]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 80019ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019f4:	2301      	movs	r3, #1
 80019f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f8:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <HAL_RCC_OscConfig+0x508>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d118      	bne.n	8001a36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a04:	4b1e      	ldr	r3, [pc, #120]	@ (8001a80 <HAL_RCC_OscConfig+0x508>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1d      	ldr	r2, [pc, #116]	@ (8001a80 <HAL_RCC_OscConfig+0x508>)
 8001a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a10:	f7ff f802 	bl	8000a18 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a18:	f7fe fffe 	bl	8000a18 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e1b2      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_RCC_OscConfig+0x508>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d108      	bne.n	8001a50 <HAL_RCC_OscConfig+0x4d8>
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 8001a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a44:	4a0d      	ldr	r2, [pc, #52]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a4e:	e029      	b.n	8001aa4 <HAL_RCC_OscConfig+0x52c>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b05      	cmp	r3, #5
 8001a56:	d115      	bne.n	8001a84 <HAL_RCC_OscConfig+0x50c>
 8001a58:	4b08      	ldr	r3, [pc, #32]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a5e:	4a07      	ldr	r2, [pc, #28]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a68:	4b04      	ldr	r3, [pc, #16]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 8001a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a6e:	4a03      	ldr	r2, [pc, #12]	@ (8001a7c <HAL_RCC_OscConfig+0x504>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a78:	e014      	b.n	8001aa4 <HAL_RCC_OscConfig+0x52c>
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40007000 	.word	0x40007000
 8001a84:	4b9a      	ldr	r3, [pc, #616]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8a:	4a99      	ldr	r2, [pc, #612]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a94:	4b96      	ldr	r3, [pc, #600]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a9a:	4a95      	ldr	r2, [pc, #596]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001a9c:	f023 0304 	bic.w	r3, r3, #4
 8001aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d016      	beq.n	8001ada <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aac:	f7fe ffb4 	bl	8000a18 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab4:	f7fe ffb0 	bl	8000a18 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e162      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aca:	4b89      	ldr	r3, [pc, #548]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0ed      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x53c>
 8001ad8:	e015      	b.n	8001b06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ada:	f7fe ff9d 	bl	8000a18 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae2:	f7fe ff99 	bl	8000a18 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e14b      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af8:	4b7d      	ldr	r3, [pc, #500]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1ed      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b06:	7ffb      	ldrb	r3, [r7, #31]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d105      	bne.n	8001b18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b0c:	4b78      	ldr	r3, [pc, #480]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b10:	4a77      	ldr	r2, [pc, #476]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b16:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0320 	and.w	r3, r3, #32
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d03c      	beq.n	8001b9e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d01c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b2c:	4b70      	ldr	r3, [pc, #448]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b32:	4a6f      	ldr	r2, [pc, #444]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7fe ff6c 	bl	8000a18 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b44:	f7fe ff68 	bl	8000a18 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e11c      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b56:	4b66      	ldr	r3, [pc, #408]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001b58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0ef      	beq.n	8001b44 <HAL_RCC_OscConfig+0x5cc>
 8001b64:	e01b      	b.n	8001b9e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b66:	4b62      	ldr	r3, [pc, #392]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b6c:	4a60      	ldr	r2, [pc, #384]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b76:	f7fe ff4f 	bl	8000a18 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b7e:	f7fe ff4b 	bl	8000a18 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e0ff      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b90:	4b57      	ldr	r3, [pc, #348]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001b92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1ef      	bne.n	8001b7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80f3 	beq.w	8001d8e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	f040 80c9 	bne.w	8001d44 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bb2:	4b4f      	ldr	r3, [pc, #316]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f003 0203 	and.w	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d12c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d123      	bne.n	8001c20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001be2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d11b      	bne.n	8001c20 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d113      	bne.n	8001c20 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c02:	085b      	lsrs	r3, r3, #1
 8001c04:	3b01      	subs	r3, #1
 8001c06:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d109      	bne.n	8001c20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	085b      	lsrs	r3, r3, #1
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d06b      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	d062      	beq.n	8001cec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c26:	4b32      	ldr	r3, [pc, #200]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e0ac      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c36:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001c3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c40:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c42:	f7fe fee9 	bl	8000a18 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7fe fee5 	bl	8000a18 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e099      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5c:	4b24      	ldr	r3, [pc, #144]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c68:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	4b21      	ldr	r3, [pc, #132]	@ (8001cf4 <HAL_RCC_OscConfig+0x77c>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c78:	3a01      	subs	r2, #1
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c82:	0212      	lsls	r2, r2, #8
 8001c84:	4311      	orrs	r1, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c8a:	0852      	lsrs	r2, r2, #1
 8001c8c:	3a01      	subs	r2, #1
 8001c8e:	0552      	lsls	r2, r2, #21
 8001c90:	4311      	orrs	r1, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c96:	0852      	lsrs	r2, r2, #1
 8001c98:	3a01      	subs	r2, #1
 8001c9a:	0652      	lsls	r2, r2, #25
 8001c9c:	4311      	orrs	r1, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ca2:	06d2      	lsls	r2, r2, #27
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	4912      	ldr	r1, [pc, #72]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cac:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0f      	ldr	r2, [pc, #60]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001cb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cc4:	f7fe fea8 	bl	8000a18 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7fe fea4 	bl	8000a18 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e058      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cde:	4b04      	ldr	r3, [pc, #16]	@ (8001cf0 <HAL_RCC_OscConfig+0x778>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cea:	e050      	b.n	8001d8e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e04f      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf8:	4b27      	ldr	r3, [pc, #156]	@ (8001d98 <HAL_RCC_OscConfig+0x820>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d144      	bne.n	8001d8e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d04:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <HAL_RCC_OscConfig+0x820>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a23      	ldr	r2, [pc, #140]	@ (8001d98 <HAL_RCC_OscConfig+0x820>)
 8001d0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d10:	4b21      	ldr	r3, [pc, #132]	@ (8001d98 <HAL_RCC_OscConfig+0x820>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4a20      	ldr	r2, [pc, #128]	@ (8001d98 <HAL_RCC_OscConfig+0x820>)
 8001d16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d1c:	f7fe fe7c 	bl	8000a18 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7fe fe78 	bl	8000a18 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e02c      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d36:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_RCC_OscConfig+0x820>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x7ac>
 8001d42:	e024      	b.n	8001d8e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b0c      	cmp	r3, #12
 8001d48:	d01f      	beq.n	8001d8a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4a:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <HAL_RCC_OscConfig+0x820>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a12      	ldr	r2, [pc, #72]	@ (8001d98 <HAL_RCC_OscConfig+0x820>)
 8001d50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d56:	f7fe fe5f 	bl	8000a18 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7fe fe5b 	bl	8000a18 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e00f      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <HAL_RCC_OscConfig+0x820>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <HAL_RCC_OscConfig+0x820>)
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	4905      	ldr	r1, [pc, #20]	@ (8001d98 <HAL_RCC_OscConfig+0x820>)
 8001d82:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <HAL_RCC_OscConfig+0x824>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	60cb      	str	r3, [r1, #12]
 8001d88:	e001      	b.n	8001d8e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	feeefffc 	.word	0xfeeefffc

08001da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0e7      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001db4:	4b75      	ldr	r3, [pc, #468]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d910      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b72      	ldr	r3, [pc, #456]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 0207 	bic.w	r2, r3, #7
 8001dca:	4970      	ldr	r1, [pc, #448]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b6e      	ldr	r3, [pc, #440]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0cf      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d010      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	4b66      	ldr	r3, [pc, #408]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d908      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e00:	4b63      	ldr	r3, [pc, #396]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4960      	ldr	r1, [pc, #384]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d04c      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e26:	4b5a      	ldr	r3, [pc, #360]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d121      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0a6      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3e:	4b54      	ldr	r3, [pc, #336]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d115      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e09a      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e56:	4b4e      	ldr	r3, [pc, #312]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d109      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e08e      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e66:	4b4a      	ldr	r3, [pc, #296]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e086      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e76:	4b46      	ldr	r3, [pc, #280]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f023 0203 	bic.w	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4943      	ldr	r1, [pc, #268]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e88:	f7fe fdc6 	bl	8000a18 <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e90:	f7fe fdc2 	bl	8000a18 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e06e      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 020c 	and.w	r2, r3, #12
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d1eb      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d010      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	4b31      	ldr	r3, [pc, #196]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d208      	bcs.n	8001ee6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	492b      	ldr	r1, [pc, #172]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee6:	4b29      	ldr	r3, [pc, #164]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d210      	bcs.n	8001f16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef4:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 0207 	bic.w	r2, r3, #7
 8001efc:	4923      	ldr	r1, [pc, #140]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f04:	4b21      	ldr	r3, [pc, #132]	@ (8001f8c <HAL_RCC_ClockConfig+0x1ec>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e036      	b.n	8001f84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f22:	4b1b      	ldr	r3, [pc, #108]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	4918      	ldr	r1, [pc, #96]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d009      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f40:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4910      	ldr	r1, [pc, #64]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f54:	f000 f824 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	490b      	ldr	r1, [pc, #44]	@ (8001f94 <HAL_RCC_ClockConfig+0x1f4>)
 8001f66:	5ccb      	ldrb	r3, [r1, r3]
 8001f68:	f003 031f 	and.w	r3, r3, #31
 8001f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f70:	4a09      	ldr	r2, [pc, #36]	@ (8001f98 <HAL_RCC_ClockConfig+0x1f8>)
 8001f72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f74:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <HAL_RCC_ClockConfig+0x1fc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fcfd 	bl	8000978 <HAL_InitTick>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f82:	7afb      	ldrb	r3, [r7, #11]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40022000 	.word	0x40022000
 8001f90:	40021000 	.word	0x40021000
 8001f94:	080033a0 	.word	0x080033a0
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	@ 0x24
 8001fa4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fae:	4b3e      	ldr	r3, [pc, #248]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	d121      	bne.n	8002012 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d11e      	bne.n	8002012 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fd4:	4b34      	ldr	r3, [pc, #208]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d107      	bne.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fe0:	4b31      	ldr	r3, [pc, #196]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e005      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ffc:	4a2b      	ldr	r2, [pc, #172]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10d      	bne.n	8002028 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b04      	cmp	r3, #4
 8002016:	d102      	bne.n	800201e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002018:	4b25      	ldr	r3, [pc, #148]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	e004      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b08      	cmp	r3, #8
 8002022:	d101      	bne.n	8002028 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002024:	4b23      	ldr	r3, [pc, #140]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002026:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d134      	bne.n	8002098 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800202e:	4b1e      	ldr	r3, [pc, #120]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d003      	beq.n	8002046 <HAL_RCC_GetSysClockFreq+0xa6>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d003      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0xac>
 8002044:	e005      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002046:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002048:	617b      	str	r3, [r7, #20]
      break;
 800204a:	e005      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800204c:	4b19      	ldr	r3, [pc, #100]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800204e:	617b      	str	r3, [r7, #20]
      break;
 8002050:	e002      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	617b      	str	r3, [r7, #20]
      break;
 8002056:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002058:	4b13      	ldr	r3, [pc, #76]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	3301      	adds	r3, #1
 8002064:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002066:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	fb03 f202 	mul.w	r2, r3, r2
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	fbb2 f3f3 	udiv	r3, r2, r3
 800207c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800207e:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	0e5b      	lsrs	r3, r3, #25
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	3301      	adds	r3, #1
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002098:	69bb      	ldr	r3, [r7, #24]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3724      	adds	r7, #36	@ 0x24
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	080033b0 	.word	0x080033b0
 80020b0:	00f42400 	.word	0x00f42400
 80020b4:	007a1200 	.word	0x007a1200

080020b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020d0:	f7ff f9ee 	bl	80014b0 <HAL_PWREx_GetVoltageRange>
 80020d4:	6178      	str	r0, [r7, #20]
 80020d6:	e014      	b.n	8002102 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020d8:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020dc:	4a24      	ldr	r2, [pc, #144]	@ (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e4:	4b22      	ldr	r3, [pc, #136]	@ (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020f0:	f7ff f9de 	bl	80014b0 <HAL_PWREx_GetVoltageRange>
 80020f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002170 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002100:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002108:	d10b      	bne.n	8002122 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b80      	cmp	r3, #128	@ 0x80
 800210e:	d919      	bls.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2ba0      	cmp	r3, #160	@ 0xa0
 8002114:	d902      	bls.n	800211c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002116:	2302      	movs	r3, #2
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	e013      	b.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800211c:	2301      	movs	r3, #1
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	e010      	b.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b80      	cmp	r3, #128	@ 0x80
 8002126:	d902      	bls.n	800212e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002128:	2303      	movs	r3, #3
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	e00a      	b.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b80      	cmp	r3, #128	@ 0x80
 8002132:	d102      	bne.n	800213a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002134:	2302      	movs	r3, #2
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	e004      	b.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b70      	cmp	r3, #112	@ 0x70
 800213e:	d101      	bne.n	8002144 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002140:	2301      	movs	r3, #1
 8002142:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002144:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 0207 	bic.w	r2, r3, #7
 800214c:	4909      	ldr	r1, [pc, #36]	@ (8002174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002154:	4b07      	ldr	r3, [pc, #28]	@ (8002174 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	429a      	cmp	r2, r3
 8002160:	d001      	beq.n	8002166 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	40022000 	.word	0x40022000

08002178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e049      	b.n	800221e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fb1a 	bl	80007d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3304      	adds	r3, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4610      	mov	r0, r2
 80021b8:	f000 fc2e 	bl	8002a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e049      	b.n	80022cc <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d106      	bne.n	8002252 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f841 	bl	80022d4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2202      	movs	r2, #2
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3304      	adds	r3, #4
 8002262:	4619      	mov	r1, r3
 8002264:	4610      	mov	r0, r2
 8002266:	f000 fbd7 	bl	8002a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e049      	b.n	800238e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f841 	bl	8002396 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3304      	adds	r3, #4
 8002324:	4619      	mov	r1, r3
 8002326:	4610      	mov	r0, r2
 8002328:	f000 fb76 	bl	8002a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d109      	bne.n	80023d0 <HAL_TIM_PWM_Start+0x24>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	bf14      	ite	ne
 80023c8:	2301      	movne	r3, #1
 80023ca:	2300      	moveq	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	e03c      	b.n	800244a <HAL_TIM_PWM_Start+0x9e>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d109      	bne.n	80023ea <HAL_TIM_PWM_Start+0x3e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	e02f      	b.n	800244a <HAL_TIM_PWM_Start+0x9e>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d109      	bne.n	8002404 <HAL_TIM_PWM_Start+0x58>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	bf14      	ite	ne
 80023fc:	2301      	movne	r3, #1
 80023fe:	2300      	moveq	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	e022      	b.n	800244a <HAL_TIM_PWM_Start+0x9e>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d109      	bne.n	800241e <HAL_TIM_PWM_Start+0x72>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	bf14      	ite	ne
 8002416:	2301      	movne	r3, #1
 8002418:	2300      	moveq	r3, #0
 800241a:	b2db      	uxtb	r3, r3
 800241c:	e015      	b.n	800244a <HAL_TIM_PWM_Start+0x9e>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b10      	cmp	r3, #16
 8002422:	d109      	bne.n	8002438 <HAL_TIM_PWM_Start+0x8c>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	bf14      	ite	ne
 8002430:	2301      	movne	r3, #1
 8002432:	2300      	moveq	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	e008      	b.n	800244a <HAL_TIM_PWM_Start+0x9e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b01      	cmp	r3, #1
 8002442:	bf14      	ite	ne
 8002444:	2301      	movne	r3, #1
 8002446:	2300      	moveq	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e07e      	b.n	8002550 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d104      	bne.n	8002462 <HAL_TIM_PWM_Start+0xb6>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002460:	e023      	b.n	80024aa <HAL_TIM_PWM_Start+0xfe>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b04      	cmp	r3, #4
 8002466:	d104      	bne.n	8002472 <HAL_TIM_PWM_Start+0xc6>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002470:	e01b      	b.n	80024aa <HAL_TIM_PWM_Start+0xfe>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b08      	cmp	r3, #8
 8002476:	d104      	bne.n	8002482 <HAL_TIM_PWM_Start+0xd6>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002480:	e013      	b.n	80024aa <HAL_TIM_PWM_Start+0xfe>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d104      	bne.n	8002492 <HAL_TIM_PWM_Start+0xe6>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002490:	e00b      	b.n	80024aa <HAL_TIM_PWM_Start+0xfe>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b10      	cmp	r3, #16
 8002496:	d104      	bne.n	80024a2 <HAL_TIM_PWM_Start+0xf6>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024a0:	e003      	b.n	80024aa <HAL_TIM_PWM_Start+0xfe>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2202      	movs	r2, #2
 80024a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2201      	movs	r2, #1
 80024b0:	6839      	ldr	r1, [r7, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fe38 	bl	8003128 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a26      	ldr	r2, [pc, #152]	@ (8002558 <HAL_TIM_PWM_Start+0x1ac>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d009      	beq.n	80024d6 <HAL_TIM_PWM_Start+0x12a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a25      	ldr	r2, [pc, #148]	@ (800255c <HAL_TIM_PWM_Start+0x1b0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d004      	beq.n	80024d6 <HAL_TIM_PWM_Start+0x12a>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a23      	ldr	r2, [pc, #140]	@ (8002560 <HAL_TIM_PWM_Start+0x1b4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d101      	bne.n	80024da <HAL_TIM_PWM_Start+0x12e>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <HAL_TIM_PWM_Start+0x130>
 80024da:	2300      	movs	r3, #0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a18      	ldr	r2, [pc, #96]	@ (8002558 <HAL_TIM_PWM_Start+0x1ac>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d009      	beq.n	800250e <HAL_TIM_PWM_Start+0x162>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002502:	d004      	beq.n	800250e <HAL_TIM_PWM_Start+0x162>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a14      	ldr	r2, [pc, #80]	@ (800255c <HAL_TIM_PWM_Start+0x1b0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d115      	bne.n	800253a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	4b13      	ldr	r3, [pc, #76]	@ (8002564 <HAL_TIM_PWM_Start+0x1b8>)
 8002516:	4013      	ands	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b06      	cmp	r3, #6
 800251e:	d015      	beq.n	800254c <HAL_TIM_PWM_Start+0x1a0>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002526:	d011      	beq.n	800254c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002538:	e008      	b.n	800254c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	e000      	b.n	800254e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40012c00 	.word	0x40012c00
 800255c:	40014000 	.word	0x40014000
 8002560:	40014400 	.word	0x40014400
 8002564:	00010007 	.word	0x00010007

08002568 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002582:	2302      	movs	r3, #2
 8002584:	e066      	b.n	8002654 <HAL_TIM_OC_ConfigChannel+0xec>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b14      	cmp	r3, #20
 8002592:	d857      	bhi.n	8002644 <HAL_TIM_OC_ConfigChannel+0xdc>
 8002594:	a201      	add	r2, pc, #4	@ (adr r2, 800259c <HAL_TIM_OC_ConfigChannel+0x34>)
 8002596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259a:	bf00      	nop
 800259c:	080025f1 	.word	0x080025f1
 80025a0:	08002645 	.word	0x08002645
 80025a4:	08002645 	.word	0x08002645
 80025a8:	08002645 	.word	0x08002645
 80025ac:	080025ff 	.word	0x080025ff
 80025b0:	08002645 	.word	0x08002645
 80025b4:	08002645 	.word	0x08002645
 80025b8:	08002645 	.word	0x08002645
 80025bc:	0800260d 	.word	0x0800260d
 80025c0:	08002645 	.word	0x08002645
 80025c4:	08002645 	.word	0x08002645
 80025c8:	08002645 	.word	0x08002645
 80025cc:	0800261b 	.word	0x0800261b
 80025d0:	08002645 	.word	0x08002645
 80025d4:	08002645 	.word	0x08002645
 80025d8:	08002645 	.word	0x08002645
 80025dc:	08002629 	.word	0x08002629
 80025e0:	08002645 	.word	0x08002645
 80025e4:	08002645 	.word	0x08002645
 80025e8:	08002645 	.word	0x08002645
 80025ec:	08002637 	.word	0x08002637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fa7e 	bl	8002af8 <TIM_OC1_SetConfig>
      break;
 80025fc:	e025      	b.n	800264a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	4618      	mov	r0, r3
 8002606:	f000 faf3 	bl	8002bf0 <TIM_OC2_SetConfig>
      break;
 800260a:	e01e      	b.n	800264a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fb66 	bl	8002ce4 <TIM_OC3_SetConfig>
      break;
 8002618:	e017      	b.n	800264a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fbd7 	bl	8002dd4 <TIM_OC4_SetConfig>
      break;
 8002626:	e010      	b.n	800264a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fc2e 	bl	8002e90 <TIM_OC5_SetConfig>
      break;
 8002634:	e009      	b.n	800264a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68b9      	ldr	r1, [r7, #8]
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fc7f 	bl	8002f40 <TIM_OC6_SetConfig>
      break;
 8002642:	e002      	b.n	800264a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	75fb      	strb	r3, [r7, #23]
      break;
 8002648:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002652:	7dfb      	ldrb	r3, [r7, #23]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002676:	2302      	movs	r3, #2
 8002678:	e0ff      	b.n	800287a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b14      	cmp	r3, #20
 8002686:	f200 80f0 	bhi.w	800286a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800268a:	a201      	add	r2, pc, #4	@ (adr r2, 8002690 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002690:	080026e5 	.word	0x080026e5
 8002694:	0800286b 	.word	0x0800286b
 8002698:	0800286b 	.word	0x0800286b
 800269c:	0800286b 	.word	0x0800286b
 80026a0:	08002725 	.word	0x08002725
 80026a4:	0800286b 	.word	0x0800286b
 80026a8:	0800286b 	.word	0x0800286b
 80026ac:	0800286b 	.word	0x0800286b
 80026b0:	08002767 	.word	0x08002767
 80026b4:	0800286b 	.word	0x0800286b
 80026b8:	0800286b 	.word	0x0800286b
 80026bc:	0800286b 	.word	0x0800286b
 80026c0:	080027a7 	.word	0x080027a7
 80026c4:	0800286b 	.word	0x0800286b
 80026c8:	0800286b 	.word	0x0800286b
 80026cc:	0800286b 	.word	0x0800286b
 80026d0:	080027e9 	.word	0x080027e9
 80026d4:	0800286b 	.word	0x0800286b
 80026d8:	0800286b 	.word	0x0800286b
 80026dc:	0800286b 	.word	0x0800286b
 80026e0:	08002829 	.word	0x08002829
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fa04 	bl	8002af8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0208 	orr.w	r2, r2, #8
 80026fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0204 	bic.w	r2, r2, #4
 800270e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6999      	ldr	r1, [r3, #24]
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	619a      	str	r2, [r3, #24]
      break;
 8002722:	e0a5      	b.n	8002870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fa60 	bl	8002bf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800273e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699a      	ldr	r2, [r3, #24]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800274e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6999      	ldr	r1, [r3, #24]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	021a      	lsls	r2, r3, #8
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	619a      	str	r2, [r3, #24]
      break;
 8002764:	e084      	b.n	8002870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fab9 	bl	8002ce4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	69da      	ldr	r2, [r3, #28]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0208 	orr.w	r2, r2, #8
 8002780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0204 	bic.w	r2, r2, #4
 8002790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69d9      	ldr	r1, [r3, #28]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	61da      	str	r2, [r3, #28]
      break;
 80027a4:	e064      	b.n	8002870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fb11 	bl	8002dd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69da      	ldr	r2, [r3, #28]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69da      	ldr	r2, [r3, #28]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69d9      	ldr	r1, [r3, #28]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	021a      	lsls	r2, r3, #8
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	61da      	str	r2, [r3, #28]
      break;
 80027e6:	e043      	b.n	8002870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fb4e 	bl	8002e90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0208 	orr.w	r2, r2, #8
 8002802:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0204 	bic.w	r2, r2, #4
 8002812:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002826:	e023      	b.n	8002870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fb86 	bl	8002f40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002842:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002852:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	021a      	lsls	r2, r3, #8
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002868:	e002      	b.n	8002870 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	75fb      	strb	r3, [r7, #23]
      break;
 800286e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002878:	7dfb      	ldrb	r3, [r7, #23]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop

08002884 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_TIM_ConfigClockSource+0x1c>
 800289c:	2302      	movs	r3, #2
 800289e:	e0b6      	b.n	8002a0e <HAL_TIM_ConfigClockSource+0x18a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028dc:	d03e      	beq.n	800295c <HAL_TIM_ConfigClockSource+0xd8>
 80028de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028e2:	f200 8087 	bhi.w	80029f4 <HAL_TIM_ConfigClockSource+0x170>
 80028e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ea:	f000 8086 	beq.w	80029fa <HAL_TIM_ConfigClockSource+0x176>
 80028ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028f2:	d87f      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
 80028f4:	2b70      	cmp	r3, #112	@ 0x70
 80028f6:	d01a      	beq.n	800292e <HAL_TIM_ConfigClockSource+0xaa>
 80028f8:	2b70      	cmp	r3, #112	@ 0x70
 80028fa:	d87b      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
 80028fc:	2b60      	cmp	r3, #96	@ 0x60
 80028fe:	d050      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x11e>
 8002900:	2b60      	cmp	r3, #96	@ 0x60
 8002902:	d877      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
 8002904:	2b50      	cmp	r3, #80	@ 0x50
 8002906:	d03c      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0xfe>
 8002908:	2b50      	cmp	r3, #80	@ 0x50
 800290a:	d873      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
 800290c:	2b40      	cmp	r3, #64	@ 0x40
 800290e:	d058      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x13e>
 8002910:	2b40      	cmp	r3, #64	@ 0x40
 8002912:	d86f      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
 8002914:	2b30      	cmp	r3, #48	@ 0x30
 8002916:	d064      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15e>
 8002918:	2b30      	cmp	r3, #48	@ 0x30
 800291a:	d86b      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
 800291c:	2b20      	cmp	r3, #32
 800291e:	d060      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15e>
 8002920:	2b20      	cmp	r3, #32
 8002922:	d867      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
 8002924:	2b00      	cmp	r3, #0
 8002926:	d05c      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15e>
 8002928:	2b10      	cmp	r3, #16
 800292a:	d05a      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15e>
 800292c:	e062      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800293e:	f000 fbd3 	bl	80030e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002950:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	609a      	str	r2, [r3, #8]
      break;
 800295a:	e04f      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800296c:	f000 fbbc 	bl	80030e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800297e:	609a      	str	r2, [r3, #8]
      break;
 8002980:	e03c      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800298e:	461a      	mov	r2, r3
 8002990:	f000 fb30 	bl	8002ff4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2150      	movs	r1, #80	@ 0x50
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fb89 	bl	80030b2 <TIM_ITRx_SetConfig>
      break;
 80029a0:	e02c      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ae:	461a      	mov	r2, r3
 80029b0:	f000 fb4f 	bl	8003052 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2160      	movs	r1, #96	@ 0x60
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fb79 	bl	80030b2 <TIM_ITRx_SetConfig>
      break;
 80029c0:	e01c      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ce:	461a      	mov	r2, r3
 80029d0:	f000 fb10 	bl	8002ff4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2140      	movs	r1, #64	@ 0x40
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fb69 	bl	80030b2 <TIM_ITRx_SetConfig>
      break;
 80029e0:	e00c      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4619      	mov	r1, r3
 80029ec:	4610      	mov	r0, r2
 80029ee:	f000 fb60 	bl	80030b2 <TIM_ITRx_SetConfig>
      break;
 80029f2:	e003      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      break;
 80029f8:	e000      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80029fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a30      	ldr	r2, [pc, #192]	@ (8002aec <TIM_Base_SetConfig+0xd4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d003      	beq.n	8002a38 <TIM_Base_SetConfig+0x20>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a36:	d108      	bne.n	8002a4a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a27      	ldr	r2, [pc, #156]	@ (8002aec <TIM_Base_SetConfig+0xd4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00b      	beq.n	8002a6a <TIM_Base_SetConfig+0x52>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a58:	d007      	beq.n	8002a6a <TIM_Base_SetConfig+0x52>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a24      	ldr	r2, [pc, #144]	@ (8002af0 <TIM_Base_SetConfig+0xd8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d003      	beq.n	8002a6a <TIM_Base_SetConfig+0x52>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a23      	ldr	r2, [pc, #140]	@ (8002af4 <TIM_Base_SetConfig+0xdc>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d108      	bne.n	8002a7c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a12      	ldr	r2, [pc, #72]	@ (8002aec <TIM_Base_SetConfig+0xd4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d007      	beq.n	8002ab8 <TIM_Base_SetConfig+0xa0>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a11      	ldr	r2, [pc, #68]	@ (8002af0 <TIM_Base_SetConfig+0xd8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d003      	beq.n	8002ab8 <TIM_Base_SetConfig+0xa0>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a10      	ldr	r2, [pc, #64]	@ (8002af4 <TIM_Base_SetConfig+0xdc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d103      	bne.n	8002ac0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d105      	bne.n	8002ade <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f023 0201 	bic.w	r2, r3, #1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	611a      	str	r2, [r3, #16]
  }
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40012c00 	.word	0x40012c00
 8002af0:	40014000 	.word	0x40014000
 8002af4:	40014400 	.word	0x40014400

08002af8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f023 0201 	bic.w	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0303 	bic.w	r3, r3, #3
 8002b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f023 0302 	bic.w	r3, r3, #2
 8002b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a24      	ldr	r2, [pc, #144]	@ (8002be4 <TIM_OC1_SetConfig+0xec>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d007      	beq.n	8002b68 <TIM_OC1_SetConfig+0x70>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a23      	ldr	r2, [pc, #140]	@ (8002be8 <TIM_OC1_SetConfig+0xf0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d003      	beq.n	8002b68 <TIM_OC1_SetConfig+0x70>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a22      	ldr	r2, [pc, #136]	@ (8002bec <TIM_OC1_SetConfig+0xf4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d10c      	bne.n	8002b82 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f023 0308 	bic.w	r3, r3, #8
 8002b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f023 0304 	bic.w	r3, r3, #4
 8002b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a17      	ldr	r2, [pc, #92]	@ (8002be4 <TIM_OC1_SetConfig+0xec>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d007      	beq.n	8002b9a <TIM_OC1_SetConfig+0xa2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a16      	ldr	r2, [pc, #88]	@ (8002be8 <TIM_OC1_SetConfig+0xf0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d003      	beq.n	8002b9a <TIM_OC1_SetConfig+0xa2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a15      	ldr	r2, [pc, #84]	@ (8002bec <TIM_OC1_SetConfig+0xf4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d111      	bne.n	8002bbe <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	621a      	str	r2, [r3, #32]
}
 8002bd8:	bf00      	nop
 8002bda:	371c      	adds	r7, #28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40012c00 	.word	0x40012c00
 8002be8:	40014000 	.word	0x40014000
 8002bec:	40014400 	.word	0x40014400

08002bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f023 0210 	bic.w	r2, r3, #16
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f023 0320 	bic.w	r3, r3, #32
 8002c3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a22      	ldr	r2, [pc, #136]	@ (8002cd8 <TIM_OC2_SetConfig+0xe8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d10d      	bne.n	8002c70 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a19      	ldr	r2, [pc, #100]	@ (8002cd8 <TIM_OC2_SetConfig+0xe8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d007      	beq.n	8002c88 <TIM_OC2_SetConfig+0x98>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a18      	ldr	r2, [pc, #96]	@ (8002cdc <TIM_OC2_SetConfig+0xec>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d003      	beq.n	8002c88 <TIM_OC2_SetConfig+0x98>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a17      	ldr	r2, [pc, #92]	@ (8002ce0 <TIM_OC2_SetConfig+0xf0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d113      	bne.n	8002cb0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	621a      	str	r2, [r3, #32]
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40012c00 	.word	0x40012c00
 8002cdc:	40014000 	.word	0x40014000
 8002ce0:	40014400 	.word	0x40014400

08002ce4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f023 0303 	bic.w	r3, r3, #3
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a21      	ldr	r2, [pc, #132]	@ (8002dc8 <TIM_OC3_SetConfig+0xe4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d10d      	bne.n	8002d62 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a18      	ldr	r2, [pc, #96]	@ (8002dc8 <TIM_OC3_SetConfig+0xe4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <TIM_OC3_SetConfig+0x96>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a17      	ldr	r2, [pc, #92]	@ (8002dcc <TIM_OC3_SetConfig+0xe8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d003      	beq.n	8002d7a <TIM_OC3_SetConfig+0x96>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a16      	ldr	r2, [pc, #88]	@ (8002dd0 <TIM_OC3_SetConfig+0xec>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d113      	bne.n	8002da2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	621a      	str	r2, [r3, #32]
}
 8002dbc:	bf00      	nop
 8002dbe:	371c      	adds	r7, #28
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40014000 	.word	0x40014000
 8002dd0:	40014400 	.word	0x40014400

08002dd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	031b      	lsls	r3, r3, #12
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a14      	ldr	r2, [pc, #80]	@ (8002e84 <TIM_OC4_SetConfig+0xb0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <TIM_OC4_SetConfig+0x74>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a13      	ldr	r2, [pc, #76]	@ (8002e88 <TIM_OC4_SetConfig+0xb4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d003      	beq.n	8002e48 <TIM_OC4_SetConfig+0x74>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a12      	ldr	r2, [pc, #72]	@ (8002e8c <TIM_OC4_SetConfig+0xb8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d109      	bne.n	8002e5c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	019b      	lsls	r3, r3, #6
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	621a      	str	r2, [r3, #32]
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40012c00 	.word	0x40012c00
 8002e88:	40014000 	.word	0x40014000
 8002e8c:	40014400 	.word	0x40014400

08002e90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002ed4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	041b      	lsls	r3, r3, #16
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a13      	ldr	r2, [pc, #76]	@ (8002f34 <TIM_OC5_SetConfig+0xa4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d007      	beq.n	8002efa <TIM_OC5_SetConfig+0x6a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a12      	ldr	r2, [pc, #72]	@ (8002f38 <TIM_OC5_SetConfig+0xa8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d003      	beq.n	8002efa <TIM_OC5_SetConfig+0x6a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a11      	ldr	r2, [pc, #68]	@ (8002f3c <TIM_OC5_SetConfig+0xac>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d109      	bne.n	8002f0e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	621a      	str	r2, [r3, #32]
}
 8002f28:	bf00      	nop
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40012c00 	.word	0x40012c00
 8002f38:	40014000 	.word	0x40014000
 8002f3c:	40014400 	.word	0x40014400

08002f40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	051b      	lsls	r3, r3, #20
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a14      	ldr	r2, [pc, #80]	@ (8002fe8 <TIM_OC6_SetConfig+0xa8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d007      	beq.n	8002fac <TIM_OC6_SetConfig+0x6c>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a13      	ldr	r2, [pc, #76]	@ (8002fec <TIM_OC6_SetConfig+0xac>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d003      	beq.n	8002fac <TIM_OC6_SetConfig+0x6c>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a12      	ldr	r2, [pc, #72]	@ (8002ff0 <TIM_OC6_SetConfig+0xb0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d109      	bne.n	8002fc0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	029b      	lsls	r3, r3, #10
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40014000 	.word	0x40014000
 8002ff0:	40014400 	.word	0x40014400

08002ff4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f023 0201 	bic.w	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800301e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f023 030a 	bic.w	r3, r3, #10
 8003030:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	621a      	str	r2, [r3, #32]
}
 8003046:	bf00      	nop
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003052:	b480      	push	{r7}
 8003054:	b087      	sub	sp, #28
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	f023 0210 	bic.w	r2, r3, #16
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800307c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	031b      	lsls	r3, r3, #12
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800308e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	621a      	str	r2, [r3, #32]
}
 80030a6:	bf00      	nop
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f043 0307 	orr.w	r3, r3, #7
 80030d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	609a      	str	r2, [r3, #8]
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003102:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	021a      	lsls	r2, r3, #8
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	431a      	orrs	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4313      	orrs	r3, r2
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	609a      	str	r2, [r3, #8]
}
 800311c:	bf00      	nop
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 031f 	and.w	r3, r3, #31
 800313a:	2201      	movs	r2, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1a      	ldr	r2, [r3, #32]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	43db      	mvns	r3, r3
 800314a:	401a      	ands	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a1a      	ldr	r2, [r3, #32]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	431a      	orrs	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	621a      	str	r2, [r3, #32]
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003188:	2302      	movs	r3, #2
 800318a:	e04f      	b.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a21      	ldr	r2, [pc, #132]	@ (8003238 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d108      	bne.n	80031c8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80031bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a14      	ldr	r2, [pc, #80]	@ (8003238 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d009      	beq.n	8003200 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f4:	d004      	beq.n	8003200 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a10      	ldr	r2, [pc, #64]	@ (800323c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d10c      	bne.n	800321a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003206:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	4313      	orrs	r3, r2
 8003210:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	40012c00 	.word	0x40012c00
 800323c:	40014000 	.word	0x40014000

08003240 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003258:	2302      	movs	r3, #2
 800325a:	e060      	b.n	800331e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	041b      	lsls	r3, r3, #16
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a14      	ldr	r2, [pc, #80]	@ (800332c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d115      	bne.n	800330c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	051b      	lsls	r3, r3, #20
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40012c00 	.word	0x40012c00

08003330 <memset>:
 8003330:	4402      	add	r2, r0
 8003332:	4603      	mov	r3, r0
 8003334:	4293      	cmp	r3, r2
 8003336:	d100      	bne.n	800333a <memset+0xa>
 8003338:	4770      	bx	lr
 800333a:	f803 1b01 	strb.w	r1, [r3], #1
 800333e:	e7f9      	b.n	8003334 <memset+0x4>

08003340 <__libc_init_array>:
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	4d0d      	ldr	r5, [pc, #52]	@ (8003378 <__libc_init_array+0x38>)
 8003344:	4c0d      	ldr	r4, [pc, #52]	@ (800337c <__libc_init_array+0x3c>)
 8003346:	1b64      	subs	r4, r4, r5
 8003348:	10a4      	asrs	r4, r4, #2
 800334a:	2600      	movs	r6, #0
 800334c:	42a6      	cmp	r6, r4
 800334e:	d109      	bne.n	8003364 <__libc_init_array+0x24>
 8003350:	4d0b      	ldr	r5, [pc, #44]	@ (8003380 <__libc_init_array+0x40>)
 8003352:	4c0c      	ldr	r4, [pc, #48]	@ (8003384 <__libc_init_array+0x44>)
 8003354:	f000 f818 	bl	8003388 <_init>
 8003358:	1b64      	subs	r4, r4, r5
 800335a:	10a4      	asrs	r4, r4, #2
 800335c:	2600      	movs	r6, #0
 800335e:	42a6      	cmp	r6, r4
 8003360:	d105      	bne.n	800336e <__libc_init_array+0x2e>
 8003362:	bd70      	pop	{r4, r5, r6, pc}
 8003364:	f855 3b04 	ldr.w	r3, [r5], #4
 8003368:	4798      	blx	r3
 800336a:	3601      	adds	r6, #1
 800336c:	e7ee      	b.n	800334c <__libc_init_array+0xc>
 800336e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003372:	4798      	blx	r3
 8003374:	3601      	adds	r6, #1
 8003376:	e7f2      	b.n	800335e <__libc_init_array+0x1e>
 8003378:	080033e0 	.word	0x080033e0
 800337c:	080033e0 	.word	0x080033e0
 8003380:	080033e0 	.word	0x080033e0
 8003384:	080033e4 	.word	0x080033e4

08003388 <_init>:
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338a:	bf00      	nop
 800338c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338e:	bc08      	pop	{r3}
 8003390:	469e      	mov	lr, r3
 8003392:	4770      	bx	lr

08003394 <_fini>:
 8003394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003396:	bf00      	nop
 8003398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339a:	bc08      	pop	{r3}
 800339c:	469e      	mov	lr, r3
 800339e:	4770      	bx	lr
