
efs-can-servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ecc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  0800805c  0800805c  0000905c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008238  08008238  0000a0bc  2**0
                  CONTENTS
  4 .ARM          00000008  08008238  08008238  00009238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008240  08008240  0000a0bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08008240  08008240  00009240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800824c  0800824c  0000924c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  08008250  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  200000c0  0800830c  0000a0c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  0800830c  0000a774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011619  00000000  00000000  0000a0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003393  00000000  00000000  0001b705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  0001ea98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cf7  00000000  00000000  0001fba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027931  00000000  00000000  0002089f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164d2  00000000  00000000  000481d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcbbf  00000000  00000000  0005e6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b261  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e84  00000000  00000000  0013b2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00140128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008044 	.word	0x08008044

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	08008044 	.word	0x08008044

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000274:	4b17      	ldr	r3, [pc, #92]	@ (80002d4 <MX_CAN1_Init+0x64>)
 8000276:	4a18      	ldr	r2, [pc, #96]	@ (80002d8 <MX_CAN1_Init+0x68>)
 8000278:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 800027a:	4b16      	ldr	r3, [pc, #88]	@ (80002d4 <MX_CAN1_Init+0x64>)
 800027c:	220c      	movs	r2, #12
 800027e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000280:	4b14      	ldr	r3, [pc, #80]	@ (80002d4 <MX_CAN1_Init+0x64>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000286:	4b13      	ldr	r3, [pc, #76]	@ (80002d4 <MX_CAN1_Init+0x64>)
 8000288:	2200      	movs	r2, #0
 800028a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800028c:	4b11      	ldr	r3, [pc, #68]	@ (80002d4 <MX_CAN1_Init+0x64>)
 800028e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000292:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000294:	4b0f      	ldr	r3, [pc, #60]	@ (80002d4 <MX_CAN1_Init+0x64>)
 8000296:	2200      	movs	r2, #0
 8000298:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800029a:	4b0e      	ldr	r3, [pc, #56]	@ (80002d4 <MX_CAN1_Init+0x64>)
 800029c:	2200      	movs	r2, #0
 800029e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <MX_CAN1_Init+0x64>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80002a6:	4b0b      	ldr	r3, [pc, #44]	@ (80002d4 <MX_CAN1_Init+0x64>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80002ac:	4b09      	ldr	r3, [pc, #36]	@ (80002d4 <MX_CAN1_Init+0x64>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80002b2:	4b08      	ldr	r3, [pc, #32]	@ (80002d4 <MX_CAN1_Init+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80002b8:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <MX_CAN1_Init+0x64>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80002be:	4805      	ldr	r0, [pc, #20]	@ (80002d4 <MX_CAN1_Init+0x64>)
 80002c0:	f003 f97a 	bl	80035b8 <HAL_CAN_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80002ca:	f002 fdb3 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	200000dc 	.word	0x200000dc
 80002d8:	40006400 	.word	0x40006400

080002dc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08a      	sub	sp, #40	@ 0x28
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e4:	f107 0314 	add.w	r3, r7, #20
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a25      	ldr	r2, [pc, #148]	@ (8000390 <HAL_CAN_MspInit+0xb4>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d143      	bne.n	8000386 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002fe:	4b25      	ldr	r3, [pc, #148]	@ (8000394 <HAL_CAN_MspInit+0xb8>)
 8000300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000302:	4a24      	ldr	r2, [pc, #144]	@ (8000394 <HAL_CAN_MspInit+0xb8>)
 8000304:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000308:	6593      	str	r3, [r2, #88]	@ 0x58
 800030a:	4b22      	ldr	r3, [pc, #136]	@ (8000394 <HAL_CAN_MspInit+0xb8>)
 800030c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800030e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000312:	613b      	str	r3, [r7, #16]
 8000314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000316:	4b1f      	ldr	r3, [pc, #124]	@ (8000394 <HAL_CAN_MspInit+0xb8>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800031a:	4a1e      	ldr	r2, [pc, #120]	@ (8000394 <HAL_CAN_MspInit+0xb8>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000322:	4b1c      	ldr	r3, [pc, #112]	@ (8000394 <HAL_CAN_MspInit+0xb8>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800032e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000334:	2302      	movs	r3, #2
 8000336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000338:	2301      	movs	r3, #1
 800033a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800033c:	2303      	movs	r3, #3
 800033e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000340:	2309      	movs	r3, #9
 8000342:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000344:	f107 0314 	add.w	r3, r7, #20
 8000348:	4619      	mov	r1, r3
 800034a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800034e:	f004 f895 	bl	800447c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000352:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000358:	2302      	movs	r3, #2
 800035a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000360:	2303      	movs	r3, #3
 8000362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000364:	2309      	movs	r3, #9
 8000366:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000368:	f107 0314 	add.w	r3, r7, #20
 800036c:	4619      	mov	r1, r3
 800036e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000372:	f004 f883 	bl	800447c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2100      	movs	r1, #0
 800037a:	2014      	movs	r0, #20
 800037c:	f004 f847 	bl	800440e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000380:	2014      	movs	r0, #20
 8000382:	f004 f860 	bl	8004446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000386:	bf00      	nop
 8000388:	3728      	adds	r7, #40	@ 0x28
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40006400 	.word	0x40006400
 8000394:	40021000 	.word	0x40021000

08000398 <canardInit>:
                void* mem_arena,
                size_t mem_arena_size,
                CanardOnTransferReception on_reception,
                CanardShouldAcceptTransfer should_accept,
                void* user_reference)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
 80003a4:	603b      	str	r3, [r7, #0]
     * If your application fails here, make sure it's not built in 64-bit mode.
     * Refer to the design documentation for more info.
     */
    CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

    memset(out_ins, 0, sizeof(*out_ins));
 80003a6:	222c      	movs	r2, #44	@ 0x2c
 80003a8:	2100      	movs	r1, #0
 80003aa:	68f8      	ldr	r0, [r7, #12]
 80003ac:	f007 f864 	bl	8007478 <memset>

    out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	2200      	movs	r2, #0
 80003b4:	701a      	strb	r2, [r3, #0]
    out_ins->on_reception = on_reception;
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	683a      	ldr	r2, [r7, #0]
 80003ba:	609a      	str	r2, [r3, #8]
    out_ins->should_accept = should_accept;
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	6a3a      	ldr	r2, [r7, #32]
 80003c0:	605a      	str	r2, [r3, #4]
    out_ins->rx_states = NULL;
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	2200      	movs	r2, #0
 80003c6:	621a      	str	r2, [r3, #32]
    out_ins->tx_queue = NULL;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	2200      	movs	r2, #0
 80003cc:	625a      	str	r2, [r3, #36]	@ 0x24
    out_ins->user_reference = user_reference;
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80003d2:	629a      	str	r2, [r3, #40]	@ 0x28
#if CANARD_ENABLE_TAO_OPTION
    out_ins->tao_disabled = false;
#endif
    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	095b      	lsrs	r3, r3, #5
 80003d8:	617b      	str	r3, [r7, #20]
    if (pool_capacity > 0xFFFFU)
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80003e0:	d302      	bcc.n	80003e8 <canardInit+0x50>
    {
        pool_capacity = 0xFFFFU;
 80003e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80003e6:	617b      	str	r3, [r7, #20]
    }

    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	330c      	adds	r3, #12
 80003ec:	697a      	ldr	r2, [r7, #20]
 80003ee:	b292      	uxth	r2, r2
 80003f0:	68b9      	ldr	r1, [r7, #8]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f001 fefd 	bl	80021f2 <initPoolAllocator>
}
 80003f8:	bf00      	nop
 80003fa:	3718      	adds	r7, #24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <canardGetLocalNodeID>:
        CANARD_ASSERT(false);
    }
}

uint8_t canardGetLocalNodeID(const CanardInstance* ins)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
    return ins->node_id;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	781b      	ldrb	r3, [r3, #0]
}
 800040c:	4618      	mov	r0, r3
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <canardBroadcast>:
#endif
#if CANARD_ENABLE_CANFD
                        ,bool canfd
#endif
)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08e      	sub	sp, #56	@ 0x38
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	e9c7 2300 	strd	r2, r3, [r7]
    // create transfer object
    CanardTxTransfer transfer_object = {
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	2228      	movs	r2, #40	@ 0x28
 800042a:	2100      	movs	r1, #0
 800042c:	4618      	mov	r0, r3
 800042e:	f007 f823 	bl	8007478 <memset>
 8000432:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000436:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800043a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800043e:	843b      	strh	r3, [r7, #32]
 8000440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000442:	627b      	str	r3, [r7, #36]	@ 0x24
 8000444:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000448:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800044c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800044e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000450:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000454:	863b      	strh	r3, [r7, #48]	@ 0x30
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };

    return canardBroadcastObj(ins, &transfer_object);
 8000456:	f107 0310 	add.w	r3, r7, #16
 800045a:	4619      	mov	r1, r3
 800045c:	68f8      	ldr	r0, [r7, #12]
 800045e:	f000 f805 	bl	800046c <canardBroadcastObj>
 8000462:	4603      	mov	r3, r0
}
 8000464:	4618      	mov	r0, r3
 8000466:	3738      	adds	r7, #56	@ 0x38
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <canardBroadcastObj>:

int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
{
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b087      	sub	sp, #28
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d106      	bne.n	800048c <canardBroadcastObj+0x20>
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	8c1b      	ldrh	r3, [r3, #32]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d002      	beq.n	800048c <canardBroadcastObj+0x20>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000486:	f06f 0301 	mvn.w	r3, #1
 800048a:	e070      	b.n	800056e <canardBroadcastObj+0x102>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	7e1b      	ldrb	r3, [r3, #24]
 8000490:	2b1f      	cmp	r3, #31
 8000492:	d902      	bls.n	800049a <canardBroadcastObj+0x2e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000494:	f06f 0301 	mvn.w	r3, #1
 8000498:	e069      	b.n	800056e <canardBroadcastObj+0x102>
    }

    uint32_t can_id = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0xFFFFU;
 800049e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004a2:	827b      	strh	r3, [r7, #18]

    if (canardGetLocalNodeID(ins) == 0)
 80004a4:	6878      	ldr	r0, [r7, #4]
 80004a6:	f7ff ffab 	bl	8000400 <canardGetLocalNodeID>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d138      	bne.n	8000522 <canardBroadcastObj+0xb6>
    {
        if (transfer_object->payload_len > 7)
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	8c1b      	ldrh	r3, [r3, #32]
 80004b4:	2b07      	cmp	r3, #7
 80004b6:	d902      	bls.n	80004be <canardBroadcastObj+0x52>
        {
            return -CANARD_ERROR_NODE_ID_NOT_SET;
 80004b8:	f06f 0303 	mvn.w	r3, #3
 80004bc:	e057      	b.n	800056e <canardBroadcastObj+0x102>
        }

        static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

        if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	8a1a      	ldrh	r2, [r3, #16]
 80004c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000578 <canardBroadcastObj+0x10c>)
 80004c4:	881b      	ldrh	r3, [r3, #0]
 80004c6:	4013      	ands	r3, r2
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	8a1b      	ldrh	r3, [r3, #16]
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d002      	beq.n	80004d8 <canardBroadcastObj+0x6c>
        {
            return -CANARD_ERROR_INVALID_ARGUMENT;
 80004d2:	f06f 0301 	mvn.w	r3, #1
 80004d6:	e04a      	b.n	800056e <canardBroadcastObj+0x102>
        }

        // anonymous transfer, random discriminator
        const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	69d9      	ldr	r1, [r3, #28]
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	8c1b      	ldrh	r3, [r3, #32]
 80004e0:	461a      	mov	r2, r3
 80004e2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80004e6:	f001 fe67 	bl	80021b8 <crcAdd>
 80004ea:	4603      	mov	r3, r0
 80004ec:	461a      	mov	r2, r3
 80004ee:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 80004f2:	4013      	ands	r3, r2
 80004f4:	823b      	strh	r3, [r7, #16]
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	7e1b      	ldrb	r3, [r3, #24]
 80004fa:	061a      	lsls	r2, r3, #24
 80004fc:	8a3b      	ldrh	r3, [r7, #16]
 80004fe:	025b      	lsls	r3, r3, #9
 8000500:	431a      	orrs	r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	8a19      	ldrh	r1, [r3, #16]
 8000506:	4b1c      	ldr	r3, [pc, #112]	@ (8000578 <canardBroadcastObj+0x10c>)
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	400b      	ands	r3, r1
 800050c:	b29b      	uxth	r3, r3
 800050e:	021b      	lsls	r3, r3, #8
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000510:	ea42 0403 	orr.w	r4, r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f7ff ff73 	bl	8000400 <canardGetLocalNodeID>
 800051a:	4603      	mov	r3, r0
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 800051c:	4323      	orrs	r3, r4
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	e012      	b.n	8000548 <canardBroadcastObj+0xdc>
    }
    else
    {
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	7e1b      	ldrb	r3, [r3, #24]
 8000526:	061a      	lsls	r2, r3, #24
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	8a1b      	ldrh	r3, [r3, #16]
 800052c:	021b      	lsls	r3, r3, #8
 800052e:	ea42 0403 	orr.w	r4, r2, r3
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f7ff ff64 	bl	8000400 <canardGetLocalNodeID>
 8000538:	4603      	mov	r3, r0
 800053a:	4323      	orrs	r3, r4
 800053c:	617b      	str	r3, [r7, #20]
        crc = calculateCRC(transfer_object);
 800053e:	6838      	ldr	r0, [r7, #0]
 8000540:	f000 f84c 	bl	80005dc <calculateCRC>
 8000544:	4603      	mov	r3, r0
 8000546:	827b      	strh	r3, [r7, #18]
    }

    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000548:	8a7a      	ldrh	r2, [r7, #18]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	6979      	ldr	r1, [r7, #20]
 800054e:	6878      	ldr	r0, [r7, #4]
 8000550:	f001 f81e 	bl	8001590 <enqueueTxFrames>
 8000554:	4603      	mov	r3, r0
 8000556:	81fb      	strh	r3, [r7, #14]

    if (result > 0) {
 8000558:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800055c:	2b00      	cmp	r3, #0
 800055e:	dd04      	ble.n	800056a <canardBroadcastObj+0xfe>
        incrementTransferID(transfer_object->inout_transfer_id);
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4618      	mov	r0, r3
 8000566:	f000 ff9e 	bl	80014a6 <incrementTransferID>
    }

    return result;
 800056a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800056e:	4618      	mov	r0, r3
 8000570:	371c      	adds	r7, #28
 8000572:	46bd      	mov	sp, r7
 8000574:	bd90      	pop	{r4, r7, pc}
 8000576:	bf00      	nop
 8000578:	080081c2 	.word	0x080081c2

0800057c <canardBufferFromIdx>:
  CanardBufferBlock and CanartRxState structures to have the same size
  on 32 bit and 64 bit platforms, which allows for easier testing in
  simulator environments
 */
CANARD_INTERNAL CanardBufferBlock *canardBufferFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardBufferBlock *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardBufferBlock *)idx;
 8000586:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <canardBufferToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardBufferToIdx(CanardPoolAllocator* allocator, const CanardBufferBlock *buf)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)buf - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)buf;
 800059e:	683b      	ldr	r3, [r7, #0]
#endif
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <canardRxFromIdx>:

CANARD_INTERNAL CanardRxState *canardRxFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardRxState *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardRxState *)idx;
 80005b6:	683b      	ldr	r3, [r7, #0]
#endif
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <canardRxToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardRxToIdx(CanardPoolAllocator* allocator, const CanardRxState *rx)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)rx - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)rx;
 80005ce:	683b      	ldr	r3, [r7, #0]
#endif
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <calculateCRC>:

CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0xFFFFU;
 80005e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005e8:	81fb      	strh	r3, [r7, #14]
#if CANARD_ENABLE_CANFD
    if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
        (transfer_object->payload_len > 63 && transfer_object->canfd))
#else
    if (transfer_object->payload_len > 7)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	8c1b      	ldrh	r3, [r3, #32]
 80005ee:	2b07      	cmp	r3, #7
 80005f0:	d913      	bls.n	800061a <calculateCRC+0x3e>
#endif
    {
        crc = crcAddSignature(crc, transfer_object->data_type_signature);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80005f8:	89f9      	ldrh	r1, [r7, #14]
 80005fa:	4608      	mov	r0, r1
 80005fc:	f001 fdad 	bl	800215a <crcAddSignature>
 8000600:	4603      	mov	r3, r0
 8000602:	81fb      	strh	r3, [r7, #14]
        crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	69d9      	ldr	r1, [r3, #28]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	8c1b      	ldrh	r3, [r3, #32]
 800060c:	461a      	mov	r2, r3
 800060e:	89fb      	ldrh	r3, [r7, #14]
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fdd1 	bl	80021b8 <crcAdd>
 8000616:	4603      	mov	r3, r0
 8000618:	81fb      	strh	r3, [r7, #14]
                crc = crcAddByte(crc, empty);
            }
        }
#endif
    }
    return crc;
 800061a:	89fb      	ldrh	r3, [r7, #14]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <canardRequestOrRespond>:
#endif
#if CANARD_ENABLE_CANFD
                               ,bool canfd
#endif
)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08e      	sub	sp, #56	@ 0x38
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	e9c7 2300 	strd	r2, r3, [r7]
 8000630:	460b      	mov	r3, r1
 8000632:	72fb      	strb	r3, [r7, #11]
    CanardTxTransfer transfer_object = {
        .data_type_signature = data_type_signature,
        .data_type_id = data_type_id,
        .inout_transfer_id = inout_transfer_id,
        .priority = priority,
        .transfer_type = kind == CanardRequest ? CanardTransferTypeRequest : CanardTransferTypeResponse,
 8000634:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000638:	2b01      	cmp	r3, #1
 800063a:	bf0c      	ite	eq
 800063c:	2301      	moveq	r3, #1
 800063e:	2300      	movne	r3, #0
 8000640:	b2db      	uxtb	r3, r3
    CanardTxTransfer transfer_object = {
 8000642:	743b      	strb	r3, [r7, #16]
 8000644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000648:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800064c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000650:	b29b      	uxth	r3, r3
 8000652:	843b      	strh	r3, [r7, #32]
 8000654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000656:	627b      	str	r3, [r7, #36]	@ 0x24
 8000658:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800065c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000664:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000668:	863b      	strh	r3, [r7, #48]	@ 0x30
#endif
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };
    return canardRequestOrRespondObj(ins, destination_node_id, &transfer_object);
 800066a:	f107 0210 	add.w	r2, r7, #16
 800066e:	7afb      	ldrb	r3, [r7, #11]
 8000670:	4619      	mov	r1, r3
 8000672:	68f8      	ldr	r0, [r7, #12]
 8000674:	f000 f805 	bl	8000682 <canardRequestOrRespondObj>
 8000678:	4603      	mov	r3, r0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3738      	adds	r7, #56	@ 0x38
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <canardRequestOrRespondObj>:

int16_t canardRequestOrRespondObj(CanardInstance* ins, uint8_t destination_node_id, CanardTxTransfer* transfer_object)
{
 8000682:	b590      	push	{r4, r7, lr}
 8000684:	b087      	sub	sp, #28
 8000686:	af00      	add	r7, sp, #0
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	460b      	mov	r3, r1
 800068c:	607a      	str	r2, [r7, #4]
 800068e:	72fb      	strb	r3, [r7, #11]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	69db      	ldr	r3, [r3, #28]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d106      	bne.n	80006a6 <canardRequestOrRespondObj+0x24>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	8c1b      	ldrh	r3, [r3, #32]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <canardRequestOrRespondObj+0x24>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80006a0:	f06f 0301 	mvn.w	r3, #1
 80006a4:	e042      	b.n	800072c <canardRequestOrRespondObj+0xaa>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	7e1b      	ldrb	r3, [r3, #24]
 80006aa:	2b1f      	cmp	r3, #31
 80006ac:	d902      	bls.n	80006b4 <canardRequestOrRespondObj+0x32>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80006ae:	f06f 0301 	mvn.w	r3, #1
 80006b2:	e03b      	b.n	800072c <canardRequestOrRespondObj+0xaa>
    }
    if (canardGetLocalNodeID(ins) == 0)
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff fea3 	bl	8000400 <canardGetLocalNodeID>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d102      	bne.n	80006c6 <canardRequestOrRespondObj+0x44>
    {
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 80006c0:	f06f 0303 	mvn.w	r3, #3
 80006c4:	e032      	b.n	800072c <canardRequestOrRespondObj+0xaa>
    }

    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	7e1b      	ldrb	r3, [r3, #24]
 80006ca:	061a      	lsls	r2, r3, #24
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	8a1b      	ldrh	r3, [r3, #16]
 80006d0:	041b      	lsls	r3, r3, #16
 80006d2:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	03db      	lsls	r3, r3, #15
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 80006da:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 80006dc:	7afb      	ldrb	r3, [r7, #11]
 80006de:	021b      	lsls	r3, r3, #8
 80006e0:	ea42 0403 	orr.w	r4, r2, r3
                            (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 80006e4:	68f8      	ldr	r0, [r7, #12]
 80006e6:	f7ff fe8b 	bl	8000400 <canardGetLocalNodeID>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4323      	orrs	r3, r4
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 80006ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f2:	617b      	str	r3, [r7, #20]

    uint16_t crc = calculateCRC(transfer_object);
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff ff71 	bl	80005dc <calculateCRC>
 80006fa:	4603      	mov	r3, r0
 80006fc:	827b      	strh	r3, [r7, #18]


    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 80006fe:	8a7a      	ldrh	r2, [r7, #18]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6979      	ldr	r1, [r7, #20]
 8000704:	68f8      	ldr	r0, [r7, #12]
 8000706:	f000 ff43 	bl	8001590 <enqueueTxFrames>
 800070a:	4603      	mov	r3, r0
 800070c:	823b      	strh	r3, [r7, #16]

    if (result > 0 && transfer_object->transfer_type == CanardTransferTypeRequest)                      // Response Transfer ID must not be altered
 800070e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000712:	2b00      	cmp	r3, #0
 8000714:	dd08      	ble.n	8000728 <canardRequestOrRespondObj+0xa6>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d104      	bne.n	8000728 <canardRequestOrRespondObj+0xa6>
    {
        incrementTransferID(transfer_object->inout_transfer_id);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4618      	mov	r0, r3
 8000724:	f000 febf 	bl	80014a6 <incrementTransferID>
    }

    return result;
 8000728:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 800072c:	4618      	mov	r0, r3
 800072e:	371c      	adds	r7, #28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd90      	pop	{r4, r7, pc}

08000734 <canardPeekTxQueue>:

CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    if (ins->tx_queue == NULL)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000740:	2b00      	cmp	r3, #0
 8000742:	d101      	bne.n	8000748 <canardPeekTxQueue+0x14>
    {
        return NULL;
 8000744:	2300      	movs	r3, #0
 8000746:	e002      	b.n	800074e <canardPeekTxQueue+0x1a>
    }
    return &ins->tx_queue->frame;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074c:	3304      	adds	r3, #4
}
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <canardPopTxQueue>:

void canardPopTxQueue(CanardInstance* ins)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b084      	sub	sp, #16
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = ins->tx_queue;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000766:	60fb      	str	r3, [r7, #12]
    ins->tx_queue = item->next;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	625a      	str	r2, [r3, #36]	@ 0x24
    freeBlock(&ins->allocator, item);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	330c      	adds	r3, #12
 8000774:	68f9      	ldr	r1, [r7, #12]
 8000776:	4618      	mov	r0, r3
 8000778:	f001 fd9b 	bl	80022b2 <freeBlock>
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <canardHandleRxFrame>:

int16_t canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
{
 8000784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000788:	b09f      	sub	sp, #124	@ 0x7c
 800078a:	af02      	add	r7, sp, #8
 800078c:	60f8      	str	r0, [r7, #12]
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	e9c7 2300 	strd	r2, r3, [r7]
    const CanardTransferType transfer_type = extractTransferType(frame->id);
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f001 f900 	bl	800199e <extractTransferType>
 800079e:	4603      	mov	r3, r0
 80007a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 80007a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d007      	beq.n	80007bc <canardHandleRxFrame+0x38>
                                        (uint8_t)CANARD_BROADCAST_NODE_ID :
                                        DEST_ID_FROM_ID(frame->id);
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	0a1b      	lsrs	r3, r3, #8
 80007b2:	b2db      	uxtb	r3, r3
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 80007b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	e000      	b.n	80007be <canardHandleRxFrame+0x3a>
 80007bc:	2300      	movs	r3, #0
 80007be:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    // TODO: This function should maintain statistics of transfer errors and such.

    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	da0f      	bge.n	80007ea <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d109      	bne.n	80007ea <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d103      	bne.n	80007ea <canardHandleRxFrame+0x66>
        (frame->data_len < 1))
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	7b1b      	ldrb	r3, [r3, #12]
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d102      	bne.n	80007f0 <canardHandleRxFrame+0x6c>
    {
        return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 80007ea:	f06f 0309 	mvn.w	r3, #9
 80007ee:	e361      	b.n	8000eb4 <canardHandleRxFrame+0x730>
    }

    if (transfer_type != CanardTransferTypeBroadcast &&
 80007f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d00b      	beq.n	8000810 <canardHandleRxFrame+0x8c>
        destination_node_id != canardGetLocalNodeID(ins))
 80007f8:	68f8      	ldr	r0, [r7, #12]
 80007fa:	f7ff fe01 	bl	8000400 <canardGetLocalNodeID>
 80007fe:	4603      	mov	r3, r0
 8000800:	461a      	mov	r2, r3
    if (transfer_type != CanardTransferTypeBroadcast &&
 8000802:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000806:	4293      	cmp	r3, r2
 8000808:	d002      	beq.n	8000810 <canardHandleRxFrame+0x8c>
    {
        return -CANARD_ERROR_RX_WRONG_ADDRESS;
 800080a:	f06f 030a 	mvn.w	r3, #10
 800080e:	e351      	b.n	8000eb4 <canardHandleRxFrame+0x730>
    }

    const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	0e1b      	lsrs	r3, r3, #24
 8000816:	b2db      	uxtb	r3, r3
 8000818:	f003 031f 	and.w	r3, r3, #31
 800081c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800082a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    const uint16_t data_type_id = extractDataType(frame->id);
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	f001 f893 	bl	800195e <extractDataType>
 8000838:	4603      	mov	r3, r0
 800083a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    // printf("Transfer Type: %u, Received Data ID: %u\r\n", (uint32_t)transfer_type, (uint32_t)data_type_id);
    const uint32_t transfer_descriptor =
            MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 800083e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000842:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000846:	041b      	lsls	r3, r3, #16
 8000848:	431a      	orrs	r2, r3
 800084a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800084e:	049b      	lsls	r3, r3, #18
 8000850:	431a      	orrs	r2, r3
 8000852:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000856:	065b      	lsls	r3, r3, #25
    const uint32_t transfer_descriptor =
 8000858:	4313      	orrs	r3, r2
 800085a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    const uint8_t tail_byte = frame->data[frame->data_len - 1];
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	7b1b      	ldrb	r3, [r3, #12]
 8000860:	3b01      	subs	r3, #1
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	4413      	add	r3, r2
 8000866:	791b      	ldrb	r3, [r3, #4]
 8000868:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        // printf("IS END\r\n");
    } else {
        // printf("NOT END\r\n");
    }

    uint64_t data_type_signature = 0;
 800086c:	f04f 0200 	mov.w	r2, #0
 8000870:	f04f 0300 	mov.w	r3, #0
 8000874:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    CanardRxState* rx_state = NULL;
 8000878:	2300      	movs	r3, #0
 800087a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if (IS_START_OF_TRANSFER(tail_byte))
 800087c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000880:	09db      	lsrs	r3, r3, #7
 8000882:	b2db      	uxtb	r3, r3
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	2b00      	cmp	r3, #0
 800088a:	d01e      	beq.n	80008ca <canardHandleRxFrame+0x146>
    {

        if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id))
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	685e      	ldr	r6, [r3, #4]
 8000890:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 8000894:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000898:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800089c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	4603      	mov	r3, r0
 80008a4:	68f8      	ldr	r0, [r7, #12]
 80008a6:	47b0      	blx	r6
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d00a      	beq.n	80008c4 <canardHandleRxFrame+0x140>
        {
            rx_state = traverseRxStates(ins, transfer_descriptor);
 80008ae:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80008b0:	68f8      	ldr	r0, [r7, #12]
 80008b2:	f001 f898 	bl	80019e6 <traverseRxStates>
 80008b6:	66f8      	str	r0, [r7, #108]	@ 0x6c

            if(rx_state == NULL)
 80008b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d110      	bne.n	80008e0 <canardHandleRxFrame+0x15c>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 80008be:	f06f 0302 	mvn.w	r3, #2
 80008c2:	e2f7      	b.n	8000eb4 <canardHandleRxFrame+0x730>
            }
        }
        else
        {
            return -CANARD_ERROR_RX_NOT_WANTED;
 80008c4:	f06f 030b 	mvn.w	r3, #11
 80008c8:	e2f4      	b.n	8000eb4 <canardHandleRxFrame+0x730>
        }
    }
    else
    {
        rx_state = findRxState(ins, transfer_descriptor);
 80008ca:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80008cc:	68f8      	ldr	r0, [r7, #12]
 80008ce:	f001 f8b9 	bl	8001a44 <findRxState>
 80008d2:	66f8      	str	r0, [r7, #108]	@ 0x6c

        if (rx_state == NULL)
 80008d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d102      	bne.n	80008e0 <canardHandleRxFrame+0x15c>
        {
            return -CANARD_ERROR_RX_MISSED_START;
 80008da:	f06f 030c 	mvn.w	r3, #12
 80008de:	e2e9      	b.n	8000eb4 <canardHandleRxFrame+0x730>
    }

    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above

    // Resolving the state flags:
    const bool not_initialized = rx_state->timestamp_usec == 0;
 80008e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	bf0c      	ite	eq
 80008ec:	2301      	moveq	r3, #1
 80008ee:	2300      	movne	r3, #0
 80008f0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 80008f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80008fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80008fe:	ebb0 0802 	subs.w	r8, r0, r2
 8000902:	eb61 0903 	sbc.w	r9, r1, r3
 8000906:	4ba9      	ldr	r3, [pc, #676]	@ (8000bac <canardHandleRxFrame+0x428>)
 8000908:	4598      	cmp	r8, r3
 800090a:	f179 0300 	sbcs.w	r3, r9, #0
 800090e:	bf2c      	ite	cs
 8000910:	2301      	movcs	r3, #1
 8000912:	2300      	movcc	r3, #0
 8000914:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    const bool same_iface = frame->iface_id == rx_state->iface_id;
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	7b5a      	ldrb	r2, [r3, #13]
 800091c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800091e:	7e9b      	ldrb	r3, [r3, #26]
 8000920:	429a      	cmp	r2, r3
 8000922:	bf0c      	ite	eq
 8000924:	2301      	moveq	r3, #1
 8000926:	2300      	movne	r3, #0
 8000928:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 800092c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000930:	09db      	lsrs	r3, r3, #7
 8000932:	b2db      	uxtb	r3, r3
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	2b00      	cmp	r3, #0
 800093a:	bf14      	ite	ne
 800093c:	2301      	movne	r3, #1
 800093e:	2300      	moveq	r3, #0
 8000940:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    const bool not_previous_tid =
        computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 8000944:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000946:	7ddb      	ldrb	r3, [r3, #23]
 8000948:	f3c3 0384 	ubfx	r3, r3, #2, #5
 800094c:	b2db      	uxtb	r3, r3
 800094e:	461a      	mov	r2, r3
 8000950:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000954:	f003 031f 	and.w	r3, r3, #31
 8000958:	b2db      	uxtb	r3, r3
 800095a:	4619      	mov	r1, r3
 800095c:	4610      	mov	r0, r2
 800095e:	f000 fd83 	bl	8001468 <computeTransferIDForwardDistance>
 8000962:	4603      	mov	r3, r0
    const bool not_previous_tid =
 8000964:	2b01      	cmp	r3, #1
 8000966:	bfcc      	ite	gt
 8000968:	2301      	movgt	r3, #1
 800096a:	2300      	movle	r3, #0
 800096c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    const bool iface_switch_allowed = (timestamp_usec - rx_state->timestamp_usec) > IFACE_SWITCH_DELAY_USEC;
 8000970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000972:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000976:	e9d7 0100 	ldrd	r0, r1, [r7]
 800097a:	1a84      	subs	r4, r0, r2
 800097c:	eb61 0503 	sbc.w	r5, r1, r3
 8000980:	4b8b      	ldr	r3, [pc, #556]	@ (8000bb0 <canardHandleRxFrame+0x42c>)
 8000982:	429c      	cmp	r4, r3
 8000984:	f175 0300 	sbcs.w	r3, r5, #0
 8000988:	bf2c      	ite	cs
 800098a:	2301      	movcs	r3, #1
 800098c:	2300      	movcc	r3, #0
 800098e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    const bool non_wrapped_tid = computeTransferIDForwardDistance(TRANSFER_ID_FROM_TAIL_BYTE(tail_byte), (uint8_t) rx_state->transfer_id) < (1 << (TRANSFER_ID_BIT_LEN-1));
 8000992:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000996:	f003 031f 	and.w	r3, r3, #31
 800099a:	b2da      	uxtb	r2, r3
 800099c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800099e:	7ddb      	ldrb	r3, [r3, #23]
 80009a0:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4619      	mov	r1, r3
 80009a8:	4610      	mov	r0, r2
 80009aa:	f000 fd5d 	bl	8001468 <computeTransferIDForwardDistance>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b0f      	cmp	r3, #15
 80009b2:	bfd4      	ite	le
 80009b4:	2301      	movle	r3, #1
 80009b6:	2300      	movgt	r3, #0
 80009b8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    const bool incomplete_frame = rx_state->buffer_blocks != CANARD_BUFFER_IDX_NONE;
 80009bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	bf14      	ite	ne
 80009c4:	2301      	movne	r3, #1
 80009c6:	2300      	moveq	r3, #0
 80009c8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    const bool need_restart =
            (not_initialized) ||
            (tid_timed_out) ||
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 80009cc:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d11f      	bne.n	8000a14 <canardHandleRxFrame+0x290>
            (not_initialized) ||
 80009d4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d11b      	bne.n	8000a14 <canardHandleRxFrame+0x290>
            (tid_timed_out) ||
 80009dc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d00b      	beq.n	80009fc <canardHandleRxFrame+0x278>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 80009e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d007      	beq.n	80009fc <canardHandleRxFrame+0x278>
 80009ec:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d10f      	bne.n	8000a14 <canardHandleRxFrame+0x290>
 80009f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d10b      	bne.n	8000a14 <canardHandleRxFrame+0x290>
 80009fc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d009      	beq.n	8000a18 <canardHandleRxFrame+0x294>
            (iface_switch_allowed && first_frame && non_wrapped_tid);
 8000a04:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d005      	beq.n	8000a18 <canardHandleRxFrame+0x294>
 8000a0c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <canardHandleRxFrame+0x294>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8000a14:	2301      	movs	r3, #1
 8000a16:	e000      	b.n	8000a1a <canardHandleRxFrame+0x296>
 8000a18:	2300      	movs	r3, #0
    const bool need_restart =
 8000a1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8000a1e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

    if (need_restart)
 8000a2a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d02f      	beq.n	8000a92 <canardHandleRxFrame+0x30e>
    {
        rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 8000a32:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000a36:	f003 031f 	and.w	r3, r3, #31
 8000a3a:	b2d9      	uxtb	r1, r3
 8000a3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000a3e:	7dd3      	ldrb	r3, [r2, #23]
 8000a40:	f361 0386 	bfi	r3, r1, #2, #5
 8000a44:	75d3      	strb	r3, [r2, #23]
        rx_state->next_toggle = 0;
 8000a46:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000a48:	7dd3      	ldrb	r3, [r2, #23]
 8000a4a:	f36f 13c7 	bfc	r3, #7, #1
 8000a4e:	75d3      	strb	r3, [r2, #23]
        releaseStatePayload(ins, rx_state);
 8000a50:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f001 f860 	bl	8001b18 <releaseStatePayload>
        rx_state->iface_id = frame->iface_id;
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	7b5a      	ldrb	r2, [r3, #13]
 8000a5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a5e:	769a      	strb	r2, [r3, #26]
        if (!IS_START_OF_TRANSFER(tail_byte))
 8000a60:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000a64:	09db      	lsrs	r3, r3, #7
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d110      	bne.n	8000a92 <canardHandleRxFrame+0x30e>
        {
            rx_state->transfer_id++;
 8000a70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a72:	7ddb      	ldrb	r3, [r3, #23]
 8000a74:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	f003 031f 	and.w	r3, r3, #31
 8000a80:	b2d9      	uxtb	r1, r3
 8000a82:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000a84:	7dd3      	ldrb	r3, [r2, #23]
 8000a86:	f361 0386 	bfi	r3, r1, #2, #5
 8000a8a:	75d3      	strb	r3, [r2, #23]
            return -CANARD_ERROR_RX_MISSED_START;
 8000a8c:	f06f 030c 	mvn.w	r3, #12
 8000a90:	e210      	b.n	8000eb4 <canardHandleRxFrame+0x730>
        }
    }

    if (frame->iface_id != rx_state->iface_id)
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	7b5a      	ldrb	r2, [r3, #13]
 8000a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a98:	7e9b      	ldrb	r3, [r3, #26]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d001      	beq.n	8000aa2 <canardHandleRxFrame+0x31e>
    {
        // drop frame if coming from unexpected interface
        return CANARD_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e208      	b.n	8000eb4 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 8000aa2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000aa6:	09db      	lsrs	r3, r3, #7
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d041      	beq.n	8000b36 <canardHandleRxFrame+0x3b2>
 8000ab2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000ab6:	099b      	lsrs	r3, r3, #6
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d039      	beq.n	8000b36 <canardHandleRxFrame+0x3b2>
    {
        rx_state->timestamp_usec = timestamp_usec;
 8000ac2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ac8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        CanardRxTransfer rx_transfer = {
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	2220      	movs	r2, #32
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f006 fccf 	bl	8007478 <memset>
 8000ada:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ade:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = frame->data,
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	3304      	adds	r3, #4
        CanardRxTransfer rx_transfer = {
 8000ae6:	61bb      	str	r3, [r7, #24]
            .payload_len = (uint8_t)(frame->data_len - 1U),
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	7b1b      	ldrb	r3, [r3, #12]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8000af0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000af2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000af6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000af8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000afc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8000b00:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000b04:	f003 031f 	and.w	r3, r3, #31
 8000b08:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8000b0a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8000b0e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000b12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000b16:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        ins->on_reception(ins, &rx_transfer);
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	f107 0210 	add.w	r2, r7, #16
 8000b26:	4611      	mov	r1, r2
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	4798      	blx	r3

        prepareForNextTransfer(rx_state);
 8000b2c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000b2e:	f000 fef4 	bl	800191a <prepareForNextTransfer>
        return CANARD_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e1be      	b.n	8000eb4 <canardHandleRxFrame+0x730>
    }

    if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 8000b36:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000b3a:	095b      	lsrs	r3, r3, #5
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	bf14      	ite	ne
 8000b46:	2301      	movne	r3, #1
 8000b48:	2300      	moveq	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b50:	7ddb      	ldrb	r3, [r3, #23]
 8000b52:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d002      	beq.n	8000b62 <canardHandleRxFrame+0x3de>
    {
        return -CANARD_ERROR_RX_WRONG_TOGGLE;
 8000b5c:	f06f 030d 	mvn.w	r3, #13
 8000b60:	e1a8      	b.n	8000eb4 <canardHandleRxFrame+0x730>
    }

    if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 8000b62:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000b66:	f003 031f 	and.w	r3, r3, #31
 8000b6a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000b6c:	7dd2      	ldrb	r2, [r2, #23]
 8000b6e:	f3c2 0284 	ubfx	r2, r2, #2, #5
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d002      	beq.n	8000b7e <canardHandleRxFrame+0x3fa>
    {
        return -CANARD_ERROR_RX_UNEXPECTED_TID;
 8000b78:	f06f 030e 	mvn.w	r3, #14
 8000b7c:	e19a      	b.n	8000eb4 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 8000b7e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000b82:	09db      	lsrs	r3, r3, #7
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d060      	beq.n	8000c50 <canardHandleRxFrame+0x4cc>
 8000b8e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000b92:	099b      	lsrs	r3, r3, #6
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d158      	bne.n	8000c50 <canardHandleRxFrame+0x4cc>
    {
        if (frame->data_len <= 3)
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	7b1b      	ldrb	r3, [r3, #12]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d806      	bhi.n	8000bb4 <canardHandleRxFrame+0x430>
        {
            return -CANARD_ERROR_RX_SHORT_FRAME;
 8000ba6:	f06f 030f 	mvn.w	r3, #15
 8000baa:	e183      	b.n	8000eb4 <canardHandleRxFrame+0x730>
 8000bac:	001e8481 	.word	0x001e8481
 8000bb0:	000f4241 	.word	0x000f4241
        }

        // take off the crc and store the payload
        rx_state->timestamp_usec = timestamp_usec;
 8000bb4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000bb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bba:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rx_state->payload_len = 0;
 8000bbe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000bc0:	8ad3      	ldrh	r3, [r2, #22]
 8000bc2:	f36f 0309 	bfc	r3, #0, #10
 8000bc6:	82d3      	strh	r3, [r2, #22]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f103 000c 	add.w	r0, r3, #12
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	1c9a      	adds	r2, r3, #2
                                                 (uint8_t) (frame->data_len - 3));
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8000bd8:	3b03      	subs	r3, #3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000bde:	f000 ffcf 	bl	8001b80 <bufferBlockPushBytes>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if (ret < 0)
 8000be8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	da09      	bge.n	8000c04 <canardHandleRxFrame+0x480>
        {
            releaseStatePayload(ins, rx_state);
 8000bf0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000bf2:	68f8      	ldr	r0, [r7, #12]
 8000bf4:	f000 ff90 	bl	8001b18 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 8000bf8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000bfa:	f000 fe8e 	bl	800191a <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8000bfe:	f06f 0302 	mvn.w	r3, #2
 8000c02:	e157      	b.n	8000eb4 <canardHandleRxFrame+0x730>
        }
        rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	791b      	ldrb	r3, [r3, #4]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	795b      	ldrb	r3, [r3, #5]
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4313      	orrs	r3, r2
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c18:	831a      	strh	r2, [r3, #24]
        rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 8000c1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000c1e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000c22:	f001 fa9a 	bl	800215a <crcAddSignature>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c2c:	829a      	strh	r2, [r3, #20]
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8000c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c30:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	3304      	adds	r3, #4
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8000c36:	1c99      	adds	r1, r3, #2
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	7b1b      	ldrb	r3, [r3, #12]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8000c40:	461a      	mov	r2, r3
 8000c42:	f001 fab9 	bl	80021b8 <crcAdd>
 8000c46:	4603      	mov	r3, r0
 8000c48:	461a      	mov	r2, r3
 8000c4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c4c:	829a      	strh	r2, [r3, #20]
    {
 8000c4e:	e124      	b.n	8000e9a <canardHandleRxFrame+0x716>
    }
    else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 8000c50:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000c54:	09db      	lsrs	r3, r3, #7
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d133      	bne.n	8000cc8 <canardHandleRxFrame+0x544>
 8000c60:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000c64:	099b      	lsrs	r3, r3, #6
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d12b      	bne.n	8000cc8 <canardHandleRxFrame+0x544>
    {
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f103 000c 	add.w	r0, r3, #12
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1d1a      	adds	r2, r3, #4
                                                 (uint8_t) (frame->data_len - 1));
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000c84:	f000 ff7c 	bl	8001b80 <bufferBlockPushBytes>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (ret < 0)
 8000c8c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	da09      	bge.n	8000ca8 <canardHandleRxFrame+0x524>
        {
            releaseStatePayload(ins, rx_state);
 8000c94:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000c96:	68f8      	ldr	r0, [r7, #12]
 8000c98:	f000 ff3e 	bl	8001b18 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 8000c9c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000c9e:	f000 fe3c 	bl	800191a <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8000ca2:	f06f 0302 	mvn.w	r3, #2
 8000ca6:	e105      	b.n	8000eb4 <canardHandleRxFrame+0x730>
        }
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8000ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000caa:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data, (uint8_t)(frame->data_len - 1));
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	1d19      	adds	r1, r3, #4
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	7b1b      	ldrb	r3, [r3, #12]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8000cb8:	461a      	mov	r2, r3
 8000cba:	f001 fa7d 	bl	80021b8 <crcAdd>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000cc4:	829a      	strh	r2, [r3, #20]
    {
 8000cc6:	e0e8      	b.n	8000e9a <canardHandleRxFrame+0x716>
    }
    else                                                                            // End of a multi-frame transfer
    {
        const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	7b1b      	ldrb	r3, [r3, #12]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

        uint8_t tail_offset = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

        if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 8000cd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000cda:	8adb      	ldrh	r3, [r3, #22]
 8000cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	d823      	bhi.n	8000d2e <canardHandleRxFrame+0x5aa>
        {
            // Copy the beginning of the frame into the head, point the tail pointer to the remainder
            for (size_t i = rx_state->payload_len;
 8000ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ce8:	8adb      	ldrh	r3, [r3, #22]
 8000cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	667b      	str	r3, [r7, #100]	@ 0x64
 8000cf2:	e012      	b.n	8000d1a <canardHandleRxFrame+0x596>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
                 i++, tail_offset++)
            {
                rx_state->buffer_head[i] = frame->data[tail_offset];
 8000cf4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000cf8:	68ba      	ldr	r2, [r7, #8]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	7919      	ldrb	r1, [r3, #4]
 8000cfe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000d00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d02:	4413      	add	r3, r2
 8000d04:	331b      	adds	r3, #27
 8000d06:	460a      	mov	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
                 i++, tail_offset++)
 8000d0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8000d10:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000d14:	3301      	adds	r3, #1
 8000d16:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 8000d1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d848      	bhi.n	8000db2 <canardHandleRxFrame+0x62e>
 8000d20:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000d24:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d3e3      	bcc.n	8000cf4 <canardHandleRxFrame+0x570>
 8000d2c:	e041      	b.n	8000db2 <canardHandleRxFrame+0x62e>
            }
        }
        else
        {
            // Like above, except that the beginning goes into the last block of the storage
            CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f103 020c 	add.w	r2, r3, #12
 8000d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	f7ff fc1e 	bl	800057c <canardBufferFromIdx>
 8000d40:	6638      	str	r0, [r7, #96]	@ 0x60
            if (block != NULL)
 8000d42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d034      	beq.n	8000db2 <canardHandleRxFrame+0x62e>
            {
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 8000d48:	2305      	movs	r3, #5
 8000d4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 8000d4c:	e005      	b.n	8000d5a <canardHandleRxFrame+0x5d6>
                {
                    block = block->next;
 8000d4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	663b      	str	r3, [r7, #96]	@ 0x60
                    offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 8000d54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d56:	331c      	adds	r3, #28
 8000d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 8000d5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f5      	bne.n	8000d4e <canardHandleRxFrame+0x5ca>
                }
                CANARD_ASSERT(block != NULL);

                const size_t offset_within_block = rx_state->payload_len - offset;
 8000d62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d64:	8adb      	ldrh	r3, [r3, #22]
 8000d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	63bb      	str	r3, [r7, #56]	@ 0x38
                CANARD_ASSERT(offset_within_block <= CANARD_BUFFER_BLOCK_DATA_SIZE);

                for (size_t i = offset_within_block;
 8000d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000d78:	e012      	b.n	8000da0 <canardHandleRxFrame+0x61c>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
                     i++, tail_offset++)
                {
                    block->data[i] = frame->data[tail_offset];
 8000d7a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	4413      	add	r3, r2
 8000d82:	7919      	ldrb	r1, [r3, #4]
 8000d84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d88:	4413      	add	r3, r2
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	460a      	mov	r2, r1
 8000d8e:	701a      	strb	r2, [r3, #0]
                     i++, tail_offset++)
 8000d90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d92:	3301      	adds	r3, #1
 8000d94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000d96:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 8000da0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000da2:	2b1b      	cmp	r3, #27
 8000da4:	d805      	bhi.n	8000db2 <canardHandleRxFrame+0x62e>
 8000da6:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000daa:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3e3      	bcc.n	8000d7a <canardHandleRxFrame+0x5f6>
                }
            }
        }

        CanardRxTransfer rx_transfer = {
 8000db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000db6:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = rx_state->buffer_head,
 8000dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000dbc:	331b      	adds	r3, #27
        CanardRxTransfer rx_transfer = {
 8000dbe:	61bb      	str	r3, [r7, #24]
            .payload_middle = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks),
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f103 020c 	add.w	r2, r3, #12
 8000dc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4610      	mov	r0, r2
 8000dce:	f7ff fbd5 	bl	800057c <canardBufferFromIdx>
 8000dd2:	4603      	mov	r3, r0
        CanardRxTransfer rx_transfer = {
 8000dd4:	61fb      	str	r3, [r7, #28]
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 8000dd6:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8000dda:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d205      	bcs.n	8000dee <canardHandleRxFrame+0x66a>
 8000de2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	4413      	add	r3, r2
 8000dea:	3304      	adds	r3, #4
 8000dec:	e000      	b.n	8000df0 <canardHandleRxFrame+0x66c>
 8000dee:	2300      	movs	r3, #0
        CanardRxTransfer rx_transfer = {
 8000df0:	623b      	str	r3, [r7, #32]
            .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 8000df2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000df4:	8adb      	ldrh	r3, [r3, #22]
 8000df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	4413      	add	r3, r2
 8000e06:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 8000e08:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e0a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000e0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000e14:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8000e18:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000e1c:	f003 031f 	and.w	r3, r3, #31
 8000e20:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8000e22:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8000e26:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000e2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8000e2e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        rx_state->buffer_blocks = CANARD_BUFFER_IDX_NONE;     // Block list ownership has been transferred to rx_transfer!
 8000e36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e38:	2200      	movs	r2, #0
 8000e3a:	605a      	str	r2, [r3, #4]

        // CRC validation
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 8000e3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e3e:	8a98      	ldrh	r0, [r3, #20]
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	1d19      	adds	r1, r3, #4
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	7b1b      	ldrb	r3, [r3, #12]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f001 f9b4 	bl	80021b8 <crcAdd>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e56:	829a      	strh	r2, [r3, #20]
        if (rx_state->calculated_crc == rx_state->payload_crc)
 8000e58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e5a:	8a9a      	ldrh	r2, [r3, #20]
 8000e5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e5e:	8b1b      	ldrh	r3, [r3, #24]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d106      	bne.n	8000e72 <canardHandleRxFrame+0x6ee>
        {
            ins->on_reception(ins, &rx_transfer);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f107 0210 	add.w	r2, r7, #16
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	4798      	blx	r3
        }

        // Making sure the payload is released even if the application didn't bother with it
        canardReleaseRxTransferPayload(ins, &rx_transfer);
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4619      	mov	r1, r3
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f000 fa93 	bl	80013a4 <canardReleaseRxTransferPayload>
        prepareForNextTransfer(rx_state);
 8000e7e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000e80:	f000 fd4b 	bl	800191a <prepareForNextTransfer>

        if (rx_state->calculated_crc == rx_state->payload_crc)
 8000e84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e86:	8a9a      	ldrh	r2, [r3, #20]
 8000e88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e8a:	8b1b      	ldrh	r3, [r3, #24]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d101      	bne.n	8000e94 <canardHandleRxFrame+0x710>
        {
            return CANARD_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	e00f      	b.n	8000eb4 <canardHandleRxFrame+0x730>
        }
        else
        {
            return -CANARD_ERROR_RX_BAD_CRC;
 8000e94:	f06f 0310 	mvn.w	r3, #16
 8000e98:	e00c      	b.n	8000eb4 <canardHandleRxFrame+0x730>
        }
    }

    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 8000e9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e9c:	7ddb      	ldrb	r3, [r3, #23]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	09db      	lsrs	r3, r3, #7
 8000ea6:	b2d9      	uxtb	r1, r3
 8000ea8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000eaa:	7dd3      	ldrb	r3, [r2, #23]
 8000eac:	f361 13c7 	bfi	r3, r1, #7, #1
 8000eb0:	75d3      	strb	r3, [r2, #23]
    return CANARD_OK;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3774      	adds	r7, #116	@ 0x74
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ebe:	bf00      	nop

08000ec0 <canardCleanupStaleTransfers>:

void canardCleanupStaleTransfers(CanardInstance* ins, uint64_t current_time_usec)
{
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	e9c7 2300 	strd	r2, r3, [r7]
    CanardRxState* prev = ins->rx_states, * state = ins->rx_states;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6a1b      	ldr	r3, [r3, #32]
 8000ed6:	613b      	str	r3, [r7, #16]

    while (state != NULL)
 8000ed8:	e053      	b.n	8000f82 <canardCleanupStaleTransfers+0xc2>
    {
        if ((current_time_usec - state->timestamp_usec) > TRANSFER_TIMEOUT_USEC)
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ee0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ee4:	1a84      	subs	r4, r0, r2
 8000ee6:	eb61 0503 	sbc.w	r5, r1, r3
 8000eea:	4b2a      	ldr	r3, [pc, #168]	@ (8000f94 <canardCleanupStaleTransfers+0xd4>)
 8000eec:	429c      	cmp	r4, r3
 8000eee:	f175 0300 	sbcs.w	r3, r5, #0
 8000ef2:	d33a      	bcc.n	8000f6a <canardCleanupStaleTransfers+0xaa>
        {
            if (state == ins->rx_states)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d11c      	bne.n	8000f38 <canardCleanupStaleTransfers+0x78>
            {
                releaseStatePayload(ins, state);
 8000efe:	6939      	ldr	r1, [r7, #16]
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f000 fe09 	bl	8001b18 <releaseStatePayload>
                ins->rx_states = canardRxFromIdx(&ins->allocator, ins->rx_states->next);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f103 020c 	add.w	r2, r3, #12
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4619      	mov	r1, r3
 8000f14:	4610      	mov	r0, r2
 8000f16:	f7ff fb49 	bl	80005ac <canardRxFromIdx>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	621a      	str	r2, [r3, #32]
                freeBlock(&ins->allocator, state);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	330c      	adds	r3, #12
 8000f24:	6939      	ldr	r1, [r7, #16]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 f9c3 	bl	80022b2 <freeBlock>
                state = ins->rx_states;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	613b      	str	r3, [r7, #16]
                prev = state;
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e024      	b.n	8000f82 <canardCleanupStaleTransfers+0xc2>
            }
            else
            {
                releaseStatePayload(ins, state);
 8000f38:	6939      	ldr	r1, [r7, #16]
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f000 fdec 	bl	8001b18 <releaseStatePayload>
                prev->next = state->next;
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	601a      	str	r2, [r3, #0]
                freeBlock(&ins->allocator, state);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	330c      	adds	r3, #12
 8000f4c:	6939      	ldr	r1, [r7, #16]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 f9af 	bl	80022b2 <freeBlock>
                state = canardRxFromIdx(&ins->allocator, prev->next);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f103 020c 	add.w	r2, r3, #12
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4610      	mov	r0, r2
 8000f62:	f7ff fb23 	bl	80005ac <canardRxFromIdx>
 8000f66:	6138      	str	r0, [r7, #16]
 8000f68:	e00b      	b.n	8000f82 <canardCleanupStaleTransfers+0xc2>
            }
        }
        else
        {
            prev = state;
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	617b      	str	r3, [r7, #20]
            state = canardRxFromIdx(&ins->allocator, state->next);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f103 020c 	add.w	r2, r3, #12
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	f7ff fb16 	bl	80005ac <canardRxFromIdx>
 8000f80:	6138      	str	r0, [r7, #16]
    while (state != NULL)
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1a8      	bne.n	8000eda <canardCleanupStaleTransfers+0x1a>
            prev_item = item;
            item = item->next;
        }
    }
#endif
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bdb0      	pop	{r4, r5, r7, pc}
 8000f92:	bf00      	nop
 8000f94:	001e8481 	.word	0x001e8481

08000f98 <canardDecodeScalar>:
int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                           uint32_t bit_offset,
                           uint8_t bit_length,
                           bool value_is_signed,
                           void* out_value)
{
 8000f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f9c:	b08d      	sub	sp, #52	@ 0x34
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	61f8      	str	r0, [r7, #28]
 8000fa2:	61b9      	str	r1, [r7, #24]
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	460b      	mov	r3, r1
 8000faa:	75fb      	strb	r3, [r7, #23]
 8000fac:	4613      	mov	r3, r2
 8000fae:	75bb      	strb	r3, [r7, #22]
    if (transfer == NULL || out_value == NULL)
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <canardDecodeScalar+0x24>
 8000fb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <canardDecodeScalar+0x2a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000fbc:	f06f 0301 	mvn.w	r3, #1
 8000fc0:	e16e      	b.n	80012a0 <canardDecodeScalar+0x308>
    }

    if (bit_length < 1 || bit_length > 64)
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <canardDecodeScalar+0x36>
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
 8000fca:	2b40      	cmp	r3, #64	@ 0x40
 8000fcc:	d902      	bls.n	8000fd4 <canardDecodeScalar+0x3c>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000fce:	f06f 0301 	mvn.w	r3, #1
 8000fd2:	e165      	b.n	80012a0 <canardDecodeScalar+0x308>
    }

    if (bit_length == 1 && value_is_signed)
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d105      	bne.n	8000fe6 <canardDecodeScalar+0x4e>
 8000fda:	7dbb      	ldrb	r3, [r7, #22]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <canardDecodeScalar+0x4e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000fe0:	f06f 0301 	mvn.w	r3, #1
 8000fe4:	e15c      	b.n	80012a0 <canardDecodeScalar+0x308>
        uint64_t u64;
        int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));   // This is important
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	2208      	movs	r2, #8
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f006 fa42 	bl	8007478 <memset>

    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 8000ff4:	f107 0320 	add.w	r3, r7, #32
 8000ff8:	7dfa      	ldrb	r2, [r7, #23]
 8000ffa:	69b9      	ldr	r1, [r7, #24]
 8000ffc:	69f8      	ldr	r0, [r7, #28]
 8000ffe:	f000 ff47 	bl	8001e90 <descatterTransferPayload>
 8001002:	4603      	mov	r3, r0
 8001004:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (result <= 0)
 8001006:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800100a:	2b00      	cmp	r3, #0
 800100c:	dc02      	bgt.n	8001014 <canardDecodeScalar+0x7c>
    {
        return result;
 800100e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001012:	e145      	b.n	80012a0 <canardDecodeScalar+0x308>
     * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
     * Extra most significant bits will be filled with zeroes, which is fine.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8001014:	7dfb      	ldrb	r3, [r7, #23]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d018      	beq.n	8001052 <canardDecodeScalar+0xba>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	08db      	lsrs	r3, r3, #3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	3320      	adds	r3, #32
 8001028:	f107 0210 	add.w	r2, r7, #16
 800102c:	4413      	add	r3, r2
 800102e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001032:	461a      	mov	r2, r3
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	425b      	negs	r3, r3
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	411a      	asrs	r2, r3
 800103e:	7dfb      	ldrb	r3, [r7, #23]
 8001040:	08db      	lsrs	r3, r3, #3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	3320      	adds	r3, #32
 8001048:	f107 0110 	add.w	r1, r7, #16
 800104c:	440b      	add	r3, r1
 800104e:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
     */
    uint8_t std_byte_length = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d103      	bne.n	8001066 <canardDecodeScalar+0xce>
 800105e:	2301      	movs	r3, #1
 8001060:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001064:	e01e      	b.n	80010a4 <canardDecodeScalar+0x10c>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 8001066:	7dfb      	ldrb	r3, [r7, #23]
 8001068:	2b08      	cmp	r3, #8
 800106a:	d803      	bhi.n	8001074 <canardDecodeScalar+0xdc>
 800106c:	2301      	movs	r3, #1
 800106e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001072:	e017      	b.n	80010a4 <canardDecodeScalar+0x10c>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	2b10      	cmp	r3, #16
 8001078:	d803      	bhi.n	8001082 <canardDecodeScalar+0xea>
 800107a:	2302      	movs	r3, #2
 800107c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001080:	e010      	b.n	80010a4 <canardDecodeScalar+0x10c>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	2b20      	cmp	r3, #32
 8001086:	d803      	bhi.n	8001090 <canardDecodeScalar+0xf8>
 8001088:	2304      	movs	r3, #4
 800108a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800108e:	e009      	b.n	80010a4 <canardDecodeScalar+0x10c>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	2b40      	cmp	r3, #64	@ 0x40
 8001094:	d803      	bhi.n	800109e <canardDecodeScalar+0x106>
 8001096:	2308      	movs	r3, #8
 8001098:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800109c:	e002      	b.n	80010a4 <canardDecodeScalar+0x10c>
    else
    {
        CANARD_ASSERT(false);
        return -CANARD_ERROR_INTERNAL;
 800109e:	f06f 0308 	mvn.w	r3, #8
 80010a2:	e0fd      	b.n	80012a0 <canardDecodeScalar+0x308>
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

    /*
     * Flipping the byte order if needed.
     */
    if (isBigEndian())
 80010a4:	f000 ffe9 	bl	800207a <isBigEndian>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d007      	beq.n	80010be <canardDecodeScalar+0x126>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 80010ae:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 ffef 	bl	800209c <swapByteOrder>

    /*
     * Extending the sign bit if needed. I miss templates.
     * Note that we operate on unsigned values in order to avoid undefined behaviors.
     */
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 80010be:	7dbb      	ldrb	r3, [r7, #22]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 809b 	beq.w	80011fc <canardDecodeScalar+0x264>
 80010c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010ca:	00da      	lsls	r2, r3, #3
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	f000 8094 	beq.w	80011fc <canardDecodeScalar+0x264>
    {
        if (bit_length <= 8)
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d819      	bhi.n	800110e <canardDecodeScalar+0x176>
        {
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 80010da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010de:	461a      	mov	r2, r3
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 8085 	beq.w	80011fc <canardDecodeScalar+0x264>
            {
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 80010f2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010f6:	7dfb      	ldrb	r3, [r7, #23]
 80010f8:	2101      	movs	r1, #1
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	425b      	negs	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f887 3020 	strb.w	r3, [r7, #32]
 800110c:	e076      	b.n	80011fc <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 16)
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	2b10      	cmp	r3, #16
 8001112:	d815      	bhi.n	8001140 <canardDecodeScalar+0x1a8>
        {
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 8001114:	8c3b      	ldrh	r3, [r7, #32]
 8001116:	461a      	mov	r2, r3
 8001118:	7dfb      	ldrb	r3, [r7, #23]
 800111a:	3b01      	subs	r3, #1
 800111c:	fa22 f303 	lsr.w	r3, r2, r3
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d069      	beq.n	80011fc <canardDecodeScalar+0x264>
            {
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 8001128:	8c3a      	ldrh	r2, [r7, #32]
 800112a:	7dfb      	ldrb	r3, [r7, #23]
 800112c:	2101      	movs	r1, #1
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	b29b      	uxth	r3, r3
 8001134:	425b      	negs	r3, r3
 8001136:	b29b      	uxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b29b      	uxth	r3, r3
 800113c:	843b      	strh	r3, [r7, #32]
 800113e:	e05d      	b.n	80011fc <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 32)
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	2b20      	cmp	r3, #32
 8001144:	d811      	bhi.n	800116a <canardDecodeScalar+0x1d2>
        {
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 8001146:	6a3a      	ldr	r2, [r7, #32]
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	3b01      	subs	r3, #1
 800114c:	fa22 f303 	lsr.w	r3, r2, r3
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b00      	cmp	r3, #0
 8001156:	d051      	beq.n	80011fc <canardDecodeScalar+0x264>
            {
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 8001158:	6a3a      	ldr	r2, [r7, #32]
 800115a:	7dfb      	ldrb	r3, [r7, #23]
 800115c:	2101      	movs	r1, #1
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	425b      	negs	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	623b      	str	r3, [r7, #32]
 8001168:	e048      	b.n	80011fc <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length < 64)   // Strictly less, this is not a typo
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	2b3f      	cmp	r3, #63	@ 0x3f
 800116e:	d842      	bhi.n	80011f6 <canardDecodeScalar+0x25e>
        {
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 8001170:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001174:	7df9      	ldrb	r1, [r7, #23]
 8001176:	1e48      	subs	r0, r1, #1
 8001178:	f1c0 0620 	rsb	r6, r0, #32
 800117c:	f1a0 0120 	sub.w	r1, r0, #32
 8001180:	fa22 f400 	lsr.w	r4, r2, r0
 8001184:	fa03 f606 	lsl.w	r6, r3, r6
 8001188:	4334      	orrs	r4, r6
 800118a:	fa23 f101 	lsr.w	r1, r3, r1
 800118e:	430c      	orrs	r4, r1
 8001190:	fa23 f500 	lsr.w	r5, r3, r0
 8001194:	f004 0301 	and.w	r3, r4, #1
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80011a2:	460b      	mov	r3, r1
 80011a4:	4313      	orrs	r3, r2
 80011a6:	d029      	beq.n	80011fc <canardDecodeScalar+0x264>
            {
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 80011a8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80011ac:	7df9      	ldrb	r1, [r7, #23]
 80011ae:	f04f 0201 	mov.w	r2, #1
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	f1a1 0620 	sub.w	r6, r1, #32
 80011ba:	f1c1 0020 	rsb	r0, r1, #32
 80011be:	fa03 f901 	lsl.w	r9, r3, r1
 80011c2:	fa02 f606 	lsl.w	r6, r2, r6
 80011c6:	ea49 0906 	orr.w	r9, r9, r6
 80011ca:	fa22 f000 	lsr.w	r0, r2, r0
 80011ce:	ea49 0900 	orr.w	r9, r9, r0
 80011d2:	fa02 f801 	lsl.w	r8, r2, r1
 80011d6:	2300      	movs	r3, #0
 80011d8:	f1d8 0a00 	rsbs	sl, r8, #0
 80011dc:	eb63 0b09 	sbc.w	fp, r3, r9
 80011e0:	ea44 030a 	orr.w	r3, r4, sl
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	ea45 030b 	orr.w	r3, r5, fp
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	e9d7 3400 	ldrd	r3, r4, [r7]
 80011f0:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80011f4:	e002      	b.n	80011fc <canardDecodeScalar+0x264>
            }
        }
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 80011f6:	f06f 0308 	mvn.w	r3, #8
 80011fa:	e051      	b.n	80012a0 <canardDecodeScalar+0x308>
    }

    /*
     * Copying the result out.
     */
    if (value_is_signed)
 80011fc:	7dbb      	ldrb	r3, [r7, #22]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d022      	beq.n	8001248 <canardDecodeScalar+0x2b0>
    {
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	2b08      	cmp	r3, #8
 8001206:	d804      	bhi.n	8001212 <canardDecodeScalar+0x27a>
 8001208:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800120c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	e044      	b.n	800129c <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	2b10      	cmp	r3, #16
 8001216:	d804      	bhi.n	8001222 <canardDecodeScalar+0x28a>
 8001218:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800121c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800121e:	801a      	strh	r2, [r3, #0]
 8001220:	e03c      	b.n	800129c <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	2b20      	cmp	r3, #32
 8001226:	d803      	bhi.n	8001230 <canardDecodeScalar+0x298>
 8001228:	6a3a      	ldr	r2, [r7, #32]
 800122a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	e035      	b.n	800129c <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	2b40      	cmp	r3, #64	@ 0x40
 8001234:	d805      	bhi.n	8001242 <canardDecodeScalar+0x2aa>
 8001236:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800123a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800123c:	e9c1 2300 	strd	r2, r3, [r1]
 8001240:	e02c      	b.n	800129c <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8001242:	f06f 0308 	mvn.w	r3, #8
 8001246:	e02b      	b.n	80012a0 <canardDecodeScalar+0x308>
        }
    }
    else
    {
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d104      	bne.n	8001258 <canardDecodeScalar+0x2c0>
 800124e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001252:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001254:	701a      	strb	r2, [r3, #0]
 8001256:	e021      	b.n	800129c <canardDecodeScalar+0x304>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	2b08      	cmp	r3, #8
 800125c:	d804      	bhi.n	8001268 <canardDecodeScalar+0x2d0>
 800125e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001262:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001264:	701a      	strb	r2, [r3, #0]
 8001266:	e019      	b.n	800129c <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	2b10      	cmp	r3, #16
 800126c:	d803      	bhi.n	8001276 <canardDecodeScalar+0x2de>
 800126e:	8c3a      	ldrh	r2, [r7, #32]
 8001270:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001272:	801a      	strh	r2, [r3, #0]
 8001274:	e012      	b.n	800129c <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 8001276:	7dfb      	ldrb	r3, [r7, #23]
 8001278:	2b20      	cmp	r3, #32
 800127a:	d803      	bhi.n	8001284 <canardDecodeScalar+0x2ec>
 800127c:	6a3a      	ldr	r2, [r7, #32]
 800127e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	e00b      	b.n	800129c <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	2b40      	cmp	r3, #64	@ 0x40
 8001288:	d805      	bhi.n	8001296 <canardDecodeScalar+0x2fe>
 800128a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800128e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001290:	e9c1 2300 	strd	r2, r3, [r1]
 8001294:	e002      	b.n	800129c <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8001296:	f06f 0308 	mvn.w	r3, #8
 800129a:	e001      	b.n	80012a0 <canardDecodeScalar+0x308>
        }
    }

    CANARD_ASSERT(result <= bit_length);
    CANARD_ASSERT(result > 0);
    return result;
 800129c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3734      	adds	r7, #52	@ 0x34
 80012a4:	46bd      	mov	sp, r7
 80012a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080012aa <canardEncodeScalar>:

void canardEncodeScalar(void* destination,
                        uint32_t bit_offset,
                        uint8_t bit_length,
                        const void* value)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b08a      	sub	sp, #40	@ 0x28
 80012ae:	af02      	add	r7, sp, #8
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4613      	mov	r3, r2
 80012b8:	71fb      	strb	r3, [r7, #7]
     * Maybe not the best solution, but it simplifies the API.
     */
    CANARD_ASSERT(destination != NULL);
    CANARD_ASSERT(value != NULL);

    if (bit_length > 64)
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2b40      	cmp	r3, #64	@ 0x40
 80012be:	d901      	bls.n	80012c4 <canardEncodeScalar+0x1a>
    {
        CANARD_ASSERT(false);
        bit_length = 64;
 80012c0:	2340      	movs	r3, #64	@ 0x40
 80012c2:	71fb      	strb	r3, [r7, #7]
    }

    if (bit_length < 1)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <canardEncodeScalar+0x24>
    {
        CANARD_ASSERT(false);
        bit_length = 1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	71fb      	strb	r3, [r7, #7]
        uint32_t u32;
        uint64_t u64;
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	2208      	movs	r2, #8
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f006 f8ce 	bl	8007478 <memset>

    uint8_t std_byte_length = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	77fb      	strb	r3, [r7, #31]

    // Extra most significant bits can be safely ignored here.
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d105      	bne.n	80012f2 <canardEncodeScalar+0x48>
 80012e6:	2301      	movs	r3, #1
 80012e8:	77fb      	strb	r3, [r7, #31]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	743b      	strb	r3, [r7, #16]
 80012f0:	e024      	b.n	800133c <canardEncodeScalar+0x92>
    else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d805      	bhi.n	8001304 <canardEncodeScalar+0x5a>
 80012f8:	2301      	movs	r3, #1
 80012fa:	77fb      	strb	r3, [r7, #31]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	743b      	strb	r3, [r7, #16]
 8001302:	e01b      	b.n	800133c <canardEncodeScalar+0x92>
    else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2b10      	cmp	r3, #16
 8001308:	d805      	bhi.n	8001316 <canardEncodeScalar+0x6c>
 800130a:	2302      	movs	r3, #2
 800130c:	77fb      	strb	r3, [r7, #31]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	823b      	strh	r3, [r7, #16]
 8001314:	e012      	b.n	800133c <canardEncodeScalar+0x92>
    else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2b20      	cmp	r3, #32
 800131a:	d805      	bhi.n	8001328 <canardEncodeScalar+0x7e>
 800131c:	2304      	movs	r3, #4
 800131e:	77fb      	strb	r3, [r7, #31]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	e009      	b.n	800133c <canardEncodeScalar+0x92>
    else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b40      	cmp	r3, #64	@ 0x40
 800132c:	d806      	bhi.n	800133c <canardEncodeScalar+0x92>
 800132e:	2308      	movs	r3, #8
 8001330:	77fb      	strb	r3, [r7, #31]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001338:	e9c7 2304 	strd	r2, r3, [r7, #16]
            storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
        }
    }
#endif

    if (isBigEndian())
 800133c:	f000 fe9d 	bl	800207a <isBigEndian>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d006      	beq.n	8001354 <canardEncodeScalar+0xaa>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 8001346:	7ffa      	ldrb	r2, [r7, #31]
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fea4 	bl	800209c <swapByteOrder>
     * Extra least significant bits will be filled with zeroes, which is fine.
     * Extra most significant bits will be discarded here.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d014      	beq.n	800138a <canardEncodeScalar+0xe0>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	08db      	lsrs	r3, r3, #3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	3320      	adds	r3, #32
 8001368:	443b      	add	r3, r7
 800136a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800136e:	461a      	mov	r2, r3
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	425b      	negs	r3, r3
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	409a      	lsls	r2, r3
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	08db      	lsrs	r3, r3, #3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	3320      	adds	r3, #32
 8001384:	443b      	add	r3, r7
 8001386:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Now, the storage contains properly serialized scalar. Copying it out.
     */
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 800138a:	79fa      	ldrb	r2, [r7, #7]
 800138c:	f107 0010 	add.w	r0, r7, #16
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2100      	movs	r1, #0
 8001398:	f000 fd03 	bl	8001da2 <copyBitArray>
}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <canardReleaseRxTransferPayload>:

void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
    while (transfer->payload_middle != NULL)
 80013ae:	e00f      	b.n	80013d0 <canardReleaseRxTransferPayload+0x2c>
    {
        CanardBufferBlock* const temp = transfer->payload_middle->next;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	60fb      	str	r3, [r7, #12]
        freeBlock(&ins->allocator, transfer->payload_middle);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f103 020c 	add.w	r2, r3, #12
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	4619      	mov	r1, r3
 80013c4:	4610      	mov	r0, r2
 80013c6:	f000 ff74 	bl	80022b2 <freeBlock>
        transfer->payload_middle = temp;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	60da      	str	r2, [r3, #12]
    while (transfer->payload_middle != NULL)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1eb      	bne.n	80013b0 <canardReleaseRxTransferPayload+0xc>
    }

    transfer->payload_middle = NULL;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
    transfer->payload_head = NULL;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
    transfer->payload_tail = NULL;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
    transfer->payload_len = 0;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2200      	movs	r2, #0
 80013ee:	829a      	strh	r2, [r3, #20]
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <canardConvertFloat16ToNativeFloat>:

    return out;
}

float canardConvertFloat16ToNativeFloat(uint16_t value)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
    {
        uint32_t u;
        float f;
    };

    const union FP32 magic = { (254UL - 15UL) << 23U };
 8001402:	f04f 43ef 	mov.w	r3, #2004877312	@ 0x77800000
 8001406:	617b      	str	r3, [r7, #20]
    const union FP32 was_inf_nan = { (127UL + 16UL) << 23U };
 8001408:	f04f 438f 	mov.w	r3, #1199570944	@ 0x47800000
 800140c:	613b      	str	r3, [r7, #16]
    union FP32 out;

    out.u = (value & 0x7FFFU) << 13U;
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	035a      	lsls	r2, r3, #13
 8001412:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <canardConvertFloat16ToNativeFloat+0x6c>)
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
    out.f *= magic.f;
 8001418:	ed97 7a03 	vldr	s14, [r7, #12]
 800141c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001424:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.f >= was_inf_nan.f)
 8001428:	ed97 7a03 	vldr	s14, [r7, #12]
 800142c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001438:	db03      	blt.n	8001442 <canardConvertFloat16ToNativeFloat+0x4a>
    {
        out.u |= 255UL << 23U;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f043 43ff 	orr.w	r3, r3, #2139095040	@ 0x7f800000
 8001440:	60fb      	str	r3, [r7, #12]
    }
    out.u |= (value & 0x8000UL) << 16U;
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	041b      	lsls	r3, r3, #16
 8001448:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800144c:	4313      	orrs	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]

    return out.f;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	ee07 3a90 	vmov	s15, r3
}
 8001456:	eeb0 0a67 	vmov.f32	s0, s15
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	0fffe000 	.word	0x0fffe000

08001468 <computeTransferIDForwardDistance>:

/*
 * Internal (static functions)
 */
CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	460a      	mov	r2, r1
 8001472:	71fb      	strb	r3, [r7, #7]
 8001474:	4613      	mov	r3, r2
 8001476:	71bb      	strb	r3, [r7, #6]
    int16_t d = (int16_t)(a - b);
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	b29a      	uxth	r2, r3
 800147c:	79bb      	ldrb	r3, [r7, #6]
 800147e:	b29b      	uxth	r3, r3
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	b29b      	uxth	r3, r3
 8001484:	81fb      	strh	r3, [r7, #14]
    if (d < 0)
 8001486:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800148a:	2b00      	cmp	r3, #0
 800148c:	da03      	bge.n	8001496 <computeTransferIDForwardDistance+0x2e>
    {
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 800148e:	89fb      	ldrh	r3, [r7, #14]
 8001490:	3320      	adds	r3, #32
 8001492:	b29b      	uxth	r3, r3
 8001494:	81fb      	strh	r3, [r7, #14]
    }
    return d;
 8001496:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <incrementTransferID>:

CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(transfer_id != NULL);

    (*transfer_id)++;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	701a      	strb	r2, [r3, #0]
    if (*transfer_id >= 32)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b1f      	cmp	r3, #31
 80014c0:	d902      	bls.n	80014c8 <incrementTransferID+0x22>
    {
        *transfer_id = 0;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
    }
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <dlcToDataLength>:

CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
    /*
    Data Length Code      9  10  11  12  13  14  15
    Number of data bytes 12  16  20  24  32  48  64
    */
    if (dlc <= 8) {
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d801      	bhi.n	80014e8 <dlcToDataLength+0x14>
        return dlc;
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	e01e      	b.n	8001526 <dlcToDataLength+0x52>
    } else if (dlc == 9) {
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	2b09      	cmp	r3, #9
 80014ec:	d101      	bne.n	80014f2 <dlcToDataLength+0x1e>
        return 12;
 80014ee:	230c      	movs	r3, #12
 80014f0:	e019      	b.n	8001526 <dlcToDataLength+0x52>
    } else if (dlc == 10) {
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	2b0a      	cmp	r3, #10
 80014f6:	d101      	bne.n	80014fc <dlcToDataLength+0x28>
        return 16;
 80014f8:	2310      	movs	r3, #16
 80014fa:	e014      	b.n	8001526 <dlcToDataLength+0x52>
    } else if (dlc == 11) {
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	2b0b      	cmp	r3, #11
 8001500:	d101      	bne.n	8001506 <dlcToDataLength+0x32>
        return 20;
 8001502:	2314      	movs	r3, #20
 8001504:	e00f      	b.n	8001526 <dlcToDataLength+0x52>
    } else if (dlc == 12) {
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	2b0c      	cmp	r3, #12
 800150a:	d101      	bne.n	8001510 <dlcToDataLength+0x3c>
        return 24;
 800150c:	2318      	movs	r3, #24
 800150e:	e00a      	b.n	8001526 <dlcToDataLength+0x52>
    } else if (dlc == 13) {
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	2b0d      	cmp	r3, #13
 8001514:	d101      	bne.n	800151a <dlcToDataLength+0x46>
        return 32;
 8001516:	2320      	movs	r3, #32
 8001518:	e005      	b.n	8001526 <dlcToDataLength+0x52>
    } else if (dlc == 14) {
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	2b0e      	cmp	r3, #14
 800151e:	d101      	bne.n	8001524 <dlcToDataLength+0x50>
        return 48;
 8001520:	2330      	movs	r3, #48	@ 0x30
 8001522:	e000      	b.n	8001526 <dlcToDataLength+0x52>
    }
    return 64;
 8001524:	2340      	movs	r3, #64	@ 0x40
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <dataLengthToDlc>:

CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	80fb      	strh	r3, [r7, #6]
    if (data_length <= 8) {
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	2b08      	cmp	r3, #8
 8001540:	d801      	bhi.n	8001546 <dataLengthToDlc+0x14>
        return data_length;
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	e01e      	b.n	8001584 <dataLengthToDlc+0x52>
    } else if (data_length <= 12) {
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	2b0c      	cmp	r3, #12
 800154a:	d801      	bhi.n	8001550 <dataLengthToDlc+0x1e>
        return 9;
 800154c:	2309      	movs	r3, #9
 800154e:	e019      	b.n	8001584 <dataLengthToDlc+0x52>
    } else if (data_length <= 16) {
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	2b10      	cmp	r3, #16
 8001554:	d801      	bhi.n	800155a <dataLengthToDlc+0x28>
        return 10;
 8001556:	230a      	movs	r3, #10
 8001558:	e014      	b.n	8001584 <dataLengthToDlc+0x52>
    } else if (data_length <= 20) {
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	2b14      	cmp	r3, #20
 800155e:	d801      	bhi.n	8001564 <dataLengthToDlc+0x32>
        return 11;
 8001560:	230b      	movs	r3, #11
 8001562:	e00f      	b.n	8001584 <dataLengthToDlc+0x52>
    } else if (data_length <= 24) {
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	2b18      	cmp	r3, #24
 8001568:	d801      	bhi.n	800156e <dataLengthToDlc+0x3c>
        return 12;
 800156a:	230c      	movs	r3, #12
 800156c:	e00a      	b.n	8001584 <dataLengthToDlc+0x52>
    } else if (data_length <= 32) {
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	2b20      	cmp	r3, #32
 8001572:	d801      	bhi.n	8001578 <dataLengthToDlc+0x46>
        return 13;
 8001574:	230d      	movs	r3, #13
 8001576:	e005      	b.n	8001584 <dataLengthToDlc+0x52>
    } else if (data_length <= 48) {
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	2b30      	cmp	r3, #48	@ 0x30
 800157c:	d801      	bhi.n	8001582 <dataLengthToDlc+0x50>
        return 14;
 800157e:	230e      	movs	r3, #14
 8001580:	e000      	b.n	8001584 <dataLengthToDlc+0x52>
    }
    return 15;
 8001582:	230f      	movs	r3, #15
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <enqueueTxFrames>:
CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                        uint32_t can_id,
                                        uint16_t crc,
                                        CanardTxTransfer* transfer
)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	@ 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	4613      	mov	r3, r2
 800159e:	80fb      	strh	r3, [r7, #6]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

    if (transfer->inout_transfer_id == NULL)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <enqueueTxFrames+0x1e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80015a8:	f06f 0301 	mvn.w	r3, #1
 80015ac:	e0f9      	b.n	80017a2 <enqueueTxFrames+0x212>
    }

    if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	8c1b      	ldrh	r3, [r3, #32]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <enqueueTxFrames+0x34>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <enqueueTxFrames+0x34>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80015be:	f06f 0301 	mvn.w	r3, #1
 80015c2:	e0ee      	b.n	80017a2 <enqueueTxFrames+0x212>
    }

    int16_t result = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
#if CANARD_ENABLE_CANFD
    uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
#else
    uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 80015c8:	2308      	movs	r3, #8
 80015ca:	77fb      	strb	r3, [r7, #31]
#endif
    if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	8c1a      	ldrh	r2, [r3, #32]
 80015d0:	7ffb      	ldrb	r3, [r7, #31]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d24b      	bcs.n	8001670 <enqueueTxFrames+0xe0>
    {
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	330c      	adds	r3, #12
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 f929 	bl	8001834 <createTxItem>
 80015e2:	6178      	str	r0, [r7, #20]
        if (queue_item == NULL)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d102      	bne.n	80015f0 <enqueueTxFrames+0x60>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 80015ea:	f06f 0302 	mvn.w	r3, #2
 80015ee:	e0d8      	b.n	80017a2 <enqueueTxFrames+0x212>
        }

        memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	f103 0008 	add.w	r0, r3, #8
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	69d9      	ldr	r1, [r3, #28]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	8c1b      	ldrh	r3, [r3, #32]
 80015fe:	461a      	mov	r2, r3
 8001600:	f005 ffd5 	bl	80075ae <memcpy>

        transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	8c1b      	ldrh	r3, [r3, #32]
 8001608:	3301      	adds	r3, #1
 800160a:	b29b      	uxth	r3, r3
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff90 	bl	8001532 <dataLengthToDlc>
 8001612:	4603      	mov	r3, r0
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff5d 	bl	80014d4 <dlcToDataLength>
 800161a:	4603      	mov	r3, r0
 800161c:	3b01      	subs	r3, #1
 800161e:	b29a      	uxth	r2, r3
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	841a      	strh	r2, [r3, #32]
        queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	8c1b      	ldrh	r3, [r3, #32]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	3301      	adds	r3, #1
 800162c:	b2da      	uxtb	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	741a      	strb	r2, [r3, #16]
        queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	f003 031f 	and.w	r3, r3, #31
 800163c:	b2db      	uxtb	r3, r3
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	8c12      	ldrh	r2, [r2, #32]
 8001642:	4611      	mov	r1, r2
 8001644:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001648:	b2da      	uxtb	r2, r3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	440b      	add	r3, r1
 800164e:	721a      	strb	r2, [r3, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	605a      	str	r2, [r3, #4]
        queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
        queue_item->frame.canfd = transfer->canfd;
#endif
        pushTxQueue(ins, queue_item);
 800165a:	6979      	ldr	r1, [r7, #20]
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 f8a4 	bl	80017aa <pushTxQueue>
        result++;
 8001662:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001666:	b29b      	uxth	r3, r3
 8001668:	3301      	adds	r3, #1
 800166a:	b29b      	uxth	r3, r3
 800166c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800166e:	e096      	b.n	800179e <enqueueTxFrames+0x20e>
    }
    else                                                                    // Multi frame transfer
    {
        uint16_t data_index = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	84bb      	strh	r3, [r7, #36]	@ 0x24
        uint8_t toggle = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint8_t sot_eot = 0x80;
 800167a:	2380      	movs	r3, #128	@ 0x80
 800167c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        CanardTxQueueItem* queue_item = NULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]

        while (transfer->payload_len - data_index != 0)
 8001684:	e085      	b.n	8001792 <enqueueTxFrames+0x202>
        {
            queue_item = createTxItem(&ins->allocator);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	330c      	adds	r3, #12
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f8d2 	bl	8001834 <createTxItem>
 8001690:	61b8      	str	r0, [r7, #24]
            if (queue_item == NULL)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <enqueueTxFrames+0x10e>
            {
                CANARD_ASSERT(false);
                return -CANARD_ERROR_OUT_OF_MEMORY;          // TODO: Purge all frames enqueued so far
 8001698:	f06f 0302 	mvn.w	r3, #2
 800169c:	e081      	b.n	80017a2 <enqueueTxFrames+0x212>
            }

            uint16_t i = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	843b      	strh	r3, [r7, #32]
            if (data_index == 0)
 80016a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10c      	bne.n	80016c2 <enqueueTxFrames+0x132>
            {
                // add crc
                queue_item->frame.data[0] = (uint8_t) (crc);
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	721a      	strb	r2, [r3, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	0a1b      	lsrs	r3, r3, #8
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	725a      	strb	r2, [r3, #9]
                i = 2;
 80016bc:	2302      	movs	r3, #2
 80016be:	843b      	strh	r3, [r7, #32]
 80016c0:	e012      	b.n	80016e8 <enqueueTxFrames+0x158>
            }
            else
            {
                i = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	843b      	strh	r3, [r7, #32]
            }

            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 80016c6:	e00f      	b.n	80016e8 <enqueueTxFrames+0x158>
            {
                queue_item->frame.data[i] = transfer->payload[data_index];
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	69da      	ldr	r2, [r3, #28]
 80016cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016ce:	441a      	add	r2, r3
 80016d0:	8c3b      	ldrh	r3, [r7, #32]
 80016d2:	7811      	ldrb	r1, [r2, #0]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4413      	add	r3, r2
 80016d8:	460a      	mov	r2, r1
 80016da:	721a      	strb	r2, [r3, #8]
            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 80016dc:	8c3b      	ldrh	r3, [r7, #32]
 80016de:	3301      	adds	r3, #1
 80016e0:	843b      	strh	r3, [r7, #32]
 80016e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016e4:	3301      	adds	r3, #1
 80016e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80016e8:	8c3a      	ldrh	r2, [r7, #32]
 80016ea:	7ffb      	ldrb	r3, [r7, #31]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	429a      	cmp	r2, r3
 80016f0:	da04      	bge.n	80016fc <enqueueTxFrames+0x16c>
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	8c1b      	ldrh	r3, [r3, #32]
 80016f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d3e5      	bcc.n	80016c8 <enqueueTxFrames+0x138>
            }
            // tail byte
            sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	8c1b      	ldrh	r3, [r3, #32]
 8001700:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001702:	429a      	cmp	r2, r3
 8001704:	d002      	beq.n	800170c <enqueueTxFrames+0x17c>
 8001706:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800170a:	e000      	b.n	800170e <enqueueTxFrames+0x17e>
 800170c:	2340      	movs	r3, #64	@ 0x40
 800170e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            
            i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 8001712:	8c3b      	ldrh	r3, [r7, #32]
 8001714:	3301      	adds	r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff0a 	bl	8001532 <dataLengthToDlc>
 800171e:	4603      	mov	r3, r0
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fed7 	bl	80014d4 <dlcToDataLength>
 8001726:	4603      	mov	r3, r0
 8001728:	3b01      	subs	r3, #1
 800172a:	843b      	strh	r3, [r7, #32]
            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 800172c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001730:	015b      	lsls	r3, r3, #5
 8001732:	b2da      	uxtb	r2, r3
 8001734:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001738:	4313      	orrs	r3, r2
 800173a:	b2d9      	uxtb	r1, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	b2da      	uxtb	r2, r3
 8001748:	8c3b      	ldrh	r3, [r7, #32]
 800174a:	430a      	orrs	r2, r1
 800174c:	b2d1      	uxtb	r1, r2
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4413      	add	r3, r2
 8001752:	460a      	mov	r2, r1
 8001754:	721a      	strb	r2, [r3, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	605a      	str	r2, [r3, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 8001760:	8c3b      	ldrh	r3, [r7, #32]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	3301      	adds	r3, #1
 8001766:	b2da      	uxtb	r2, r3
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	741a      	strb	r2, [r3, #16]
            queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
            queue_item->frame.canfd = transfer->canfd;
#endif
            pushTxQueue(ins, queue_item);
 800176c:	69b9      	ldr	r1, [r7, #24]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f81b 	bl	80017aa <pushTxQueue>

            result++;
 8001774:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001778:	b29b      	uxth	r3, r3
 800177a:	3301      	adds	r3, #1
 800177c:	b29b      	uxth	r3, r3
 800177e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            toggle ^= 1;
 8001780:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001784:	f083 0301 	eor.w	r3, r3, #1
 8001788:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            sot_eot = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        while (transfer->payload_len - data_index != 0)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	8c1b      	ldrh	r3, [r3, #32]
 8001796:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001798:	429a      	cmp	r2, r3
 800179a:	f47f af74 	bne.w	8001686 <enqueueTxFrames+0xf6>
        }
    }

    return result;
 800179e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3728      	adds	r7, #40	@ 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <pushTxQueue>:

/**
 * Puts frame on on the TX queue. Higher priority placed first
 */
CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

    if (ins->tx_queue == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d103      	bne.n	80017c4 <pushTxQueue+0x1a>
    {
        ins->tx_queue = item;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24
        return;
 80017c2:	e034      	b.n	800182e <pushTxQueue+0x84>
    }

    CanardTxQueueItem* queue = ins->tx_queue;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c8:	60fb      	str	r3, [r7, #12]
    CanardTxQueueItem* previous = ins->tx_queue;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ce:	60bb      	str	r3, [r7, #8]

    while (queue != NULL)
 80017d0:	e02a      	b.n	8001828 <pushTxQueue+0x7e>
    {
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4619      	mov	r1, r3
 80017dc:	4610      	mov	r0, r2
 80017de:	f000 f840 	bl	8001862 <isPriorityHigher>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d012      	beq.n	800180e <pushTxQueue+0x64>
        {
            if (queue == ins->tx_queue)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d106      	bne.n	8001800 <pushTxQueue+0x56>
            {
                item->next = queue;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	601a      	str	r2, [r3, #0]
                ins->tx_queue = item;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	625a      	str	r2, [r3, #36]	@ 0x24
            else
            {
                previous->next = item;
                item->next = queue;
            }
            return;
 80017fe:	e016      	b.n	800182e <pushTxQueue+0x84>
                previous->next = item;
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	601a      	str	r2, [r3, #0]
                item->next = queue;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	601a      	str	r2, [r3, #0]
            return;
 800180c:	e00f      	b.n	800182e <pushTxQueue+0x84>
        }
        else
        {
            if (queue->next == NULL)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d103      	bne.n	800181e <pushTxQueue+0x74>
            {
                queue->next = item;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	601a      	str	r2, [r3, #0]
                return;
 800181c:	e007      	b.n	800182e <pushTxQueue+0x84>
            }
            else
            {
                previous = queue;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	60bb      	str	r3, [r7, #8]
                queue = queue->next;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	60fb      	str	r3, [r7, #12]
    while (queue != NULL)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1d1      	bne.n	80017d2 <pushTxQueue+0x28>
            }
        }
    }
}
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <createTxItem>:

/**
 * Creates new tx queue item from allocator
 */
CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 fd0f 	bl	8002260 <allocateBlock>
 8001842:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <createTxItem+0x1a>
    {
        return NULL;
 800184a:	2300      	movs	r3, #0
 800184c:	e005      	b.n	800185a <createTxItem+0x26>
    }
    memset(item, 0, sizeof(*item));
 800184e:	2214      	movs	r2, #20
 8001850:	2100      	movs	r1, #0
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f005 fe10 	bl	8007478 <memset>
    return item;
 8001858:	68fb      	ldr	r3, [r7, #12]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <isPriorityHigher>:

/**
 * Returns true if priority of rhs is higher than id
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
{
 8001862:	b480      	push	{r7}
 8001864:	b089      	sub	sp, #36	@ 0x24
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
    const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001872:	61fb      	str	r3, [r7, #28]
    const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800187a:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	0fdb      	lsrs	r3, r3, #31
 8001880:	75fb      	strb	r3, [r7, #23]
    const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	0fdb      	lsrs	r3, r3, #31
 8001886:	75bb      	strb	r3, [r7, #22]
    if (ext != rhs_ext)
 8001888:	7dfa      	ldrb	r2, [r7, #23]
 800188a:	7dbb      	ldrb	r3, [r7, #22]
 800188c:	429a      	cmp	r2, r3
 800188e:	d01d      	beq.n	80018cc <isPriorityHigher+0x6a>
    {
        uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 8001890:	7dfb      	ldrb	r3, [r7, #23]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <isPriorityHigher+0x3a>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	0c9b      	lsrs	r3, r3, #18
 800189a:	e000      	b.n	800189e <isPriorityHigher+0x3c>
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	613b      	str	r3, [r7, #16]
        uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 80018a0:	7dbb      	ldrb	r3, [r7, #22]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <isPriorityHigher+0x4a>
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	0c9b      	lsrs	r3, r3, #18
 80018aa:	e000      	b.n	80018ae <isPriorityHigher+0x4c>
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	60fb      	str	r3, [r7, #12]
        if (arb11 != rhs_arb11)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d007      	beq.n	80018c8 <isPriorityHigher+0x66>
        {
            return arb11 < rhs_arb11;
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	429a      	cmp	r2, r3
 80018be:	bf34      	ite	cc
 80018c0:	2301      	movcc	r3, #1
 80018c2:	2300      	movcs	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	e022      	b.n	800190e <isPriorityHigher+0xac>
        }
        else
        {
            return rhs_ext;
 80018c8:	7dbb      	ldrb	r3, [r7, #22]
 80018ca:	e020      	b.n	800190e <isPriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bf14      	ite	ne
 80018d6:	2301      	movne	r3, #1
 80018d8:	2300      	moveq	r3, #0
 80018da:	757b      	strb	r3, [r7, #21]
    const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf14      	ite	ne
 80018e6:	2301      	movne	r3, #1
 80018e8:	2300      	moveq	r3, #0
 80018ea:	753b      	strb	r3, [r7, #20]
    if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d105      	bne.n	8001900 <isPriorityHigher+0x9e>
 80018f4:	7d7a      	ldrb	r2, [r7, #21]
 80018f6:	7d3b      	ldrb	r3, [r7, #20]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <isPriorityHigher+0x9e>
    {
        return rhs_rtr;
 80018fc:	7d3b      	ldrb	r3, [r7, #20]
 80018fe:	e006      	b.n	800190e <isPriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_id < rhs_clean_id;
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	429a      	cmp	r2, r3
 8001906:	bf34      	ite	cc
 8001908:	2301      	movcc	r3, #1
 800190a:	2300      	movcs	r3, #0
 800190c:	b2db      	uxtb	r3, r3
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	@ 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <prepareForNextTransfer>:

/**
 * preps the rx state for the next transfer. does not delete the state
 */
CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(state->buffer_blocks == CANARD_BUFFER_IDX_NONE);
    state->transfer_id++;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	7ddb      	ldrb	r3, [r3, #23]
 8001926:	f3c3 0384 	ubfx	r3, r3, #2, #5
 800192a:	b2db      	uxtb	r3, r3
 800192c:	3301      	adds	r3, #1
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	b2d9      	uxtb	r1, r3
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	7dd3      	ldrb	r3, [r2, #23]
 8001938:	f361 0386 	bfi	r3, r1, #2, #5
 800193c:	75d3      	strb	r3, [r2, #23]
    state->payload_len = 0;
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	8ad3      	ldrh	r3, [r2, #22]
 8001942:	f36f 0309 	bfc	r3, #0, #10
 8001946:	82d3      	strh	r3, [r2, #22]
    state->next_toggle = 0;
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	7dd3      	ldrb	r3, [r2, #23]
 800194c:	f36f 13c7 	bfc	r3, #7, #1
 8001950:	75d3      	strb	r3, [r2, #23]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <extractDataType>:

/**
 * returns data type from id
 */
uint16_t extractDataType(uint32_t id)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
    if (extractTransferType(id) == CanardTransferTypeBroadcast)
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f819 	bl	800199e <extractTransferType>
 800196c:	4603      	mov	r3, r0
 800196e:	2b02      	cmp	r3, #2
 8001970:	d10e      	bne.n	8001990 <extractDataType+0x32>
    {
        uint16_t dtid = MSG_TYPE_FROM_ID(id);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	81fb      	strh	r3, [r7, #14]
        if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001980:	2b00      	cmp	r3, #0
 8001982:	d103      	bne.n	800198c <extractDataType+0x2e>
        {
            dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 8001984:	89fb      	ldrh	r3, [r7, #14]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	81fb      	strh	r3, [r7, #14]
        }
        return dtid;
 800198c:	89fb      	ldrh	r3, [r7, #14]
 800198e:	e002      	b.n	8001996 <extractDataType+0x38>
    }
    else
    {
        return (uint16_t) SRV_TYPE_FROM_ID(id);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	0c1b      	lsrs	r3, r3, #16
 8001994:	b2db      	uxtb	r3, r3
    }
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <extractTransferType>:

/**
 * returns transfer type from id
 */
CanardTransferType extractTransferType(uint32_t id)
{
 800199e:	b480      	push	{r7}
 80019a0:	b085      	sub	sp, #20
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
    const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bf14      	ite	ne
 80019b0:	2301      	movne	r3, #1
 80019b2:	2300      	moveq	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]
    if (!is_service)
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	f083 0301 	eor.w	r3, r3, #1
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <extractTransferType+0x28>
    {
        return CanardTransferTypeBroadcast;
 80019c2:	2302      	movs	r3, #2
 80019c4:	e009      	b.n	80019da <extractTransferType+0x3c>
    }
    else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	0bdb      	lsrs	r3, r3, #15
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <extractTransferType+0x3a>
    {
        return CanardTransferTypeRequest;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <extractTransferType+0x3c>
    }
    else
    {
        return CanardTransferTypeResponse;
 80019d8:	2300      	movs	r3, #0
    }
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <traverseRxStates>:
/**
 * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
 * with either the Id or a new one at the end
 */
CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
    CanardRxState* states = ins->rx_states;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	60fb      	str	r3, [r7, #12]

    if (states == NULL) // initialize CanardRxStates
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d110      	bne.n	8001a1e <traverseRxStates+0x38>
    {
        states = createRxState(&ins->allocator, transfer_descriptor);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	330c      	adds	r3, #12
 8001a00:	6839      	ldr	r1, [r7, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f865 	bl	8001ad2 <createRxState>
 8001a08:	60f8      	str	r0, [r7, #12]

        if(states == NULL)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <traverseRxStates+0x2e>
        {
            return NULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e013      	b.n	8001a3c <traverseRxStates+0x56>
        }

        ins->rx_states = states;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	621a      	str	r2, [r3, #32]
        return states;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	e00e      	b.n	8001a3c <traverseRxStates+0x56>
    }

    states = findRxState(ins, transfer_descriptor);
 8001a1e:	6839      	ldr	r1, [r7, #0]
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f80f 	bl	8001a44 <findRxState>
 8001a26:	60f8      	str	r0, [r7, #12]
    if (states != NULL)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <traverseRxStates+0x4c>
    {
        return states;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	e004      	b.n	8001a3c <traverseRxStates+0x56>
    }
    else
    {
        return prependRxState(ins, transfer_descriptor);
 8001a32:	6839      	ldr	r1, [r7, #0]
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f827 	bl	8001a88 <prependRxState>
 8001a3a:	4603      	mov	r3, r0
    }
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <findRxState>:

/**
 * returns pointer to the rx state of transfer descriptor or null if not found
 */
CANARD_INTERNAL CanardRxState* findRxState(CanardInstance *ins, uint32_t transfer_descriptor)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
    CanardRxState *state = ins->rx_states;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	60fb      	str	r3, [r7, #12]
    while (state != NULL)
 8001a54:	e010      	b.n	8001a78 <findRxState+0x34>
    {
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d101      	bne.n	8001a64 <findRxState+0x20>
        {
            return state;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	e00d      	b.n	8001a80 <findRxState+0x3c>
        }
        state = canardRxFromIdx(&ins->allocator, state->next);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f103 020c 	add.w	r2, r3, #12
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4610      	mov	r0, r2
 8001a72:	f7fe fd9b 	bl	80005ac <canardRxFromIdx>
 8001a76:	60f8      	str	r0, [r7, #12]
    while (state != NULL)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1eb      	bne.n	8001a56 <findRxState+0x12>
    }
    return NULL;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <prependRxState>:

/**
 * prepends rx state to the canard instance rx_states
 */
CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
    CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	330c      	adds	r3, #12
 8001a96:	6839      	ldr	r1, [r7, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 f81a 	bl	8001ad2 <createRxState>
 8001a9e:	60f8      	str	r0, [r7, #12]

    if(state == NULL)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <prependRxState+0x22>
    {
        return NULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e00f      	b.n	8001aca <prependRxState+0x42>
    }

    state->next = canardRxToIdx(&ins->allocator, ins->rx_states);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f103 020c 	add.w	r2, r3, #12
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	f7fe fd84 	bl	80005c4 <canardRxToIdx>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	601a      	str	r2, [r3, #0]
    ins->rx_states = state;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	621a      	str	r2, [r3, #32]
    return state;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <createRxState>:

CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_descriptor)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b08c      	sub	sp, #48	@ 0x30
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
    CanardRxState init = {
 8001adc:	f107 0308 	add.w	r3, r7, #8
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f005 fcc7 	bl	8007478 <memset>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	61bb      	str	r3, [r7, #24]
        .next = CANARD_BUFFER_IDX_NONE,
        .buffer_blocks = CANARD_BUFFER_IDX_NONE,
        .dtid_tt_snid_dnid = transfer_descriptor
    };

    CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 fbb6 	bl	8002260 <allocateBlock>
 8001af4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (state == NULL)
 8001af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <createRxState+0x2e>
    {
        return NULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	e007      	b.n	8001b10 <createRxState+0x3e>
    }
    memcpy(state, &init, sizeof(*state));
 8001b00:	f107 0308 	add.w	r3, r7, #8
 8001b04:	2220      	movs	r2, #32
 8001b06:	4619      	mov	r1, r3
 8001b08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001b0a:	f005 fd50 	bl	80075ae <memcpy>

    return state;
 8001b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3730      	adds	r7, #48	@ 0x30
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <releaseStatePayload>:

CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8001b22:	e01b      	b.n	8001b5c <releaseStatePayload+0x44>
    {
        CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rxstate->buffer_blocks);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f103 020c 	add.w	r2, r3, #12
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4610      	mov	r0, r2
 8001b32:	f7fe fd23 	bl	800057c <canardBufferFromIdx>
 8001b36:	60f8      	str	r0, [r7, #12]
        CanardBufferBlock* const temp = block->next;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60bb      	str	r3, [r7, #8]
        freeBlock(&ins->allocator, block);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	330c      	adds	r3, #12
 8001b42:	68f9      	ldr	r1, [r7, #12]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fbb4 	bl	80022b2 <freeBlock>
        rxstate->buffer_blocks = canardBufferToIdx(&ins->allocator, temp);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	330c      	adds	r3, #12
 8001b4e:	68b9      	ldr	r1, [r7, #8]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fd1f 	bl	8000594 <canardBufferToIdx>
 8001b56:	4602      	mov	r2, r0
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1df      	bne.n	8001b24 <releaseStatePayload+0xc>
    }
    rxstate->payload_len = 0;
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	8ad3      	ldrh	r3, [r2, #22]
 8001b68:	f36f 0309 	bfc	r3, #0, #10
 8001b6c:	82d3      	strh	r3, [r2, #22]
    return CANARD_OK;
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
}
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <bufferBlockPushBytes>:
 */
CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
                                             CanardRxState* state,
                                             const uint8_t* data,
                                             uint8_t data_len)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	@ 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	70fb      	strb	r3, [r7, #3]
    uint16_t data_index = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // if head is not full, add data to head
    if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	8adb      	ldrh	r3, [r3, #22]
 8001b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	d036      	beq.n	8001c0e <bufferBlockPushBytes+0x8e>
    {
        for (uint16_t i = (uint16_t)state->payload_len;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	8adb      	ldrh	r3, [r3, #22]
 8001ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001bac:	e00e      	b.n	8001bcc <bufferBlockPushBytes+0x4c>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
             i++, data_index++)
        {
            state->buffer_head[i] = data[data_index];
 8001bae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	441a      	add	r2, r3
 8001bb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bb6:	7811      	ldrb	r1, [r2, #0]
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	4413      	add	r3, r2
 8001bbc:	460a      	mov	r2, r1
 8001bbe:	76da      	strb	r2, [r3, #27]
             i++, data_index++)
 8001bc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001bc6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bc8:	3301      	adds	r3, #1
 8001bca:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 8001bcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d804      	bhi.n	8001bdc <bufferBlockPushBytes+0x5c>
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d3e8      	bcc.n	8001bae <bufferBlockPushBytes+0x2e>
        }
        if (data_index >= data_len)
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d313      	bcc.n	8001c0e <bufferBlockPushBytes+0x8e>
        {
            state->payload_len =
                (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	8adb      	ldrh	r3, [r3, #22]
 8001bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bfe:	b299      	uxth	r1, r3
            state->payload_len =
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	8ad3      	ldrh	r3, [r2, #22]
 8001c04:	f361 0309 	bfi	r3, r1, #0, #10
 8001c08:	82d3      	strh	r3, [r2, #22]
            return 1;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0ae      	b.n	8001d6c <bufferBlockPushBytes+0x1ec>
        }
    } // head is full.

    uint16_t index_at_nth_block =
        (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	8adb      	ldrh	r3, [r3, #22]
 8001c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	1f5a      	subs	r2, r3, #5
 8001c1a:	0893      	lsrs	r3, r2, #2
 8001c1c:	4955      	ldr	r1, [pc, #340]	@ (8001d74 <bufferBlockPushBytes+0x1f4>)
 8001c1e:	fba1 3103 	umull	r3, r1, r1, r3
 8001c22:	460b      	mov	r3, r1
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	1a5b      	subs	r3, r3, r1
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	1ad3      	subs	r3, r2, r3
    uint16_t index_at_nth_block =
 8001c2c:	847b      	strh	r3, [r7, #34]	@ 0x22

    // get to current block
    CanardBufferBlock* block = NULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]

    // buffer blocks uninitialized
    if (state->buffer_blocks == CANARD_BUFFER_IDX_NONE)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d113      	bne.n	8001c62 <bufferBlockPushBytes+0xe2>
    {
        block = createBufferBlock(allocator);
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f89c 	bl	8001d78 <createBufferBlock>
 8001c40:	61f8      	str	r0, [r7, #28]
        state->buffer_blocks = canardBufferToIdx(allocator, block);
 8001c42:	69f9      	ldr	r1, [r7, #28]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f7fe fca5 	bl	8000594 <canardBufferToIdx>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	605a      	str	r2, [r3, #4]
        if (block == NULL)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d102      	bne.n	8001c5c <bufferBlockPushBytes+0xdc>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8001c56:	f06f 0302 	mvn.w	r3, #2
 8001c5a:	e087      	b.n	8001d6c <bufferBlockPushBytes+0x1ec>
        }

        index_at_nth_block = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001c60:	e06c      	b.n	8001d3c <bufferBlockPushBytes+0x1bc>
    }
    else
    {
        uint16_t nth_block = 1;
 8001c62:	2301      	movs	r3, #1
 8001c64:	837b      	strh	r3, [r7, #26]

        // get to block
        block = canardBufferFromIdx(allocator, state->buffer_blocks);
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f7fe fc85 	bl	800057c <canardBufferFromIdx>
 8001c72:	61f8      	str	r0, [r7, #28]
        while (block->next != NULL)
 8001c74:	e005      	b.n	8001c82 <bufferBlockPushBytes+0x102>
        {
            nth_block++;
 8001c76:	8b7b      	ldrh	r3, [r7, #26]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	837b      	strh	r3, [r7, #26]
            block = block->next;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	61fb      	str	r3, [r7, #28]
        while (block->next != NULL)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f5      	bne.n	8001c76 <bufferBlockPushBytes+0xf6>
        }

        const uint16_t num_buffer_blocks =
            (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	8adb      	ldrh	r3, [r3, #22]
 8001c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b05      	subs	r3, #5
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	4a35      	ldr	r2, [pc, #212]	@ (8001d74 <bufferBlockPushBytes+0x1f4>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	b29b      	uxth	r3, r3
        const uint16_t num_buffer_blocks =
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	82fb      	strh	r3, [r7, #22]
                         CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);

        if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 8001caa:	8afa      	ldrh	r2, [r7, #22]
 8001cac:	8b7b      	ldrh	r3, [r7, #26]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d944      	bls.n	8001d3c <bufferBlockPushBytes+0x1bc>
 8001cb2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d141      	bne.n	8001d3c <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f85d 	bl	8001d78 <createBufferBlock>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <bufferBlockPushBytes+0x152>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8001ccc:	f06f 0302 	mvn.w	r3, #2
 8001cd0:	e04c      	b.n	8001d6c <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	61fb      	str	r3, [r7, #28]
        }
    }

    // add data to current block until it becomes full, add new block if necessary
    while (data_index < data_len)
 8001cd8:	e030      	b.n	8001d3c <bufferBlockPushBytes+0x1bc>
    {
        for (uint16_t i = index_at_nth_block;
 8001cda:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001cdc:	833b      	strh	r3, [r7, #24]
 8001cde:	e00e      	b.n	8001cfe <bufferBlockPushBytes+0x17e>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
             i++, data_index++)
        {
            block->data[i] = data[data_index];
 8001ce0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	441a      	add	r2, r3
 8001ce6:	8b3b      	ldrh	r3, [r7, #24]
 8001ce8:	7811      	ldrb	r1, [r2, #0]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	4413      	add	r3, r2
 8001cee:	460a      	mov	r2, r1
 8001cf0:	711a      	strb	r2, [r3, #4]
             i++, data_index++)
 8001cf2:	8b3b      	ldrh	r3, [r7, #24]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	833b      	strh	r3, [r7, #24]
 8001cf8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 8001cfe:	8b3b      	ldrh	r3, [r7, #24]
 8001d00:	2b1b      	cmp	r3, #27
 8001d02:	d804      	bhi.n	8001d0e <bufferBlockPushBytes+0x18e>
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3e8      	bcc.n	8001ce0 <bufferBlockPushBytes+0x160>
        }

        if (data_index < data_len)
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d211      	bcs.n	8001d3c <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 f82d 	bl	8001d78 <createBufferBlock>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <bufferBlockPushBytes+0x1b2>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8001d2c:	f06f 0302 	mvn.w	r3, #2
 8001d30:	e01c      	b.n	8001d6c <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	61fb      	str	r3, [r7, #28]
            index_at_nth_block = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	847b      	strh	r3, [r7, #34]	@ 0x22
    while (data_index < data_len)
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d3c9      	bcc.n	8001cda <bufferBlockPushBytes+0x15a>
        }
    }

    state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	8adb      	ldrh	r3, [r3, #22]
 8001d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d5e:	b299      	uxth	r1, r3
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	8ad3      	ldrh	r3, [r2, #22]
 8001d64:	f361 0309 	bfi	r3, r1, #0, #10
 8001d68:	82d3      	strh	r3, [r2, #22]

    return 1;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3728      	adds	r7, #40	@ 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	24924925 	.word	0x24924925

08001d78 <createBufferBlock>:

CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
    CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 fa6d 	bl	8002260 <allocateBlock>
 8001d86:	60f8      	str	r0, [r7, #12]
    if (block == NULL)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <createBufferBlock+0x1a>
    {
        return NULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e003      	b.n	8001d9a <createBufferBlock+0x22>
    }
    block->next = NULL;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
    return block;
 8001d98:	68fb      	ldr	r3, [r7, #12]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <copyBitArray>:
/**
 * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
 */
void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                        uint8_t* dst, uint32_t dst_offset)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b089      	sub	sp, #36	@ 0x24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(src_len > 0U);

    // Normalizing inputs
    src += src_offset / 8U;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	08db      	lsrs	r3, r3, #3
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4413      	add	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
    dst += dst_offset / 8U;
 8001dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dbc:	08db      	lsrs	r3, r3, #3
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	603b      	str	r3, [r7, #0]

    src_offset %= 8U;
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	60bb      	str	r3, [r7, #8]
    dst_offset %= 8U;
 8001dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	62bb      	str	r3, [r7, #40]	@ 0x28

    const size_t last_bit = src_offset + src_len;
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	61fb      	str	r3, [r7, #28]
    while (last_bit - src_offset)
 8001ddc:	e04d      	b.n	8001e7a <copyBitArray+0xd8>
    {
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	76fb      	strb	r3, [r7, #27]
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8001de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	76bb      	strb	r3, [r7, #26]

        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 8001df2:	7eba      	ldrb	r2, [r7, #26]
 8001df4:	7efb      	ldrb	r3, [r7, #27]
 8001df6:	4293      	cmp	r3, r2
 8001df8:	bf38      	it	cc
 8001dfa:	4613      	movcc	r3, r2
 8001dfc:	767b      	strb	r3, [r7, #25]
        const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 8001dfe:	7e7b      	ldrb	r3, [r7, #25]
 8001e00:	f1c3 0208 	rsb	r2, r3, #8
 8001e04:	69f9      	ldr	r1, [r7, #28]
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1acb      	subs	r3, r1, r3
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	bf28      	it	cs
 8001e0e:	4613      	movcs	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
#else
        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 8001e12:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	7ebb      	ldrb	r3, [r7, #26]
 8001e22:	fa42 f303 	asr.w	r3, r2, r3
 8001e26:	74fb      	strb	r3, [r7, #19]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	08db      	lsrs	r3, r3, #3
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	7efb      	ldrb	r3, [r7, #27]
 8001e36:	409a      	lsls	r2, r3
 8001e38:	7ebb      	ldrb	r3, [r7, #26]
 8001e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3e:	74bb      	strb	r3, [r7, #18]

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8001e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e42:	08db      	lsrs	r3, r3, #3
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	7cfb      	ldrb	r3, [r7, #19]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	4013      	ands	r3, r2
 8001e52:	b2d9      	uxtb	r1, r3
 8001e54:	7cba      	ldrb	r2, [r7, #18]
 8001e56:	7cfb      	ldrb	r3, [r7, #19]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	b2da      	uxtb	r2, r3
        dst[dst_offset / 8U] =
 8001e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5e:	08db      	lsrs	r3, r3, #3
 8001e60:	6838      	ldr	r0, [r7, #0]
 8001e62:	4403      	add	r3, r0
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8001e64:	430a      	orrs	r2, r1
 8001e66:	b2d2      	uxtb	r2, r2
        dst[dst_offset / 8U] =
 8001e68:	701a      	strb	r2, [r3, #0]
#endif

        src_offset += copy_bits;
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	4413      	add	r3, r2
 8001e70:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 8001e72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	4413      	add	r3, r2
 8001e78:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (last_bit - src_offset)
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d1ad      	bne.n	8001dde <copyBitArray+0x3c>
    }
}
 8001e82:	bf00      	nop
 8001e84:	bf00      	nop
 8001e86:	3724      	adds	r7, #36	@ 0x24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <descatterTransferPayload>:

CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                 uint32_t bit_offset,
                                                 uint8_t bit_length,
                                                 void* output)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b090      	sub	sp, #64	@ 0x40
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(transfer != 0);

    if (bit_offset >= transfer->payload_len * 8)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8a9b      	ldrh	r3, [r3, #20]
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d301      	bcc.n	8001eb2 <descatterTransferPayload+0x22>
    {
        return 0;       // Out of range, reading zero bits
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e0df      	b.n	8002072 <descatterTransferPayload+0x1e2>
    }

    if (bit_offset + bit_length > transfer->payload_len * 8)
 8001eb2:	79fa      	ldrb	r2, [r7, #7]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	8a92      	ldrh	r2, [r2, #20]
 8001ebc:	00d2      	lsls	r2, r2, #3
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d908      	bls.n	8001ed4 <descatterTransferPayload+0x44>
    {
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8a9b      	ldrh	r3, [r3, #20]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	71fb      	strb	r3, [r7, #7]
    }

    CANARD_ASSERT(bit_length > 0);

    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d104      	bne.n	8001ee6 <descatterTransferPayload+0x56>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80b9 	beq.w	8002058 <descatterTransferPayload+0x1c8>
        /*
         * This part is hideously complicated and probably should be redesigned.
         * The objective here is to copy the requested number of bits from scattered storage into the temporary
         * local storage. We go through great pains to ensure that all corner cases are handled correctly.
         */
        uint32_t input_bit_offset = bit_offset;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t output_bit_offset = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        uint8_t remaining_bit_length = bit_length;
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        // Reading head
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 8001ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ef8:	2b27      	cmp	r3, #39	@ 0x27
 8001efa:	d82d      	bhi.n	8001f58 <descatterTransferPayload+0xc8>
        {
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 8001efc:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f02:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d305      	bcc.n	8001f16 <descatterTransferPayload+0x86>
 8001f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	e001      	b.n	8001f1a <descatterTransferPayload+0x8a>
 8001f16:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6898      	ldr	r0, [r3, #8]
 8001f22:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f26:	2300      	movs	r3, #0
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001f2e:	f7ff ff38 	bl	8001da2 <copyBitArray>

            input_bit_offset += amount;
 8001f32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f38:	4413      	add	r3, r2
 8001f3a:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8001f3c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001f40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f44:	4413      	add	r3, r2
 8001f46:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8001f4a:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001f4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        // Reading middle
        uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8a9b      	ldrh	r3, [r3, #20]
 8001f5c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001f60:	3b05      	subs	r3, #5
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 8001f66:	2328      	movs	r3, #40	@ 0x28
 8001f68:	62bb      	str	r3, [r7, #40]	@ 0x28
        const CanardBufferBlock* block = transfer->payload_middle;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24

        while ((block != NULL) && (remaining_bit_length > 0))
 8001f70:	e044      	b.n	8001ffc <descatterTransferPayload+0x16c>
        {
            CANARD_ASSERT(remaining_bits > 0);
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 8001f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f74:	2be0      	cmp	r3, #224	@ 0xe0
 8001f76:	bf28      	it	cs
 8001f78:	23e0      	movcs	r3, #224	@ 0xe0
 8001f7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f7c:	4413      	add	r3, r2
 8001f7e:	61fb      	str	r3, [r7, #28]
                                                                         remaining_bits);

            // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
            if (block_end_bit_offset > input_bit_offset)
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d92e      	bls.n	8001fe6 <descatterTransferPayload+0x156>
            {
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8001f88:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001f8c:	69f9      	ldr	r1, [r7, #28]
 8001f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f90:	1acb      	subs	r3, r1, r3
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d306      	bcc.n	8001fa4 <descatterTransferPayload+0x114>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	e001      	b.n	8001fa8 <descatterTransferPayload+0x118>
 8001fa4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001fa8:	76fb      	strb	r3, [r7, #27]

                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 8001faa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	617b      	str	r3, [r7, #20]

                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	1d18      	adds	r0, r3, #4
 8001fb6:	7efa      	ldrb	r2, [r7, #27]
 8001fb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6979      	ldr	r1, [r7, #20]
 8001fc2:	f7ff feee 	bl	8001da2 <copyBitArray>

                input_bit_offset += amount;
 8001fc6:	7efb      	ldrb	r3, [r7, #27]
 8001fc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fca:	4413      	add	r3, r2
 8001fcc:	637b      	str	r3, [r7, #52]	@ 0x34
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8001fce:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001fd2:	7efb      	ldrb	r3, [r7, #27]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8001fda:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001fde:	7efb      	ldrb	r3, [r7, #27]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            }

            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 8001fe6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fee:	4413      	add	r3, r2
 8001ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            block_bit_offset = block_end_bit_offset;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
            block = block->next;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
        while ((block != NULL) && (remaining_bit_length > 0))
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <descatterTransferPayload+0x17a>
 8002002:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1b3      	bne.n	8001f72 <descatterTransferPayload+0xe2>
        }

        CANARD_ASSERT(remaining_bit_length <= remaining_bits);

        // Reading tail
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d02c      	beq.n	800206c <descatterTransferPayload+0x1dc>
 8002012:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002016:	2b00      	cmp	r3, #0
 8002018:	d028      	beq.n	800206c <descatterTransferPayload+0x1dc>
        {
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
            const uint32_t offset = input_bit_offset - block_bit_offset;
 800201a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800201c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	613b      	str	r3, [r7, #16]

            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6918      	ldr	r0, [r3, #16]
 8002026:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800202a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	6939      	ldr	r1, [r7, #16]
 8002034:	f7ff feb5 	bl	8001da2 <copyBitArray>
                         output_bit_offset);

            input_bit_offset += remaining_bit_length;
 8002038:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800203c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800203e:	4413      	add	r3, r2
 8002040:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 8002042:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002046:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800204a:	4413      	add	r3, r2
 800204c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    {
 8002056:	e009      	b.n	800206c <descatterTransferPayload+0x1dc>
        CANARD_ASSERT(output_bit_offset <= 64);
        CANARD_ASSERT(remaining_bit_length == 0);
    }
    else                                                                    // Single frame
    {
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6898      	ldr	r0, [r3, #8]
 800205c:	79fa      	ldrb	r2, [r7, #7]
 800205e:	2300      	movs	r3, #0
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	f7ff fe9c 	bl	8001da2 <copyBitArray>
 800206a:	e000      	b.n	800206e <descatterTransferPayload+0x1de>
    {
 800206c:	bf00      	nop
    }

    return bit_length;
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	b21b      	sxth	r3, r3
}
 8002072:	4618      	mov	r0, r3
 8002074:	3738      	adds	r7, #56	@ 0x38
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <isBigEndian>:

CANARD_INTERNAL bool isBigEndian(void)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
#else
        uint16_t a;
        uint8_t b[2];
#endif
    } u;
    u.a = 1;
 8002080:	2301      	movs	r3, #1
 8002082:	80bb      	strh	r3, [r7, #4]
    return u.b[1] == 1;                             // Some don't...
 8002084:	797b      	ldrb	r3, [r7, #5]
 8002086:	2b01      	cmp	r3, #1
 8002088:	bf0c      	ite	eq
 800208a:	2301      	moveq	r3, #1
 800208c:	2300      	movne	r3, #0
 800208e:	b2db      	uxtb	r3, r3
#endif
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <swapByteOrder>:

CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(data != NULL);

    uint8_t* const bytes = (uint8_t*) data;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	60fb      	str	r3, [r7, #12]

    size_t fwd = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
    size_t rev = size - 1;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	613b      	str	r3, [r7, #16]

    while (fwd < rev)
 80020b4:	e017      	b.n	80020e6 <swapByteOrder+0x4a>
    {
        const uint8_t x = bytes[fwd];
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	4413      	add	r3, r2
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	72fb      	strb	r3, [r7, #11]
        bytes[fwd] = bytes[rev];
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	441a      	add	r2, r3
 80020c6:	68f9      	ldr	r1, [r7, #12]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	440b      	add	r3, r1
 80020cc:	7812      	ldrb	r2, [r2, #0]
 80020ce:	701a      	strb	r2, [r3, #0]
        bytes[rev] = x;
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4413      	add	r3, r2
 80020d6:	7afa      	ldrb	r2, [r7, #11]
 80020d8:	701a      	strb	r2, [r3, #0]
        fwd++;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	3301      	adds	r3, #1
 80020de:	617b      	str	r3, [r7, #20]
        rev--;
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	613b      	str	r3, [r7, #16]
    while (fwd < rev)
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d3e3      	bcc.n	80020b6 <swapByteOrder+0x1a>
    }
}
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
 80020f2:	371c      	adds	r7, #28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <crcAddByte>:

/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	460a      	mov	r2, r1
 8002106:	80fb      	strh	r3, [r7, #6]
 8002108:	4613      	mov	r3, r2
 800210a:	717b      	strb	r3, [r7, #5]
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 800210c:	797b      	ldrb	r3, [r7, #5]
 800210e:	b29b      	uxth	r3, r3
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	b29a      	uxth	r2, r3
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	4053      	eors	r3, r2
 8002118:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
 800211e:	e012      	b.n	8002146 <crcAddByte+0x4a>
    {
        if (crc_val & 0x8000U)
 8002120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002124:	2b00      	cmp	r3, #0
 8002126:	da08      	bge.n	800213a <crcAddByte+0x3e>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	b29b      	uxth	r3, r3
 800212e:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8002132:	f083 0301 	eor.w	r3, r3, #1
 8002136:	80fb      	strh	r3, [r7, #6]
 8002138:	e002      	b.n	8002140 <crcAddByte+0x44>
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	3301      	adds	r3, #1
 8002144:	73fb      	strb	r3, [r7, #15]
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	2b07      	cmp	r3, #7
 800214a:	d9e9      	bls.n	8002120 <crcAddByte+0x24>
        }
    }
    return crc_val;
 800214c:	88fb      	ldrh	r3, [r7, #6]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 800215a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215c:	b087      	sub	sp, #28
 800215e:	af00      	add	r7, sp, #0
 8002160:	4601      	mov	r1, r0
 8002162:	e9c7 2300 	strd	r2, r3, [r7]
 8002166:	460b      	mov	r3, r1
 8002168:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 800216a:	2300      	movs	r3, #0
 800216c:	82fb      	strh	r3, [r7, #22]
 800216e:	e01b      	b.n	80021a8 <crcAddSignature+0x4e>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 8002170:	8af9      	ldrh	r1, [r7, #22]
 8002172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002176:	f1c1 0620 	rsb	r6, r1, #32
 800217a:	f1a1 0020 	sub.w	r0, r1, #32
 800217e:	fa22 f401 	lsr.w	r4, r2, r1
 8002182:	fa03 f606 	lsl.w	r6, r3, r6
 8002186:	4334      	orrs	r4, r6
 8002188:	fa23 f000 	lsr.w	r0, r3, r0
 800218c:	4304      	orrs	r4, r0
 800218e:	fa23 f501 	lsr.w	r5, r3, r1
 8002192:	b2e2      	uxtb	r2, r4
 8002194:	89fb      	ldrh	r3, [r7, #14]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ffaf 	bl	80020fc <crcAddByte>
 800219e:	4603      	mov	r3, r0
 80021a0:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 80021a2:	8afb      	ldrh	r3, [r7, #22]
 80021a4:	3308      	adds	r3, #8
 80021a6:	82fb      	strh	r3, [r7, #22]
 80021a8:	8afb      	ldrh	r3, [r7, #22]
 80021aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80021ac:	d9e0      	bls.n	8002170 <crcAddSignature+0x16>
    }
    return crc_val;
 80021ae:	89fb      	ldrh	r3, [r7, #14]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021b8 <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80021c6:	e00a      	b.n	80021de <crcAdd+0x26>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	60ba      	str	r2, [r7, #8]
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	89fb      	ldrh	r3, [r7, #14]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff91 	bl	80020fc <crcAddByte>
 80021da:	4603      	mov	r3, r0
 80021dc:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	1e5a      	subs	r2, r3, #1
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1ef      	bne.n	80021c8 <crcAdd+0x10>
    }
    return crc_val;
 80021e8:	89fb      	ldrh	r3, [r7, #14]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       void* buf,
                                       uint16_t buf_len)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b089      	sub	sp, #36	@ 0x24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	4613      	mov	r3, r2
 80021fe:	80fb      	strh	r3, [r7, #6]
    size_t current_index = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
    CanardPoolAllocatorBlock *abuf = buf;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	617b      	str	r3, [r7, #20]
    allocator->arena = buf;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	611a      	str	r2, [r3, #16]
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3304      	adds	r3, #4
 8002212:	61bb      	str	r3, [r7, #24]
    while (current_index < buf_len)
 8002214:	e00b      	b.n	800222e <initPoolAllocator+0x3c>
    {
        *current_block = &abuf[current_index];
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	015b      	lsls	r3, r3, #5
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	441a      	add	r2, r3
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	601a      	str	r2, [r3, #0]
        current_block = &((*current_block)->next);
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	61bb      	str	r3, [r7, #24]
        current_index++;
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	3301      	adds	r3, #1
 800222c:	61fb      	str	r3, [r7, #28]
    while (current_index < buf_len)
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	69fa      	ldr	r2, [r7, #28]
 8002232:	429a      	cmp	r2, r3
 8002234:	d3ef      	bcc.n	8002216 <initPoolAllocator+0x24>
    }
    *current_block = NULL;
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

    allocator->statistics.capacity_blocks = buf_len;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	88fa      	ldrh	r2, [r7, #6]
 8002240:	811a      	strh	r2, [r3, #8]
    allocator->statistics.current_usage_blocks = 0;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	815a      	strh	r2, [r3, #10]
    allocator->statistics.peak_usage_blocks = 0;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	819a      	strh	r2, [r3, #12]
    // user should initialize semaphore after the canardInit
    // or at first call of canard_allocate_sem_take
    allocator->semaphore = NULL;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
}
 8002254:	bf00      	nop
 8002256:	3724      	adds	r7, #36	@ 0x24
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <allocateBlock+0x14>
    {
#if CANARD_ALLOCATE_SEM
        canard_allocate_sem_give(allocator);
#endif
        return NULL;
 8002270:	2300      	movs	r3, #0
 8002272:	e018      	b.n	80022a6 <allocateBlock+0x46>
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	60fb      	str	r3, [r7, #12]
    allocator->free_list = allocator->free_list->next;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	605a      	str	r2, [r3, #4]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	895b      	ldrh	r3, [r3, #10]
 8002288:	3301      	adds	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	815a      	strh	r2, [r3, #10]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	899a      	ldrh	r2, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	895b      	ldrh	r3, [r3, #10]
 8002298:	429a      	cmp	r2, r3
 800229a:	d203      	bcs.n	80022a4 <allocateBlock+0x44>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	895a      	ldrh	r2, [r3, #10]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	819a      	strh	r2, [r3, #12]
    }
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
    return result;
 80022a4:	68fb      	ldr	r3, [r7, #12]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b085      	sub	sp, #20
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	60fb      	str	r3, [r7, #12]

    block->next = allocator->free_list;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	601a      	str	r2, [r3, #0]
    allocator->free_list = block;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	605a      	str	r2, [r3, #4]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
    allocator->statistics.current_usage_blocks--;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	895b      	ldrh	r3, [r3, #10]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	815a      	strh	r2, [r3, #10]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <canardSTM32Recieve>:
 *         This parameter can be a value of @arg FDCAN_Rx_location.
 * @param  rx_frame pointer to a CanardCANFrame structure where the received CAN message will be
 * 		stored.
 * @retval ret == 1: OK, ret < 0: CANARD_ERROR, ret == 0: Check hcan->ErrorCode
 */
int16_t canardSTM32Recieve(CAN_HandleTypeDef *hcan, uint32_t RxLocation, CanardCANFrame *const rx_frame) {
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b08e      	sub	sp, #56	@ 0x38
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
	if (rx_frame == NULL) {
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d102      	bne.n	80022fe <canardSTM32Recieve+0x18>
		return -CANARD_ERROR_INVALID_ARGUMENT;
 80022f8:	f06f 0301 	mvn.w	r3, #1
 80022fc:	e031      	b.n	8002362 <canardSTM32Recieve+0x7c>
	}

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	if (HAL_CAN_GetRxMessage(hcan, RxLocation, &RxHeader, RxData) == HAL_OK) {
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	f107 021c 	add.w	r2, r7, #28
 8002306:	68b9      	ldr	r1, [r7, #8]
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f001 fc2e 	bl	8003b6a <HAL_CAN_GetRxMessage>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d125      	bne.n	8002360 <canardSTM32Recieve+0x7a>
		//		printf("%02x", RxData[i]);
		//	}
		//	printf("\n");

		// Process ID to canard format
		rx_frame->id = RxHeader.ExtId;
 8002314:	6a3a      	ldr	r2, [r7, #32]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	601a      	str	r2, [r3, #0]

		if (RxHeader.IDE == CAN_ID_EXT) { // canard will only process the message if it is extended ID
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	2b04      	cmp	r3, #4
 800231e:	d105      	bne.n	800232c <canardSTM32Recieve+0x46>
			rx_frame->id |= CANARD_CAN_FRAME_EFF;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	601a      	str	r2, [r3, #0]
		}

		if (RxHeader.RTR == CAN_RTR_REMOTE) { // canard won't process the message if it is a remote frame
 800232c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232e:	2b02      	cmp	r3, #2
 8002330:	d105      	bne.n	800233e <canardSTM32Recieve+0x58>
			rx_frame->id |= CANARD_CAN_FRAME_RTR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	601a      	str	r2, [r3, #0]
		}

		rx_frame->data_len = RxHeader.DLC;
 800233e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002340:	b2da      	uxtb	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	731a      	strb	r2, [r3, #12]
		memcpy(rx_frame->data, RxData, RxHeader.DLC);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3304      	adds	r3, #4
 800234a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800234c:	f107 0114 	add.w	r1, r7, #20
 8002350:	4618      	mov	r0, r3
 8002352:	f005 f92c 	bl	80075ae <memcpy>

		// assume a single interface
		rx_frame->iface_id = 0;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	735a      	strb	r2, [r3, #13]

		return 1;
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <canardSTM32Recieve+0x7c>
	}

	// Either no CAN msg to be read, or an error that can be read from hcan->ErrorCode
	return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3738      	adds	r7, #56	@ 0x38
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <canardSTM32Transmit>:
 *         the configuration information for the specified FDCAN.
 * @param  tx_frame pointer to a CanardCANFrame structure that contains the CAN message to
 * 		transmit.
 * @retval ret == 1: OK, ret < 0: CANARD_ERROR, ret == 0: Check hcan->ErrorCode
 */
int16_t canardSTM32Transmit(CAN_HandleTypeDef *hcan, const CanardCANFrame* const tx_frame) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	@ 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
	if (tx_frame == NULL) {
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <canardSTM32Transmit+0x16>
		return -CANARD_ERROR_INVALID_ARGUMENT;
 800237c:	f06f 0301 	mvn.w	r3, #1
 8002380:	e042      	b.n	8002408 <canardSTM32Transmit+0x9c>
	}

	if (tx_frame->id & CANARD_CAN_FRAME_ERR) {
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <canardSTM32Transmit+0x28>
		return -CANARD_ERROR_INVALID_ARGUMENT; // unsupported frame format
 800238e:	f06f 0301 	mvn.w	r3, #1
 8002392:	e039      	b.n	8002408 <canardSTM32Transmit+0x9c>

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8];

	// Process canard id to STM FDCAN header format
	if (tx_frame->id & CANARD_CAN_FRAME_EFF) {
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	da07      	bge.n	80023ac <canardSTM32Transmit+0x40>
		TxHeader.IDE = CAN_ID_EXT;
 800239c:	2304      	movs	r3, #4
 800239e:	61bb      	str	r3, [r7, #24]
		TxHeader.ExtId = tx_frame->id & CANARD_CAN_EXT_ID_MASK;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	e006      	b.n	80023ba <canardSTM32Transmit+0x4e>
	} else {
		TxHeader.IDE = CAN_ID_STD;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61bb      	str	r3, [r7, #24]
		TxHeader.StdId = tx_frame->id & CANARD_CAN_STD_ID_MASK;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023b8:	613b      	str	r3, [r7, #16]
	}

	TxHeader.DLC = tx_frame->data_len;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	7b1b      	ldrb	r3, [r3, #12]
 80023be:	623b      	str	r3, [r7, #32]

	if (tx_frame->id & CANARD_CAN_FRAME_RTR) {
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <canardSTM32Transmit+0x66>
		TxHeader.RTR = CAN_RTR_REMOTE;
 80023cc:	2302      	movs	r3, #2
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	e001      	b.n	80023d6 <canardSTM32Transmit+0x6a>
	} else {
		TxHeader.RTR = CAN_RTR_DATA;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
	}

	TxHeader.TransmitGlobalTime = DISABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	memcpy(TxData, tx_frame->data, TxHeader.DLC);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	1d19      	adds	r1, r3, #4
 80023e0:	6a3a      	ldr	r2, [r7, #32]
 80023e2:	f107 0308 	add.w	r3, r7, #8
 80023e6:	4618      	mov	r0, r3
 80023e8:	f005 f8e1 	bl	80075ae <memcpy>

	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &canMailbox) == HAL_OK) {
 80023ec:	f107 0208 	add.w	r2, r7, #8
 80023f0:	f107 0110 	add.w	r1, r7, #16
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <canardSTM32Transmit+0xa4>)
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f001 fae7 	bl	80039ca <HAL_CAN_AddTxMessage>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <canardSTM32Transmit+0x9a>
//		printf("Successfully sent message with id: %lu \n", TxHeader.StdId);
		return 1;
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <canardSTM32Transmit+0x9c>
	}

//	printf("Failed at adding message with id: %lu to Tx Fifo", TxHeader.StdId);
	// This might be for many reasons including the Tx Fifo being full, the error can be read from hcan->ErrorCode
	return 0;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3728      	adds	r7, #40	@ 0x28
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000104 	.word	0x20000104

08002414 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <MX_GPIO_Init+0x44>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241e:	4a0e      	ldr	r2, [pc, #56]	@ (8002458 <MX_GPIO_Init+0x44>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002426:	4b0c      	ldr	r3, [pc, #48]	@ (8002458 <MX_GPIO_Init+0x44>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <MX_GPIO_Init+0x44>)
 8002434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002436:	4a08      	ldr	r2, [pc, #32]	@ (8002458 <MX_GPIO_Init+0x44>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <MX_GPIO_Init+0x44>)
 8002440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]

}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000

0800245c <_Z11getUniqueIDPh>:


/*
  get a 16 byte unique ID for this node, this should be based on the CPU unique ID or other unique ID
 */
void getUniqueID(uint8_t id[16]){
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	uint32_t HALUniqueIDs[3];
// Make Unique ID out of the 96-bit STM32 UID and fill the rest with 0s
	memset(id, 0, 16);
 8002464:	2210      	movs	r2, #16
 8002466:	2100      	movs	r1, #0
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f005 f805 	bl	8007478 <memset>
	HALUniqueIDs[0] = HAL_GetUIDw0();
 800246e:	f001 f87f 	bl	8003570 <HAL_GetUIDw0>
 8002472:	4603      	mov	r3, r0
 8002474:	60fb      	str	r3, [r7, #12]
	HALUniqueIDs[1] = HAL_GetUIDw1();
 8002476:	f001 f887 	bl	8003588 <HAL_GetUIDw1>
 800247a:	4603      	mov	r3, r0
 800247c:	613b      	str	r3, [r7, #16]
	HALUniqueIDs[2] = HAL_GetUIDw2();
 800247e:	f001 f88f 	bl	80035a0 <HAL_GetUIDw2>
 8002482:	4603      	mov	r3, r0
 8002484:	617b      	str	r3, [r7, #20]
	memcpy(id, HALUniqueIDs, 12);
 8002486:	f107 030c 	add.w	r3, r7, #12
 800248a:	220c      	movs	r2, #12
 800248c:	4619      	mov	r1, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f005 f88d 	bl	80075ae <memcpy>
}
 8002494:	bf00      	nop
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800249c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a0:	b08a      	sub	sp, #40	@ 0x28
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
	// Receiving
	CanardCANFrame rx_frame;

	const uint64_t timestamp = HAL_GetTick() * 1000ULL;
 80024a6:	f001 f857 	bl	8003558 <HAL_GetTick>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2200      	movs	r2, #0
 80024ae:	469a      	mov	sl, r3
 80024b0:	4693      	mov	fp, r2
 80024b2:	4652      	mov	r2, sl
 80024b4:	465b      	mov	r3, fp
 80024b6:	f04f 0000 	mov.w	r0, #0
 80024ba:	f04f 0100 	mov.w	r1, #0
 80024be:	0159      	lsls	r1, r3, #5
 80024c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024c4:	0150      	lsls	r0, r2, #5
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	ebb2 040a 	subs.w	r4, r2, sl
 80024ce:	eb63 050b 	sbc.w	r5, r3, fp
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	00ab      	lsls	r3, r5, #2
 80024dc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80024e0:	00a2      	lsls	r2, r4, #2
 80024e2:	4614      	mov	r4, r2
 80024e4:	461d      	mov	r5, r3
 80024e6:	eb14 080a 	adds.w	r8, r4, sl
 80024ea:	eb45 090b 	adc.w	r9, r5, fp
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002502:	4690      	mov	r8, r2
 8002504:	4699      	mov	r9, r3
 8002506:	e9c7 8908 	strd	r8, r9, [r7, #32]
	const int16_t rx_res = canardSTM32Recieve(hcan, CAN_RX_FIFO0, &rx_frame);
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	461a      	mov	r2, r3
 8002510:	2100      	movs	r1, #0
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff fee7 	bl	80022e6 <canardSTM32Recieve>
 8002518:	4603      	mov	r3, r0
 800251a:	83fb      	strh	r3, [r7, #30]

	if (rx_res < 0) {
 800251c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002520:	2b00      	cmp	r3, #0
 8002522:	da06      	bge.n	8002532 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
		printf("Receive error %d\n", rx_res);
 8002524:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002528:	4619      	mov	r1, r3
 800252a:	480a      	ldr	r0, [pc, #40]	@ (8002554 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800252c:	f004 fe54 	bl	80071d8 <iprintf>
	}
	else if (rx_res > 0)        // Success - process the frame
	{
		canardHandleRxFrame(&canard, &rx_frame, timestamp);
	}
}
 8002530:	e00a      	b.n	8002548 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
	else if (rx_res > 0)        // Success - process the frame
 8002532:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002536:	2b00      	cmp	r3, #0
 8002538:	dd06      	ble.n	8002548 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
		canardHandleRxFrame(&canard, &rx_frame, timestamp);
 800253a:	f107 010c 	add.w	r1, r7, #12
 800253e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002542:	4805      	ldr	r0, [pc, #20]	@ (8002558 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8002544:	f7fe f91e 	bl	8000784 <canardHandleRxFrame>
}
 8002548:	bf00      	nop
 800254a:	3728      	adds	r7, #40	@ 0x28
 800254c:	46bd      	mov	sp, r7
 800254e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002552:	bf00      	nop
 8002554:	0800805c 	.word	0x0800805c
 8002558:	20000130 	.word	0x20000130

0800255c <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer>:
// NOTE: All canard handlers and senders are based on this reference: https://dronecan.github.io/Specification/7._List_of_standard_data_types/
// Alternatively, you can look at the corresponding generated header file in the dsdlc_generated folder

// Canard Handlers ( Many have code copied from libcanard esc_node example: https://github.com/dronecan/libcanard/blob/master/examples/ESCNode/esc_node.c )

void handle_NodeStatus(CanardInstance *ins, CanardRxTransfer *transfer) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
	struct uavcan_protocol_NodeStatus nodeStatus;

	if (uavcan_protocol_NodeStatus_decode(transfer, &nodeStatus)) {
 8002566:	f107 030c 	add.w	r3, r7, #12
 800256a:	4619      	mov	r1, r3
 800256c:	6838      	ldr	r0, [r7, #0]
 800256e:	f004 fd4d 	bl	800700c <uavcan_protocol_NodeStatus_decode>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d15d      	bne.n	8002634 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xd8>
		return;
	}

	printf("Node health: %ud Node Mode: %ud\n", nodeStatus.health, nodeStatus.mode);
 8002578:	7c3b      	ldrb	r3, [r7, #16]
 800257a:	4619      	mov	r1, r3
 800257c:	7c7b      	ldrb	r3, [r7, #17]
 800257e:	461a      	mov	r2, r3
 8002580:	482e      	ldr	r0, [pc, #184]	@ (800263c <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xe0>)
 8002582:	f004 fe29 	bl	80071d8 <iprintf>

	printf("Node Health ");
 8002586:	482e      	ldr	r0, [pc, #184]	@ (8002640 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xe4>)
 8002588:	f004 fe26 	bl	80071d8 <iprintf>

	switch (nodeStatus.health) {
 800258c:	7c3b      	ldrb	r3, [r7, #16]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d81a      	bhi.n	80025c8 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x6c>
 8002592:	a201      	add	r2, pc, #4	@ (adr r2, 8002598 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x3c>)
 8002594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002598:	080025a9 	.word	0x080025a9
 800259c:	080025b1 	.word	0x080025b1
 80025a0:	080025b9 	.word	0x080025b9
 80025a4:	080025c1 	.word	0x080025c1
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK:
		printf("OK\n");
 80025a8:	4826      	ldr	r0, [pc, #152]	@ (8002644 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xe8>)
 80025aa:	f004 fe85 	bl	80072b8 <puts>
		break;
 80025ae:	e00f      	b.n	80025d0 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_WARNING:
		printf("WARNING\n");
 80025b0:	4825      	ldr	r0, [pc, #148]	@ (8002648 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xec>)
 80025b2:	f004 fe81 	bl	80072b8 <puts>
		break;
 80025b6:	e00b      	b.n	80025d0 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_ERROR:
		printf("ERROR\n");
 80025b8:	4824      	ldr	r0, [pc, #144]	@ (800264c <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xf0>)
 80025ba:	f004 fe7d 	bl	80072b8 <puts>
		break;
 80025be:	e007      	b.n	80025d0 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_CRITICAL:
		printf("CRITICAL\n");
 80025c0:	4823      	ldr	r0, [pc, #140]	@ (8002650 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xf4>)
 80025c2:	f004 fe79 	bl	80072b8 <puts>
		break;
 80025c6:	e003      	b.n	80025d0 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x74>
	default:
		printf("UNKNOWN?\n");
 80025c8:	4822      	ldr	r0, [pc, #136]	@ (8002654 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xf8>)
 80025ca:	f004 fe75 	bl	80072b8 <puts>
		break;
 80025ce:	bf00      	nop
	}

	printf("Node Mode ");
 80025d0:	4821      	ldr	r0, [pc, #132]	@ (8002658 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xfc>)
 80025d2:	f004 fe01 	bl	80071d8 <iprintf>

	switch(nodeStatus.mode) {
 80025d6:	7c7b      	ldrb	r3, [r7, #17]
 80025d8:	2b07      	cmp	r3, #7
 80025da:	d827      	bhi.n	800262c <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xd0>
 80025dc:	a201      	add	r2, pc, #4	@ (adr r2, 80025e4 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x88>)
 80025de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e2:	bf00      	nop
 80025e4:	08002605 	.word	0x08002605
 80025e8:	0800260d 	.word	0x0800260d
 80025ec:	08002615 	.word	0x08002615
 80025f0:	0800261d 	.word	0x0800261d
 80025f4:	0800262d 	.word	0x0800262d
 80025f8:	0800262d 	.word	0x0800262d
 80025fc:	0800262d 	.word	0x0800262d
 8002600:	08002625 	.word	0x08002625
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL:
		printf("OPERATIONAL\n");
 8002604:	4815      	ldr	r0, [pc, #84]	@ (800265c <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x100>)
 8002606:	f004 fe57 	bl	80072b8 <puts>
		break;
 800260a:	e014      	b.n	8002636 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_INITIALIZATION:
		printf("INITIALIZATION\n");
 800260c:	4814      	ldr	r0, [pc, #80]	@ (8002660 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x104>)
 800260e:	f004 fe53 	bl	80072b8 <puts>
		break;
 8002612:	e010      	b.n	8002636 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_MAINTENANCE:
		printf("MAINTENANCE\n");
 8002614:	4813      	ldr	r0, [pc, #76]	@ (8002664 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x108>)
 8002616:	f004 fe4f 	bl	80072b8 <puts>
		break;
 800261a:	e00c      	b.n	8002636 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_SOFTWARE_UPDATE:
		printf("SOFTWARE UPDATE\n");
 800261c:	4812      	ldr	r0, [pc, #72]	@ (8002668 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x10c>)
 800261e:	f004 fe4b 	bl	80072b8 <puts>
		break;
 8002622:	e008      	b.n	8002636 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_OFFLINE:
		printf("OFFLINE\n");
 8002624:	4811      	ldr	r0, [pc, #68]	@ (800266c <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0x110>)
 8002626:	f004 fe47 	bl	80072b8 <puts>
		break;
 800262a:	e004      	b.n	8002636 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xda>
	default:
		printf("UNKNOWN?\n");
 800262c:	4809      	ldr	r0, [pc, #36]	@ (8002654 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xf8>)
 800262e:	f004 fe43 	bl	80072b8 <puts>
		break;
 8002632:	e000      	b.n	8002636 <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer+0xda>
		return;
 8002634:	bf00      	nop
	}
}
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	08008070 	.word	0x08008070
 8002640:	08008094 	.word	0x08008094
 8002644:	080080a4 	.word	0x080080a4
 8002648:	080080a8 	.word	0x080080a8
 800264c:	080080b0 	.word	0x080080b0
 8002650:	080080b8 	.word	0x080080b8
 8002654:	080080c4 	.word	0x080080c4
 8002658:	080080d0 	.word	0x080080d0
 800265c:	080080dc 	.word	0x080080dc
 8002660:	080080e8 	.word	0x080080e8
 8002664:	080080f8 	.word	0x080080f8
 8002668:	08008104 	.word	0x08008104
 800266c:	08008114 	.word	0x08008114

08002670 <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer>:

void handle_NotifyState(CanardInstance *ins, CanardRxTransfer *transfer) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b0c8      	sub	sp, #288	@ 0x120
 8002674:	af00      	add	r7, sp, #0
 8002676:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800267a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800267e:	6018      	str	r0, [r3, #0]
 8002680:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002684:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002688:	6019      	str	r1, [r3, #0]
	struct ardupilot_indication_NotifyState notifyState;

	if (ardupilot_indication_NotifyState_decode(transfer, &notifyState)) {
 800268a:	f107 0208 	add.w	r2, r7, #8
 800268e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002692:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002696:	4611      	mov	r1, r2
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	f004 f981 	bl	80069a0 <ardupilot_indication_NotifyState_decode>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d13b      	bne.n	800271c <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer+0xac>
		return;
	}

	uint32_t nl = notifyState.vehicle_state & 0xFFFFFFFF;  // ignoring the last 32 bits for printing since the highest vehicle_state value right now is 23 even though they're allowed to be up to 64bit unsigned integer
 80026a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80026ac:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 80026b0:	4613      	mov	r3, r2
 80026b2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	printf("Vehicle State: %lu ", nl);
 80026b6:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 80026ba:	481b      	ldr	r0, [pc, #108]	@ (8002728 <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer+0xb8>)
 80026bc:	f004 fd8c 	bl	80071d8 <iprintf>

	if (notifyState.aux_data.len > 0) {
 80026c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026c4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80026c8:	785b      	ldrb	r3, [r3, #1]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d022      	beq.n	8002714 <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer+0xa4>
		printf("Aux Data: 0x");
 80026ce:	4817      	ldr	r0, [pc, #92]	@ (800272c <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer+0xbc>)
 80026d0:	f004 fd82 	bl	80071d8 <iprintf>

		for (int i = 0; i < notifyState.aux_data.len; i++) {
 80026d4:	2300      	movs	r3, #0
 80026d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80026da:	e011      	b.n	8002700 <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer+0x90>
			printf("%02x", notifyState.aux_data.data[i]);
 80026dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80026e0:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 80026e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026e8:	4413      	add	r3, r2
 80026ea:	3302      	adds	r3, #2
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	4619      	mov	r1, r3
 80026f0:	480f      	ldr	r0, [pc, #60]	@ (8002730 <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer+0xc0>)
 80026f2:	f004 fd71 	bl	80071d8 <iprintf>
		for (int i = 0; i < notifyState.aux_data.len; i++) {
 80026f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026fa:	3301      	adds	r3, #1
 80026fc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002700:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002704:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002708:	785b      	ldrb	r3, [r3, #1]
 800270a:	461a      	mov	r2, r3
 800270c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002710:	4293      	cmp	r3, r2
 8002712:	dbe3      	blt.n	80026dc <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer+0x6c>
		}
	}

	printf("\n");
 8002714:	200a      	movs	r0, #10
 8002716:	f004 fd71 	bl	80071fc <putchar>
 800271a:	e000      	b.n	800271e <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer+0xae>
		return;
 800271c:	bf00      	nop

}
 800271e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	0800811c 	.word	0x0800811c
 800272c:	08008130 	.word	0x08008130
 8002730:	08008140 	.word	0x08008140

08002734 <_ZL19handle_ArrayCommandP14CanardInstanceP16CanardRxTransfer>:

/*
 * handle a servo ArrayCommand request
 */
static void handle_ArrayCommand(CanardInstance *ins, CanardRxTransfer *transfer)
{
 8002734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002738:	b0a8      	sub	sp, #160	@ 0xa0
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
	printf("entered array command\n");
 8002740:	4844      	ldr	r0, [pc, #272]	@ (8002854 <_ZL19handle_ArrayCommandP14CanardInstanceP16CanardRxTransfer+0x120>)
 8002742:	f004 fdb9 	bl	80072b8 <puts>
    struct uavcan_equipment_actuator_ArrayCommand cmd;
    if (uavcan_equipment_actuator_ArrayCommand_decode(transfer, &cmd)) { //return true if decode is invalid
 8002746:	f107 030c 	add.w	r3, r7, #12
 800274a:	4619      	mov	r1, r3
 800274c:	6838      	ldr	r0, [r7, #0]
 800274e:	f004 f9f6 	bl	8006b3e <uavcan_equipment_actuator_ArrayCommand_decode>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d177      	bne.n	8002848 <_ZL19handle_ArrayCommandP14CanardInstanceP16CanardRxTransfer+0x114>
        return;
    }
    uint64_t tnow = HAL_GetTick() * 1000ULL;
 8002758:	f000 fefe 	bl	8003558 <HAL_GetTick>
 800275c:	4603      	mov	r3, r0
 800275e:	2200      	movs	r2, #0
 8002760:	469a      	mov	sl, r3
 8002762:	4693      	mov	fp, r2
 8002764:	4652      	mov	r2, sl
 8002766:	465b      	mov	r3, fp
 8002768:	f04f 0000 	mov.w	r0, #0
 800276c:	f04f 0100 	mov.w	r1, #0
 8002770:	0159      	lsls	r1, r3, #5
 8002772:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002776:	0150      	lsls	r0, r2, #5
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	ebb2 040a 	subs.w	r4, r2, sl
 8002780:	eb63 050b 	sbc.w	r5, r3, fp
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	00ab      	lsls	r3, r5, #2
 800278e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002792:	00a2      	lsls	r2, r4, #2
 8002794:	4614      	mov	r4, r2
 8002796:	461d      	mov	r5, r3
 8002798:	eb14 080a 	adds.w	r8, r4, sl
 800279c:	eb45 090b 	adc.w	r9, r5, fp
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027b4:	4690      	mov	r8, r2
 80027b6:	4699      	mov	r9, r3
 80027b8:	e9c7 8924 	strd	r8, r9, [r7, #144]	@ 0x90
    for (uint8_t i=0; i < cmd.commands.len; i++) {
 80027bc:	2300      	movs	r3, #0
 80027be:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 80027c2:	e03b      	b.n	800283c <_ZL19handle_ArrayCommandP14CanardInstanceP16CanardRxTransfer+0x108>
        uint8_t actuator_id = cmd.commands.data[i].actuator_id;
 80027c4:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	33a0      	adds	r3, #160	@ 0xa0
 80027cc:	443b      	add	r3, r7
 80027ce:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 80027d2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		float actuator_pos = cmd.commands.data[i].command_value;
 80027d6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	33a0      	adds	r3, #160	@ 0xa0
 80027de:	443b      	add	r3, r7
 80027e0:	3b8c      	subs	r3, #140	@ 0x8c
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

        switch (cmd.commands.data[i].command_type) {
 80027e8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	33a0      	adds	r3, #160	@ 0xa0
 80027f0:	443b      	add	r3, r7
 80027f2:	f813 3c8f 	ldrb.w	r3, [r3, #-143]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <_ZL19handle_ArrayCommandP14CanardInstanceP16CanardRxTransfer+0xcc>
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d009      	beq.n	8002812 <_ZL19handle_ArrayCommandP14CanardInstanceP16CanardRxTransfer+0xde>
 80027fe:	e011      	b.n	8002824 <_ZL19handle_ArrayCommandP14CanardInstanceP16CanardRxTransfer+0xf0>
        case UAVCAN_EQUIPMENT_ACTUATOR_COMMAND_COMMAND_TYPE_UNITLESS:
			servo_controller.update_servo_position(actuator_id, actuator_pos);
 8002800:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002804:	ed97 0a22 	vldr	s0, [r7, #136]	@ 0x88
 8002808:	4619      	mov	r1, r3
 800280a:	4813      	ldr	r0, [pc, #76]	@ (8002858 <_ZL19handle_ArrayCommandP14CanardInstanceP16CanardRxTransfer+0x124>)
 800280c:	f003 ff40 	bl	8006690 <_ZN15ServoController21update_servo_positionEhf>
            break;
 8002810:	e008      	b.n	8002824 <_ZL19handle_ArrayCommandP14CanardInstanceP16CanardRxTransfer+0xf0>
        case UAVCAN_EQUIPMENT_ACTUATOR_COMMAND_COMMAND_TYPE_PWM:
			servo_controller.update_servo_position(actuator_id, actuator_pos);
 8002812:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002816:	ed97 0a22 	vldr	s0, [r7, #136]	@ 0x88
 800281a:	4619      	mov	r1, r3
 800281c:	480e      	ldr	r0, [pc, #56]	@ (8002858 <_ZL19handle_ArrayCommandP14CanardInstanceP16CanardRxTransfer+0x124>)
 800281e:	f003 ff37 	bl	8006690 <_ZN15ServoController21update_servo_positionEhf>
            break;
 8002822:	bf00      	nop
        }
        servo_controller.update_servo_last_update_us(actuator_id, tnow);
 8002824:	f897 108f 	ldrb.w	r1, [r7, #143]	@ 0x8f
 8002828:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800282c:	480a      	ldr	r0, [pc, #40]	@ (8002858 <_ZL19handle_ArrayCommandP14CanardInstanceP16CanardRxTransfer+0x124>)
 800282e:	f004 f811 	bl	8006854 <_ZN15ServoController27update_servo_last_update_usEhy>
    for (uint8_t i=0; i < cmd.commands.len; i++) {
 8002832:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002836:	3301      	adds	r3, #1
 8002838:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800283c:	7b3b      	ldrb	r3, [r7, #12]
 800283e:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8002842:	429a      	cmp	r2, r3
 8002844:	d3be      	bcc.n	80027c4 <_ZL19handle_ArrayCommandP14CanardInstanceP16CanardRxTransfer+0x90>
 8002846:	e000      	b.n	800284a <_ZL19handle_ArrayCommandP14CanardInstanceP16CanardRxTransfer+0x116>
        return;
 8002848:	bf00      	nop

        //call a function to run the servos with the data set in this function
    }
}
 800284a:	37a0      	adds	r7, #160	@ 0xa0
 800284c:	46bd      	mov	sp, r7
 800284e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002852:	bf00      	nop
 8002854:	08008148 	.word	0x08008148
 8002858:	20000560 	.word	0x20000560
 800285c:	00000000 	.word	0x00000000

08002860 <_Z18handle_GetNodeInfoP14CanardInstanceP16CanardRxTransfer>:

/*
  handle a GetNodeInfo request
*/
// TODO: All the data in here is temporary for testing. If actually need to send valid data, edit accordingly.
void handle_GetNodeInfo(CanardInstance *ins, CanardRxTransfer *transfer) {
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	f5ad 7d4b 	sub.w	sp, sp, #812	@ 0x32c
 8002866:	af06      	add	r7, sp, #24
 8002868:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800286c:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8002870:	6018      	str	r0, [r3, #0]
 8002872:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8002876:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800287a:	6019      	str	r1, [r3, #0]
	printf("GetNodeInfo request from %d\n", transfer->source_node_id);
 800287c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8002880:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	7edb      	ldrb	r3, [r3, #27]
 8002888:	4619      	mov	r1, r3
 800288a:	484f      	ldr	r0, [pc, #316]	@ (80029c8 <_Z18handle_GetNodeInfoP14CanardInstanceP16CanardRxTransfer+0x168>)
 800288c:	f004 fca4 	bl	80071d8 <iprintf>

	uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];
	struct uavcan_protocol_GetNodeInfoResponse pkt;

	memset(&pkt, 0, sizeof(pkt));
 8002890:	f107 0308 	add.w	r3, r7, #8
 8002894:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f004 fdec 	bl	8007478 <memset>

	node_status.uptime_sec = HAL_GetTick() / 1000ULL;
 80028a0:	f000 fe5a 	bl	8003558 <HAL_GetTick>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4a49      	ldr	r2, [pc, #292]	@ (80029cc <_Z18handle_GetNodeInfoP14CanardInstanceP16CanardRxTransfer+0x16c>)
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	099b      	lsrs	r3, r3, #6
 80028ae:	4a48      	ldr	r2, [pc, #288]	@ (80029d0 <_Z18handle_GetNodeInfoP14CanardInstanceP16CanardRxTransfer+0x170>)
 80028b0:	6013      	str	r3, [r2, #0]
	pkt.status = node_status;
 80028b2:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80028b6:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80028ba:	4a45      	ldr	r2, [pc, #276]	@ (80029d0 <_Z18handle_GetNodeInfoP14CanardInstanceP16CanardRxTransfer+0x170>)
 80028bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80028be:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// fill in your major and minor firmware version
	pkt.software_version.major = 1;
 80028c2:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80028c6:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80028ca:	2201      	movs	r2, #1
 80028cc:	741a      	strb	r2, [r3, #16]
	pkt.software_version.minor = 0;
 80028ce:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80028d2:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80028d6:	2200      	movs	r2, #0
 80028d8:	745a      	strb	r2, [r3, #17]
	pkt.software_version.optional_field_flags = 0;
 80028da:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80028de:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80028e2:	2200      	movs	r2, #0
 80028e4:	749a      	strb	r2, [r3, #18]
	pkt.software_version.vcs_commit = 0; // should put git hash in here
 80028e6:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80028ea:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80028ee:	2200      	movs	r2, #0
 80028f0:	615a      	str	r2, [r3, #20]

	// should fill in hardware version
	pkt.hardware_version.major = 1;
 80028f2:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80028f6:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2020 	strb.w	r2, [r3, #32]
	pkt.hardware_version.minor = 0;
 8002900:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8002904:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	// just setting all 16 bytes to 1 for testing
	getUniqueID(pkt.hardware_version.unique_id);
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	3322      	adds	r3, #34	@ 0x22
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fda1 	bl	800245c <_Z11getUniqueIDPh>

	strncpy((char*)pkt.name.data, "SERVONode", sizeof(pkt.name.data));
 800291a:	f107 0308 	add.w	r3, r7, #8
 800291e:	f203 1333 	addw	r3, r3, #307	@ 0x133
 8002922:	2250      	movs	r2, #80	@ 0x50
 8002924:	492b      	ldr	r1, [pc, #172]	@ (80029d4 <_Z18handle_GetNodeInfoP14CanardInstanceP16CanardRxTransfer+0x174>)
 8002926:	4618      	mov	r0, r3
 8002928:	f004 fdae 	bl	8007488 <strncpy>
	pkt.name.len = strnlen((char*)pkt.name.data, sizeof(pkt.name.data));
 800292c:	f107 0308 	add.w	r3, r7, #8
 8002930:	f203 1333 	addw	r3, r3, #307	@ 0x133
 8002934:	2150      	movs	r1, #80	@ 0x50
 8002936:	4618      	mov	r0, r3
 8002938:	f004 fdb9 	bl	80074ae <strnlen>
 800293c:	4603      	mov	r3, r0
 800293e:	b2da      	uxtb	r2, r3
 8002940:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8002944:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8002948:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132

	uint16_t total_size = uavcan_protocol_GetNodeInfoResponse_encode(&pkt, buffer);
 800294c:	f507 72ca 	add.w	r2, r7, #404	@ 0x194
 8002950:	f107 0308 	add.w	r3, r7, #8
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f004 fa7e 	bl	8006e58 <uavcan_protocol_GetNodeInfoResponse_encode>
 800295c:	4603      	mov	r3, r0
 800295e:	f8a7 330e 	strh.w	r3, [r7, #782]	@ 0x30e

	canardRequestOrRespond(ins,
 8002962:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8002966:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	7edc      	ldrb	r4, [r3, #27]
 800296e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8002972:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3319      	adds	r3, #25
 800297a:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 800297e:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	7e92      	ldrb	r2, [r2, #26]
 8002986:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 800298a:	f5a1 7043 	sub.w	r0, r1, #780	@ 0x30c
 800298e:	f8b7 130e 	ldrh.w	r1, [r7, #782]	@ 0x30e
 8002992:	9105      	str	r1, [sp, #20]
 8002994:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8002998:	9104      	str	r1, [sp, #16]
 800299a:	2100      	movs	r1, #0
 800299c:	9103      	str	r1, [sp, #12]
 800299e:	9202      	str	r2, [sp, #8]
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	2301      	movs	r3, #1
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	a306      	add	r3, pc, #24	@ (adr r3, 80029c0 <_Z18handle_GetNodeInfoP14CanardInstanceP16CanardRxTransfer+0x160>)
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	4621      	mov	r1, r4
 80029ae:	6800      	ldr	r0, [r0, #0]
 80029b0:	f7fd fe38 	bl	8000624 <canardRequestOrRespond>
						   &transfer->transfer_id,
						   transfer->priority,
						   CanardResponse,
						   &buffer[0],
						   total_size);
}
 80029b4:	bf00      	nop
 80029b6:	f507 7745 	add.w	r7, r7, #788	@ 0x314
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd90      	pop	{r4, r7, pc}
 80029be:	bf00      	nop
 80029c0:	21c46a9e 	.word	0x21c46a9e
 80029c4:	ee468a81 	.word	0xee468a81
 80029c8:	08008160 	.word	0x08008160
 80029cc:	10624dd3 	.word	0x10624dd3
 80029d0:	20000578 	.word	0x20000578
 80029d4:	08008180 	.word	0x08008180

080029d8 <_Z15send_NodeStatusv>:

/*
  send the 1Hz NodeStatus message. This is what allows a node to show
  up in the DroneCAN GUI tool and in the flight controller logs
 */
void send_NodeStatus(void) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b0e6      	sub	sp, #408	@ 0x198
 80029dc:	af06      	add	r7, sp, #24
    uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];

    node_status.uptime_sec = HAL_GetTick() / 1000UL;
 80029de:	f000 fdbb 	bl	8003558 <HAL_GetTick>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a50 <_Z15send_NodeStatusv+0x78>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	099b      	lsrs	r3, r3, #6
 80029ec:	4a19      	ldr	r2, [pc, #100]	@ (8002a54 <_Z15send_NodeStatusv+0x7c>)
 80029ee:	6013      	str	r3, [r2, #0]
    node_status.health = UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK;
 80029f0:	4b18      	ldr	r3, [pc, #96]	@ (8002a54 <_Z15send_NodeStatusv+0x7c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	711a      	strb	r2, [r3, #4]
    node_status.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL;
 80029f6:	4b17      	ldr	r3, [pc, #92]	@ (8002a54 <_Z15send_NodeStatusv+0x7c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	715a      	strb	r2, [r3, #5]
    node_status.sub_mode = 0;
 80029fc:	4b15      	ldr	r3, [pc, #84]	@ (8002a54 <_Z15send_NodeStatusv+0x7c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	719a      	strb	r2, [r3, #6]

    // put whatever you like in here for display in GUI
    node_status.vendor_specific_status_code = 1234;
 8002a02:	4b14      	ldr	r3, [pc, #80]	@ (8002a54 <_Z15send_NodeStatusv+0x7c>)
 8002a04:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 8002a08:	811a      	strh	r2, [r3, #8]

    uint32_t len = uavcan_protocol_NodeStatus_encode(&node_status, buffer);
 8002a0a:	463b      	mov	r3, r7
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4811      	ldr	r0, [pc, #68]	@ (8002a54 <_Z15send_NodeStatusv+0x7c>)
 8002a10:	f004 fae2 	bl	8006fd8 <uavcan_protocol_NodeStatus_encode>
 8002a14:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    // we need a static variable for the transfer ID. This is
    // incremeneted on each transfer, allowing for detection of packet
    // loss
    static uint8_t transfer_id;

    canardBroadcast(&canard,
 8002a18:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	9304      	str	r3, [sp, #16]
 8002a20:	463b      	mov	r3, r7
 8002a22:	9303      	str	r3, [sp, #12]
 8002a24:	2318      	movs	r3, #24
 8002a26:	9302      	str	r3, [sp, #8]
 8002a28:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <_Z15send_NodeStatusv+0x80>)
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	f240 1355 	movw	r3, #341	@ 0x155
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	a305      	add	r3, pc, #20	@ (adr r3, 8002a48 <_Z15send_NodeStatusv+0x70>)
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	4808      	ldr	r0, [pc, #32]	@ (8002a5c <_Z15send_NodeStatusv+0x84>)
 8002a3a:	f7fd fced 	bl	8000418 <canardBroadcast>
                    UAVCAN_PROTOCOL_NODESTATUS_ID,
                    &transfer_id,
                    CANARD_TRANSFER_PRIORITY_LOW,
                    buffer,
                    len);
}
 8002a3e:	bf00      	nop
 8002a40:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	c1a7c6f1 	.word	0xc1a7c6f1
 8002a4c:	0f0868d0 	.word	0x0f0868d0
 8002a50:	10624dd3 	.word	0x10624dd3
 8002a54:	20000578 	.word	0x20000578
 8002a58:	20000584 	.word	0x20000584
 8002a5c:	20000130 	.word	0x20000130

08002a60 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh>:
bool shouldAcceptTransfer(const CanardInstance *ins,
                                 uint64_t *out_data_type_signature,
                                 uint16_t data_type_id,
                                 CanardTransferType transfer_type,
                                 uint8_t source_node_id)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	460b      	mov	r3, r1
 8002a70:	80fb      	strh	r3, [r7, #6]
 8002a72:	4613      	mov	r3, r2
 8002a74:	717b      	strb	r3, [r7, #5]
	if (transfer_type == CanardTransferTypeRequest) {
 8002a76:	797b      	ldrb	r3, [r7, #5]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d10a      	bne.n	8002a92 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x32>
	// check if we want to handle a specific service request
		switch (data_type_id) {
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d107      	bne.n	8002a92 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x32>
		case UAVCAN_PROTOCOL_GETNODEINFO_ID: {
			*out_data_type_signature = UAVCAN_PROTOCOL_GETNODEINFO_REQUEST_SIGNATURE;
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	a31e      	add	r3, pc, #120	@ (adr r3, 8002b00 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0xa0>)
 8002a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8a:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e02e      	b.n	8002af0 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x90>
		}
		}
	}
	if (transfer_type == CanardTransferTypeResponse) {
 8002a92:	797b      	ldrb	r3, [r7, #5]
 8002a94:	2b00      	cmp	r3, #0
		// check if we want to handle a specific service request
		switch (data_type_id) {
		}
	}
	if (transfer_type == CanardTransferTypeBroadcast) {
 8002a96:	797b      	ldrb	r3, [r7, #5]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d128      	bne.n	8002aee <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x8e>
		// see if we want to handle a specific broadcast packet
		switch (data_type_id) {
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	f644 6227 	movw	r2, #20007	@ 0x4e27
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d01b      	beq.n	8002ade <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x7e>
 8002aa6:	f644 6227 	movw	r2, #20007	@ 0x4e27
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	dc1f      	bgt.n	8002aee <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x8e>
 8002aae:	f240 1255 	movw	r2, #341	@ 0x155
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00b      	beq.n	8002ace <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x6e>
 8002ab6:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d117      	bne.n	8002aee <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x8e>
		case UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_ID: {
			*out_data_type_signature = UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_SIGNATURE; //Change this
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	a311      	add	r3, pc, #68	@ (adr r3, 8002b08 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0xa8>)
 8002ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac6:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e010      	b.n	8002af0 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x90>
		}
		case UAVCAN_PROTOCOL_NODESTATUS_ID: {
			*out_data_type_signature = UAVCAN_PROTOCOL_NODESTATUS_SIGNATURE;
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	a30f      	add	r3, pc, #60	@ (adr r3, 8002b10 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0xb0>)
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e008      	b.n	8002af0 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x90>
		}
		case ARDUPILOT_INDICATION_NOTIFYSTATE_ID: {
			*out_data_type_signature = ARDUPILOT_INDICATION_NOTIFYSTATE_SIGNATURE;
 8002ade:	68b9      	ldr	r1, [r7, #8]
 8002ae0:	a30d      	add	r3, pc, #52	@ (adr r3, 8002b18 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0xb8>)
 8002ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae6:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <_Z20shouldAcceptTransferPK14CanardInstancePyt18CanardTransferTypeh+0x90>
		}
		}
	}
	// we don't want any other messages
	return false;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	f3af 8000 	nop.w
 8002b00:	21c46a9e 	.word	0x21c46a9e
 8002b04:	ee468a81 	.word	0xee468a81
 8002b08:	38ec3af3 	.word	0x38ec3af3
 8002b0c:	d8a74862 	.word	0xd8a74862
 8002b10:	c1a7c6f1 	.word	0xc1a7c6f1
 8002b14:	0f0868d0 	.word	0x0f0868d0
 8002b18:	1651fdec 	.word	0x1651fdec
 8002b1c:	631f2a9c 	.word	0x631f2a9c

08002b20 <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer>:

void onTransferReceived(CanardInstance *ins, CanardRxTransfer *transfer) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
//		for (int i = 0; i < transfer->payload_len; i++) {
//			printf("%02x", transfer->payload_head[i]);
//		}
//
//		printf("\n");
	if (transfer->transfer_type == CanardTransferTypeRequest) {
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	7e1b      	ldrb	r3, [r3, #24]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d108      	bne.n	8002b44 <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer+0x24>
		// check if we want to handle a specific service request
		switch (transfer->data_type_id) {
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	8adb      	ldrh	r3, [r3, #22]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d104      	bne.n	8002b44 <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer+0x24>
		case UAVCAN_PROTOCOL_GETNODEINFO_ID: {
			handle_GetNodeInfo(ins, transfer);
 8002b3a:	6839      	ldr	r1, [r7, #0]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff fe8f 	bl	8002860 <_Z18handle_GetNodeInfoP14CanardInstanceP16CanardRxTransfer>
			break;
 8002b42:	bf00      	nop
		}
		}
	}
	if (transfer->transfer_type == CanardTransferTypeResponse) {
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	7e1b      	ldrb	r3, [r3, #24]
 8002b48:	2b00      	cmp	r3, #0
		switch (transfer->data_type_id) {
		}
	}
	if (transfer->transfer_type == CanardTransferTypeBroadcast) {
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	7e1b      	ldrb	r3, [r3, #24]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d120      	bne.n	8002b94 <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer+0x74>
		// check if we want to handle a specific broadcast message
		switch (transfer->data_type_id) {
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	8adb      	ldrh	r3, [r3, #22]
 8002b56:	f644 6227 	movw	r2, #20007	@ 0x4e27
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d015      	beq.n	8002b8a <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer+0x6a>
 8002b5e:	f644 6227 	movw	r2, #20007	@ 0x4e27
 8002b62:	4293      	cmp	r3, r2
 8002b64:	dc16      	bgt.n	8002b94 <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer+0x74>
 8002b66:	f240 1255 	movw	r2, #341	@ 0x155
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d008      	beq.n	8002b80 <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer+0x60>
 8002b6e:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d10e      	bne.n	8002b94 <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer+0x74>
		case UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_ID:{
			handle_ArrayCommand(ins, transfer);
 8002b76:	6839      	ldr	r1, [r7, #0]
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff fddb 	bl	8002734 <_ZL19handle_ArrayCommandP14CanardInstanceP16CanardRxTransfer>
			break;
 8002b7e:	e009      	b.n	8002b94 <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer+0x74>
		}
		case UAVCAN_PROTOCOL_NODESTATUS_ID: {
			handle_NodeStatus(ins, transfer);
 8002b80:	6839      	ldr	r1, [r7, #0]
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff fcea 	bl	800255c <_Z17handle_NodeStatusP14CanardInstanceP16CanardRxTransfer>
			break;
 8002b88:	e004      	b.n	8002b94 <_Z18onTransferReceivedP14CanardInstanceP16CanardRxTransfer+0x74>
		}
		case ARDUPILOT_INDICATION_NOTIFYSTATE_ID: {
			handle_NotifyState(ins, transfer);
 8002b8a:	6839      	ldr	r1, [r7, #0]
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff fd6f 	bl	8002670 <_Z18handle_NotifyStateP14CanardInstanceP16CanardRxTransfer>
			break;
 8002b92:	bf00      	nop
		}
		}
	}
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <_Z20processCanardTxQueueP17CAN_HandleTypeDef>:

void processCanardTxQueue(CAN_HandleTypeDef *hcan) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	// Transmitting

	for (const CanardCANFrame *tx_frame ; (tx_frame = canardPeekTxQueue(&canard)) != NULL;) {
 8002ba4:	e01a      	b.n	8002bdc <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0x40>
		const int16_t tx_res = canardSTM32Transmit(hcan, tx_frame);
 8002ba6:	68f9      	ldr	r1, [r7, #12]
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff fbdf 	bl	800236c <canardSTM32Transmit>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	817b      	strh	r3, [r7, #10]

		if (tx_res < 0) {
 8002bb2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	da06      	bge.n	8002bc8 <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0x2c>
			printf("Transmit error %d\n", tx_res);
 8002bba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	480f      	ldr	r0, [pc, #60]	@ (8002c00 <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0x64>)
 8002bc2:	f004 fb09 	bl	80071d8 <iprintf>
 8002bc6:	e006      	b.n	8002bd6 <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0x3a>
		} else if (tx_res > 0) {
 8002bc8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	dd02      	ble.n	8002bd6 <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0x3a>
			printf("Successfully transmitted message\n");
 8002bd0:	480c      	ldr	r0, [pc, #48]	@ (8002c04 <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0x68>)
 8002bd2:	f004 fb71 	bl	80072b8 <puts>
		}

		// Pop canardTxQueue either way
		canardPopTxQueue(&canard);
 8002bd6:	480c      	ldr	r0, [pc, #48]	@ (8002c08 <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0x6c>)
 8002bd8:	f7fd fdbf 	bl	800075a <canardPopTxQueue>
	for (const CanardCANFrame *tx_frame ; (tx_frame = canardPeekTxQueue(&canard)) != NULL;) {
 8002bdc:	480a      	ldr	r0, [pc, #40]	@ (8002c08 <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0x6c>)
 8002bde:	f7fd fda9 	bl	8000734 <canardPeekTxQueue>
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf14      	ite	ne
 8002bea:	2301      	movne	r3, #1
 8002bec:	2300      	moveq	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1d8      	bne.n	8002ba6 <_Z20processCanardTxQueueP17CAN_HandleTypeDef+0xa>
	}
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	0800818c 	.word	0x0800818c
 8002c04:	080081a0 	.word	0x080081a0
 8002c08:	20000130 	.word	0x20000130

08002c0c <_Z15process1HzTasksy>:

/*
  This function is called at 1 Hz rate from the main loop.
*/
void process1HzTasks(uint64_t timestamp_usec) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	e9c7 0100 	strd	r0, r1, [r7]
    /*
      Purge transfers that are no longer transmitted. This can free up some memory
    */
    canardCleanupStaleTransfers(&canard, timestamp_usec);
 8002c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c1a:	4804      	ldr	r0, [pc, #16]	@ (8002c2c <_Z15process1HzTasksy+0x20>)
 8002c1c:	f7fe f950 	bl	8000ec0 <canardCleanupStaleTransfers>

    /*
      Transmit the node status message
    */
    send_NodeStatus();
 8002c20:	f7ff feda 	bl	80029d8 <_Z15send_NodeStatusv>
}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000130 	.word	0x20000130

08002c30 <_ZL16send_ServoStatusv>:

/*
  send servo status at 50Hz
*/
static void send_ServoStatus(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
    //                     &transfer_id,
    //                     CANARD_TRANSFER_PRIORITY_LOW,
    //                     buffer,
    //                     len);
    // }
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c44:	b08c      	sub	sp, #48	@ 0x30
 8002c46:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c48:	f000 fc1d 	bl	8003486 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c4c:	f000 f894 	bl	8002d78 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c50:	f7ff fbe0 	bl	8002414 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002c54:	f7fd fb0c 	bl	8000270 <MX_CAN1_Init>
  MX_TIM1_Init();
 8002c58:	f000 fa24 	bl	80030a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002c5c:	f000 fae6 	bl	800322c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


	//CHECK: can maybe remove (prev code from Hardy Testing)
	canfil.FilterBank = 0;
 8002c60:	4b3e      	ldr	r3, [pc, #248]	@ (8002d5c <main+0x11c>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	615a      	str	r2, [r3, #20]
	canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8002c66:	4b3d      	ldr	r3, [pc, #244]	@ (8002d5c <main+0x11c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
	canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d5c <main+0x11c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]
	canfil.FilterIdHigh = 0;
 8002c72:	4b3a      	ldr	r3, [pc, #232]	@ (8002d5c <main+0x11c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
	canfil.FilterIdLow = 0;
 8002c78:	4b38      	ldr	r3, [pc, #224]	@ (8002d5c <main+0x11c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	605a      	str	r2, [r3, #4]
	canfil.FilterMaskIdHigh = 0;
 8002c7e:	4b37      	ldr	r3, [pc, #220]	@ (8002d5c <main+0x11c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
	canfil.FilterMaskIdLow = 0;
 8002c84:	4b35      	ldr	r3, [pc, #212]	@ (8002d5c <main+0x11c>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	60da      	str	r2, [r3, #12]
	canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8002c8a:	4b34      	ldr	r3, [pc, #208]	@ (8002d5c <main+0x11c>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	61da      	str	r2, [r3, #28]
	canfil.FilterActivation = ENABLE;
 8002c90:	4b32      	ldr	r3, [pc, #200]	@ (8002d5c <main+0x11c>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	621a      	str	r2, [r3, #32]
	canfil.SlaveStartFilterBank = 14;
 8002c96:	4b31      	ldr	r3, [pc, #196]	@ (8002d5c <main+0x11c>)
 8002c98:	220e      	movs	r2, #14
 8002c9a:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan1,&canfil);
 8002c9c:	492f      	ldr	r1, [pc, #188]	@ (8002d5c <main+0x11c>)
 8002c9e:	4830      	ldr	r0, [pc, #192]	@ (8002d60 <main+0x120>)
 8002ca0:	f000 fd85 	bl	80037ae <HAL_CAN_ConfigFilter>
  	HAL_CAN_Start(&hcan1);
 8002ca4:	482e      	ldr	r0, [pc, #184]	@ (8002d60 <main+0x120>)
 8002ca6:	f000 fe4c 	bl	8003942 <HAL_CAN_Start>
  	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002caa:	2102      	movs	r1, #2
 8002cac:	482c      	ldr	r0, [pc, #176]	@ (8002d60 <main+0x120>)
 8002cae:	f001 f87e 	bl	8003dae <HAL_CAN_ActivateNotification>

	// configuring the pwm wave for servo module
	servo_controller.start_servos();
 8002cb2:	482c      	ldr	r0, [pc, #176]	@ (8002d64 <main+0x124>)
 8002cb4:	f003 fcaa 	bl	800660c <_ZN15ServoController12start_servosEv>

	canardInit(&canard,
 8002cb8:	2300      	movs	r3, #0
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d68 <main+0x128>)
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d6c <main+0x12c>)
 8002cc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cc6:	492a      	ldr	r1, [pc, #168]	@ (8002d70 <main+0x130>)
 8002cc8:	482a      	ldr	r0, [pc, #168]	@ (8002d74 <main+0x134>)
 8002cca:	f7fd fb65 	bl	8000398 <canardInit>
				  sizeof(memory_pool),
				  onTransferReceived,
				  shouldAcceptTransfer,
				  NULL);

	uint64_t next_1hz_service_at = HAL_GetTick();
 8002cce:	f000 fc43 	bl	8003558 <HAL_GetTick>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	60fa      	str	r2, [r7, #12]
 8002cda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cde:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint64_t next_50hz_service_at = HAL_GetTick();
 8002ce2:	f000 fc39 	bl	8003558 <HAL_GetTick>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2200      	movs	r2, #0
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cf2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  processCanardTxQueue(&hcan1);
 8002cf6:	481a      	ldr	r0, [pc, #104]	@ (8002d60 <main+0x120>)
 8002cf8:	f7ff ff50 	bl	8002b9c <_Z20processCanardTxQueueP17CAN_HandleTypeDef>
	  const uint64_t ts = HAL_GetTick();
 8002cfc:	f000 fc2c 	bl	8003558 <HAL_GetTick>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2200      	movs	r2, #0
 8002d04:	469a      	mov	sl, r3
 8002d06:	4693      	mov	fp, r2
 8002d08:	e9c7 ab04 	strd	sl, fp, [r7, #16]

	  if (ts >= next_1hz_service_at){
 8002d0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d10:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d14:	4290      	cmp	r0, r2
 8002d16:	eb71 0303 	sbcs.w	r3, r1, r3
 8002d1a:	d30b      	bcc.n	8002d34 <main+0xf4>
		  next_1hz_service_at += 1000ULL;
 8002d1c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d20:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8002d24:	f143 0500 	adc.w	r5, r3, #0
 8002d28:	e9c7 4508 	strd	r4, r5, [r7, #32]
		  process1HzTasks(ts);
 8002d2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d30:	f7ff ff6c 	bl	8002c0c <_Z15process1HzTasksy>
	  }
	  if (ts >= next_50hz_service_at){
 8002d34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d3c:	4290      	cmp	r0, r2
 8002d3e:	eb71 0303 	sbcs.w	r3, r1, r3
 8002d42:	d3d8      	bcc.n	8002cf6 <main+0xb6>
		  next_50hz_service_at += 1000ULL/50U;
 8002d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d48:	f112 0814 	adds.w	r8, r2, #20
 8002d4c:	f143 0900 	adc.w	r9, r3, #0
 8002d50:	e9c7 8906 	strd	r8, r9, [r7, #24]
		  send_ServoStatus();
 8002d54:	f7ff ff6c 	bl	8002c30 <_ZL16send_ServoStatusv>
	  }
  }
 8002d58:	e7cd      	b.n	8002cf6 <main+0xb6>
 8002d5a:	bf00      	nop
 8002d5c:	20000108 	.word	0x20000108
 8002d60:	200000dc 	.word	0x200000dc
 8002d64:	20000560 	.word	0x20000560
 8002d68:	08002a61 	.word	0x08002a61
 8002d6c:	08002b21 	.word	0x08002b21
 8002d70:	2000015c 	.word	0x2000015c
 8002d74:	20000130 	.word	0x20000130

08002d78 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b096      	sub	sp, #88	@ 0x58
 8002d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d7e:	f107 0314 	add.w	r3, r7, #20
 8002d82:	2244      	movs	r2, #68	@ 0x44
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f004 fb76 	bl	8007478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d8c:	463b      	mov	r3, r7
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	60da      	str	r2, [r3, #12]
 8002d98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002d9a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002d9e:	f001 fcf5 	bl	800478c <HAL_PWREx_ControlVoltageScaling>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8002db2:	f000 f83f 	bl	8002e34 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002db6:	2301      	movs	r3, #1
 8002db8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002dba:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002dbe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 8002dcc:	230c      	movs	r3, #12
 8002dce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002dd0:	2307      	movs	r3, #7
 8002dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	4618      	mov	r0, r3
 8002de2:	f001 fd29 	bl	8004838 <HAL_RCC_OscConfig>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8002df6:	f000 f81d 	bl	8002e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dfa:	230f      	movs	r3, #15
 8002dfc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e0e:	463b      	mov	r3, r7
 8002e10:	2102      	movs	r1, #2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f002 f924 	bl	8005060 <HAL_RCC_ClockConfig>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bf14      	ite	ne
 8002e1e:	2301      	movne	r3, #1
 8002e20:	2300      	moveq	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <_Z18SystemClock_Configv+0xb4>
  {
    Error_Handler();
 8002e28:	f000 f804 	bl	8002e34 <Error_Handler>
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	3758      	adds	r7, #88	@ 0x58
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e38:	b672      	cpsid	i
}
 8002e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <Error_Handler+0x8>

08002e40 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d107      	bne.n	8002e60 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d102      	bne.n	8002e60 <_Z41__static_initialization_and_destruction_0ii+0x20>
static ServoController servo_controller;
 8002e5a:	4803      	ldr	r0, [pc, #12]	@ (8002e68 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002e5c:	f003 fbb0 	bl	80065c0 <_ZN15ServoControllerC1Ev>
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000560 	.word	0x20000560

08002e6c <_GLOBAL__sub_I_canfil>:
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002e74:	2001      	movs	r0, #1
 8002e76:	f7ff ffe3 	bl	8002e40 <_Z41__static_initialization_and_destruction_0ii>
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e82:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec0 <HAL_MspInit+0x44>)
 8002e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e86:	4a0e      	ldr	r2, [pc, #56]	@ (8002ec0 <HAL_MspInit+0x44>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <HAL_MspInit+0x44>)
 8002e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	4b09      	ldr	r3, [pc, #36]	@ (8002ec0 <HAL_MspInit+0x44>)
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9e:	4a08      	ldr	r2, [pc, #32]	@ (8002ec0 <HAL_MspInit+0x44>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ea6:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <HAL_MspInit+0x44>)
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <NMI_Handler+0x4>

08002ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <HardFault_Handler+0x4>

08002ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ed8:	bf00      	nop
 8002eda:	e7fd      	b.n	8002ed8 <MemManage_Handler+0x4>

08002edc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ee0:	bf00      	nop
 8002ee2:	e7fd      	b.n	8002ee0 <BusFault_Handler+0x4>

08002ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee8:	bf00      	nop
 8002eea:	e7fd      	b.n	8002ee8 <UsageFault_Handler+0x4>

08002eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f1a:	f000 fb09 	bl	8003530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002f28:	4802      	ldr	r0, [pc, #8]	@ (8002f34 <CAN1_RX0_IRQHandler+0x10>)
 8002f2a:	f000 ff66 	bl	8003dfa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	200000dc 	.word	0x200000dc

08002f38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	e00a      	b.n	8002f60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f4a:	f3af 8000 	nop.w
 8002f4e:	4601      	mov	r1, r0
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	60ba      	str	r2, [r7, #8]
 8002f56:	b2ca      	uxtb	r2, r1
 8002f58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	dbf0      	blt.n	8002f4a <_read+0x12>
  }

  return len;
 8002f68:	687b      	ldr	r3, [r7, #4]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b086      	sub	sp, #24
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	e009      	b.n	8002f98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	60ba      	str	r2, [r7, #8]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	3301      	adds	r3, #1
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	dbf1      	blt.n	8002f84 <_write+0x12>
  }
  return len;
 8002fa0:	687b      	ldr	r3, [r7, #4]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <_close>:

int _close(int file)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fd2:	605a      	str	r2, [r3, #4]
  return 0;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <_isatty>:

int _isatty(int file)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fea:	2301      	movs	r3, #1
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800301c:	4a14      	ldr	r2, [pc, #80]	@ (8003070 <_sbrk+0x5c>)
 800301e:	4b15      	ldr	r3, [pc, #84]	@ (8003074 <_sbrk+0x60>)
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003028:	4b13      	ldr	r3, [pc, #76]	@ (8003078 <_sbrk+0x64>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d102      	bne.n	8003036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003030:	4b11      	ldr	r3, [pc, #68]	@ (8003078 <_sbrk+0x64>)
 8003032:	4a12      	ldr	r2, [pc, #72]	@ (800307c <_sbrk+0x68>)
 8003034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003036:	4b10      	ldr	r3, [pc, #64]	@ (8003078 <_sbrk+0x64>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	429a      	cmp	r2, r3
 8003042:	d207      	bcs.n	8003054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003044:	f004 fa86 	bl	8007554 <__errno>
 8003048:	4603      	mov	r3, r0
 800304a:	220c      	movs	r2, #12
 800304c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800304e:	f04f 33ff 	mov.w	r3, #4294967295
 8003052:	e009      	b.n	8003068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003054:	4b08      	ldr	r3, [pc, #32]	@ (8003078 <_sbrk+0x64>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800305a:	4b07      	ldr	r3, [pc, #28]	@ (8003078 <_sbrk+0x64>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	4a05      	ldr	r2, [pc, #20]	@ (8003078 <_sbrk+0x64>)
 8003064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003066:	68fb      	ldr	r3, [r7, #12]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20010000 	.word	0x20010000
 8003074:	00000400 	.word	0x00000400
 8003078:	20000588 	.word	0x20000588
 800307c:	20000778 	.word	0x20000778

08003080 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003084:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <SystemInit+0x20>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308a:	4a05      	ldr	r2, [pc, #20]	@ (80030a0 <SystemInit+0x20>)
 800308c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003090:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b09a      	sub	sp, #104	@ 0x68
 80030a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030b8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]
 80030d4:	615a      	str	r2, [r3, #20]
 80030d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80030d8:	1d3b      	adds	r3, r7, #4
 80030da:	222c      	movs	r2, #44	@ 0x2c
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f004 f9ca 	bl	8007478 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80030e4:	4b4f      	ldr	r3, [pc, #316]	@ (8003224 <MX_TIM1_Init+0x180>)
 80030e6:	4a50      	ldr	r2, [pc, #320]	@ (8003228 <MX_TIM1_Init+0x184>)
 80030e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 80030ea:	4b4e      	ldr	r3, [pc, #312]	@ (8003224 <MX_TIM1_Init+0x180>)
 80030ec:	220e      	movs	r2, #14
 80030ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f0:	4b4c      	ldr	r3, [pc, #304]	@ (8003224 <MX_TIM1_Init+0x180>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000;
 80030f6:	4b4b      	ldr	r3, [pc, #300]	@ (8003224 <MX_TIM1_Init+0x180>)
 80030f8:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 80030fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030fe:	4b49      	ldr	r3, [pc, #292]	@ (8003224 <MX_TIM1_Init+0x180>)
 8003100:	2200      	movs	r2, #0
 8003102:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003104:	4b47      	ldr	r3, [pc, #284]	@ (8003224 <MX_TIM1_Init+0x180>)
 8003106:	2200      	movs	r2, #0
 8003108:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800310a:	4b46      	ldr	r3, [pc, #280]	@ (8003224 <MX_TIM1_Init+0x180>)
 800310c:	2200      	movs	r2, #0
 800310e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003110:	4844      	ldr	r0, [pc, #272]	@ (8003224 <MX_TIM1_Init+0x180>)
 8003112:	f002 f991 	bl	8005438 <HAL_TIM_Base_Init>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800311c:	f7ff fe8a 	bl	8002e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003124:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003126:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800312a:	4619      	mov	r1, r3
 800312c:	483d      	ldr	r0, [pc, #244]	@ (8003224 <MX_TIM1_Init+0x180>)
 800312e:	f002 fc2d 	bl	800598c <HAL_TIM_ConfigClockSource>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003138:	f7ff fe7c 	bl	8002e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800313c:	4839      	ldr	r0, [pc, #228]	@ (8003224 <MX_TIM1_Init+0x180>)
 800313e:	f002 f9d2 	bl	80054e6 <HAL_TIM_PWM_Init>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003148:	f7ff fe74 	bl	8002e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800314c:	2300      	movs	r3, #0
 800314e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003150:	2300      	movs	r3, #0
 8003152:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003154:	2300      	movs	r3, #0
 8003156:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003158:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800315c:	4619      	mov	r1, r3
 800315e:	4831      	ldr	r0, [pc, #196]	@ (8003224 <MX_TIM1_Init+0x180>)
 8003160:	f003 f92a 	bl	80063b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800316a:	f7ff fe63 	bl	8002e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800316e:	2360      	movs	r3, #96	@ 0x60
 8003170:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003176:	2300      	movs	r3, #0
 8003178:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800317a:	2300      	movs	r3, #0
 800317c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800317e:	2300      	movs	r3, #0
 8003180:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003186:	2300      	movs	r3, #0
 8003188:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800318a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800318e:	2200      	movs	r2, #0
 8003190:	4619      	mov	r1, r3
 8003192:	4824      	ldr	r0, [pc, #144]	@ (8003224 <MX_TIM1_Init+0x180>)
 8003194:	f002 fae6 	bl	8005764 <HAL_TIM_PWM_ConfigChannel>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800319e:	f7ff fe49 	bl	8002e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80031a6:	2204      	movs	r2, #4
 80031a8:	4619      	mov	r1, r3
 80031aa:	481e      	ldr	r0, [pc, #120]	@ (8003224 <MX_TIM1_Init+0x180>)
 80031ac:	f002 fada 	bl	8005764 <HAL_TIM_PWM_ConfigChannel>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80031b6:	f7ff fe3d 	bl	8002e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80031be:	2208      	movs	r2, #8
 80031c0:	4619      	mov	r1, r3
 80031c2:	4818      	ldr	r0, [pc, #96]	@ (8003224 <MX_TIM1_Init+0x180>)
 80031c4:	f002 face 	bl	8005764 <HAL_TIM_PWM_ConfigChannel>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80031ce:	f7ff fe31 	bl	8002e34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80031f0:	2300      	movs	r3, #0
 80031f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80031f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031fe:	2300      	movs	r3, #0
 8003200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	4619      	mov	r1, r3
 8003206:	4807      	ldr	r0, [pc, #28]	@ (8003224 <MX_TIM1_Init+0x180>)
 8003208:	f003 f93c 	bl	8006484 <HAL_TIMEx_ConfigBreakDeadTime>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8003212:	f7ff fe0f 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003216:	4803      	ldr	r0, [pc, #12]	@ (8003224 <MX_TIM1_Init+0x180>)
 8003218:	f000 f8b0 	bl	800337c <HAL_TIM_MspPostInit>

}
 800321c:	bf00      	nop
 800321e:	3768      	adds	r7, #104	@ 0x68
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	2000058c 	.word	0x2000058c
 8003228:	40012c00 	.word	0x40012c00

0800322c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08e      	sub	sp, #56	@ 0x38
 8003230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003232:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	605a      	str	r2, [r3, #4]
 800323c:	609a      	str	r2, [r3, #8]
 800323e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800324c:	463b      	mov	r3, r7
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	605a      	str	r2, [r3, #4]
 8003254:	609a      	str	r2, [r3, #8]
 8003256:	60da      	str	r2, [r3, #12]
 8003258:	611a      	str	r2, [r3, #16]
 800325a:	615a      	str	r2, [r3, #20]
 800325c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800325e:	4b2d      	ldr	r3, [pc, #180]	@ (8003314 <MX_TIM2_Init+0xe8>)
 8003260:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003264:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 8003266:	4b2b      	ldr	r3, [pc, #172]	@ (8003314 <MX_TIM2_Init+0xe8>)
 8003268:	220e      	movs	r2, #14
 800326a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800326c:	4b29      	ldr	r3, [pc, #164]	@ (8003314 <MX_TIM2_Init+0xe8>)
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000;
 8003272:	4b28      	ldr	r3, [pc, #160]	@ (8003314 <MX_TIM2_Init+0xe8>)
 8003274:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 8003278:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800327a:	4b26      	ldr	r3, [pc, #152]	@ (8003314 <MX_TIM2_Init+0xe8>)
 800327c:	2200      	movs	r2, #0
 800327e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003280:	4b24      	ldr	r3, [pc, #144]	@ (8003314 <MX_TIM2_Init+0xe8>)
 8003282:	2200      	movs	r2, #0
 8003284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003286:	4823      	ldr	r0, [pc, #140]	@ (8003314 <MX_TIM2_Init+0xe8>)
 8003288:	f002 f8d6 	bl	8005438 <HAL_TIM_Base_Init>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003292:	f7ff fdcf 	bl	8002e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003296:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800329a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800329c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032a0:	4619      	mov	r1, r3
 80032a2:	481c      	ldr	r0, [pc, #112]	@ (8003314 <MX_TIM2_Init+0xe8>)
 80032a4:	f002 fb72 	bl	800598c <HAL_TIM_ConfigClockSource>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80032ae:	f7ff fdc1 	bl	8002e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032b2:	4818      	ldr	r0, [pc, #96]	@ (8003314 <MX_TIM2_Init+0xe8>)
 80032b4:	f002 f917 	bl	80054e6 <HAL_TIM_PWM_Init>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80032be:	f7ff fdb9 	bl	8002e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032ca:	f107 031c 	add.w	r3, r7, #28
 80032ce:	4619      	mov	r1, r3
 80032d0:	4810      	ldr	r0, [pc, #64]	@ (8003314 <MX_TIM2_Init+0xe8>)
 80032d2:	f003 f871 	bl	80063b8 <HAL_TIMEx_MasterConfigSynchronization>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80032dc:	f7ff fdaa 	bl	8002e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032e0:	2360      	movs	r3, #96	@ 0x60
 80032e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032f0:	463b      	mov	r3, r7
 80032f2:	2200      	movs	r2, #0
 80032f4:	4619      	mov	r1, r3
 80032f6:	4807      	ldr	r0, [pc, #28]	@ (8003314 <MX_TIM2_Init+0xe8>)
 80032f8:	f002 fa34 	bl	8005764 <HAL_TIM_PWM_ConfigChannel>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003302:	f7ff fd97 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003306:	4803      	ldr	r0, [pc, #12]	@ (8003314 <MX_TIM2_Init+0xe8>)
 8003308:	f000 f838 	bl	800337c <HAL_TIM_MspPostInit>

}
 800330c:	bf00      	nop
 800330e:	3738      	adds	r7, #56	@ 0x38
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	200005d8 	.word	0x200005d8

08003318 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a13      	ldr	r2, [pc, #76]	@ (8003374 <HAL_TIM_Base_MspInit+0x5c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d10c      	bne.n	8003344 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800332a:	4b13      	ldr	r3, [pc, #76]	@ (8003378 <HAL_TIM_Base_MspInit+0x60>)
 800332c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800332e:	4a12      	ldr	r2, [pc, #72]	@ (8003378 <HAL_TIM_Base_MspInit+0x60>)
 8003330:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003334:	6613      	str	r3, [r2, #96]	@ 0x60
 8003336:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <HAL_TIM_Base_MspInit+0x60>)
 8003338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800333a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003342:	e010      	b.n	8003366 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800334c:	d10b      	bne.n	8003366 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800334e:	4b0a      	ldr	r3, [pc, #40]	@ (8003378 <HAL_TIM_Base_MspInit+0x60>)
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003352:	4a09      	ldr	r2, [pc, #36]	@ (8003378 <HAL_TIM_Base_MspInit+0x60>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6593      	str	r3, [r2, #88]	@ 0x58
 800335a:	4b07      	ldr	r3, [pc, #28]	@ (8003378 <HAL_TIM_Base_MspInit+0x60>)
 800335c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
}
 8003366:	bf00      	nop
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40021000 	.word	0x40021000

0800337c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	@ 0x28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003384:	f107 0314 	add.w	r3, r7, #20
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a24      	ldr	r2, [pc, #144]	@ (800342c <HAL_TIM_MspPostInit+0xb0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d11e      	bne.n	80033dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800339e:	4b24      	ldr	r3, [pc, #144]	@ (8003430 <HAL_TIM_MspPostInit+0xb4>)
 80033a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a2:	4a23      	ldr	r2, [pc, #140]	@ (8003430 <HAL_TIM_MspPostInit+0xb4>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033aa:	4b21      	ldr	r3, [pc, #132]	@ (8003430 <HAL_TIM_MspPostInit+0xb4>)
 80033ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 80033b6:	f44f 63d0 	mov.w	r3, #1664	@ 0x680
 80033ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	2302      	movs	r3, #2
 80033be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c4:	2300      	movs	r3, #0
 80033c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033c8:	2301      	movs	r3, #1
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	4619      	mov	r1, r3
 80033d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033d6:	f001 f851 	bl	800447c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80033da:	e022      	b.n	8003422 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e4:	d11d      	bne.n	8003422 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e6:	4b12      	ldr	r3, [pc, #72]	@ (8003430 <HAL_TIM_MspPostInit+0xb4>)
 80033e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ea:	4a11      	ldr	r2, [pc, #68]	@ (8003430 <HAL_TIM_MspPostInit+0xb4>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003430 <HAL_TIM_MspPostInit+0xb4>)
 80033f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80033fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003404:	2302      	movs	r3, #2
 8003406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340c:	2300      	movs	r3, #0
 800340e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003410:	2301      	movs	r3, #1
 8003412:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	4619      	mov	r1, r3
 800341a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800341e:	f001 f82d 	bl	800447c <HAL_GPIO_Init>
}
 8003422:	bf00      	nop
 8003424:	3728      	adds	r7, #40	@ 0x28
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40012c00 	.word	0x40012c00
 8003430:	40021000 	.word	0x40021000

08003434 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800346c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003438:	f7ff fe22 	bl	8003080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800343c:	480c      	ldr	r0, [pc, #48]	@ (8003470 <LoopForever+0x6>)
  ldr r1, =_edata
 800343e:	490d      	ldr	r1, [pc, #52]	@ (8003474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003440:	4a0d      	ldr	r2, [pc, #52]	@ (8003478 <LoopForever+0xe>)
  movs r3, #0
 8003442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003444:	e002      	b.n	800344c <LoopCopyDataInit>

08003446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800344a:	3304      	adds	r3, #4

0800344c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800344c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800344e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003450:	d3f9      	bcc.n	8003446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003452:	4a0a      	ldr	r2, [pc, #40]	@ (800347c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003454:	4c0a      	ldr	r4, [pc, #40]	@ (8003480 <LoopForever+0x16>)
  movs r3, #0
 8003456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003458:	e001      	b.n	800345e <LoopFillZerobss>

0800345a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800345a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800345c:	3204      	adds	r2, #4

0800345e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800345e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003460:	d3fb      	bcc.n	800345a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003462:	f004 f87d 	bl	8007560 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003466:	f7ff fbeb 	bl	8002c40 <main>

0800346a <LoopForever>:

LoopForever:
    b LoopForever
 800346a:	e7fe      	b.n	800346a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800346c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003474:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8003478:	08008250 	.word	0x08008250
  ldr r2, =_sbss
 800347c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8003480:	20000774 	.word	0x20000774

08003484 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003484:	e7fe      	b.n	8003484 <ADC1_IRQHandler>

08003486 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003490:	2003      	movs	r0, #3
 8003492:	f000 ffb1 	bl	80043f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003496:	200f      	movs	r0, #15
 8003498:	f000 f80e 	bl	80034b8 <HAL_InitTick>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	71fb      	strb	r3, [r7, #7]
 80034a6:	e001      	b.n	80034ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034a8:	f7ff fce8 	bl	8002e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034ac:	79fb      	ldrb	r3, [r7, #7]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80034c4:	4b17      	ldr	r3, [pc, #92]	@ (8003524 <HAL_InitTick+0x6c>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d023      	beq.n	8003514 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80034cc:	4b16      	ldr	r3, [pc, #88]	@ (8003528 <HAL_InitTick+0x70>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b14      	ldr	r3, [pc, #80]	@ (8003524 <HAL_InitTick+0x6c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	4619      	mov	r1, r3
 80034d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034da:	fbb3 f3f1 	udiv	r3, r3, r1
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 ffbd 	bl	8004462 <HAL_SYSTICK_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10f      	bne.n	800350e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b0f      	cmp	r3, #15
 80034f2:	d809      	bhi.n	8003508 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034f4:	2200      	movs	r2, #0
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	f04f 30ff 	mov.w	r0, #4294967295
 80034fc:	f000 ff87 	bl	800440e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003500:	4a0a      	ldr	r2, [pc, #40]	@ (800352c <HAL_InitTick+0x74>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	e007      	b.n	8003518 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
 800350c:	e004      	b.n	8003518 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	73fb      	strb	r3, [r7, #15]
 8003512:	e001      	b.n	8003518 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000008 	.word	0x20000008
 8003528:	20000000 	.word	0x20000000
 800352c:	20000004 	.word	0x20000004

08003530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003534:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <HAL_IncTick+0x20>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	461a      	mov	r2, r3
 800353a:	4b06      	ldr	r3, [pc, #24]	@ (8003554 <HAL_IncTick+0x24>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4413      	add	r3, r2
 8003540:	4a04      	ldr	r2, [pc, #16]	@ (8003554 <HAL_IncTick+0x24>)
 8003542:	6013      	str	r3, [r2, #0]
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	20000008 	.word	0x20000008
 8003554:	20000624 	.word	0x20000624

08003558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  return uwTick;
 800355c:	4b03      	ldr	r3, [pc, #12]	@ (800356c <HAL_GetTick+0x14>)
 800355e:	681b      	ldr	r3, [r3, #0]
}
 8003560:	4618      	mov	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20000624 	.word	0x20000624

08003570 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8003574:	4b03      	ldr	r3, [pc, #12]	@ (8003584 <HAL_GetUIDw0+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	1fff7590 	.word	0x1fff7590

08003588 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800358c:	4b03      	ldr	r3, [pc, #12]	@ (800359c <HAL_GetUIDw1+0x14>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	1fff7594 	.word	0x1fff7594

080035a0 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80035a4:	4b03      	ldr	r3, [pc, #12]	@ (80035b4 <HAL_GetUIDw2+0x14>)
 80035a6:	681b      	ldr	r3, [r3, #0]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	1fff7598 	.word	0x1fff7598

080035b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e0ed      	b.n	80037a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d102      	bne.n	80035dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fc fe80 	bl	80002dc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035ec:	f7ff ffb4 	bl	8003558 <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035f2:	e012      	b.n	800361a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035f4:	f7ff ffb0 	bl	8003558 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b0a      	cmp	r3, #10
 8003600:	d90b      	bls.n	800361a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2205      	movs	r2, #5
 8003612:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e0c5      	b.n	80037a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0e5      	beq.n	80035f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0202 	bic.w	r2, r2, #2
 8003636:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003638:	f7ff ff8e 	bl	8003558 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800363e:	e012      	b.n	8003666 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003640:	f7ff ff8a 	bl	8003558 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b0a      	cmp	r3, #10
 800364c:	d90b      	bls.n	8003666 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2205      	movs	r2, #5
 800365e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e09f      	b.n	80037a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e5      	bne.n	8003640 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	7e1b      	ldrb	r3, [r3, #24]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d108      	bne.n	800368e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e007      	b.n	800369e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800369c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	7e5b      	ldrb	r3, [r3, #25]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d108      	bne.n	80036b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	e007      	b.n	80036c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	7e9b      	ldrb	r3, [r3, #26]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d108      	bne.n	80036e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0220 	orr.w	r2, r2, #32
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e007      	b.n	80036f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0220 	bic.w	r2, r2, #32
 80036f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	7edb      	ldrb	r3, [r3, #27]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d108      	bne.n	800370c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0210 	bic.w	r2, r2, #16
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	e007      	b.n	800371c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0210 	orr.w	r2, r2, #16
 800371a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	7f1b      	ldrb	r3, [r3, #28]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d108      	bne.n	8003736 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0208 	orr.w	r2, r2, #8
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e007      	b.n	8003746 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0208 	bic.w	r2, r2, #8
 8003744:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	7f5b      	ldrb	r3, [r3, #29]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d108      	bne.n	8003760 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0204 	orr.w	r2, r2, #4
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	e007      	b.n	8003770 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0204 	bic.w	r2, r2, #4
 800376e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	ea42 0103 	orr.w	r1, r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	1e5a      	subs	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b087      	sub	sp, #28
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037c4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d003      	beq.n	80037d4 <HAL_CAN_ConfigFilter+0x26>
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	f040 80aa 	bne.w	8003928 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80037da:	f043 0201 	orr.w	r2, r3, #1
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f003 031f 	and.w	r3, r3, #31
 80037ec:	2201      	movs	r2, #1
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	401a      	ands	r2, r3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d123      	bne.n	8003856 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	43db      	mvns	r3, r3
 8003818:	401a      	ands	r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003830:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	3248      	adds	r2, #72	@ 0x48
 8003836:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800384a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800384c:	6979      	ldr	r1, [r7, #20]
 800384e:	3348      	adds	r3, #72	@ 0x48
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	440b      	add	r3, r1
 8003854:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d122      	bne.n	80038a4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	431a      	orrs	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800387e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	3248      	adds	r2, #72	@ 0x48
 8003884:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003898:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800389a:	6979      	ldr	r1, [r7, #20]
 800389c:	3348      	adds	r3, #72	@ 0x48
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	440b      	add	r3, r1
 80038a2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	43db      	mvns	r3, r3
 80038b6:	401a      	ands	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80038be:	e007      	b.n	80038d0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	431a      	orrs	r2, r3
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d109      	bne.n	80038ec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	43db      	mvns	r3, r3
 80038e2:	401a      	ands	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80038ea:	e007      	b.n	80038fc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	431a      	orrs	r2, r3
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d107      	bne.n	8003914 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	431a      	orrs	r2, r3
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800391a:	f023 0201 	bic.w	r2, r3, #1
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	e006      	b.n	8003936 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
  }
}
 8003936:	4618      	mov	r0, r3
 8003938:	371c      	adds	r7, #28
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b01      	cmp	r3, #1
 8003954:	d12e      	bne.n	80039b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2202      	movs	r2, #2
 800395a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0201 	bic.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800396e:	f7ff fdf3 	bl	8003558 <HAL_GetTick>
 8003972:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003974:	e012      	b.n	800399c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003976:	f7ff fdef 	bl	8003558 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b0a      	cmp	r3, #10
 8003982:	d90b      	bls.n	800399c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2205      	movs	r2, #5
 8003994:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e012      	b.n	80039c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1e5      	bne.n	8003976 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	e006      	b.n	80039c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b089      	sub	sp, #36	@ 0x24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039de:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80039e8:	7ffb      	ldrb	r3, [r7, #31]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d003      	beq.n	80039f6 <HAL_CAN_AddTxMessage+0x2c>
 80039ee:	7ffb      	ldrb	r3, [r7, #31]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	f040 80ad 	bne.w	8003b50 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d105      	bne.n	8003a16 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8095 	beq.w	8003b40 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	0e1b      	lsrs	r3, r3, #24
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003a20:	2201      	movs	r2, #1
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	409a      	lsls	r2, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10d      	bne.n	8003a4e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a3c:	68f9      	ldr	r1, [r7, #12]
 8003a3e:	6809      	ldr	r1, [r1, #0]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	3318      	adds	r3, #24
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	440b      	add	r3, r1
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	e00f      	b.n	8003a6e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a58:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a5e:	68f9      	ldr	r1, [r7, #12]
 8003a60:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003a62:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	3318      	adds	r3, #24
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	440b      	add	r3, r1
 8003a6c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6819      	ldr	r1, [r3, #0]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	3318      	adds	r3, #24
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	440b      	add	r3, r1
 8003a7e:	3304      	adds	r3, #4
 8003a80:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	7d1b      	ldrb	r3, [r3, #20]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d111      	bne.n	8003aae <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	3318      	adds	r3, #24
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	4413      	add	r3, r2
 8003a96:	3304      	adds	r3, #4
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	6811      	ldr	r1, [r2, #0]
 8003a9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	3318      	adds	r3, #24
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	440b      	add	r3, r1
 8003aaa:	3304      	adds	r3, #4
 8003aac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3307      	adds	r3, #7
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	061a      	lsls	r2, r3, #24
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3306      	adds	r3, #6
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	041b      	lsls	r3, r3, #16
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3305      	adds	r3, #5
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	3204      	adds	r2, #4
 8003ace:	7812      	ldrb	r2, [r2, #0]
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	6811      	ldr	r1, [r2, #0]
 8003ad6:	ea43 0200 	orr.w	r2, r3, r0
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	440b      	add	r3, r1
 8003ae0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003ae4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3303      	adds	r3, #3
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	061a      	lsls	r2, r3, #24
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3302      	adds	r3, #2
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	041b      	lsls	r3, r3, #16
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3301      	adds	r3, #1
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	4313      	orrs	r3, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	7812      	ldrb	r2, [r2, #0]
 8003b06:	4610      	mov	r0, r2
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	6811      	ldr	r1, [r2, #0]
 8003b0c:	ea43 0200 	orr.w	r2, r3, r0
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	440b      	add	r3, r1
 8003b16:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003b1a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	3318      	adds	r3, #24
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	4413      	add	r3, r2
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	6811      	ldr	r1, [r2, #0]
 8003b2e:	f043 0201 	orr.w	r2, r3, #1
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	3318      	adds	r3, #24
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	440b      	add	r3, r1
 8003b3a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e00e      	b.n	8003b5e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e006      	b.n	8003b5e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
  }
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3724      	adds	r7, #36	@ 0x24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b087      	sub	sp, #28
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b7e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d003      	beq.n	8003b8e <HAL_CAN_GetRxMessage+0x24>
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	f040 8103 	bne.w	8003d94 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10e      	bne.n	8003bb2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d116      	bne.n	8003bd0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e0f7      	b.n	8003da2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d107      	bne.n	8003bd0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0e8      	b.n	8003da2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	331b      	adds	r3, #27
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	4413      	add	r3, r2
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0204 	and.w	r2, r3, #4
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10c      	bne.n	8003c08 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	331b      	adds	r3, #27
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	4413      	add	r3, r2
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	0d5b      	lsrs	r3, r3, #21
 8003bfe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	e00b      	b.n	8003c20 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	331b      	adds	r3, #27
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	4413      	add	r3, r2
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	08db      	lsrs	r3, r3, #3
 8003c18:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	331b      	adds	r3, #27
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	4413      	add	r3, r2
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0202 	and.w	r2, r3, #2
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	331b      	adds	r3, #27
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	4413      	add	r3, r2
 8003c42:	3304      	adds	r3, #4
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2208      	movs	r2, #8
 8003c52:	611a      	str	r2, [r3, #16]
 8003c54:	e00b      	b.n	8003c6e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	331b      	adds	r3, #27
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	4413      	add	r3, r2
 8003c62:	3304      	adds	r3, #4
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 020f 	and.w	r2, r3, #15
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	331b      	adds	r3, #27
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	4413      	add	r3, r2
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	0a1b      	lsrs	r3, r3, #8
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	331b      	adds	r3, #27
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	4413      	add	r3, r2
 8003c92:	3304      	adds	r3, #4
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	0c1b      	lsrs	r3, r3, #16
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	0a1a      	lsrs	r2, r3, #8
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	0c1a      	lsrs	r2, r3, #16
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	3302      	adds	r3, #2
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	0e1a      	lsrs	r2, r3, #24
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	3303      	adds	r3, #3
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	3304      	adds	r3, #4
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	0a1a      	lsrs	r2, r3, #8
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	3305      	adds	r3, #5
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	0c1a      	lsrs	r2, r3, #16
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	3306      	adds	r3, #6
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	0e1a      	lsrs	r2, r3, #24
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	3307      	adds	r3, #7
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d108      	bne.n	8003d80 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0220 	orr.w	r2, r2, #32
 8003d7c:	60da      	str	r2, [r3, #12]
 8003d7e:	e007      	b.n	8003d90 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0220 	orr.w	r2, r2, #32
 8003d8e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e006      	b.n	8003da2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
  }
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b085      	sub	sp, #20
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dbe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d002      	beq.n	8003dcc <HAL_CAN_ActivateNotification+0x1e>
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d109      	bne.n	8003de0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6959      	ldr	r1, [r3, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e006      	b.n	8003dee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b08a      	sub	sp, #40	@ 0x28
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d07c      	beq.n	8003f3a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d023      	beq.n	8003e92 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f983 	bl	8004168 <HAL_CAN_TxMailbox0CompleteCallback>
 8003e62:	e016      	b.n	8003e92 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d004      	beq.n	8003e78 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e76:	e00c      	b.n	8003e92 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d004      	beq.n	8003e8c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e8a:	e002      	b.n	8003e92 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f989 	bl	80041a4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d024      	beq.n	8003ee6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ea4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f963 	bl	800417c <HAL_CAN_TxMailbox1CompleteCallback>
 8003eb6:	e016      	b.n	8003ee6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d004      	beq.n	8003ecc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eca:	e00c      	b.n	8003ee6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d004      	beq.n	8003ee0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ede:	e002      	b.n	8003ee6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f969 	bl	80041b8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d024      	beq.n	8003f3a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003ef8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f943 	bl	8004190 <HAL_CAN_TxMailbox2CompleteCallback>
 8003f0a:	e016      	b.n	8003f3a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d004      	beq.n	8003f20 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1e:	e00c      	b.n	8003f3a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d004      	beq.n	8003f34 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f32:	e002      	b.n	8003f3a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f949 	bl	80041cc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00c      	beq.n	8003f5e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d007      	beq.n	8003f5e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f54:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2210      	movs	r2, #16
 8003f5c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00b      	beq.n	8003f80 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d006      	beq.n	8003f80 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2208      	movs	r2, #8
 8003f78:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f930 	bl	80041e0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7fe fa7f 	bl	800249c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f003 0310 	and.w	r3, r3, #16
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d007      	beq.n	8003fc2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fb8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2210      	movs	r2, #16
 8003fc0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00b      	beq.n	8003fe4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d006      	beq.n	8003fe4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2208      	movs	r2, #8
 8003fdc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f912 	bl	8004208 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f8f9 	bl	80041f4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00b      	beq.n	8004024 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	d006      	beq.n	8004024 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2210      	movs	r2, #16
 800401c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f8fc 	bl	800421c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d006      	beq.n	8004046 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2208      	movs	r2, #8
 800403e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f8f5 	bl	8004230 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d07b      	beq.n	8004148 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d072      	beq.n	8004140 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	f043 0302 	orr.w	r3, r3, #2
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	f043 0304 	orr.w	r3, r3, #4
 80040ac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d043      	beq.n	8004140 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d03e      	beq.n	8004140 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040c8:	2b60      	cmp	r3, #96	@ 0x60
 80040ca:	d02b      	beq.n	8004124 <HAL_CAN_IRQHandler+0x32a>
 80040cc:	2b60      	cmp	r3, #96	@ 0x60
 80040ce:	d82e      	bhi.n	800412e <HAL_CAN_IRQHandler+0x334>
 80040d0:	2b50      	cmp	r3, #80	@ 0x50
 80040d2:	d022      	beq.n	800411a <HAL_CAN_IRQHandler+0x320>
 80040d4:	2b50      	cmp	r3, #80	@ 0x50
 80040d6:	d82a      	bhi.n	800412e <HAL_CAN_IRQHandler+0x334>
 80040d8:	2b40      	cmp	r3, #64	@ 0x40
 80040da:	d019      	beq.n	8004110 <HAL_CAN_IRQHandler+0x316>
 80040dc:	2b40      	cmp	r3, #64	@ 0x40
 80040de:	d826      	bhi.n	800412e <HAL_CAN_IRQHandler+0x334>
 80040e0:	2b30      	cmp	r3, #48	@ 0x30
 80040e2:	d010      	beq.n	8004106 <HAL_CAN_IRQHandler+0x30c>
 80040e4:	2b30      	cmp	r3, #48	@ 0x30
 80040e6:	d822      	bhi.n	800412e <HAL_CAN_IRQHandler+0x334>
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d002      	beq.n	80040f2 <HAL_CAN_IRQHandler+0x2f8>
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d005      	beq.n	80040fc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80040f0:	e01d      	b.n	800412e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	f043 0308 	orr.w	r3, r3, #8
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80040fa:	e019      	b.n	8004130 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fe:	f043 0310 	orr.w	r3, r3, #16
 8004102:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004104:	e014      	b.n	8004130 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	f043 0320 	orr.w	r3, r3, #32
 800410c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800410e:	e00f      	b.n	8004130 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004116:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004118:	e00a      	b.n	8004130 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004122:	e005      	b.n	8004130 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800412a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800412c:	e000      	b.n	8004130 <HAL_CAN_IRQHandler+0x336>
            break;
 800412e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800413e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2204      	movs	r2, #4
 8004146:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	2b00      	cmp	r3, #0
 800414c:	d008      	beq.n	8004160 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f872 	bl	8004244 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004160:	bf00      	nop
 8004162:	3728      	adds	r7, #40	@ 0x28
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004268:	4b0c      	ldr	r3, [pc, #48]	@ (800429c <__NVIC_SetPriorityGrouping+0x44>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004274:	4013      	ands	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800428a:	4a04      	ldr	r2, [pc, #16]	@ (800429c <__NVIC_SetPriorityGrouping+0x44>)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	60d3      	str	r3, [r2, #12]
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042a4:	4b04      	ldr	r3, [pc, #16]	@ (80042b8 <__NVIC_GetPriorityGrouping+0x18>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	f003 0307 	and.w	r3, r3, #7
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	db0b      	blt.n	80042e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	f003 021f 	and.w	r2, r3, #31
 80042d4:	4907      	ldr	r1, [pc, #28]	@ (80042f4 <__NVIC_EnableIRQ+0x38>)
 80042d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	2001      	movs	r0, #1
 80042de:	fa00 f202 	lsl.w	r2, r0, r2
 80042e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	e000e100 	.word	0xe000e100

080042f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	6039      	str	r1, [r7, #0]
 8004302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004308:	2b00      	cmp	r3, #0
 800430a:	db0a      	blt.n	8004322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	b2da      	uxtb	r2, r3
 8004310:	490c      	ldr	r1, [pc, #48]	@ (8004344 <__NVIC_SetPriority+0x4c>)
 8004312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004316:	0112      	lsls	r2, r2, #4
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	440b      	add	r3, r1
 800431c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004320:	e00a      	b.n	8004338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	b2da      	uxtb	r2, r3
 8004326:	4908      	ldr	r1, [pc, #32]	@ (8004348 <__NVIC_SetPriority+0x50>)
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	3b04      	subs	r3, #4
 8004330:	0112      	lsls	r2, r2, #4
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	440b      	add	r3, r1
 8004336:	761a      	strb	r2, [r3, #24]
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000e100 	.word	0xe000e100
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800434c:	b480      	push	{r7}
 800434e:	b089      	sub	sp, #36	@ 0x24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f1c3 0307 	rsb	r3, r3, #7
 8004366:	2b04      	cmp	r3, #4
 8004368:	bf28      	it	cs
 800436a:	2304      	movcs	r3, #4
 800436c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	3304      	adds	r3, #4
 8004372:	2b06      	cmp	r3, #6
 8004374:	d902      	bls.n	800437c <NVIC_EncodePriority+0x30>
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	3b03      	subs	r3, #3
 800437a:	e000      	b.n	800437e <NVIC_EncodePriority+0x32>
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004380:	f04f 32ff 	mov.w	r2, #4294967295
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43da      	mvns	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	401a      	ands	r2, r3
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004394:	f04f 31ff 	mov.w	r1, #4294967295
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	fa01 f303 	lsl.w	r3, r1, r3
 800439e:	43d9      	mvns	r1, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a4:	4313      	orrs	r3, r2
         );
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3724      	adds	r7, #36	@ 0x24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3b01      	subs	r3, #1
 80043c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043c4:	d301      	bcc.n	80043ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043c6:	2301      	movs	r3, #1
 80043c8:	e00f      	b.n	80043ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ca:	4a0a      	ldr	r2, [pc, #40]	@ (80043f4 <SysTick_Config+0x40>)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043d2:	210f      	movs	r1, #15
 80043d4:	f04f 30ff 	mov.w	r0, #4294967295
 80043d8:	f7ff ff8e 	bl	80042f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043dc:	4b05      	ldr	r3, [pc, #20]	@ (80043f4 <SysTick_Config+0x40>)
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043e2:	4b04      	ldr	r3, [pc, #16]	@ (80043f4 <SysTick_Config+0x40>)
 80043e4:	2207      	movs	r2, #7
 80043e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	e000e010 	.word	0xe000e010

080043f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ff29 	bl	8004258 <__NVIC_SetPriorityGrouping>
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b086      	sub	sp, #24
 8004412:	af00      	add	r7, sp, #0
 8004414:	4603      	mov	r3, r0
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004420:	f7ff ff3e 	bl	80042a0 <__NVIC_GetPriorityGrouping>
 8004424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	6978      	ldr	r0, [r7, #20]
 800442c:	f7ff ff8e 	bl	800434c <NVIC_EncodePriority>
 8004430:	4602      	mov	r2, r0
 8004432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff5d 	bl	80042f8 <__NVIC_SetPriority>
}
 800443e:	bf00      	nop
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	4603      	mov	r3, r0
 800444e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff31 	bl	80042bc <__NVIC_EnableIRQ>
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff ffa2 	bl	80043b4 <SysTick_Config>
 8004470:	4603      	mov	r3, r0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800448a:	e154      	b.n	8004736 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	2101      	movs	r1, #1
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	fa01 f303 	lsl.w	r3, r1, r3
 8004498:	4013      	ands	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 8146 	beq.w	8004730 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d005      	beq.n	80044bc <HAL_GPIO_Init+0x40>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d130      	bne.n	800451e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	2203      	movs	r2, #3
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044f2:	2201      	movs	r2, #1
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43db      	mvns	r3, r3
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4013      	ands	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	091b      	lsrs	r3, r3, #4
 8004508:	f003 0201 	and.w	r2, r3, #1
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b03      	cmp	r3, #3
 8004528:	d017      	beq.n	800455a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	2203      	movs	r2, #3
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	43db      	mvns	r3, r3
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4013      	ands	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d123      	bne.n	80045ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	08da      	lsrs	r2, r3, #3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3208      	adds	r2, #8
 800456e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004572:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	220f      	movs	r2, #15
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43db      	mvns	r3, r3
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4013      	ands	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	08da      	lsrs	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3208      	adds	r2, #8
 80045a8:	6939      	ldr	r1, [r7, #16]
 80045aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	2203      	movs	r2, #3
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43db      	mvns	r3, r3
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4013      	ands	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 0203 	and.w	r2, r3, #3
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 80a0 	beq.w	8004730 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045f0:	4b58      	ldr	r3, [pc, #352]	@ (8004754 <HAL_GPIO_Init+0x2d8>)
 80045f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045f4:	4a57      	ldr	r2, [pc, #348]	@ (8004754 <HAL_GPIO_Init+0x2d8>)
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80045fc:	4b55      	ldr	r3, [pc, #340]	@ (8004754 <HAL_GPIO_Init+0x2d8>)
 80045fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004608:	4a53      	ldr	r2, [pc, #332]	@ (8004758 <HAL_GPIO_Init+0x2dc>)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	089b      	lsrs	r3, r3, #2
 800460e:	3302      	adds	r3, #2
 8004610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004614:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	220f      	movs	r2, #15
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4013      	ands	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004632:	d019      	beq.n	8004668 <HAL_GPIO_Init+0x1ec>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a49      	ldr	r2, [pc, #292]	@ (800475c <HAL_GPIO_Init+0x2e0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d013      	beq.n	8004664 <HAL_GPIO_Init+0x1e8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a48      	ldr	r2, [pc, #288]	@ (8004760 <HAL_GPIO_Init+0x2e4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00d      	beq.n	8004660 <HAL_GPIO_Init+0x1e4>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a47      	ldr	r2, [pc, #284]	@ (8004764 <HAL_GPIO_Init+0x2e8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d007      	beq.n	800465c <HAL_GPIO_Init+0x1e0>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a46      	ldr	r2, [pc, #280]	@ (8004768 <HAL_GPIO_Init+0x2ec>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d101      	bne.n	8004658 <HAL_GPIO_Init+0x1dc>
 8004654:	2304      	movs	r3, #4
 8004656:	e008      	b.n	800466a <HAL_GPIO_Init+0x1ee>
 8004658:	2307      	movs	r3, #7
 800465a:	e006      	b.n	800466a <HAL_GPIO_Init+0x1ee>
 800465c:	2303      	movs	r3, #3
 800465e:	e004      	b.n	800466a <HAL_GPIO_Init+0x1ee>
 8004660:	2302      	movs	r3, #2
 8004662:	e002      	b.n	800466a <HAL_GPIO_Init+0x1ee>
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <HAL_GPIO_Init+0x1ee>
 8004668:	2300      	movs	r3, #0
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	f002 0203 	and.w	r2, r2, #3
 8004670:	0092      	lsls	r2, r2, #2
 8004672:	4093      	lsls	r3, r2
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800467a:	4937      	ldr	r1, [pc, #220]	@ (8004758 <HAL_GPIO_Init+0x2dc>)
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	089b      	lsrs	r3, r3, #2
 8004680:	3302      	adds	r3, #2
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004688:	4b38      	ldr	r3, [pc, #224]	@ (800476c <HAL_GPIO_Init+0x2f0>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	43db      	mvns	r3, r3
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4013      	ands	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046ac:	4a2f      	ldr	r2, [pc, #188]	@ (800476c <HAL_GPIO_Init+0x2f0>)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046b2:	4b2e      	ldr	r3, [pc, #184]	@ (800476c <HAL_GPIO_Init+0x2f0>)
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	43db      	mvns	r3, r3
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4013      	ands	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046d6:	4a25      	ldr	r2, [pc, #148]	@ (800476c <HAL_GPIO_Init+0x2f0>)
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80046dc:	4b23      	ldr	r3, [pc, #140]	@ (800476c <HAL_GPIO_Init+0x2f0>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	43db      	mvns	r3, r3
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004700:	4a1a      	ldr	r2, [pc, #104]	@ (800476c <HAL_GPIO_Init+0x2f0>)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004706:	4b19      	ldr	r3, [pc, #100]	@ (800476c <HAL_GPIO_Init+0x2f0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	43db      	mvns	r3, r3
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4013      	ands	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800472a:	4a10      	ldr	r2, [pc, #64]	@ (800476c <HAL_GPIO_Init+0x2f0>)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	3301      	adds	r3, #1
 8004734:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	fa22 f303 	lsr.w	r3, r2, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	f47f aea3 	bne.w	800448c <HAL_GPIO_Init+0x10>
  }
}
 8004746:	bf00      	nop
 8004748:	bf00      	nop
 800474a:	371c      	adds	r7, #28
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	40021000 	.word	0x40021000
 8004758:	40010000 	.word	0x40010000
 800475c:	48000400 	.word	0x48000400
 8004760:	48000800 	.word	0x48000800
 8004764:	48000c00 	.word	0x48000c00
 8004768:	48001000 	.word	0x48001000
 800476c:	40010400 	.word	0x40010400

08004770 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004774:	4b04      	ldr	r3, [pc, #16]	@ (8004788 <HAL_PWREx_GetVoltageRange+0x18>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800477c:	4618      	mov	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40007000 	.word	0x40007000

0800478c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800479a:	d130      	bne.n	80047fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800479c:	4b23      	ldr	r3, [pc, #140]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047a8:	d038      	beq.n	800481c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047aa:	4b20      	ldr	r3, [pc, #128]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047b2:	4a1e      	ldr	r2, [pc, #120]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004830 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2232      	movs	r2, #50	@ 0x32
 80047c0:	fb02 f303 	mul.w	r3, r2, r3
 80047c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004834 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	0c9b      	lsrs	r3, r3, #18
 80047cc:	3301      	adds	r3, #1
 80047ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047d0:	e002      	b.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047d8:	4b14      	ldr	r3, [pc, #80]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e4:	d102      	bne.n	80047ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f2      	bne.n	80047d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047ec:	4b0f      	ldr	r3, [pc, #60]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f8:	d110      	bne.n	800481c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e00f      	b.n	800481e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047fe:	4b0b      	ldr	r3, [pc, #44]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800480a:	d007      	beq.n	800481c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800480c:	4b07      	ldr	r3, [pc, #28]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004814:	4a05      	ldr	r2, [pc, #20]	@ (800482c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004816:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800481a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40007000 	.word	0x40007000
 8004830:	20000000 	.word	0x20000000
 8004834:	431bde83 	.word	0x431bde83

08004838 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d102      	bne.n	800484c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f000 bc02 	b.w	8005050 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800484c:	4b96      	ldr	r3, [pc, #600]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 030c 	and.w	r3, r3, #12
 8004854:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004856:	4b94      	ldr	r3, [pc, #592]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 80e4 	beq.w	8004a36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d007      	beq.n	8004884 <HAL_RCC_OscConfig+0x4c>
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b0c      	cmp	r3, #12
 8004878:	f040 808b 	bne.w	8004992 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b01      	cmp	r3, #1
 8004880:	f040 8087 	bne.w	8004992 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004884:	4b88      	ldr	r3, [pc, #544]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_RCC_OscConfig+0x64>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e3d9      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1a      	ldr	r2, [r3, #32]
 80048a0:	4b81      	ldr	r3, [pc, #516]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d004      	beq.n	80048b6 <HAL_RCC_OscConfig+0x7e>
 80048ac:	4b7e      	ldr	r3, [pc, #504]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048b4:	e005      	b.n	80048c2 <HAL_RCC_OscConfig+0x8a>
 80048b6:	4b7c      	ldr	r3, [pc, #496]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80048b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048bc:	091b      	lsrs	r3, r3, #4
 80048be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d223      	bcs.n	800490e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fd54 	bl	8005378 <RCC_SetFlashLatencyFromMSIRange>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e3ba      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048da:	4b73      	ldr	r3, [pc, #460]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a72      	ldr	r2, [pc, #456]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80048e0:	f043 0308 	orr.w	r3, r3, #8
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4b70      	ldr	r3, [pc, #448]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	496d      	ldr	r1, [pc, #436]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048f8:	4b6b      	ldr	r3, [pc, #428]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	4968      	ldr	r1, [pc, #416]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004908:	4313      	orrs	r3, r2
 800490a:	604b      	str	r3, [r1, #4]
 800490c:	e025      	b.n	800495a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800490e:	4b66      	ldr	r3, [pc, #408]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a65      	ldr	r2, [pc, #404]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004914:	f043 0308 	orr.w	r3, r3, #8
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	4b63      	ldr	r3, [pc, #396]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	4960      	ldr	r1, [pc, #384]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800492c:	4b5e      	ldr	r3, [pc, #376]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	495b      	ldr	r1, [pc, #364]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 800493c:	4313      	orrs	r3, r2
 800493e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fd14 	bl	8005378 <RCC_SetFlashLatencyFromMSIRange>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e37a      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800495a:	f000 fc81 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 800495e:	4602      	mov	r2, r0
 8004960:	4b51      	ldr	r3, [pc, #324]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	091b      	lsrs	r3, r3, #4
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	4950      	ldr	r1, [pc, #320]	@ (8004aac <HAL_RCC_OscConfig+0x274>)
 800496c:	5ccb      	ldrb	r3, [r1, r3]
 800496e:	f003 031f 	and.w	r3, r3, #31
 8004972:	fa22 f303 	lsr.w	r3, r2, r3
 8004976:	4a4e      	ldr	r2, [pc, #312]	@ (8004ab0 <HAL_RCC_OscConfig+0x278>)
 8004978:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800497a:	4b4e      	ldr	r3, [pc, #312]	@ (8004ab4 <HAL_RCC_OscConfig+0x27c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f7fe fd9a 	bl	80034b8 <HAL_InitTick>
 8004984:	4603      	mov	r3, r0
 8004986:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d052      	beq.n	8004a34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	e35e      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d032      	beq.n	8004a00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800499a:	4b43      	ldr	r3, [pc, #268]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a42      	ldr	r2, [pc, #264]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049a6:	f7fe fdd7 	bl	8003558 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049ae:	f7fe fdd3 	bl	8003558 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e347      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049c0:	4b39      	ldr	r3, [pc, #228]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049cc:	4b36      	ldr	r3, [pc, #216]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a35      	ldr	r2, [pc, #212]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049d2:	f043 0308 	orr.w	r3, r3, #8
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	4b33      	ldr	r3, [pc, #204]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	4930      	ldr	r1, [pc, #192]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049ea:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	021b      	lsls	r3, r3, #8
 80049f8:	492b      	ldr	r1, [pc, #172]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	604b      	str	r3, [r1, #4]
 80049fe:	e01a      	b.n	8004a36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a00:	4b29      	ldr	r3, [pc, #164]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a28      	ldr	r2, [pc, #160]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a0c:	f7fe fda4 	bl	8003558 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a14:	f7fe fda0 	bl	8003558 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e314      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a26:	4b20      	ldr	r3, [pc, #128]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x1dc>
 8004a32:	e000      	b.n	8004a36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d073      	beq.n	8004b2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d005      	beq.n	8004a54 <HAL_RCC_OscConfig+0x21c>
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2b0c      	cmp	r3, #12
 8004a4c:	d10e      	bne.n	8004a6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b03      	cmp	r3, #3
 8004a52:	d10b      	bne.n	8004a6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a54:	4b14      	ldr	r3, [pc, #80]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d063      	beq.n	8004b28 <HAL_RCC_OscConfig+0x2f0>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d15f      	bne.n	8004b28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e2f1      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a74:	d106      	bne.n	8004a84 <HAL_RCC_OscConfig+0x24c>
 8004a76:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a0b      	ldr	r2, [pc, #44]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e025      	b.n	8004ad0 <HAL_RCC_OscConfig+0x298>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a8c:	d114      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x280>
 8004a8e:	4b06      	ldr	r3, [pc, #24]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a05      	ldr	r2, [pc, #20]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	4b03      	ldr	r3, [pc, #12]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a02      	ldr	r2, [pc, #8]	@ (8004aa8 <HAL_RCC_OscConfig+0x270>)
 8004aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	e013      	b.n	8004ad0 <HAL_RCC_OscConfig+0x298>
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	080081c4 	.word	0x080081c4
 8004ab0:	20000000 	.word	0x20000000
 8004ab4:	20000004 	.word	0x20000004
 8004ab8:	4ba0      	ldr	r3, [pc, #640]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a9f      	ldr	r2, [pc, #636]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	4b9d      	ldr	r3, [pc, #628]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a9c      	ldr	r2, [pc, #624]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d013      	beq.n	8004b00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad8:	f7fe fd3e 	bl	8003558 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7fe fd3a 	bl	8003558 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	@ 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e2ae      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004af2:	4b92      	ldr	r3, [pc, #584]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f0      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x2a8>
 8004afe:	e014      	b.n	8004b2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7fe fd2a 	bl	8003558 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b08:	f7fe fd26 	bl	8003558 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	@ 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e29a      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b1a:	4b88      	ldr	r3, [pc, #544]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x2d0>
 8004b26:	e000      	b.n	8004b2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d060      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_OscConfig+0x310>
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b0c      	cmp	r3, #12
 8004b40:	d119      	bne.n	8004b76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d116      	bne.n	8004b76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b48:	4b7c      	ldr	r3, [pc, #496]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_OscConfig+0x328>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e277      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b60:	4b76      	ldr	r3, [pc, #472]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	061b      	lsls	r3, r3, #24
 8004b6e:	4973      	ldr	r1, [pc, #460]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b74:	e040      	b.n	8004bf8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d023      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b7e:	4b6f      	ldr	r3, [pc, #444]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a6e      	ldr	r2, [pc, #440]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fe fce5 	bl	8003558 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b92:	f7fe fce1 	bl	8003558 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e255      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ba4:	4b65      	ldr	r3, [pc, #404]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb0:	4b62      	ldr	r3, [pc, #392]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	061b      	lsls	r3, r3, #24
 8004bbe:	495f      	ldr	r1, [pc, #380]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	604b      	str	r3, [r1, #4]
 8004bc4:	e018      	b.n	8004bf8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc6:	4b5d      	ldr	r3, [pc, #372]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a5c      	ldr	r2, [pc, #368]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd2:	f7fe fcc1 	bl	8003558 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bd8:	e008      	b.n	8004bec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bda:	f7fe fcbd 	bl	8003558 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e231      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bec:	4b53      	ldr	r3, [pc, #332]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1f0      	bne.n	8004bda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d03c      	beq.n	8004c7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01c      	beq.n	8004c46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c12:	4a4a      	ldr	r2, [pc, #296]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004c14:	f043 0301 	orr.w	r3, r3, #1
 8004c18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1c:	f7fe fc9c 	bl	8003558 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c24:	f7fe fc98 	bl	8003558 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e20c      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c36:	4b41      	ldr	r3, [pc, #260]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0ef      	beq.n	8004c24 <HAL_RCC_OscConfig+0x3ec>
 8004c44:	e01b      	b.n	8004c7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c46:	4b3d      	ldr	r3, [pc, #244]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c4c:	4a3b      	ldr	r2, [pc, #236]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004c4e:	f023 0301 	bic.w	r3, r3, #1
 8004c52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c56:	f7fe fc7f 	bl	8003558 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c5e:	f7fe fc7b 	bl	8003558 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e1ef      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c70:	4b32      	ldr	r3, [pc, #200]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1ef      	bne.n	8004c5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 80a6 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c90:	4b2a      	ldr	r3, [pc, #168]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10d      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c9c:	4b27      	ldr	r3, [pc, #156]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca0:	4a26      	ldr	r2, [pc, #152]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ca8:	4b24      	ldr	r3, [pc, #144]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cb8:	4b21      	ldr	r3, [pc, #132]	@ (8004d40 <HAL_RCC_OscConfig+0x508>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d118      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8004d40 <HAL_RCC_OscConfig+0x508>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d40 <HAL_RCC_OscConfig+0x508>)
 8004cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd0:	f7fe fc42 	bl	8003558 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd8:	f7fe fc3e 	bl	8003558 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e1b2      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cea:	4b15      	ldr	r3, [pc, #84]	@ (8004d40 <HAL_RCC_OscConfig+0x508>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d108      	bne.n	8004d10 <HAL_RCC_OscConfig+0x4d8>
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d04:	4a0d      	ldr	r2, [pc, #52]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d0e:	e029      	b.n	8004d64 <HAL_RCC_OscConfig+0x52c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b05      	cmp	r3, #5
 8004d16:	d115      	bne.n	8004d44 <HAL_RCC_OscConfig+0x50c>
 8004d18:	4b08      	ldr	r3, [pc, #32]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1e:	4a07      	ldr	r2, [pc, #28]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004d20:	f043 0304 	orr.w	r3, r3, #4
 8004d24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d28:	4b04      	ldr	r3, [pc, #16]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2e:	4a03      	ldr	r2, [pc, #12]	@ (8004d3c <HAL_RCC_OscConfig+0x504>)
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d38:	e014      	b.n	8004d64 <HAL_RCC_OscConfig+0x52c>
 8004d3a:	bf00      	nop
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	40007000 	.word	0x40007000
 8004d44:	4b9a      	ldr	r3, [pc, #616]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4a:	4a99      	ldr	r2, [pc, #612]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d54:	4b96      	ldr	r3, [pc, #600]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d5a:	4a95      	ldr	r2, [pc, #596]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004d5c:	f023 0304 	bic.w	r3, r3, #4
 8004d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d016      	beq.n	8004d9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6c:	f7fe fbf4 	bl	8003558 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d72:	e00a      	b.n	8004d8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d74:	f7fe fbf0 	bl	8003558 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e162      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d8a:	4b89      	ldr	r3, [pc, #548]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0ed      	beq.n	8004d74 <HAL_RCC_OscConfig+0x53c>
 8004d98:	e015      	b.n	8004dc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9a:	f7fe fbdd 	bl	8003558 <HAL_GetTick>
 8004d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004da0:	e00a      	b.n	8004db8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da2:	f7fe fbd9 	bl	8003558 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e14b      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004db8:	4b7d      	ldr	r3, [pc, #500]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1ed      	bne.n	8004da2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dc6:	7ffb      	ldrb	r3, [r7, #31]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d105      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dcc:	4b78      	ldr	r3, [pc, #480]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd0:	4a77      	ldr	r2, [pc, #476]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dd6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d03c      	beq.n	8004e5e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01c      	beq.n	8004e26 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dec:	4b70      	ldr	r3, [pc, #448]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004df2:	4a6f      	ldr	r2, [pc, #444]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfc:	f7fe fbac 	bl	8003558 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e04:	f7fe fba8 	bl	8003558 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e11c      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e16:	4b66      	ldr	r3, [pc, #408]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004e18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0ef      	beq.n	8004e04 <HAL_RCC_OscConfig+0x5cc>
 8004e24:	e01b      	b.n	8004e5e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e26:	4b62      	ldr	r3, [pc, #392]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e2c:	4a60      	ldr	r2, [pc, #384]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004e2e:	f023 0301 	bic.w	r3, r3, #1
 8004e32:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e36:	f7fe fb8f 	bl	8003558 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e3e:	f7fe fb8b 	bl	8003558 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e0ff      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e50:	4b57      	ldr	r3, [pc, #348]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1ef      	bne.n	8004e3e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 80f3 	beq.w	800504e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	f040 80c9 	bne.w	8005004 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e72:	4b4f      	ldr	r3, [pc, #316]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f003 0203 	and.w	r2, r3, #3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d12c      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	3b01      	subs	r3, #1
 8004e92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d123      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d11b      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d113      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d109      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d06b      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	2b0c      	cmp	r3, #12
 8004ee4:	d062      	beq.n	8004fac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ee6:	4b32      	ldr	r3, [pc, #200]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e0ac      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a2d      	ldr	r2, [pc, #180]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004efc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f02:	f7fe fb29 	bl	8003558 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0a:	f7fe fb25 	bl	8003558 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e099      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f1c:	4b24      	ldr	r3, [pc, #144]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1f0      	bne.n	8004f0a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f28:	4b21      	ldr	r3, [pc, #132]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	4b21      	ldr	r3, [pc, #132]	@ (8004fb4 <HAL_RCC_OscConfig+0x77c>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004f38:	3a01      	subs	r2, #1
 8004f3a:	0112      	lsls	r2, r2, #4
 8004f3c:	4311      	orrs	r1, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f42:	0212      	lsls	r2, r2, #8
 8004f44:	4311      	orrs	r1, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f4a:	0852      	lsrs	r2, r2, #1
 8004f4c:	3a01      	subs	r2, #1
 8004f4e:	0552      	lsls	r2, r2, #21
 8004f50:	4311      	orrs	r1, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004f56:	0852      	lsrs	r2, r2, #1
 8004f58:	3a01      	subs	r2, #1
 8004f5a:	0652      	lsls	r2, r2, #25
 8004f5c:	4311      	orrs	r1, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f62:	06d2      	lsls	r2, r2, #27
 8004f64:	430a      	orrs	r2, r1
 8004f66:	4912      	ldr	r1, [pc, #72]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f6c:	4b10      	ldr	r3, [pc, #64]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a0f      	ldr	r2, [pc, #60]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f78:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f84:	f7fe fae8 	bl	8003558 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7fe fae4 	bl	8003558 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e058      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9e:	4b04      	ldr	r3, [pc, #16]	@ (8004fb0 <HAL_RCC_OscConfig+0x778>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004faa:	e050      	b.n	800504e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e04f      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb8:	4b27      	ldr	r3, [pc, #156]	@ (8005058 <HAL_RCC_OscConfig+0x820>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d144      	bne.n	800504e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fc4:	4b24      	ldr	r3, [pc, #144]	@ (8005058 <HAL_RCC_OscConfig+0x820>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a23      	ldr	r2, [pc, #140]	@ (8005058 <HAL_RCC_OscConfig+0x820>)
 8004fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fd0:	4b21      	ldr	r3, [pc, #132]	@ (8005058 <HAL_RCC_OscConfig+0x820>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4a20      	ldr	r2, [pc, #128]	@ (8005058 <HAL_RCC_OscConfig+0x820>)
 8004fd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fdc:	f7fe fabc 	bl	8003558 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fe fab8 	bl	8003558 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e02c      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff6:	4b18      	ldr	r3, [pc, #96]	@ (8005058 <HAL_RCC_OscConfig+0x820>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x7ac>
 8005002:	e024      	b.n	800504e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	2b0c      	cmp	r3, #12
 8005008:	d01f      	beq.n	800504a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500a:	4b13      	ldr	r3, [pc, #76]	@ (8005058 <HAL_RCC_OscConfig+0x820>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a12      	ldr	r2, [pc, #72]	@ (8005058 <HAL_RCC_OscConfig+0x820>)
 8005010:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005016:	f7fe fa9f 	bl	8003558 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800501e:	f7fe fa9b 	bl	8003558 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e00f      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005030:	4b09      	ldr	r3, [pc, #36]	@ (8005058 <HAL_RCC_OscConfig+0x820>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1f0      	bne.n	800501e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800503c:	4b06      	ldr	r3, [pc, #24]	@ (8005058 <HAL_RCC_OscConfig+0x820>)
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	4905      	ldr	r1, [pc, #20]	@ (8005058 <HAL_RCC_OscConfig+0x820>)
 8005042:	4b06      	ldr	r3, [pc, #24]	@ (800505c <HAL_RCC_OscConfig+0x824>)
 8005044:	4013      	ands	r3, r2
 8005046:	60cb      	str	r3, [r1, #12]
 8005048:	e001      	b.n	800504e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3720      	adds	r7, #32
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40021000 	.word	0x40021000
 800505c:	feeefffc 	.word	0xfeeefffc

08005060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0e7      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005074:	4b75      	ldr	r3, [pc, #468]	@ (800524c <HAL_RCC_ClockConfig+0x1ec>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	429a      	cmp	r2, r3
 8005080:	d910      	bls.n	80050a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005082:	4b72      	ldr	r3, [pc, #456]	@ (800524c <HAL_RCC_ClockConfig+0x1ec>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 0207 	bic.w	r2, r3, #7
 800508a:	4970      	ldr	r1, [pc, #448]	@ (800524c <HAL_RCC_ClockConfig+0x1ec>)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005092:	4b6e      	ldr	r3, [pc, #440]	@ (800524c <HAL_RCC_ClockConfig+0x1ec>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d001      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0cf      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d010      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	4b66      	ldr	r3, [pc, #408]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050bc:	429a      	cmp	r2, r3
 80050be:	d908      	bls.n	80050d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c0:	4b63      	ldr	r3, [pc, #396]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	4960      	ldr	r1, [pc, #384]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d04c      	beq.n	8005178 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d107      	bne.n	80050f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e6:	4b5a      	ldr	r3, [pc, #360]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d121      	bne.n	8005136 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e0a6      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050fe:	4b54      	ldr	r3, [pc, #336]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d115      	bne.n	8005136 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e09a      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d107      	bne.n	8005126 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005116:	4b4e      	ldr	r3, [pc, #312]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d109      	bne.n	8005136 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e08e      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005126:	4b4a      	ldr	r3, [pc, #296]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e086      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005136:	4b46      	ldr	r3, [pc, #280]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f023 0203 	bic.w	r2, r3, #3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	4943      	ldr	r1, [pc, #268]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005144:	4313      	orrs	r3, r2
 8005146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005148:	f7fe fa06 	bl	8003558 <HAL_GetTick>
 800514c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514e:	e00a      	b.n	8005166 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005150:	f7fe fa02 	bl	8003558 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515e:	4293      	cmp	r3, r2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e06e      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005166:	4b3a      	ldr	r3, [pc, #232]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 020c 	and.w	r2, r3, #12
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	429a      	cmp	r2, r3
 8005176:	d1eb      	bne.n	8005150 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d010      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	4b31      	ldr	r3, [pc, #196]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005190:	429a      	cmp	r2, r3
 8005192:	d208      	bcs.n	80051a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005194:	4b2e      	ldr	r3, [pc, #184]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	492b      	ldr	r1, [pc, #172]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051a6:	4b29      	ldr	r3, [pc, #164]	@ (800524c <HAL_RCC_ClockConfig+0x1ec>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d210      	bcs.n	80051d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b4:	4b25      	ldr	r3, [pc, #148]	@ (800524c <HAL_RCC_ClockConfig+0x1ec>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f023 0207 	bic.w	r2, r3, #7
 80051bc:	4923      	ldr	r1, [pc, #140]	@ (800524c <HAL_RCC_ClockConfig+0x1ec>)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c4:	4b21      	ldr	r3, [pc, #132]	@ (800524c <HAL_RCC_ClockConfig+0x1ec>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d001      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e036      	b.n	8005244 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d008      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	4918      	ldr	r1, [pc, #96]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d009      	beq.n	8005214 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005200:	4b13      	ldr	r3, [pc, #76]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4910      	ldr	r1, [pc, #64]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 8005210:	4313      	orrs	r3, r2
 8005212:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005214:	f000 f824 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8005218:	4602      	mov	r2, r0
 800521a:	4b0d      	ldr	r3, [pc, #52]	@ (8005250 <HAL_RCC_ClockConfig+0x1f0>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	091b      	lsrs	r3, r3, #4
 8005220:	f003 030f 	and.w	r3, r3, #15
 8005224:	490b      	ldr	r1, [pc, #44]	@ (8005254 <HAL_RCC_ClockConfig+0x1f4>)
 8005226:	5ccb      	ldrb	r3, [r1, r3]
 8005228:	f003 031f 	and.w	r3, r3, #31
 800522c:	fa22 f303 	lsr.w	r3, r2, r3
 8005230:	4a09      	ldr	r2, [pc, #36]	@ (8005258 <HAL_RCC_ClockConfig+0x1f8>)
 8005232:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005234:	4b09      	ldr	r3, [pc, #36]	@ (800525c <HAL_RCC_ClockConfig+0x1fc>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f7fe f93d 	bl	80034b8 <HAL_InitTick>
 800523e:	4603      	mov	r3, r0
 8005240:	72fb      	strb	r3, [r7, #11]

  return status;
 8005242:	7afb      	ldrb	r3, [r7, #11]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40022000 	.word	0x40022000
 8005250:	40021000 	.word	0x40021000
 8005254:	080081c4 	.word	0x080081c4
 8005258:	20000000 	.word	0x20000000
 800525c:	20000004 	.word	0x20000004

08005260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005260:	b480      	push	{r7}
 8005262:	b089      	sub	sp, #36	@ 0x24
 8005264:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	2300      	movs	r3, #0
 800526c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800526e:	4b3e      	ldr	r3, [pc, #248]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005278:	4b3b      	ldr	r3, [pc, #236]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x34>
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b0c      	cmp	r3, #12
 800528c:	d121      	bne.n	80052d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d11e      	bne.n	80052d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005294:	4b34      	ldr	r3, [pc, #208]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d107      	bne.n	80052b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052a0:	4b31      	ldr	r3, [pc, #196]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 80052a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052a6:	0a1b      	lsrs	r3, r3, #8
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	61fb      	str	r3, [r7, #28]
 80052ae:	e005      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052b0:	4b2d      	ldr	r3, [pc, #180]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052bc:	4a2b      	ldr	r2, [pc, #172]	@ (800536c <HAL_RCC_GetSysClockFreq+0x10c>)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10d      	bne.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052d0:	e00a      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d102      	bne.n	80052de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052d8:	4b25      	ldr	r3, [pc, #148]	@ (8005370 <HAL_RCC_GetSysClockFreq+0x110>)
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	e004      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052e4:	4b23      	ldr	r3, [pc, #140]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x114>)
 80052e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d134      	bne.n	8005358 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d003      	beq.n	8005306 <HAL_RCC_GetSysClockFreq+0xa6>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b03      	cmp	r3, #3
 8005302:	d003      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0xac>
 8005304:	e005      	b.n	8005312 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005306:	4b1a      	ldr	r3, [pc, #104]	@ (8005370 <HAL_RCC_GetSysClockFreq+0x110>)
 8005308:	617b      	str	r3, [r7, #20]
      break;
 800530a:	e005      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800530c:	4b19      	ldr	r3, [pc, #100]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x114>)
 800530e:	617b      	str	r3, [r7, #20]
      break;
 8005310:	e002      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	617b      	str	r3, [r7, #20]
      break;
 8005316:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005318:	4b13      	ldr	r3, [pc, #76]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	091b      	lsrs	r3, r3, #4
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	3301      	adds	r3, #1
 8005324:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005326:	4b10      	ldr	r3, [pc, #64]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	0a1b      	lsrs	r3, r3, #8
 800532c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	fb03 f202 	mul.w	r2, r3, r2
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	fbb2 f3f3 	udiv	r3, r2, r3
 800533c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800533e:	4b0a      	ldr	r3, [pc, #40]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	0e5b      	lsrs	r3, r3, #25
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	3301      	adds	r3, #1
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	fbb2 f3f3 	udiv	r3, r2, r3
 8005356:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005358:	69bb      	ldr	r3, [r7, #24]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3724      	adds	r7, #36	@ 0x24
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40021000 	.word	0x40021000
 800536c:	080081d4 	.word	0x080081d4
 8005370:	00f42400 	.word	0x00f42400
 8005374:	007a1200 	.word	0x007a1200

08005378 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005380:	2300      	movs	r3, #0
 8005382:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005384:	4b2a      	ldr	r3, [pc, #168]	@ (8005430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005390:	f7ff f9ee 	bl	8004770 <HAL_PWREx_GetVoltageRange>
 8005394:	6178      	str	r0, [r7, #20]
 8005396:	e014      	b.n	80053c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005398:	4b25      	ldr	r3, [pc, #148]	@ (8005430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800539a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539c:	4a24      	ldr	r2, [pc, #144]	@ (8005430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800539e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80053a4:	4b22      	ldr	r3, [pc, #136]	@ (8005430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053b0:	f7ff f9de 	bl	8004770 <HAL_PWREx_GetVoltageRange>
 80053b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005430 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053c8:	d10b      	bne.n	80053e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b80      	cmp	r3, #128	@ 0x80
 80053ce:	d919      	bls.n	8005404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2ba0      	cmp	r3, #160	@ 0xa0
 80053d4:	d902      	bls.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053d6:	2302      	movs	r3, #2
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	e013      	b.n	8005404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053dc:	2301      	movs	r3, #1
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	e010      	b.n	8005404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b80      	cmp	r3, #128	@ 0x80
 80053e6:	d902      	bls.n	80053ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80053e8:	2303      	movs	r3, #3
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	e00a      	b.n	8005404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b80      	cmp	r3, #128	@ 0x80
 80053f2:	d102      	bne.n	80053fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053f4:	2302      	movs	r3, #2
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	e004      	b.n	8005404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b70      	cmp	r3, #112	@ 0x70
 80053fe:	d101      	bne.n	8005404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005400:	2301      	movs	r3, #1
 8005402:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005404:	4b0b      	ldr	r3, [pc, #44]	@ (8005434 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f023 0207 	bic.w	r2, r3, #7
 800540c:	4909      	ldr	r1, [pc, #36]	@ (8005434 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005414:	4b07      	ldr	r3, [pc, #28]	@ (8005434 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	429a      	cmp	r2, r3
 8005420:	d001      	beq.n	8005426 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40021000 	.word	0x40021000
 8005434:	40022000 	.word	0x40022000

08005438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e049      	b.n	80054de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fd ff5a 	bl	8003318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3304      	adds	r3, #4
 8005474:	4619      	mov	r1, r3
 8005476:	4610      	mov	r0, r2
 8005478:	f000 fb52 	bl	8005b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e049      	b.n	800558c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d106      	bne.n	8005512 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f841 	bl	8005594 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3304      	adds	r3, #4
 8005522:	4619      	mov	r1, r3
 8005524:	4610      	mov	r0, r2
 8005526:	f000 fafb 	bl	8005b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d109      	bne.n	80055cc <HAL_TIM_PWM_Start+0x24>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	bf14      	ite	ne
 80055c4:	2301      	movne	r3, #1
 80055c6:	2300      	moveq	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	e03c      	b.n	8005646 <HAL_TIM_PWM_Start+0x9e>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d109      	bne.n	80055e6 <HAL_TIM_PWM_Start+0x3e>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b01      	cmp	r3, #1
 80055dc:	bf14      	ite	ne
 80055de:	2301      	movne	r3, #1
 80055e0:	2300      	moveq	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	e02f      	b.n	8005646 <HAL_TIM_PWM_Start+0x9e>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d109      	bne.n	8005600 <HAL_TIM_PWM_Start+0x58>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	bf14      	ite	ne
 80055f8:	2301      	movne	r3, #1
 80055fa:	2300      	moveq	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	e022      	b.n	8005646 <HAL_TIM_PWM_Start+0x9e>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2b0c      	cmp	r3, #12
 8005604:	d109      	bne.n	800561a <HAL_TIM_PWM_Start+0x72>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b01      	cmp	r3, #1
 8005610:	bf14      	ite	ne
 8005612:	2301      	movne	r3, #1
 8005614:	2300      	moveq	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	e015      	b.n	8005646 <HAL_TIM_PWM_Start+0x9e>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b10      	cmp	r3, #16
 800561e:	d109      	bne.n	8005634 <HAL_TIM_PWM_Start+0x8c>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b01      	cmp	r3, #1
 800562a:	bf14      	ite	ne
 800562c:	2301      	movne	r3, #1
 800562e:	2300      	moveq	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	e008      	b.n	8005646 <HAL_TIM_PWM_Start+0x9e>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	bf14      	ite	ne
 8005640:	2301      	movne	r3, #1
 8005642:	2300      	moveq	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e07e      	b.n	800574c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d104      	bne.n	800565e <HAL_TIM_PWM_Start+0xb6>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800565c:	e023      	b.n	80056a6 <HAL_TIM_PWM_Start+0xfe>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b04      	cmp	r3, #4
 8005662:	d104      	bne.n	800566e <HAL_TIM_PWM_Start+0xc6>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800566c:	e01b      	b.n	80056a6 <HAL_TIM_PWM_Start+0xfe>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b08      	cmp	r3, #8
 8005672:	d104      	bne.n	800567e <HAL_TIM_PWM_Start+0xd6>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800567c:	e013      	b.n	80056a6 <HAL_TIM_PWM_Start+0xfe>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b0c      	cmp	r3, #12
 8005682:	d104      	bne.n	800568e <HAL_TIM_PWM_Start+0xe6>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800568c:	e00b      	b.n	80056a6 <HAL_TIM_PWM_Start+0xfe>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b10      	cmp	r3, #16
 8005692:	d104      	bne.n	800569e <HAL_TIM_PWM_Start+0xf6>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800569c:	e003      	b.n	80056a6 <HAL_TIM_PWM_Start+0xfe>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2201      	movs	r2, #1
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fdbe 	bl	8006230 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a26      	ldr	r2, [pc, #152]	@ (8005754 <HAL_TIM_PWM_Start+0x1ac>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d009      	beq.n	80056d2 <HAL_TIM_PWM_Start+0x12a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a25      	ldr	r2, [pc, #148]	@ (8005758 <HAL_TIM_PWM_Start+0x1b0>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d004      	beq.n	80056d2 <HAL_TIM_PWM_Start+0x12a>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a23      	ldr	r2, [pc, #140]	@ (800575c <HAL_TIM_PWM_Start+0x1b4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d101      	bne.n	80056d6 <HAL_TIM_PWM_Start+0x12e>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <HAL_TIM_PWM_Start+0x130>
 80056d6:	2300      	movs	r3, #0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d007      	beq.n	80056ec <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a18      	ldr	r2, [pc, #96]	@ (8005754 <HAL_TIM_PWM_Start+0x1ac>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d009      	beq.n	800570a <HAL_TIM_PWM_Start+0x162>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056fe:	d004      	beq.n	800570a <HAL_TIM_PWM_Start+0x162>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a14      	ldr	r2, [pc, #80]	@ (8005758 <HAL_TIM_PWM_Start+0x1b0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d115      	bne.n	8005736 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	4b13      	ldr	r3, [pc, #76]	@ (8005760 <HAL_TIM_PWM_Start+0x1b8>)
 8005712:	4013      	ands	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b06      	cmp	r3, #6
 800571a:	d015      	beq.n	8005748 <HAL_TIM_PWM_Start+0x1a0>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005722:	d011      	beq.n	8005748 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005734:	e008      	b.n	8005748 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0201 	orr.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	e000      	b.n	800574a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005748:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40012c00 	.word	0x40012c00
 8005758:	40014000 	.word	0x40014000
 800575c:	40014400 	.word	0x40014400
 8005760:	00010007 	.word	0x00010007

08005764 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800577e:	2302      	movs	r3, #2
 8005780:	e0ff      	b.n	8005982 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b14      	cmp	r3, #20
 800578e:	f200 80f0 	bhi.w	8005972 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005792:	a201      	add	r2, pc, #4	@ (adr r2, 8005798 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057ed 	.word	0x080057ed
 800579c:	08005973 	.word	0x08005973
 80057a0:	08005973 	.word	0x08005973
 80057a4:	08005973 	.word	0x08005973
 80057a8:	0800582d 	.word	0x0800582d
 80057ac:	08005973 	.word	0x08005973
 80057b0:	08005973 	.word	0x08005973
 80057b4:	08005973 	.word	0x08005973
 80057b8:	0800586f 	.word	0x0800586f
 80057bc:	08005973 	.word	0x08005973
 80057c0:	08005973 	.word	0x08005973
 80057c4:	08005973 	.word	0x08005973
 80057c8:	080058af 	.word	0x080058af
 80057cc:	08005973 	.word	0x08005973
 80057d0:	08005973 	.word	0x08005973
 80057d4:	08005973 	.word	0x08005973
 80057d8:	080058f1 	.word	0x080058f1
 80057dc:	08005973 	.word	0x08005973
 80057e0:	08005973 	.word	0x08005973
 80057e4:	08005973 	.word	0x08005973
 80057e8:	08005931 	.word	0x08005931
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68b9      	ldr	r1, [r7, #8]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fa04 	bl	8005c00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0208 	orr.w	r2, r2, #8
 8005806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0204 	bic.w	r2, r2, #4
 8005816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6999      	ldr	r1, [r3, #24]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	691a      	ldr	r2, [r3, #16]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	619a      	str	r2, [r3, #24]
      break;
 800582a:	e0a5      	b.n	8005978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 fa60 	bl	8005cf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699a      	ldr	r2, [r3, #24]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6999      	ldr	r1, [r3, #24]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	021a      	lsls	r2, r3, #8
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	619a      	str	r2, [r3, #24]
      break;
 800586c:	e084      	b.n	8005978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fab9 	bl	8005dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0208 	orr.w	r2, r2, #8
 8005888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0204 	bic.w	r2, r2, #4
 8005898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69d9      	ldr	r1, [r3, #28]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	61da      	str	r2, [r3, #28]
      break;
 80058ac:	e064      	b.n	8005978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fb11 	bl	8005edc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69d9      	ldr	r1, [r3, #28]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	021a      	lsls	r2, r3, #8
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	61da      	str	r2, [r3, #28]
      break;
 80058ee:	e043      	b.n	8005978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fb4e 	bl	8005f98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0208 	orr.w	r2, r2, #8
 800590a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0204 	bic.w	r2, r2, #4
 800591a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800592e:	e023      	b.n	8005978 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fb86 	bl	8006048 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800594a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800595a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	021a      	lsls	r2, r3, #8
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005970:	e002      	b.n	8005978 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	75fb      	strb	r3, [r7, #23]
      break;
 8005976:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005980:	7dfb      	ldrb	r3, [r7, #23]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop

0800598c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d101      	bne.n	80059a8 <HAL_TIM_ConfigClockSource+0x1c>
 80059a4:	2302      	movs	r3, #2
 80059a6:	e0b6      	b.n	8005b16 <HAL_TIM_ConfigClockSource+0x18a>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059e4:	d03e      	beq.n	8005a64 <HAL_TIM_ConfigClockSource+0xd8>
 80059e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059ea:	f200 8087 	bhi.w	8005afc <HAL_TIM_ConfigClockSource+0x170>
 80059ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059f2:	f000 8086 	beq.w	8005b02 <HAL_TIM_ConfigClockSource+0x176>
 80059f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059fa:	d87f      	bhi.n	8005afc <HAL_TIM_ConfigClockSource+0x170>
 80059fc:	2b70      	cmp	r3, #112	@ 0x70
 80059fe:	d01a      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0xaa>
 8005a00:	2b70      	cmp	r3, #112	@ 0x70
 8005a02:	d87b      	bhi.n	8005afc <HAL_TIM_ConfigClockSource+0x170>
 8005a04:	2b60      	cmp	r3, #96	@ 0x60
 8005a06:	d050      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x11e>
 8005a08:	2b60      	cmp	r3, #96	@ 0x60
 8005a0a:	d877      	bhi.n	8005afc <HAL_TIM_ConfigClockSource+0x170>
 8005a0c:	2b50      	cmp	r3, #80	@ 0x50
 8005a0e:	d03c      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0xfe>
 8005a10:	2b50      	cmp	r3, #80	@ 0x50
 8005a12:	d873      	bhi.n	8005afc <HAL_TIM_ConfigClockSource+0x170>
 8005a14:	2b40      	cmp	r3, #64	@ 0x40
 8005a16:	d058      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0x13e>
 8005a18:	2b40      	cmp	r3, #64	@ 0x40
 8005a1a:	d86f      	bhi.n	8005afc <HAL_TIM_ConfigClockSource+0x170>
 8005a1c:	2b30      	cmp	r3, #48	@ 0x30
 8005a1e:	d064      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0x15e>
 8005a20:	2b30      	cmp	r3, #48	@ 0x30
 8005a22:	d86b      	bhi.n	8005afc <HAL_TIM_ConfigClockSource+0x170>
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d060      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0x15e>
 8005a28:	2b20      	cmp	r3, #32
 8005a2a:	d867      	bhi.n	8005afc <HAL_TIM_ConfigClockSource+0x170>
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d05c      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0x15e>
 8005a30:	2b10      	cmp	r3, #16
 8005a32:	d05a      	beq.n	8005aea <HAL_TIM_ConfigClockSource+0x15e>
 8005a34:	e062      	b.n	8005afc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a46:	f000 fbd3 	bl	80061f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	609a      	str	r2, [r3, #8]
      break;
 8005a62:	e04f      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a74:	f000 fbbc 	bl	80061f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a86:	609a      	str	r2, [r3, #8]
      break;
 8005a88:	e03c      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a96:	461a      	mov	r2, r3
 8005a98:	f000 fb30 	bl	80060fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2150      	movs	r1, #80	@ 0x50
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 fb89 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005aa8:	e02c      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f000 fb4f 	bl	800615a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2160      	movs	r1, #96	@ 0x60
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fb79 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005ac8:	e01c      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f000 fb10 	bl	80060fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2140      	movs	r1, #64	@ 0x40
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fb69 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005ae8:	e00c      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4619      	mov	r1, r3
 8005af4:	4610      	mov	r0, r2
 8005af6:	f000 fb60 	bl	80061ba <TIM_ITRx_SetConfig>
      break;
 8005afa:	e003      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	73fb      	strb	r3, [r7, #15]
      break;
 8005b00:	e000      	b.n	8005b04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a30      	ldr	r2, [pc, #192]	@ (8005bf4 <TIM_Base_SetConfig+0xd4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d003      	beq.n	8005b40 <TIM_Base_SetConfig+0x20>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b3e:	d108      	bne.n	8005b52 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a27      	ldr	r2, [pc, #156]	@ (8005bf4 <TIM_Base_SetConfig+0xd4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00b      	beq.n	8005b72 <TIM_Base_SetConfig+0x52>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b60:	d007      	beq.n	8005b72 <TIM_Base_SetConfig+0x52>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a24      	ldr	r2, [pc, #144]	@ (8005bf8 <TIM_Base_SetConfig+0xd8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_Base_SetConfig+0x52>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a23      	ldr	r2, [pc, #140]	@ (8005bfc <TIM_Base_SetConfig+0xdc>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d108      	bne.n	8005b84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a12      	ldr	r2, [pc, #72]	@ (8005bf4 <TIM_Base_SetConfig+0xd4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d007      	beq.n	8005bc0 <TIM_Base_SetConfig+0xa0>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a11      	ldr	r2, [pc, #68]	@ (8005bf8 <TIM_Base_SetConfig+0xd8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d003      	beq.n	8005bc0 <TIM_Base_SetConfig+0xa0>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a10      	ldr	r2, [pc, #64]	@ (8005bfc <TIM_Base_SetConfig+0xdc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d103      	bne.n	8005bc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	691a      	ldr	r2, [r3, #16]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d105      	bne.n	8005be6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f023 0201 	bic.w	r2, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	611a      	str	r2, [r3, #16]
  }
}
 8005be6:	bf00      	nop
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40012c00 	.word	0x40012c00
 8005bf8:	40014000 	.word	0x40014000
 8005bfc:	40014400 	.word	0x40014400

08005c00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	f023 0201 	bic.w	r2, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0303 	bic.w	r3, r3, #3
 8005c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f023 0302 	bic.w	r3, r3, #2
 8005c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a24      	ldr	r2, [pc, #144]	@ (8005cec <TIM_OC1_SetConfig+0xec>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d007      	beq.n	8005c70 <TIM_OC1_SetConfig+0x70>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a23      	ldr	r2, [pc, #140]	@ (8005cf0 <TIM_OC1_SetConfig+0xf0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d003      	beq.n	8005c70 <TIM_OC1_SetConfig+0x70>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a22      	ldr	r2, [pc, #136]	@ (8005cf4 <TIM_OC1_SetConfig+0xf4>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d10c      	bne.n	8005c8a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f023 0308 	bic.w	r3, r3, #8
 8005c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f023 0304 	bic.w	r3, r3, #4
 8005c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a17      	ldr	r2, [pc, #92]	@ (8005cec <TIM_OC1_SetConfig+0xec>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d007      	beq.n	8005ca2 <TIM_OC1_SetConfig+0xa2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a16      	ldr	r2, [pc, #88]	@ (8005cf0 <TIM_OC1_SetConfig+0xf0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d003      	beq.n	8005ca2 <TIM_OC1_SetConfig+0xa2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a15      	ldr	r2, [pc, #84]	@ (8005cf4 <TIM_OC1_SetConfig+0xf4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d111      	bne.n	8005cc6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	621a      	str	r2, [r3, #32]
}
 8005ce0:	bf00      	nop
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	40012c00 	.word	0x40012c00
 8005cf0:	40014000 	.word	0x40014000
 8005cf4:	40014400 	.word	0x40014400

08005cf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	f023 0210 	bic.w	r2, r3, #16
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	021b      	lsls	r3, r3, #8
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f023 0320 	bic.w	r3, r3, #32
 8005d46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a22      	ldr	r2, [pc, #136]	@ (8005de0 <TIM_OC2_SetConfig+0xe8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d10d      	bne.n	8005d78 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a19      	ldr	r2, [pc, #100]	@ (8005de0 <TIM_OC2_SetConfig+0xe8>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d007      	beq.n	8005d90 <TIM_OC2_SetConfig+0x98>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a18      	ldr	r2, [pc, #96]	@ (8005de4 <TIM_OC2_SetConfig+0xec>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_OC2_SetConfig+0x98>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a17      	ldr	r2, [pc, #92]	@ (8005de8 <TIM_OC2_SetConfig+0xf0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d113      	bne.n	8005db8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40014400 	.word	0x40014400

08005dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	021b      	lsls	r3, r3, #8
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a21      	ldr	r2, [pc, #132]	@ (8005ed0 <TIM_OC3_SetConfig+0xe4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d10d      	bne.n	8005e6a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	021b      	lsls	r3, r3, #8
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a18      	ldr	r2, [pc, #96]	@ (8005ed0 <TIM_OC3_SetConfig+0xe4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d007      	beq.n	8005e82 <TIM_OC3_SetConfig+0x96>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a17      	ldr	r2, [pc, #92]	@ (8005ed4 <TIM_OC3_SetConfig+0xe8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d003      	beq.n	8005e82 <TIM_OC3_SetConfig+0x96>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a16      	ldr	r2, [pc, #88]	@ (8005ed8 <TIM_OC3_SetConfig+0xec>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d113      	bne.n	8005eaa <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	621a      	str	r2, [r3, #32]
}
 8005ec4:	bf00      	nop
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	40012c00 	.word	0x40012c00
 8005ed4:	40014000 	.word	0x40014000
 8005ed8:	40014400 	.word	0x40014400

08005edc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b087      	sub	sp, #28
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	031b      	lsls	r3, r3, #12
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a14      	ldr	r2, [pc, #80]	@ (8005f8c <TIM_OC4_SetConfig+0xb0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d007      	beq.n	8005f50 <TIM_OC4_SetConfig+0x74>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a13      	ldr	r2, [pc, #76]	@ (8005f90 <TIM_OC4_SetConfig+0xb4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d003      	beq.n	8005f50 <TIM_OC4_SetConfig+0x74>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a12      	ldr	r2, [pc, #72]	@ (8005f94 <TIM_OC4_SetConfig+0xb8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d109      	bne.n	8005f64 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	019b      	lsls	r3, r3, #6
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40012c00 	.word	0x40012c00
 8005f90:	40014000 	.word	0x40014000
 8005f94:	40014400 	.word	0x40014400

08005f98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005fdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	041b      	lsls	r3, r3, #16
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a13      	ldr	r2, [pc, #76]	@ (800603c <TIM_OC5_SetConfig+0xa4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d007      	beq.n	8006002 <TIM_OC5_SetConfig+0x6a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a12      	ldr	r2, [pc, #72]	@ (8006040 <TIM_OC5_SetConfig+0xa8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d003      	beq.n	8006002 <TIM_OC5_SetConfig+0x6a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a11      	ldr	r2, [pc, #68]	@ (8006044 <TIM_OC5_SetConfig+0xac>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d109      	bne.n	8006016 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006008:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	621a      	str	r2, [r3, #32]
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	40012c00 	.word	0x40012c00
 8006040:	40014000 	.word	0x40014000
 8006044:	40014400 	.word	0x40014400

08006048 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006076:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800607a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	021b      	lsls	r3, r3, #8
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800608e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	051b      	lsls	r3, r3, #20
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a14      	ldr	r2, [pc, #80]	@ (80060f0 <TIM_OC6_SetConfig+0xa8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d007      	beq.n	80060b4 <TIM_OC6_SetConfig+0x6c>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a13      	ldr	r2, [pc, #76]	@ (80060f4 <TIM_OC6_SetConfig+0xac>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d003      	beq.n	80060b4 <TIM_OC6_SetConfig+0x6c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a12      	ldr	r2, [pc, #72]	@ (80060f8 <TIM_OC6_SetConfig+0xb0>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d109      	bne.n	80060c8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	029b      	lsls	r3, r3, #10
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	621a      	str	r2, [r3, #32]
}
 80060e2:	bf00      	nop
 80060e4:	371c      	adds	r7, #28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40012c00 	.word	0x40012c00
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40014400 	.word	0x40014400

080060fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f023 0201 	bic.w	r2, r3, #1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f023 030a 	bic.w	r3, r3, #10
 8006138:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	621a      	str	r2, [r3, #32]
}
 800614e:	bf00      	nop
 8006150:	371c      	adds	r7, #28
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800615a:	b480      	push	{r7}
 800615c:	b087      	sub	sp, #28
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f023 0210 	bic.w	r2, r3, #16
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006184:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	031b      	lsls	r3, r3, #12
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006196:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	621a      	str	r2, [r3, #32]
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f043 0307 	orr.w	r3, r3, #7
 80061dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	609a      	str	r2, [r3, #8]
}
 80061e4:	bf00      	nop
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800620a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	021a      	lsls	r2, r3, #8
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	431a      	orrs	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4313      	orrs	r3, r2
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	609a      	str	r2, [r3, #8]
}
 8006224:	bf00      	nop
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	2201      	movs	r2, #1
 8006244:	fa02 f303 	lsl.w	r3, r2, r3
 8006248:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a1a      	ldr	r2, [r3, #32]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	43db      	mvns	r3, r3
 8006252:	401a      	ands	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1a      	ldr	r2, [r3, #32]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f003 031f 	and.w	r3, r3, #31
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	fa01 f303 	lsl.w	r3, r1, r3
 8006268:	431a      	orrs	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	621a      	str	r2, [r3, #32]
}
 800626e:	bf00      	nop
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
	...

0800627c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d109      	bne.n	80062a0 <HAL_TIMEx_PWMN_Start+0x24>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b01      	cmp	r3, #1
 8006296:	bf14      	ite	ne
 8006298:	2301      	movne	r3, #1
 800629a:	2300      	moveq	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	e022      	b.n	80062e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d109      	bne.n	80062ba <HAL_TIMEx_PWMN_Start+0x3e>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	bf14      	ite	ne
 80062b2:	2301      	movne	r3, #1
 80062b4:	2300      	moveq	r3, #0
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	e015      	b.n	80062e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d109      	bne.n	80062d4 <HAL_TIMEx_PWMN_Start+0x58>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	bf14      	ite	ne
 80062cc:	2301      	movne	r3, #1
 80062ce:	2300      	moveq	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	e008      	b.n	80062e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	bf14      	ite	ne
 80062e0:	2301      	movne	r3, #1
 80062e2:	2300      	moveq	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e05a      	b.n	80063a4 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d104      	bne.n	80062fe <HAL_TIMEx_PWMN_Start+0x82>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062fc:	e013      	b.n	8006326 <HAL_TIMEx_PWMN_Start+0xaa>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b04      	cmp	r3, #4
 8006302:	d104      	bne.n	800630e <HAL_TIMEx_PWMN_Start+0x92>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800630c:	e00b      	b.n	8006326 <HAL_TIMEx_PWMN_Start+0xaa>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b08      	cmp	r3, #8
 8006312:	d104      	bne.n	800631e <HAL_TIMEx_PWMN_Start+0xa2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800631c:	e003      	b.n	8006326 <HAL_TIMEx_PWMN_Start+0xaa>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2202      	movs	r2, #2
 8006322:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2204      	movs	r2, #4
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	4618      	mov	r0, r3
 8006330:	f000 f920 	bl	8006574 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006342:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a18      	ldr	r2, [pc, #96]	@ (80063ac <HAL_TIMEx_PWMN_Start+0x130>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d009      	beq.n	8006362 <HAL_TIMEx_PWMN_Start+0xe6>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006356:	d004      	beq.n	8006362 <HAL_TIMEx_PWMN_Start+0xe6>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a14      	ldr	r2, [pc, #80]	@ (80063b0 <HAL_TIMEx_PWMN_Start+0x134>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d115      	bne.n	800638e <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	4b12      	ldr	r3, [pc, #72]	@ (80063b4 <HAL_TIMEx_PWMN_Start+0x138>)
 800636a:	4013      	ands	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b06      	cmp	r3, #6
 8006372:	d015      	beq.n	80063a0 <HAL_TIMEx_PWMN_Start+0x124>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800637a:	d011      	beq.n	80063a0 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0201 	orr.w	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638c:	e008      	b.n	80063a0 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0201 	orr.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	e000      	b.n	80063a2 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	40012c00 	.word	0x40012c00
 80063b0:	40014000 	.word	0x40014000
 80063b4:	00010007 	.word	0x00010007

080063b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d101      	bne.n	80063d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e04f      	b.n	8006470 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a21      	ldr	r2, [pc, #132]	@ (800647c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d108      	bne.n	800640c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006400:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a14      	ldr	r2, [pc, #80]	@ (800647c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d009      	beq.n	8006444 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006438:	d004      	beq.n	8006444 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a10      	ldr	r2, [pc, #64]	@ (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d10c      	bne.n	800645e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800644a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	4313      	orrs	r3, r2
 8006454:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	40012c00 	.word	0x40012c00
 8006480:	40014000 	.word	0x40014000

08006484 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800649c:	2302      	movs	r3, #2
 800649e:	e060      	b.n	8006562 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	041b      	lsls	r3, r3, #16
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a14      	ldr	r2, [pc, #80]	@ (8006570 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d115      	bne.n	8006550 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652e:	051b      	lsls	r3, r3, #20
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	4313      	orrs	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	40012c00 	.word	0x40012c00

08006574 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	2204      	movs	r2, #4
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a1a      	ldr	r2, [r3, #32]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	43db      	mvns	r3, r3
 8006596:	401a      	ands	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a1a      	ldr	r2, [r3, #32]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	fa01 f303 	lsl.w	r3, r1, r3
 80065ac:	431a      	orrs	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	621a      	str	r2, [r3, #32]
}
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
	...

080065c0 <_ZN15ServoControllerC1Ev>:
    };

    const uint8_t ServoController::SERVO_IDS[ServoController::NUM_SERVOS];
#endif

ServoController::ServoController(){
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]

    memset(servo_positions_, 0, NUM_SERVOS*sizeof(servo_positions_[0]));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2204      	movs	r2, #4
 80065cc:	2100      	movs	r1, #0
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 ff52 	bl	8007478 <memset>
    memset(last_update_us_, 0 , NUM_SERVOS*sizeof(last_update_us_[0]));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3308      	adds	r3, #8
 80065d8:	2208      	movs	r2, #8
 80065da:	2100      	movs	r1, #0
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 ff4b 	bl	8007478 <memset>

    // fetch timer period (assume timer2 uses the same period as timer1)
    pwm_period_ = htim1.Instance->ARR;
 80065e2:	4b09      	ldr	r3, [pc, #36]	@ (8006608 <_ZN15ServoControllerC1Ev+0x48>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	611a      	str	r2, [r3, #16]
    if ( pwm_period_ == 0 ) { // if fails to fetch the timer period
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d103      	bne.n	80065fc <_ZN15ServoControllerC1Ev+0x3c>
        // TODO: change this magic number to something else
        pwm_period_ = 32000; // assign a magic number to period
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80065fa:	611a      	str	r2, [r3, #16]
    } 
}
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	2000058c 	.word	0x2000058c

0800660c <_ZN15ServoController12start_servosEv>:

void ServoController::start_servos(){
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < NUM_SERVOS; i++){
 8006614:	2300      	movs	r3, #0
 8006616:	73fb      	strb	r3, [r7, #15]
 8006618:	e030      	b.n	800667c <_ZN15ServoController12start_servosEv+0x70>

        HAL_TIM_PWM_Start(&(SERVO_CHANNELS[i].timer), SERVO_CHANNELS[i].channel);
 800661a:	7bfb      	ldrb	r3, [r7, #15]
 800661c:	2254      	movs	r2, #84	@ 0x54
 800661e:	fb02 f303 	mul.w	r3, r2, r3
 8006622:	4a1a      	ldr	r2, [pc, #104]	@ (800668c <_ZN15ServoController12start_servosEv+0x80>)
 8006624:	441a      	add	r2, r3
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	4918      	ldr	r1, [pc, #96]	@ (800668c <_ZN15ServoController12start_servosEv+0x80>)
 800662a:	2054      	movs	r0, #84	@ 0x54
 800662c:	fb00 f303 	mul.w	r3, r0, r3
 8006630:	440b      	add	r3, r1
 8006632:	334c      	adds	r3, #76	@ 0x4c
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4619      	mov	r1, r3
 8006638:	4610      	mov	r0, r2
 800663a:	f7fe ffb5 	bl	80055a8 <HAL_TIM_PWM_Start>

        if (SERVO_CHANNELS[i].is_complementary){
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	4a12      	ldr	r2, [pc, #72]	@ (800668c <_ZN15ServoController12start_servosEv+0x80>)
 8006642:	2154      	movs	r1, #84	@ 0x54
 8006644:	fb01 f303 	mul.w	r3, r1, r3
 8006648:	4413      	add	r3, r2
 800664a:	3350      	adds	r3, #80	@ 0x50
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d011      	beq.n	8006676 <_ZN15ServoController12start_servosEv+0x6a>
            HAL_TIMEx_PWMN_Start(&(SERVO_CHANNELS[i].timer), SERVO_CHANNELS[i].channel);
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	2254      	movs	r2, #84	@ 0x54
 8006656:	fb02 f303 	mul.w	r3, r2, r3
 800665a:	4a0c      	ldr	r2, [pc, #48]	@ (800668c <_ZN15ServoController12start_servosEv+0x80>)
 800665c:	441a      	add	r2, r3
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	490a      	ldr	r1, [pc, #40]	@ (800668c <_ZN15ServoController12start_servosEv+0x80>)
 8006662:	2054      	movs	r0, #84	@ 0x54
 8006664:	fb00 f303 	mul.w	r3, r0, r3
 8006668:	440b      	add	r3, r1
 800666a:	334c      	adds	r3, #76	@ 0x4c
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f7ff fe03 	bl	800627c <HAL_TIMEx_PWMN_Start>
    for (uint8_t i = 0; i < NUM_SERVOS; i++){
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	3301      	adds	r3, #1
 800667a:	73fb      	strb	r3, [r7, #15]
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0cb      	beq.n	800661a <_ZN15ServoController12start_servosEv+0xe>
        }
    }
}
 8006682:	bf00      	nop
 8006684:	bf00      	nop
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	2000000c 	.word	0x2000000c

08006690 <_ZN15ServoController21update_servo_positionEhf>:

bool ServoController::update_servo_position(uint8_t servo_num, float position){
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	460b      	mov	r3, r1
 800669a:	ed87 0a01 	vstr	s0, [r7, #4]
 800669e:	72fb      	strb	r3, [r7, #11]
    // boundary check
    if ( position< -1 || position > 1){
 80066a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80066a4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80066a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b0:	d408      	bmi.n	80066c4 <_ZN15ServoController21update_servo_positionEhf+0x34>
 80066b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80066b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c2:	dd01      	ble.n	80066c8 <_ZN15ServoController21update_servo_positionEhf+0x38>
        return false;
 80066c4:	2300      	movs	r3, #0
 80066c6:	e0bb      	b.n	8006840 <_ZN15ServoController21update_servo_positionEhf+0x1b0>
    }

    // iterate through servo id list to find the corresponding servo
    for (uint8_t i = 0; i < NUM_SERVOS; i++){
 80066c8:	2300      	movs	r3, #0
 80066ca:	75fb      	strb	r3, [r7, #23]
 80066cc:	e0b3      	b.n	8006836 <_ZN15ServoController21update_servo_positionEhf+0x1a6>
        if (servo_num == SERVO_IDS[i]){ // find the corresponding servo
 80066ce:	2205      	movs	r2, #5
 80066d0:	7afb      	ldrb	r3, [r7, #11]
 80066d2:	4293      	cmp	r3, r2
 80066d4:	f040 80ac 	bne.w	8006830 <_ZN15ServoController21update_servo_positionEhf+0x1a0>
            uint32_t compare_register = SERVO_CHANNELS[i].is_complementary? 
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	4a5c      	ldr	r2, [pc, #368]	@ (800684c <_ZN15ServoController21update_servo_positionEhf+0x1bc>)
 80066dc:	2154      	movs	r1, #84	@ 0x54
 80066de:	fb01 f303 	mul.w	r3, r1, r3
 80066e2:	4413      	add	r3, r2
 80066e4:	3350      	adds	r3, #80	@ 0x50
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01c      	beq.n	8006726 <_ZN15ServoController21update_servo_positionEhf+0x96>
                                        pwm_period_ - POSITION_TO_DUTY_CYCLE(position, pwm_period_)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	ee07 3a90 	vmov	s15, r3
 80066f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80066f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80066fc:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8006700:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006704:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8006850 <_ZN15ServoController21update_servo_positionEhf+0x1c0>
 8006708:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	ee07 3a90 	vmov	s15, r3
 8006714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800671c:	ee77 7a67 	vsub.f32	s15, s14, s15
            uint32_t compare_register = SERVO_CHANNELS[i].is_complementary? 
 8006720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006724:	e013      	b.n	800674e <_ZN15ServoController21update_servo_positionEhf+0xbe>
                                        : POSITION_TO_DUTY_CYCLE(position, pwm_period_);
 8006726:	edd7 7a01 	vldr	s15, [r7, #4]
 800672a:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800672e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006732:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8006850 <_ZN15ServoController21update_servo_positionEhf+0x1c0>
 8006736:	ee37 7a87 	vadd.f32	s14, s15, s14
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	ee07 3a90 	vmov	s15, r3
 8006742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006746:	ee67 7a27 	vmul.f32	s15, s14, s15
            uint32_t compare_register = SERVO_CHANNELS[i].is_complementary? 
 800674a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800674e:	edc7 7a04 	vstr	s15, [r7, #16]

            __HAL_TIM_SET_COMPARE(&(SERVO_CHANNELS[i].timer), SERVO_CHANNELS[i].channel,
 8006752:	7dfb      	ldrb	r3, [r7, #23]
 8006754:	4a3d      	ldr	r2, [pc, #244]	@ (800684c <_ZN15ServoController21update_servo_positionEhf+0x1bc>)
 8006756:	2154      	movs	r1, #84	@ 0x54
 8006758:	fb01 f303 	mul.w	r3, r1, r3
 800675c:	4413      	add	r3, r2
 800675e:	334c      	adds	r3, #76	@ 0x4c
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d109      	bne.n	800677a <_ZN15ServoController21update_servo_positionEhf+0xea>
 8006766:	7dfb      	ldrb	r3, [r7, #23]
 8006768:	4a38      	ldr	r2, [pc, #224]	@ (800684c <_ZN15ServoController21update_servo_positionEhf+0x1bc>)
 800676a:	2154      	movs	r1, #84	@ 0x54
 800676c:	fb01 f303 	mul.w	r3, r1, r3
 8006770:	4413      	add	r3, r2
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	635a      	str	r2, [r3, #52]	@ 0x34
 8006778:	e058      	b.n	800682c <_ZN15ServoController21update_servo_positionEhf+0x19c>
 800677a:	7dfb      	ldrb	r3, [r7, #23]
 800677c:	4a33      	ldr	r2, [pc, #204]	@ (800684c <_ZN15ServoController21update_servo_positionEhf+0x1bc>)
 800677e:	2154      	movs	r1, #84	@ 0x54
 8006780:	fb01 f303 	mul.w	r3, r1, r3
 8006784:	4413      	add	r3, r2
 8006786:	334c      	adds	r3, #76	@ 0x4c
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b04      	cmp	r3, #4
 800678c:	d109      	bne.n	80067a2 <_ZN15ServoController21update_servo_positionEhf+0x112>
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	4a2e      	ldr	r2, [pc, #184]	@ (800684c <_ZN15ServoController21update_servo_positionEhf+0x1bc>)
 8006792:	2154      	movs	r1, #84	@ 0x54
 8006794:	fb01 f303 	mul.w	r3, r1, r3
 8006798:	4413      	add	r3, r2
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	639a      	str	r2, [r3, #56]	@ 0x38
 80067a0:	e044      	b.n	800682c <_ZN15ServoController21update_servo_positionEhf+0x19c>
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	4a29      	ldr	r2, [pc, #164]	@ (800684c <_ZN15ServoController21update_servo_positionEhf+0x1bc>)
 80067a6:	2154      	movs	r1, #84	@ 0x54
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	4413      	add	r3, r2
 80067ae:	334c      	adds	r3, #76	@ 0x4c
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b08      	cmp	r3, #8
 80067b4:	d109      	bne.n	80067ca <_ZN15ServoController21update_servo_positionEhf+0x13a>
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
 80067b8:	4a24      	ldr	r2, [pc, #144]	@ (800684c <_ZN15ServoController21update_servo_positionEhf+0x1bc>)
 80067ba:	2154      	movs	r1, #84	@ 0x54
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	4413      	add	r3, r2
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80067c8:	e030      	b.n	800682c <_ZN15ServoController21update_servo_positionEhf+0x19c>
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	4a1f      	ldr	r2, [pc, #124]	@ (800684c <_ZN15ServoController21update_servo_positionEhf+0x1bc>)
 80067ce:	2154      	movs	r1, #84	@ 0x54
 80067d0:	fb01 f303 	mul.w	r3, r1, r3
 80067d4:	4413      	add	r3, r2
 80067d6:	334c      	adds	r3, #76	@ 0x4c
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b0c      	cmp	r3, #12
 80067dc:	d109      	bne.n	80067f2 <_ZN15ServoController21update_servo_positionEhf+0x162>
 80067de:	7dfb      	ldrb	r3, [r7, #23]
 80067e0:	4a1a      	ldr	r2, [pc, #104]	@ (800684c <_ZN15ServoController21update_servo_positionEhf+0x1bc>)
 80067e2:	2154      	movs	r1, #84	@ 0x54
 80067e4:	fb01 f303 	mul.w	r3, r1, r3
 80067e8:	4413      	add	r3, r2
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80067f0:	e01c      	b.n	800682c <_ZN15ServoController21update_servo_positionEhf+0x19c>
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
 80067f4:	4a15      	ldr	r2, [pc, #84]	@ (800684c <_ZN15ServoController21update_servo_positionEhf+0x1bc>)
 80067f6:	2154      	movs	r1, #84	@ 0x54
 80067f8:	fb01 f303 	mul.w	r3, r1, r3
 80067fc:	4413      	add	r3, r2
 80067fe:	334c      	adds	r3, #76	@ 0x4c
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b10      	cmp	r3, #16
 8006804:	d109      	bne.n	800681a <_ZN15ServoController21update_servo_positionEhf+0x18a>
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	4a10      	ldr	r2, [pc, #64]	@ (800684c <_ZN15ServoController21update_servo_positionEhf+0x1bc>)
 800680a:	2154      	movs	r1, #84	@ 0x54
 800680c:	fb01 f303 	mul.w	r3, r1, r3
 8006810:	4413      	add	r3, r2
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	659a      	str	r2, [r3, #88]	@ 0x58
 8006818:	e008      	b.n	800682c <_ZN15ServoController21update_servo_positionEhf+0x19c>
 800681a:	7dfb      	ldrb	r3, [r7, #23]
 800681c:	4a0b      	ldr	r2, [pc, #44]	@ (800684c <_ZN15ServoController21update_servo_positionEhf+0x1bc>)
 800681e:	2154      	movs	r1, #84	@ 0x54
 8006820:	fb01 f303 	mul.w	r3, r1, r3
 8006824:	4413      	add	r3, r2
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	65da      	str	r2, [r3, #92]	@ 0x5c
                                    compare_register);
            
            return true;
 800682c:	2301      	movs	r3, #1
 800682e:	e007      	b.n	8006840 <_ZN15ServoController21update_servo_positionEhf+0x1b0>
    for (uint8_t i = 0; i < NUM_SERVOS; i++){
 8006830:	7dfb      	ldrb	r3, [r7, #23]
 8006832:	3301      	adds	r3, #1
 8006834:	75fb      	strb	r3, [r7, #23]
 8006836:	7dfb      	ldrb	r3, [r7, #23]
 8006838:	2b00      	cmp	r3, #0
 800683a:	f43f af48 	beq.w	80066ce <_ZN15ServoController21update_servo_positionEhf+0x3e>
        }
    }

    // the servo num isn't on the list, failure
    return false;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	2000000c 	.word	0x2000000c
 8006850:	3e99999a 	.word	0x3e99999a

08006854 <_ZN15ServoController27update_servo_last_update_usEhy>:

bool ServoController::update_servo_last_update_us(uint8_t servo_num, uint64_t time_us){
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	e9c7 2300 	strd	r2, r3, [r7]
 8006860:	460b      	mov	r3, r1
 8006862:	72fb      	strb	r3, [r7, #11]
    for (uint8_t i = 0; i < NUM_SERVOS; i++){
 8006864:	2300      	movs	r3, #0
 8006866:	75fb      	strb	r3, [r7, #23]
 8006868:	e00f      	b.n	800688a <_ZN15ServoController27update_servo_last_update_usEhy+0x36>
        if (servo_num == SERVO_IDS[i]){
 800686a:	2205      	movs	r2, #5
 800686c:	7afb      	ldrb	r3, [r7, #11]
 800686e:	4293      	cmp	r3, r2
 8006870:	d108      	bne.n	8006884 <_ZN15ServoController27update_servo_last_update_usEhy+0x30>
            last_update_us_[i] = time_us;
 8006872:	7dfb      	ldrb	r3, [r7, #23]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	3301      	adds	r3, #1
 8006878:	00db      	lsls	r3, r3, #3
 800687a:	18d1      	adds	r1, r2, r3
 800687c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006880:	e9c1 2300 	strd	r2, r3, [r1]
    for (uint8_t i = 0; i < NUM_SERVOS; i++){
 8006884:	7dfb      	ldrb	r3, [r7, #23]
 8006886:	3301      	adds	r3, #1
 8006888:	75fb      	strb	r3, [r7, #23]
 800688a:	7dfb      	ldrb	r3, [r7, #23]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0ec      	beq.n	800686a <_ZN15ServoController27update_servo_last_update_usEhy+0x16>
        }
    }
}
 8006890:	bf00      	nop
 8006892:	4618      	mov	r0, r3
 8006894:	371c      	adds	r7, #28
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
	...

080068a0 <_Z41__static_initialization_and_destruction_0ii>:
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d10c      	bne.n	80068ca <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d107      	bne.n	80068ca <_Z41__static_initialization_and_destruction_0ii+0x2a>
    };
 80068ba:	4a06      	ldr	r2, [pc, #24]	@ (80068d4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80068bc:	4b06      	ldr	r3, [pc, #24]	@ (80068d8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80068be:	4610      	mov	r0, r2
 80068c0:	4619      	mov	r1, r3
 80068c2:	234c      	movs	r3, #76	@ 0x4c
 80068c4:	461a      	mov	r2, r3
 80068c6:	f000 fe72 	bl	80075ae <memcpy>
}
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	2000000c 	.word	0x2000000c
 80068d8:	2000058c 	.word	0x2000058c

080068dc <_GLOBAL__sub_I__ZN15ServoController14SERVO_CHANNELSE>:
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
 80068e0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80068e4:	2001      	movs	r0, #1
 80068e6:	f7ff ffdb 	bl	80068a0 <_Z41__static_initialization_and_destruction_0ii>
 80068ea:	bd80      	pop	{r7, pc}

080068ec <_ardupilot_indication_NotifyState_decode>:
}

/*
 decode ardupilot_indication_NotifyState, return true on failure, false on success
*/
bool _ardupilot_indication_NotifyState_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct ardupilot_indication_NotifyState* msg, bool tao) {
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af02      	add	r7, sp, #8
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data_type);
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	6819      	ldr	r1, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	2300      	movs	r3, #0
 8006904:	2208      	movs	r2, #8
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7fa fb46 	bl	8000f98 <canardDecodeScalar>

    *bit_ofs += 8;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f103 0208 	add.w	r2, r3, #8
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data.len);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	6819      	ldr	r1, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3301      	adds	r3, #1
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	2300      	movs	r3, #0
 8006924:	2208      	movs	r2, #8
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7fa fb36 	bl	8000f98 <canardDecodeScalar>
    *bit_ofs += 8;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f103 0208 	add.w	r2, r3, #8
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	601a      	str	r2, [r3, #0]
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->aux_data.len > 255) {
        return true; /* invalid value */
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->aux_data.len; i++) {
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	e014      	b.n	8006968 <_ardupilot_indication_NotifyState_decode+0x7c>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data.data[i]);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	6819      	ldr	r1, [r3, #0]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	4413      	add	r3, r2
 8006948:	3302      	adds	r3, #2
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	2300      	movs	r3, #0
 800694e:	2208      	movs	r2, #8
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f7fa fb21 	bl	8000f98 <canardDecodeScalar>

        *bit_ofs += 8;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f103 0208 	add.w	r2, r3, #8
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->aux_data.len; i++) {
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	3301      	adds	r3, #1
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	785b      	ldrb	r3, [r3, #1]
 800696c:	461a      	mov	r2, r3
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	4293      	cmp	r3, r2
 8006972:	d3e4      	bcc.n	800693e <_ardupilot_indication_NotifyState_decode+0x52>





    canardDecodeScalar(transfer, *bit_ofs, 64, false, &msg->vehicle_state);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	6819      	ldr	r1, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	2300      	movs	r3, #0
 8006982:	2240      	movs	r2, #64	@ 0x40
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7fa fb07 	bl	8000f98 <canardDecodeScalar>

    *bit_ofs += 64;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8006996:	2300      	movs	r3, #0

}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <ardupilot_indication_NotifyState_decode>:
}

/*
  return true if the decode is invalid
 */
bool ardupilot_indication_NotifyState_decode(const CanardRxTransfer* transfer, struct ardupilot_indication_NotifyState* msg) {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > ARDUPILOT_INDICATION_NOTIFYSTATE_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60bb      	str	r3, [r7, #8]
    if (_ardupilot_indication_NotifyState_decode(transfer, &bit_ofs, msg,
 80069ae:	f107 0108 	add.w	r1, r7, #8
 80069b2:	2301      	movs	r3, #1
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff ff98 	bl	80068ec <_ardupilot_indication_NotifyState_decode>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <ardupilot_indication_NotifyState_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 80069c2:	2301      	movs	r3, #1
 80069c4:	e00c      	b.n	80069e0 <ardupilot_indication_NotifyState_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	3307      	adds	r3, #7
 80069ca:	08db      	lsrs	r3, r3, #3
 80069cc:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	8a9b      	ldrh	r3, [r3, #20]
 80069d2:	461a      	mov	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4293      	cmp	r3, r2
 80069d8:	bf14      	ite	ne
 80069da:	2301      	movne	r3, #1
 80069dc:	2300      	moveq	r3, #0
 80069de:	b2db      	uxtb	r3, r3
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <_uavcan_equipment_actuator_Command_decode>:
}

/*
 decode uavcan_equipment_actuator_Command, return true on failure, false on success
*/
bool _uavcan_equipment_actuator_Command_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_Command* msg, bool tao) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->actuator_id);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	6819      	ldr	r1, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	2300      	movs	r3, #0
 8006a00:	2208      	movs	r2, #8
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7fa fac8 	bl	8000f98 <canardDecodeScalar>

    *bit_ofs += 8;
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f103 0208 	add.w	r2, r3, #8
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->command_type);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	6819      	ldr	r1, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	2208      	movs	r2, #8
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f7fa fab8 	bl	8000f98 <canardDecodeScalar>

    *bit_ofs += 8;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f103 0208 	add.w	r2, r3, #8
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	601a      	str	r2, [r3, #0]



    {
        uint16_t float16_val;
        canardDecodeScalar(transfer, *bit_ofs, 16, true, &float16_val);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	6819      	ldr	r1, [r3, #0]
 8006a38:	f107 0316 	add.w	r3, r7, #22
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	2301      	movs	r3, #1
 8006a40:	2210      	movs	r2, #16
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f7fa faa8 	bl	8000f98 <canardDecodeScalar>
        msg->command_value = canardConvertFloat16ToNativeFloat(float16_val);
 8006a48:	8afb      	ldrh	r3, [r7, #22]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fa fcd4 	bl	80013f8 <canardConvertFloat16ToNativeFloat>
 8006a50:	eef0 7a40 	vmov.f32	s15, s0
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	edc3 7a01 	vstr	s15, [r3, #4]
    }

    *bit_ofs += 16;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f103 0210 	add.w	r2, r3, #16
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8006a66:	2300      	movs	r3, #0

}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <_uavcan_equipment_actuator_ArrayCommand_decode>:
}

/*
 decode uavcan_equipment_actuator_ArrayCommand, return true on failure, false on success
*/
bool _uavcan_equipment_actuator_ArrayCommand_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_ArrayCommand* msg, bool tao) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af02      	add	r7, sp, #8
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	70fb      	strb	r3, [r7, #3]





    if (!tao) {
 8006a7e:	78fb      	ldrb	r3, [r7, #3]
 8006a80:	f083 0301 	eor.w	r3, r3, #1
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00d      	beq.n	8006aa6 <_uavcan_equipment_actuator_ArrayCommand_decode+0x36>


        canardDecodeScalar(transfer, *bit_ofs, 4, false, &msg->commands.len);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	6819      	ldr	r1, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	2300      	movs	r3, #0
 8006a94:	2204      	movs	r2, #4
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f7fa fa7e 	bl	8000f98 <canardDecodeScalar>
        *bit_ofs += 4;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	1d1a      	adds	r2, r3, #4
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	601a      	str	r2, [r3, #0]





    if (tao) {
 8006aa6:	78fb      	ldrb	r3, [r7, #3]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d022      	beq.n	8006af2 <_uavcan_equipment_actuator_ArrayCommand_decode+0x82>

        msg->commands.len = 0;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	701a      	strb	r2, [r3, #0]
        while ((transfer->payload_len*8) > *bit_ofs) {
 8006ab2:	e015      	b.n	8006ae0 <_uavcan_equipment_actuator_ArrayCommand_decode+0x70>

            if (_uavcan_equipment_actuator_Command_decode(transfer, bit_ofs, &msg->commands.data[msg->commands.len], false)) {return true;}
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	4413      	add	r3, r2
 8006abe:	1d1a      	adds	r2, r3, #4
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	68b9      	ldr	r1, [r7, #8]
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f7ff ff8f 	bl	80069e8 <_uavcan_equipment_actuator_Command_decode>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <_uavcan_equipment_actuator_ArrayCommand_decode+0x64>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e030      	b.n	8006b36 <_uavcan_equipment_actuator_ArrayCommand_decode+0xc6>
            msg->commands.len++;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	701a      	strb	r2, [r3, #0]
        while ((transfer->payload_len*8) > *bit_ofs) {
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8a9b      	ldrh	r3, [r3, #20]
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d8e1      	bhi.n	8006ab4 <_uavcan_equipment_actuator_ArrayCommand_decode+0x44>
 8006af0:	e020      	b.n	8006b34 <_uavcan_equipment_actuator_ArrayCommand_decode+0xc4>



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
        if (msg->commands.len > 15) {
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b0f      	cmp	r3, #15
 8006af8:	d901      	bls.n	8006afe <_uavcan_equipment_actuator_ArrayCommand_decode+0x8e>
            return true; /* invalid value */
 8006afa:	2301      	movs	r3, #1
 8006afc:	e01b      	b.n	8006b36 <_uavcan_equipment_actuator_ArrayCommand_decode+0xc6>
        }
#pragma GCC diagnostic pop
        for (size_t i=0; i < msg->commands.len; i++) {
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]
 8006b02:	e011      	b.n	8006b28 <_uavcan_equipment_actuator_ArrayCommand_decode+0xb8>



            if (_uavcan_equipment_actuator_Command_decode(transfer, bit_ofs, &msg->commands.data[i], false)) {return true;}
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	1d1a      	adds	r2, r3, #4
 8006b0e:	2300      	movs	r3, #0
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7ff ff68 	bl	80069e8 <_uavcan_equipment_actuator_Command_decode>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <_uavcan_equipment_actuator_ArrayCommand_decode+0xb2>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e009      	b.n	8006b36 <_uavcan_equipment_actuator_ArrayCommand_decode+0xc6>
        for (size_t i=0; i < msg->commands.len; i++) {
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	3301      	adds	r3, #1
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d3e7      	bcc.n	8006b04 <_uavcan_equipment_actuator_ArrayCommand_decode+0x94>





    return false; /* success */
 8006b34:	2300      	movs	r3, #0

}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <uavcan_equipment_actuator_ArrayCommand_decode>:
}

/*
  return true if the decode is invalid
 */
bool uavcan_equipment_actuator_ArrayCommand_decode(const CanardRxTransfer* transfer, struct uavcan_equipment_actuator_ArrayCommand* msg) {
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60bb      	str	r3, [r7, #8]
    if (_uavcan_equipment_actuator_ArrayCommand_decode(transfer, &bit_ofs, msg,
 8006b4c:	f107 0108 	add.w	r1, r7, #8
 8006b50:	2301      	movs	r3, #1
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7ff ff8b 	bl	8006a70 <_uavcan_equipment_actuator_ArrayCommand_decode>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <uavcan_equipment_actuator_ArrayCommand_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8006b60:	2301      	movs	r3, #1
 8006b62:	e00c      	b.n	8006b7e <uavcan_equipment_actuator_ArrayCommand_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	3307      	adds	r3, #7
 8006b68:	08db      	lsrs	r3, r3, #3
 8006b6a:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	8a9b      	ldrh	r3, [r3, #20]
 8006b70:	461a      	mov	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	4293      	cmp	r3, r2
 8006b76:	bf14      	ite	ne
 8006b78:	2301      	movne	r3, #1
 8006b7a:	2300      	moveq	r3, #0
 8006b7c:	b2db      	uxtb	r3, r3
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <_uavcan_protocol_HardwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_HardwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao) {
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b088      	sub	sp, #32
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	607a      	str	r2, [r7, #4]
 8006b92:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	6819      	ldr	r1, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2208      	movs	r2, #8
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f7fa fb84 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 8;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f103 0208 	add.w	r2, r3, #8
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	6819      	ldr	r1, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	2208      	movs	r2, #8
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f7fa fb76 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 8;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f103 0208 	add.w	r2, r3, #8
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	601a      	str	r2, [r3, #0]





    for (size_t i=0; i < 16; i++) {
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61fb      	str	r3, [r7, #28]
 8006bce:	e012      	b.n	8006bf6 <_uavcan_protocol_HardwareVersion_encode+0x70>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->unique_id[i]);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	6819      	ldr	r1, [r3, #0]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	4413      	add	r3, r2
 8006bda:	3302      	adds	r3, #2
 8006bdc:	2208      	movs	r2, #8
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f7fa fb63 	bl	80012aa <canardEncodeScalar>

        *bit_ofs += 8;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f103 0208 	add.w	r2, r3, #8
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < 16; i++) {
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	61fb      	str	r3, [r7, #28]
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	2b0f      	cmp	r3, #15
 8006bfa:	d9e9      	bls.n	8006bd0 <_uavcan_protocol_HardwareVersion_encode+0x4a>





    if (!tao) {
 8006bfc:	78fb      	ldrb	r3, [r7, #3]
 8006bfe:	f083 0301 	eor.w	r3, r3, #1
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00d      	beq.n	8006c24 <_uavcan_protocol_HardwareVersion_encode+0x9e>


        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.len);
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	6819      	ldr	r1, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3312      	adds	r3, #18
 8006c10:	2208      	movs	r2, #8
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f7fa fb49 	bl	80012aa <canardEncodeScalar>
        *bit_ofs += 8;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f103 0208 	add.w	r2, r3, #8
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t certificate_of_authenticity_len = msg->certificate_of_authenticity.len > 255 ? 255 : msg->certificate_of_authenticity.len;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	7c9b      	ldrb	r3, [r3, #18]
 8006c28:	617b      	str	r3, [r7, #20]
#pragma GCC diagnostic pop
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	61bb      	str	r3, [r7, #24]
 8006c2e:	e013      	b.n	8006c58 <_uavcan_protocol_HardwareVersion_encode+0xd2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.data[i]);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	6819      	ldr	r1, [r3, #0]
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	3310      	adds	r3, #16
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	3303      	adds	r3, #3
 8006c3e:	2208      	movs	r2, #8
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f7fa fb32 	bl	80012aa <canardEncodeScalar>

        *bit_ofs += 8;
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f103 0208 	add.w	r2, r3, #8
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	3301      	adds	r3, #1
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d3e7      	bcc.n	8006c30 <_uavcan_protocol_HardwareVersion_encode+0xaa>





}
 8006c60:	bf00      	nop
 8006c62:	bf00      	nop
 8006c64:	3720      	adds	r7, #32
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	607a      	str	r2, [r7, #4]
 8006c76:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	6819      	ldr	r1, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f7fa fb12 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 32;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f103 0220 	add.w	r2, r3, #32
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	6819      	ldr	r1, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f7fa fb04 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 2;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	1c9a      	adds	r2, r3, #2
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	6819      	ldr	r1, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3305      	adds	r3, #5
 8006cb4:	2203      	movs	r2, #3
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f7fa faf7 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 3;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	1cda      	adds	r2, r3, #3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	6819      	ldr	r1, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3306      	adds	r3, #6
 8006cce:	2203      	movs	r2, #3
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f7fa faea 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 3;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	1cda      	adds	r2, r3, #3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	6819      	ldr	r1, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3308      	adds	r3, #8
 8006ce8:	2210      	movs	r2, #16
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f7fa fadd 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 16;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f103 0210 	add.w	r2, r3, #16
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	601a      	str	r2, [r3, #0]





}
 8006cfc:	bf00      	nop
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <_uavcan_protocol_SoftwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_SoftwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	6819      	ldr	r1, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2208      	movs	r2, #8
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f7fa fac5 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 8;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f103 0208 	add.w	r2, r3, #8
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	6819      	ldr	r1, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3301      	adds	r3, #1
 8006d34:	2208      	movs	r2, #8
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7fa fab7 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 8;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f103 0208 	add.w	r2, r3, #8
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->optional_field_flags);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	6819      	ldr	r1, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	3302      	adds	r3, #2
 8006d50:	2208      	movs	r2, #8
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f7fa faa9 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 8;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f103 0208 	add.w	r2, r3, #8
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->vcs_commit);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	6819      	ldr	r1, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f7fa fa9b 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 32;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f103 0220 	add.w	r2, r3, #32
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 64, &msg->image_crc);
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	6819      	ldr	r1, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3308      	adds	r3, #8
 8006d88:	2240      	movs	r2, #64	@ 0x40
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f7fa fa8d 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 64;
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	601a      	str	r2, [r3, #0]





}
 8006d9c:	bf00      	nop
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <_uavcan_protocol_GetNodeInfoResponse_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
static inline bool _uavcan_protocol_GetNodeInfoResponse_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao) {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	70fb      	strb	r3, [r7, #3]





    _uavcan_protocol_NodeStatus_encode(buffer, bit_ofs, &msg->status, false);
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	2300      	movs	r3, #0
 8006db6:	68b9      	ldr	r1, [r7, #8]
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f7ff ff56 	bl	8006c6a <_uavcan_protocol_NodeStatus_encode>





    _uavcan_protocol_SoftwareVersion_encode(buffer, bit_ofs, &msg->software_version, false);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f103 0210 	add.w	r2, r3, #16
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	68b9      	ldr	r1, [r7, #8]
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f7ff ff9b 	bl	8006d04 <_uavcan_protocol_SoftwareVersion_encode>





    _uavcan_protocol_HardwareVersion_encode(buffer, bit_ofs, &msg->hardware_version, false);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f103 0220 	add.w	r2, r3, #32
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	68b9      	ldr	r1, [r7, #8]
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f7ff fed4 	bl	8006b86 <_uavcan_protocol_HardwareVersion_encode>





    if (!tao) {
 8006dde:	78fb      	ldrb	r3, [r7, #3]
 8006de0:	f083 0301 	eor.w	r3, r3, #1
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00d      	beq.n	8006e06 <_uavcan_protocol_GetNodeInfoResponse_encode+0x62>


        canardEncodeScalar(buffer, *bit_ofs, 7, &msg->name.len);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	6819      	ldr	r1, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8006df4:	2207      	movs	r2, #7
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f7fa fa57 	bl	80012aa <canardEncodeScalar>
        *bit_ofs += 7;
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	1dda      	adds	r2, r3, #7
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t name_len = msg->name.len > 80 ? 80 : msg->name.len;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8006e0c:	2b50      	cmp	r3, #80	@ 0x50
 8006e0e:	bf28      	it	cs
 8006e10:	2350      	movcs	r3, #80	@ 0x50
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	613b      	str	r3, [r7, #16]
#pragma GCC diagnostic pop
    for (size_t i=0; i < name_len; i++) {
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	e014      	b.n	8006e46 <_uavcan_protocol_GetNodeInfoResponse_encode+0xa2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->name.data[i]);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	6819      	ldr	r1, [r3, #0]
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	4413      	add	r3, r2
 8006e2a:	3303      	adds	r3, #3
 8006e2c:	2208      	movs	r2, #8
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7fa fa3b 	bl	80012aa <canardEncodeScalar>

        *bit_ofs += 8;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f103 0208 	add.w	r2, r3, #8
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < name_len; i++) {
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	3301      	adds	r3, #1
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d3e6      	bcc.n	8006e1c <_uavcan_protocol_GetNodeInfoResponse_encode+0x78>





}
 8006e4e:	bf00      	nop
 8006e50:	bf00      	nop
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <uavcan_protocol_GetNodeInfoResponse_encode>:

uint32_t uavcan_protocol_GetNodeInfoResponse_encode(struct uavcan_protocol_GetNodeInfoResponse* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE);
 8006e66:	f240 1279 	movw	r2, #377	@ 0x179
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	6838      	ldr	r0, [r7, #0]
 8006e6e:	f000 fb03 	bl	8007478 <memset>
    _uavcan_protocol_GetNodeInfoResponse_encode(buffer, &bit_ofs, msg, 
 8006e72:	f107 010c 	add.w	r1, r7, #12
 8006e76:	2301      	movs	r3, #1
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	6838      	ldr	r0, [r7, #0]
 8006e7c:	f7ff ff92 	bl	8006da4 <_uavcan_protocol_GetNodeInfoResponse_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3307      	adds	r3, #7
 8006e84:	08db      	lsrs	r3, r3, #3
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b084      	sub	sp, #16
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	607a      	str	r2, [r7, #4]
 8006e9a:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	6819      	ldr	r1, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f7fa fa00 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 32;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f103 0220 	add.w	r2, r3, #32
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	6819      	ldr	r1, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f7fa f9f2 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 2;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	1c9a      	adds	r2, r3, #2
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	6819      	ldr	r1, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3305      	adds	r3, #5
 8006ed8:	2203      	movs	r2, #3
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f7fa f9e5 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 3;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	1cda      	adds	r2, r3, #3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6819      	ldr	r1, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3306      	adds	r3, #6
 8006ef2:	2203      	movs	r2, #3
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f7fa f9d8 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 3;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	1cda      	adds	r2, r3, #3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	6819      	ldr	r1, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	2210      	movs	r2, #16
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f7fa f9cb 	bl	80012aa <canardEncodeScalar>

    *bit_ofs += 16;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f103 0210 	add.w	r2, r3, #16
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	601a      	str	r2, [r3, #0]





}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <_uavcan_protocol_NodeStatus_decode>:

/*
 decode uavcan_protocol_NodeStatus, return true on failure, false on success
*/
bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af02      	add	r7, sp, #8
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 32, false, &msg->uptime_sec);
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	6819      	ldr	r1, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	2300      	movs	r3, #0
 8006f40:	2220      	movs	r2, #32
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f7fa f828 	bl	8000f98 <canardDecodeScalar>

    *bit_ofs += 32;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f103 0220 	add.w	r2, r3, #32
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 2, false, &msg->health);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	6819      	ldr	r1, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	2202      	movs	r2, #2
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7fa f818 	bl	8000f98 <canardDecodeScalar>

    *bit_ofs += 2;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	1c9a      	adds	r2, r3, #2
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->mode);
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	6819      	ldr	r1, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3305      	adds	r3, #5
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2203      	movs	r2, #3
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f7fa f809 	bl	8000f98 <canardDecodeScalar>

    *bit_ofs += 3;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	1cda      	adds	r2, r3, #3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->sub_mode);
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	6819      	ldr	r1, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	3306      	adds	r3, #6
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	2203      	movs	r2, #3
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f7f9 fffa 	bl	8000f98 <canardDecodeScalar>

    *bit_ofs += 3;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	1cda      	adds	r2, r3, #3
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->vendor_specific_status_code);
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	6819      	ldr	r1, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	2300      	movs	r3, #0
 8006fba:	2210      	movs	r2, #16
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f7f9 ffeb 	bl	8000f98 <canardDecodeScalar>

    *bit_ofs += 16;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f103 0210 	add.w	r2, r3, #16
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8006fce:	2300      	movs	r3, #0

}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <uavcan_protocol_NodeStatus_encode>:

uint32_t uavcan_protocol_NodeStatus_encode(struct uavcan_protocol_NodeStatus* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE);
 8006fe6:	2207      	movs	r2, #7
 8006fe8:	2100      	movs	r1, #0
 8006fea:	6838      	ldr	r0, [r7, #0]
 8006fec:	f000 fa44 	bl	8007478 <memset>
    _uavcan_protocol_NodeStatus_encode(buffer, &bit_ofs, msg, 
 8006ff0:	f107 010c 	add.w	r1, r7, #12
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	6838      	ldr	r0, [r7, #0]
 8006ffa:	f7ff ff48 	bl	8006e8e <_uavcan_protocol_NodeStatus_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3307      	adds	r3, #7
 8007002:	08db      	lsrs	r3, r3, #3
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <uavcan_protocol_NodeStatus_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_NodeStatus* msg) {
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_NodeStatus_decode(transfer, &bit_ofs, msg,
 800701a:	f107 0108 	add.w	r1, r7, #8
 800701e:	2301      	movs	r3, #1
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff ff80 	bl	8006f28 <_uavcan_protocol_NodeStatus_decode>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <uavcan_protocol_NodeStatus_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 800702e:	2301      	movs	r3, #1
 8007030:	e00c      	b.n	800704c <uavcan_protocol_NodeStatus_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	3307      	adds	r3, #7
 8007036:	08db      	lsrs	r3, r3, #3
 8007038:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8a9b      	ldrh	r3, [r3, #20]
 800703e:	461a      	mov	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4293      	cmp	r3, r2
 8007044:	bf14      	ite	ne
 8007046:	2301      	movne	r3, #1
 8007048:	2300      	moveq	r3, #0
 800704a:	b2db      	uxtb	r3, r3
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <std>:
 8007054:	2300      	movs	r3, #0
 8007056:	b510      	push	{r4, lr}
 8007058:	4604      	mov	r4, r0
 800705a:	e9c0 3300 	strd	r3, r3, [r0]
 800705e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007062:	6083      	str	r3, [r0, #8]
 8007064:	8181      	strh	r1, [r0, #12]
 8007066:	6643      	str	r3, [r0, #100]	@ 0x64
 8007068:	81c2      	strh	r2, [r0, #14]
 800706a:	6183      	str	r3, [r0, #24]
 800706c:	4619      	mov	r1, r3
 800706e:	2208      	movs	r2, #8
 8007070:	305c      	adds	r0, #92	@ 0x5c
 8007072:	f000 fa01 	bl	8007478 <memset>
 8007076:	4b0d      	ldr	r3, [pc, #52]	@ (80070ac <std+0x58>)
 8007078:	6263      	str	r3, [r4, #36]	@ 0x24
 800707a:	4b0d      	ldr	r3, [pc, #52]	@ (80070b0 <std+0x5c>)
 800707c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800707e:	4b0d      	ldr	r3, [pc, #52]	@ (80070b4 <std+0x60>)
 8007080:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007082:	4b0d      	ldr	r3, [pc, #52]	@ (80070b8 <std+0x64>)
 8007084:	6323      	str	r3, [r4, #48]	@ 0x30
 8007086:	4b0d      	ldr	r3, [pc, #52]	@ (80070bc <std+0x68>)
 8007088:	6224      	str	r4, [r4, #32]
 800708a:	429c      	cmp	r4, r3
 800708c:	d006      	beq.n	800709c <std+0x48>
 800708e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007092:	4294      	cmp	r4, r2
 8007094:	d002      	beq.n	800709c <std+0x48>
 8007096:	33d0      	adds	r3, #208	@ 0xd0
 8007098:	429c      	cmp	r4, r3
 800709a:	d105      	bne.n	80070a8 <std+0x54>
 800709c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070a4:	f000 ba80 	b.w	80075a8 <__retarget_lock_init_recursive>
 80070a8:	bd10      	pop	{r4, pc}
 80070aa:	bf00      	nop
 80070ac:	080072c9 	.word	0x080072c9
 80070b0:	080072eb 	.word	0x080072eb
 80070b4:	08007323 	.word	0x08007323
 80070b8:	08007347 	.word	0x08007347
 80070bc:	20000628 	.word	0x20000628

080070c0 <stdio_exit_handler>:
 80070c0:	4a02      	ldr	r2, [pc, #8]	@ (80070cc <stdio_exit_handler+0xc>)
 80070c2:	4903      	ldr	r1, [pc, #12]	@ (80070d0 <stdio_exit_handler+0x10>)
 80070c4:	4803      	ldr	r0, [pc, #12]	@ (80070d4 <stdio_exit_handler+0x14>)
 80070c6:	f000 b869 	b.w	800719c <_fwalk_sglue>
 80070ca:	bf00      	nop
 80070cc:	20000060 	.word	0x20000060
 80070d0:	08007e65 	.word	0x08007e65
 80070d4:	20000070 	.word	0x20000070

080070d8 <cleanup_stdio>:
 80070d8:	6841      	ldr	r1, [r0, #4]
 80070da:	4b0c      	ldr	r3, [pc, #48]	@ (800710c <cleanup_stdio+0x34>)
 80070dc:	4299      	cmp	r1, r3
 80070de:	b510      	push	{r4, lr}
 80070e0:	4604      	mov	r4, r0
 80070e2:	d001      	beq.n	80070e8 <cleanup_stdio+0x10>
 80070e4:	f000 febe 	bl	8007e64 <_fflush_r>
 80070e8:	68a1      	ldr	r1, [r4, #8]
 80070ea:	4b09      	ldr	r3, [pc, #36]	@ (8007110 <cleanup_stdio+0x38>)
 80070ec:	4299      	cmp	r1, r3
 80070ee:	d002      	beq.n	80070f6 <cleanup_stdio+0x1e>
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 feb7 	bl	8007e64 <_fflush_r>
 80070f6:	68e1      	ldr	r1, [r4, #12]
 80070f8:	4b06      	ldr	r3, [pc, #24]	@ (8007114 <cleanup_stdio+0x3c>)
 80070fa:	4299      	cmp	r1, r3
 80070fc:	d004      	beq.n	8007108 <cleanup_stdio+0x30>
 80070fe:	4620      	mov	r0, r4
 8007100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007104:	f000 beae 	b.w	8007e64 <_fflush_r>
 8007108:	bd10      	pop	{r4, pc}
 800710a:	bf00      	nop
 800710c:	20000628 	.word	0x20000628
 8007110:	20000690 	.word	0x20000690
 8007114:	200006f8 	.word	0x200006f8

08007118 <global_stdio_init.part.0>:
 8007118:	b510      	push	{r4, lr}
 800711a:	4b0b      	ldr	r3, [pc, #44]	@ (8007148 <global_stdio_init.part.0+0x30>)
 800711c:	4c0b      	ldr	r4, [pc, #44]	@ (800714c <global_stdio_init.part.0+0x34>)
 800711e:	4a0c      	ldr	r2, [pc, #48]	@ (8007150 <global_stdio_init.part.0+0x38>)
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	4620      	mov	r0, r4
 8007124:	2200      	movs	r2, #0
 8007126:	2104      	movs	r1, #4
 8007128:	f7ff ff94 	bl	8007054 <std>
 800712c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007130:	2201      	movs	r2, #1
 8007132:	2109      	movs	r1, #9
 8007134:	f7ff ff8e 	bl	8007054 <std>
 8007138:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800713c:	2202      	movs	r2, #2
 800713e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007142:	2112      	movs	r1, #18
 8007144:	f7ff bf86 	b.w	8007054 <std>
 8007148:	20000760 	.word	0x20000760
 800714c:	20000628 	.word	0x20000628
 8007150:	080070c1 	.word	0x080070c1

08007154 <__sfp_lock_acquire>:
 8007154:	4801      	ldr	r0, [pc, #4]	@ (800715c <__sfp_lock_acquire+0x8>)
 8007156:	f000 ba28 	b.w	80075aa <__retarget_lock_acquire_recursive>
 800715a:	bf00      	nop
 800715c:	20000769 	.word	0x20000769

08007160 <__sfp_lock_release>:
 8007160:	4801      	ldr	r0, [pc, #4]	@ (8007168 <__sfp_lock_release+0x8>)
 8007162:	f000 ba23 	b.w	80075ac <__retarget_lock_release_recursive>
 8007166:	bf00      	nop
 8007168:	20000769 	.word	0x20000769

0800716c <__sinit>:
 800716c:	b510      	push	{r4, lr}
 800716e:	4604      	mov	r4, r0
 8007170:	f7ff fff0 	bl	8007154 <__sfp_lock_acquire>
 8007174:	6a23      	ldr	r3, [r4, #32]
 8007176:	b11b      	cbz	r3, 8007180 <__sinit+0x14>
 8007178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800717c:	f7ff bff0 	b.w	8007160 <__sfp_lock_release>
 8007180:	4b04      	ldr	r3, [pc, #16]	@ (8007194 <__sinit+0x28>)
 8007182:	6223      	str	r3, [r4, #32]
 8007184:	4b04      	ldr	r3, [pc, #16]	@ (8007198 <__sinit+0x2c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1f5      	bne.n	8007178 <__sinit+0xc>
 800718c:	f7ff ffc4 	bl	8007118 <global_stdio_init.part.0>
 8007190:	e7f2      	b.n	8007178 <__sinit+0xc>
 8007192:	bf00      	nop
 8007194:	080070d9 	.word	0x080070d9
 8007198:	20000760 	.word	0x20000760

0800719c <_fwalk_sglue>:
 800719c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a0:	4607      	mov	r7, r0
 80071a2:	4688      	mov	r8, r1
 80071a4:	4614      	mov	r4, r2
 80071a6:	2600      	movs	r6, #0
 80071a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071ac:	f1b9 0901 	subs.w	r9, r9, #1
 80071b0:	d505      	bpl.n	80071be <_fwalk_sglue+0x22>
 80071b2:	6824      	ldr	r4, [r4, #0]
 80071b4:	2c00      	cmp	r4, #0
 80071b6:	d1f7      	bne.n	80071a8 <_fwalk_sglue+0xc>
 80071b8:	4630      	mov	r0, r6
 80071ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071be:	89ab      	ldrh	r3, [r5, #12]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d907      	bls.n	80071d4 <_fwalk_sglue+0x38>
 80071c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071c8:	3301      	adds	r3, #1
 80071ca:	d003      	beq.n	80071d4 <_fwalk_sglue+0x38>
 80071cc:	4629      	mov	r1, r5
 80071ce:	4638      	mov	r0, r7
 80071d0:	47c0      	blx	r8
 80071d2:	4306      	orrs	r6, r0
 80071d4:	3568      	adds	r5, #104	@ 0x68
 80071d6:	e7e9      	b.n	80071ac <_fwalk_sglue+0x10>

080071d8 <iprintf>:
 80071d8:	b40f      	push	{r0, r1, r2, r3}
 80071da:	b507      	push	{r0, r1, r2, lr}
 80071dc:	4906      	ldr	r1, [pc, #24]	@ (80071f8 <iprintf+0x20>)
 80071de:	ab04      	add	r3, sp, #16
 80071e0:	6808      	ldr	r0, [r1, #0]
 80071e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071e6:	6881      	ldr	r1, [r0, #8]
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	f000 fb11 	bl	8007810 <_vfiprintf_r>
 80071ee:	b003      	add	sp, #12
 80071f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f4:	b004      	add	sp, #16
 80071f6:	4770      	bx	lr
 80071f8:	2000006c 	.word	0x2000006c

080071fc <putchar>:
 80071fc:	4b02      	ldr	r3, [pc, #8]	@ (8007208 <putchar+0xc>)
 80071fe:	4601      	mov	r1, r0
 8007200:	6818      	ldr	r0, [r3, #0]
 8007202:	6882      	ldr	r2, [r0, #8]
 8007204:	f000 beb8 	b.w	8007f78 <_putc_r>
 8007208:	2000006c 	.word	0x2000006c

0800720c <_puts_r>:
 800720c:	6a03      	ldr	r3, [r0, #32]
 800720e:	b570      	push	{r4, r5, r6, lr}
 8007210:	6884      	ldr	r4, [r0, #8]
 8007212:	4605      	mov	r5, r0
 8007214:	460e      	mov	r6, r1
 8007216:	b90b      	cbnz	r3, 800721c <_puts_r+0x10>
 8007218:	f7ff ffa8 	bl	800716c <__sinit>
 800721c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800721e:	07db      	lsls	r3, r3, #31
 8007220:	d405      	bmi.n	800722e <_puts_r+0x22>
 8007222:	89a3      	ldrh	r3, [r4, #12]
 8007224:	0598      	lsls	r0, r3, #22
 8007226:	d402      	bmi.n	800722e <_puts_r+0x22>
 8007228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800722a:	f000 f9be 	bl	80075aa <__retarget_lock_acquire_recursive>
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	0719      	lsls	r1, r3, #28
 8007232:	d502      	bpl.n	800723a <_puts_r+0x2e>
 8007234:	6923      	ldr	r3, [r4, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d135      	bne.n	80072a6 <_puts_r+0x9a>
 800723a:	4621      	mov	r1, r4
 800723c:	4628      	mov	r0, r5
 800723e:	f000 f8c5 	bl	80073cc <__swsetup_r>
 8007242:	b380      	cbz	r0, 80072a6 <_puts_r+0x9a>
 8007244:	f04f 35ff 	mov.w	r5, #4294967295
 8007248:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800724a:	07da      	lsls	r2, r3, #31
 800724c:	d405      	bmi.n	800725a <_puts_r+0x4e>
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	059b      	lsls	r3, r3, #22
 8007252:	d402      	bmi.n	800725a <_puts_r+0x4e>
 8007254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007256:	f000 f9a9 	bl	80075ac <__retarget_lock_release_recursive>
 800725a:	4628      	mov	r0, r5
 800725c:	bd70      	pop	{r4, r5, r6, pc}
 800725e:	2b00      	cmp	r3, #0
 8007260:	da04      	bge.n	800726c <_puts_r+0x60>
 8007262:	69a2      	ldr	r2, [r4, #24]
 8007264:	429a      	cmp	r2, r3
 8007266:	dc17      	bgt.n	8007298 <_puts_r+0x8c>
 8007268:	290a      	cmp	r1, #10
 800726a:	d015      	beq.n	8007298 <_puts_r+0x8c>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	1c5a      	adds	r2, r3, #1
 8007270:	6022      	str	r2, [r4, #0]
 8007272:	7019      	strb	r1, [r3, #0]
 8007274:	68a3      	ldr	r3, [r4, #8]
 8007276:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800727a:	3b01      	subs	r3, #1
 800727c:	60a3      	str	r3, [r4, #8]
 800727e:	2900      	cmp	r1, #0
 8007280:	d1ed      	bne.n	800725e <_puts_r+0x52>
 8007282:	2b00      	cmp	r3, #0
 8007284:	da11      	bge.n	80072aa <_puts_r+0x9e>
 8007286:	4622      	mov	r2, r4
 8007288:	210a      	movs	r1, #10
 800728a:	4628      	mov	r0, r5
 800728c:	f000 f85f 	bl	800734e <__swbuf_r>
 8007290:	3001      	adds	r0, #1
 8007292:	d0d7      	beq.n	8007244 <_puts_r+0x38>
 8007294:	250a      	movs	r5, #10
 8007296:	e7d7      	b.n	8007248 <_puts_r+0x3c>
 8007298:	4622      	mov	r2, r4
 800729a:	4628      	mov	r0, r5
 800729c:	f000 f857 	bl	800734e <__swbuf_r>
 80072a0:	3001      	adds	r0, #1
 80072a2:	d1e7      	bne.n	8007274 <_puts_r+0x68>
 80072a4:	e7ce      	b.n	8007244 <_puts_r+0x38>
 80072a6:	3e01      	subs	r6, #1
 80072a8:	e7e4      	b.n	8007274 <_puts_r+0x68>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	6022      	str	r2, [r4, #0]
 80072b0:	220a      	movs	r2, #10
 80072b2:	701a      	strb	r2, [r3, #0]
 80072b4:	e7ee      	b.n	8007294 <_puts_r+0x88>
	...

080072b8 <puts>:
 80072b8:	4b02      	ldr	r3, [pc, #8]	@ (80072c4 <puts+0xc>)
 80072ba:	4601      	mov	r1, r0
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	f7ff bfa5 	b.w	800720c <_puts_r>
 80072c2:	bf00      	nop
 80072c4:	2000006c 	.word	0x2000006c

080072c8 <__sread>:
 80072c8:	b510      	push	{r4, lr}
 80072ca:	460c      	mov	r4, r1
 80072cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d0:	f000 f91c 	bl	800750c <_read_r>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	bfab      	itete	ge
 80072d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80072da:	89a3      	ldrhlt	r3, [r4, #12]
 80072dc:	181b      	addge	r3, r3, r0
 80072de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80072e2:	bfac      	ite	ge
 80072e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80072e6:	81a3      	strhlt	r3, [r4, #12]
 80072e8:	bd10      	pop	{r4, pc}

080072ea <__swrite>:
 80072ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ee:	461f      	mov	r7, r3
 80072f0:	898b      	ldrh	r3, [r1, #12]
 80072f2:	05db      	lsls	r3, r3, #23
 80072f4:	4605      	mov	r5, r0
 80072f6:	460c      	mov	r4, r1
 80072f8:	4616      	mov	r6, r2
 80072fa:	d505      	bpl.n	8007308 <__swrite+0x1e>
 80072fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007300:	2302      	movs	r3, #2
 8007302:	2200      	movs	r2, #0
 8007304:	f000 f8f0 	bl	80074e8 <_lseek_r>
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800730e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007312:	81a3      	strh	r3, [r4, #12]
 8007314:	4632      	mov	r2, r6
 8007316:	463b      	mov	r3, r7
 8007318:	4628      	mov	r0, r5
 800731a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800731e:	f000 b907 	b.w	8007530 <_write_r>

08007322 <__sseek>:
 8007322:	b510      	push	{r4, lr}
 8007324:	460c      	mov	r4, r1
 8007326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800732a:	f000 f8dd 	bl	80074e8 <_lseek_r>
 800732e:	1c43      	adds	r3, r0, #1
 8007330:	89a3      	ldrh	r3, [r4, #12]
 8007332:	bf15      	itete	ne
 8007334:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007336:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800733a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800733e:	81a3      	strheq	r3, [r4, #12]
 8007340:	bf18      	it	ne
 8007342:	81a3      	strhne	r3, [r4, #12]
 8007344:	bd10      	pop	{r4, pc}

08007346 <__sclose>:
 8007346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734a:	f000 b8bd 	b.w	80074c8 <_close_r>

0800734e <__swbuf_r>:
 800734e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007350:	460e      	mov	r6, r1
 8007352:	4614      	mov	r4, r2
 8007354:	4605      	mov	r5, r0
 8007356:	b118      	cbz	r0, 8007360 <__swbuf_r+0x12>
 8007358:	6a03      	ldr	r3, [r0, #32]
 800735a:	b90b      	cbnz	r3, 8007360 <__swbuf_r+0x12>
 800735c:	f7ff ff06 	bl	800716c <__sinit>
 8007360:	69a3      	ldr	r3, [r4, #24]
 8007362:	60a3      	str	r3, [r4, #8]
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	071a      	lsls	r2, r3, #28
 8007368:	d501      	bpl.n	800736e <__swbuf_r+0x20>
 800736a:	6923      	ldr	r3, [r4, #16]
 800736c:	b943      	cbnz	r3, 8007380 <__swbuf_r+0x32>
 800736e:	4621      	mov	r1, r4
 8007370:	4628      	mov	r0, r5
 8007372:	f000 f82b 	bl	80073cc <__swsetup_r>
 8007376:	b118      	cbz	r0, 8007380 <__swbuf_r+0x32>
 8007378:	f04f 37ff 	mov.w	r7, #4294967295
 800737c:	4638      	mov	r0, r7
 800737e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	6922      	ldr	r2, [r4, #16]
 8007384:	1a98      	subs	r0, r3, r2
 8007386:	6963      	ldr	r3, [r4, #20]
 8007388:	b2f6      	uxtb	r6, r6
 800738a:	4283      	cmp	r3, r0
 800738c:	4637      	mov	r7, r6
 800738e:	dc05      	bgt.n	800739c <__swbuf_r+0x4e>
 8007390:	4621      	mov	r1, r4
 8007392:	4628      	mov	r0, r5
 8007394:	f000 fd66 	bl	8007e64 <_fflush_r>
 8007398:	2800      	cmp	r0, #0
 800739a:	d1ed      	bne.n	8007378 <__swbuf_r+0x2a>
 800739c:	68a3      	ldr	r3, [r4, #8]
 800739e:	3b01      	subs	r3, #1
 80073a0:	60a3      	str	r3, [r4, #8]
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	6022      	str	r2, [r4, #0]
 80073a8:	701e      	strb	r6, [r3, #0]
 80073aa:	6962      	ldr	r2, [r4, #20]
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d004      	beq.n	80073bc <__swbuf_r+0x6e>
 80073b2:	89a3      	ldrh	r3, [r4, #12]
 80073b4:	07db      	lsls	r3, r3, #31
 80073b6:	d5e1      	bpl.n	800737c <__swbuf_r+0x2e>
 80073b8:	2e0a      	cmp	r6, #10
 80073ba:	d1df      	bne.n	800737c <__swbuf_r+0x2e>
 80073bc:	4621      	mov	r1, r4
 80073be:	4628      	mov	r0, r5
 80073c0:	f000 fd50 	bl	8007e64 <_fflush_r>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	d0d9      	beq.n	800737c <__swbuf_r+0x2e>
 80073c8:	e7d6      	b.n	8007378 <__swbuf_r+0x2a>
	...

080073cc <__swsetup_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4b29      	ldr	r3, [pc, #164]	@ (8007474 <__swsetup_r+0xa8>)
 80073d0:	4605      	mov	r5, r0
 80073d2:	6818      	ldr	r0, [r3, #0]
 80073d4:	460c      	mov	r4, r1
 80073d6:	b118      	cbz	r0, 80073e0 <__swsetup_r+0x14>
 80073d8:	6a03      	ldr	r3, [r0, #32]
 80073da:	b90b      	cbnz	r3, 80073e0 <__swsetup_r+0x14>
 80073dc:	f7ff fec6 	bl	800716c <__sinit>
 80073e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073e4:	0719      	lsls	r1, r3, #28
 80073e6:	d422      	bmi.n	800742e <__swsetup_r+0x62>
 80073e8:	06da      	lsls	r2, r3, #27
 80073ea:	d407      	bmi.n	80073fc <__swsetup_r+0x30>
 80073ec:	2209      	movs	r2, #9
 80073ee:	602a      	str	r2, [r5, #0]
 80073f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073f4:	81a3      	strh	r3, [r4, #12]
 80073f6:	f04f 30ff 	mov.w	r0, #4294967295
 80073fa:	e033      	b.n	8007464 <__swsetup_r+0x98>
 80073fc:	0758      	lsls	r0, r3, #29
 80073fe:	d512      	bpl.n	8007426 <__swsetup_r+0x5a>
 8007400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007402:	b141      	cbz	r1, 8007416 <__swsetup_r+0x4a>
 8007404:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007408:	4299      	cmp	r1, r3
 800740a:	d002      	beq.n	8007412 <__swsetup_r+0x46>
 800740c:	4628      	mov	r0, r5
 800740e:	f000 f8dd 	bl	80075cc <_free_r>
 8007412:	2300      	movs	r3, #0
 8007414:	6363      	str	r3, [r4, #52]	@ 0x34
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800741c:	81a3      	strh	r3, [r4, #12]
 800741e:	2300      	movs	r3, #0
 8007420:	6063      	str	r3, [r4, #4]
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	f043 0308 	orr.w	r3, r3, #8
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	b94b      	cbnz	r3, 8007446 <__swsetup_r+0x7a>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800743c:	d003      	beq.n	8007446 <__swsetup_r+0x7a>
 800743e:	4621      	mov	r1, r4
 8007440:	4628      	mov	r0, r5
 8007442:	f000 fd5d 	bl	8007f00 <__smakebuf_r>
 8007446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800744a:	f013 0201 	ands.w	r2, r3, #1
 800744e:	d00a      	beq.n	8007466 <__swsetup_r+0x9a>
 8007450:	2200      	movs	r2, #0
 8007452:	60a2      	str	r2, [r4, #8]
 8007454:	6962      	ldr	r2, [r4, #20]
 8007456:	4252      	negs	r2, r2
 8007458:	61a2      	str	r2, [r4, #24]
 800745a:	6922      	ldr	r2, [r4, #16]
 800745c:	b942      	cbnz	r2, 8007470 <__swsetup_r+0xa4>
 800745e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007462:	d1c5      	bne.n	80073f0 <__swsetup_r+0x24>
 8007464:	bd38      	pop	{r3, r4, r5, pc}
 8007466:	0799      	lsls	r1, r3, #30
 8007468:	bf58      	it	pl
 800746a:	6962      	ldrpl	r2, [r4, #20]
 800746c:	60a2      	str	r2, [r4, #8]
 800746e:	e7f4      	b.n	800745a <__swsetup_r+0x8e>
 8007470:	2000      	movs	r0, #0
 8007472:	e7f7      	b.n	8007464 <__swsetup_r+0x98>
 8007474:	2000006c 	.word	0x2000006c

08007478 <memset>:
 8007478:	4402      	add	r2, r0
 800747a:	4603      	mov	r3, r0
 800747c:	4293      	cmp	r3, r2
 800747e:	d100      	bne.n	8007482 <memset+0xa>
 8007480:	4770      	bx	lr
 8007482:	f803 1b01 	strb.w	r1, [r3], #1
 8007486:	e7f9      	b.n	800747c <memset+0x4>

08007488 <strncpy>:
 8007488:	b510      	push	{r4, lr}
 800748a:	3901      	subs	r1, #1
 800748c:	4603      	mov	r3, r0
 800748e:	b132      	cbz	r2, 800749e <strncpy+0x16>
 8007490:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007494:	f803 4b01 	strb.w	r4, [r3], #1
 8007498:	3a01      	subs	r2, #1
 800749a:	2c00      	cmp	r4, #0
 800749c:	d1f7      	bne.n	800748e <strncpy+0x6>
 800749e:	441a      	add	r2, r3
 80074a0:	2100      	movs	r1, #0
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d100      	bne.n	80074a8 <strncpy+0x20>
 80074a6:	bd10      	pop	{r4, pc}
 80074a8:	f803 1b01 	strb.w	r1, [r3], #1
 80074ac:	e7f9      	b.n	80074a2 <strncpy+0x1a>

080074ae <strnlen>:
 80074ae:	b510      	push	{r4, lr}
 80074b0:	4602      	mov	r2, r0
 80074b2:	4401      	add	r1, r0
 80074b4:	428a      	cmp	r2, r1
 80074b6:	4613      	mov	r3, r2
 80074b8:	d003      	beq.n	80074c2 <strnlen+0x14>
 80074ba:	781c      	ldrb	r4, [r3, #0]
 80074bc:	3201      	adds	r2, #1
 80074be:	2c00      	cmp	r4, #0
 80074c0:	d1f8      	bne.n	80074b4 <strnlen+0x6>
 80074c2:	1a18      	subs	r0, r3, r0
 80074c4:	bd10      	pop	{r4, pc}
	...

080074c8 <_close_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4d06      	ldr	r5, [pc, #24]	@ (80074e4 <_close_r+0x1c>)
 80074cc:	2300      	movs	r3, #0
 80074ce:	4604      	mov	r4, r0
 80074d0:	4608      	mov	r0, r1
 80074d2:	602b      	str	r3, [r5, #0]
 80074d4:	f7fb fd69 	bl	8002faa <_close>
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	d102      	bne.n	80074e2 <_close_r+0x1a>
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	b103      	cbz	r3, 80074e2 <_close_r+0x1a>
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	bd38      	pop	{r3, r4, r5, pc}
 80074e4:	20000764 	.word	0x20000764

080074e8 <_lseek_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	4d07      	ldr	r5, [pc, #28]	@ (8007508 <_lseek_r+0x20>)
 80074ec:	4604      	mov	r4, r0
 80074ee:	4608      	mov	r0, r1
 80074f0:	4611      	mov	r1, r2
 80074f2:	2200      	movs	r2, #0
 80074f4:	602a      	str	r2, [r5, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	f7fb fd7e 	bl	8002ff8 <_lseek>
 80074fc:	1c43      	adds	r3, r0, #1
 80074fe:	d102      	bne.n	8007506 <_lseek_r+0x1e>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	b103      	cbz	r3, 8007506 <_lseek_r+0x1e>
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	bd38      	pop	{r3, r4, r5, pc}
 8007508:	20000764 	.word	0x20000764

0800750c <_read_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	4d07      	ldr	r5, [pc, #28]	@ (800752c <_read_r+0x20>)
 8007510:	4604      	mov	r4, r0
 8007512:	4608      	mov	r0, r1
 8007514:	4611      	mov	r1, r2
 8007516:	2200      	movs	r2, #0
 8007518:	602a      	str	r2, [r5, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	f7fb fd0c 	bl	8002f38 <_read>
 8007520:	1c43      	adds	r3, r0, #1
 8007522:	d102      	bne.n	800752a <_read_r+0x1e>
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	b103      	cbz	r3, 800752a <_read_r+0x1e>
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	bd38      	pop	{r3, r4, r5, pc}
 800752c:	20000764 	.word	0x20000764

08007530 <_write_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4d07      	ldr	r5, [pc, #28]	@ (8007550 <_write_r+0x20>)
 8007534:	4604      	mov	r4, r0
 8007536:	4608      	mov	r0, r1
 8007538:	4611      	mov	r1, r2
 800753a:	2200      	movs	r2, #0
 800753c:	602a      	str	r2, [r5, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	f7fb fd17 	bl	8002f72 <_write>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d102      	bne.n	800754e <_write_r+0x1e>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	b103      	cbz	r3, 800754e <_write_r+0x1e>
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	bd38      	pop	{r3, r4, r5, pc}
 8007550:	20000764 	.word	0x20000764

08007554 <__errno>:
 8007554:	4b01      	ldr	r3, [pc, #4]	@ (800755c <__errno+0x8>)
 8007556:	6818      	ldr	r0, [r3, #0]
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	2000006c 	.word	0x2000006c

08007560 <__libc_init_array>:
 8007560:	b570      	push	{r4, r5, r6, lr}
 8007562:	4d0d      	ldr	r5, [pc, #52]	@ (8007598 <__libc_init_array+0x38>)
 8007564:	4c0d      	ldr	r4, [pc, #52]	@ (800759c <__libc_init_array+0x3c>)
 8007566:	1b64      	subs	r4, r4, r5
 8007568:	10a4      	asrs	r4, r4, #2
 800756a:	2600      	movs	r6, #0
 800756c:	42a6      	cmp	r6, r4
 800756e:	d109      	bne.n	8007584 <__libc_init_array+0x24>
 8007570:	4d0b      	ldr	r5, [pc, #44]	@ (80075a0 <__libc_init_array+0x40>)
 8007572:	4c0c      	ldr	r4, [pc, #48]	@ (80075a4 <__libc_init_array+0x44>)
 8007574:	f000 fd66 	bl	8008044 <_init>
 8007578:	1b64      	subs	r4, r4, r5
 800757a:	10a4      	asrs	r4, r4, #2
 800757c:	2600      	movs	r6, #0
 800757e:	42a6      	cmp	r6, r4
 8007580:	d105      	bne.n	800758e <__libc_init_array+0x2e>
 8007582:	bd70      	pop	{r4, r5, r6, pc}
 8007584:	f855 3b04 	ldr.w	r3, [r5], #4
 8007588:	4798      	blx	r3
 800758a:	3601      	adds	r6, #1
 800758c:	e7ee      	b.n	800756c <__libc_init_array+0xc>
 800758e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007592:	4798      	blx	r3
 8007594:	3601      	adds	r6, #1
 8007596:	e7f2      	b.n	800757e <__libc_init_array+0x1e>
 8007598:	08008240 	.word	0x08008240
 800759c:	08008240 	.word	0x08008240
 80075a0:	08008240 	.word	0x08008240
 80075a4:	0800824c 	.word	0x0800824c

080075a8 <__retarget_lock_init_recursive>:
 80075a8:	4770      	bx	lr

080075aa <__retarget_lock_acquire_recursive>:
 80075aa:	4770      	bx	lr

080075ac <__retarget_lock_release_recursive>:
 80075ac:	4770      	bx	lr

080075ae <memcpy>:
 80075ae:	440a      	add	r2, r1
 80075b0:	4291      	cmp	r1, r2
 80075b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80075b6:	d100      	bne.n	80075ba <memcpy+0xc>
 80075b8:	4770      	bx	lr
 80075ba:	b510      	push	{r4, lr}
 80075bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075c4:	4291      	cmp	r1, r2
 80075c6:	d1f9      	bne.n	80075bc <memcpy+0xe>
 80075c8:	bd10      	pop	{r4, pc}
	...

080075cc <_free_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4605      	mov	r5, r0
 80075d0:	2900      	cmp	r1, #0
 80075d2:	d041      	beq.n	8007658 <_free_r+0x8c>
 80075d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075d8:	1f0c      	subs	r4, r1, #4
 80075da:	2b00      	cmp	r3, #0
 80075dc:	bfb8      	it	lt
 80075de:	18e4      	addlt	r4, r4, r3
 80075e0:	f000 f8e0 	bl	80077a4 <__malloc_lock>
 80075e4:	4a1d      	ldr	r2, [pc, #116]	@ (800765c <_free_r+0x90>)
 80075e6:	6813      	ldr	r3, [r2, #0]
 80075e8:	b933      	cbnz	r3, 80075f8 <_free_r+0x2c>
 80075ea:	6063      	str	r3, [r4, #4]
 80075ec:	6014      	str	r4, [r2, #0]
 80075ee:	4628      	mov	r0, r5
 80075f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075f4:	f000 b8dc 	b.w	80077b0 <__malloc_unlock>
 80075f8:	42a3      	cmp	r3, r4
 80075fa:	d908      	bls.n	800760e <_free_r+0x42>
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	1821      	adds	r1, r4, r0
 8007600:	428b      	cmp	r3, r1
 8007602:	bf01      	itttt	eq
 8007604:	6819      	ldreq	r1, [r3, #0]
 8007606:	685b      	ldreq	r3, [r3, #4]
 8007608:	1809      	addeq	r1, r1, r0
 800760a:	6021      	streq	r1, [r4, #0]
 800760c:	e7ed      	b.n	80075ea <_free_r+0x1e>
 800760e:	461a      	mov	r2, r3
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	b10b      	cbz	r3, 8007618 <_free_r+0x4c>
 8007614:	42a3      	cmp	r3, r4
 8007616:	d9fa      	bls.n	800760e <_free_r+0x42>
 8007618:	6811      	ldr	r1, [r2, #0]
 800761a:	1850      	adds	r0, r2, r1
 800761c:	42a0      	cmp	r0, r4
 800761e:	d10b      	bne.n	8007638 <_free_r+0x6c>
 8007620:	6820      	ldr	r0, [r4, #0]
 8007622:	4401      	add	r1, r0
 8007624:	1850      	adds	r0, r2, r1
 8007626:	4283      	cmp	r3, r0
 8007628:	6011      	str	r1, [r2, #0]
 800762a:	d1e0      	bne.n	80075ee <_free_r+0x22>
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	6053      	str	r3, [r2, #4]
 8007632:	4408      	add	r0, r1
 8007634:	6010      	str	r0, [r2, #0]
 8007636:	e7da      	b.n	80075ee <_free_r+0x22>
 8007638:	d902      	bls.n	8007640 <_free_r+0x74>
 800763a:	230c      	movs	r3, #12
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	e7d6      	b.n	80075ee <_free_r+0x22>
 8007640:	6820      	ldr	r0, [r4, #0]
 8007642:	1821      	adds	r1, r4, r0
 8007644:	428b      	cmp	r3, r1
 8007646:	bf04      	itt	eq
 8007648:	6819      	ldreq	r1, [r3, #0]
 800764a:	685b      	ldreq	r3, [r3, #4]
 800764c:	6063      	str	r3, [r4, #4]
 800764e:	bf04      	itt	eq
 8007650:	1809      	addeq	r1, r1, r0
 8007652:	6021      	streq	r1, [r4, #0]
 8007654:	6054      	str	r4, [r2, #4]
 8007656:	e7ca      	b.n	80075ee <_free_r+0x22>
 8007658:	bd38      	pop	{r3, r4, r5, pc}
 800765a:	bf00      	nop
 800765c:	20000770 	.word	0x20000770

08007660 <sbrk_aligned>:
 8007660:	b570      	push	{r4, r5, r6, lr}
 8007662:	4e0f      	ldr	r6, [pc, #60]	@ (80076a0 <sbrk_aligned+0x40>)
 8007664:	460c      	mov	r4, r1
 8007666:	6831      	ldr	r1, [r6, #0]
 8007668:	4605      	mov	r5, r0
 800766a:	b911      	cbnz	r1, 8007672 <sbrk_aligned+0x12>
 800766c:	f000 fcda 	bl	8008024 <_sbrk_r>
 8007670:	6030      	str	r0, [r6, #0]
 8007672:	4621      	mov	r1, r4
 8007674:	4628      	mov	r0, r5
 8007676:	f000 fcd5 	bl	8008024 <_sbrk_r>
 800767a:	1c43      	adds	r3, r0, #1
 800767c:	d103      	bne.n	8007686 <sbrk_aligned+0x26>
 800767e:	f04f 34ff 	mov.w	r4, #4294967295
 8007682:	4620      	mov	r0, r4
 8007684:	bd70      	pop	{r4, r5, r6, pc}
 8007686:	1cc4      	adds	r4, r0, #3
 8007688:	f024 0403 	bic.w	r4, r4, #3
 800768c:	42a0      	cmp	r0, r4
 800768e:	d0f8      	beq.n	8007682 <sbrk_aligned+0x22>
 8007690:	1a21      	subs	r1, r4, r0
 8007692:	4628      	mov	r0, r5
 8007694:	f000 fcc6 	bl	8008024 <_sbrk_r>
 8007698:	3001      	adds	r0, #1
 800769a:	d1f2      	bne.n	8007682 <sbrk_aligned+0x22>
 800769c:	e7ef      	b.n	800767e <sbrk_aligned+0x1e>
 800769e:	bf00      	nop
 80076a0:	2000076c 	.word	0x2000076c

080076a4 <_malloc_r>:
 80076a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076a8:	1ccd      	adds	r5, r1, #3
 80076aa:	f025 0503 	bic.w	r5, r5, #3
 80076ae:	3508      	adds	r5, #8
 80076b0:	2d0c      	cmp	r5, #12
 80076b2:	bf38      	it	cc
 80076b4:	250c      	movcc	r5, #12
 80076b6:	2d00      	cmp	r5, #0
 80076b8:	4606      	mov	r6, r0
 80076ba:	db01      	blt.n	80076c0 <_malloc_r+0x1c>
 80076bc:	42a9      	cmp	r1, r5
 80076be:	d904      	bls.n	80076ca <_malloc_r+0x26>
 80076c0:	230c      	movs	r3, #12
 80076c2:	6033      	str	r3, [r6, #0]
 80076c4:	2000      	movs	r0, #0
 80076c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077a0 <_malloc_r+0xfc>
 80076ce:	f000 f869 	bl	80077a4 <__malloc_lock>
 80076d2:	f8d8 3000 	ldr.w	r3, [r8]
 80076d6:	461c      	mov	r4, r3
 80076d8:	bb44      	cbnz	r4, 800772c <_malloc_r+0x88>
 80076da:	4629      	mov	r1, r5
 80076dc:	4630      	mov	r0, r6
 80076de:	f7ff ffbf 	bl	8007660 <sbrk_aligned>
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	4604      	mov	r4, r0
 80076e6:	d158      	bne.n	800779a <_malloc_r+0xf6>
 80076e8:	f8d8 4000 	ldr.w	r4, [r8]
 80076ec:	4627      	mov	r7, r4
 80076ee:	2f00      	cmp	r7, #0
 80076f0:	d143      	bne.n	800777a <_malloc_r+0xd6>
 80076f2:	2c00      	cmp	r4, #0
 80076f4:	d04b      	beq.n	800778e <_malloc_r+0xea>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	4639      	mov	r1, r7
 80076fa:	4630      	mov	r0, r6
 80076fc:	eb04 0903 	add.w	r9, r4, r3
 8007700:	f000 fc90 	bl	8008024 <_sbrk_r>
 8007704:	4581      	cmp	r9, r0
 8007706:	d142      	bne.n	800778e <_malloc_r+0xea>
 8007708:	6821      	ldr	r1, [r4, #0]
 800770a:	1a6d      	subs	r5, r5, r1
 800770c:	4629      	mov	r1, r5
 800770e:	4630      	mov	r0, r6
 8007710:	f7ff ffa6 	bl	8007660 <sbrk_aligned>
 8007714:	3001      	adds	r0, #1
 8007716:	d03a      	beq.n	800778e <_malloc_r+0xea>
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	442b      	add	r3, r5
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	f8d8 3000 	ldr.w	r3, [r8]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	bb62      	cbnz	r2, 8007780 <_malloc_r+0xdc>
 8007726:	f8c8 7000 	str.w	r7, [r8]
 800772a:	e00f      	b.n	800774c <_malloc_r+0xa8>
 800772c:	6822      	ldr	r2, [r4, #0]
 800772e:	1b52      	subs	r2, r2, r5
 8007730:	d420      	bmi.n	8007774 <_malloc_r+0xd0>
 8007732:	2a0b      	cmp	r2, #11
 8007734:	d917      	bls.n	8007766 <_malloc_r+0xc2>
 8007736:	1961      	adds	r1, r4, r5
 8007738:	42a3      	cmp	r3, r4
 800773a:	6025      	str	r5, [r4, #0]
 800773c:	bf18      	it	ne
 800773e:	6059      	strne	r1, [r3, #4]
 8007740:	6863      	ldr	r3, [r4, #4]
 8007742:	bf08      	it	eq
 8007744:	f8c8 1000 	streq.w	r1, [r8]
 8007748:	5162      	str	r2, [r4, r5]
 800774a:	604b      	str	r3, [r1, #4]
 800774c:	4630      	mov	r0, r6
 800774e:	f000 f82f 	bl	80077b0 <__malloc_unlock>
 8007752:	f104 000b 	add.w	r0, r4, #11
 8007756:	1d23      	adds	r3, r4, #4
 8007758:	f020 0007 	bic.w	r0, r0, #7
 800775c:	1ac2      	subs	r2, r0, r3
 800775e:	bf1c      	itt	ne
 8007760:	1a1b      	subne	r3, r3, r0
 8007762:	50a3      	strne	r3, [r4, r2]
 8007764:	e7af      	b.n	80076c6 <_malloc_r+0x22>
 8007766:	6862      	ldr	r2, [r4, #4]
 8007768:	42a3      	cmp	r3, r4
 800776a:	bf0c      	ite	eq
 800776c:	f8c8 2000 	streq.w	r2, [r8]
 8007770:	605a      	strne	r2, [r3, #4]
 8007772:	e7eb      	b.n	800774c <_malloc_r+0xa8>
 8007774:	4623      	mov	r3, r4
 8007776:	6864      	ldr	r4, [r4, #4]
 8007778:	e7ae      	b.n	80076d8 <_malloc_r+0x34>
 800777a:	463c      	mov	r4, r7
 800777c:	687f      	ldr	r7, [r7, #4]
 800777e:	e7b6      	b.n	80076ee <_malloc_r+0x4a>
 8007780:	461a      	mov	r2, r3
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	42a3      	cmp	r3, r4
 8007786:	d1fb      	bne.n	8007780 <_malloc_r+0xdc>
 8007788:	2300      	movs	r3, #0
 800778a:	6053      	str	r3, [r2, #4]
 800778c:	e7de      	b.n	800774c <_malloc_r+0xa8>
 800778e:	230c      	movs	r3, #12
 8007790:	6033      	str	r3, [r6, #0]
 8007792:	4630      	mov	r0, r6
 8007794:	f000 f80c 	bl	80077b0 <__malloc_unlock>
 8007798:	e794      	b.n	80076c4 <_malloc_r+0x20>
 800779a:	6005      	str	r5, [r0, #0]
 800779c:	e7d6      	b.n	800774c <_malloc_r+0xa8>
 800779e:	bf00      	nop
 80077a0:	20000770 	.word	0x20000770

080077a4 <__malloc_lock>:
 80077a4:	4801      	ldr	r0, [pc, #4]	@ (80077ac <__malloc_lock+0x8>)
 80077a6:	f7ff bf00 	b.w	80075aa <__retarget_lock_acquire_recursive>
 80077aa:	bf00      	nop
 80077ac:	20000768 	.word	0x20000768

080077b0 <__malloc_unlock>:
 80077b0:	4801      	ldr	r0, [pc, #4]	@ (80077b8 <__malloc_unlock+0x8>)
 80077b2:	f7ff befb 	b.w	80075ac <__retarget_lock_release_recursive>
 80077b6:	bf00      	nop
 80077b8:	20000768 	.word	0x20000768

080077bc <__sfputc_r>:
 80077bc:	6893      	ldr	r3, [r2, #8]
 80077be:	3b01      	subs	r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	b410      	push	{r4}
 80077c4:	6093      	str	r3, [r2, #8]
 80077c6:	da08      	bge.n	80077da <__sfputc_r+0x1e>
 80077c8:	6994      	ldr	r4, [r2, #24]
 80077ca:	42a3      	cmp	r3, r4
 80077cc:	db01      	blt.n	80077d2 <__sfputc_r+0x16>
 80077ce:	290a      	cmp	r1, #10
 80077d0:	d103      	bne.n	80077da <__sfputc_r+0x1e>
 80077d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077d6:	f7ff bdba 	b.w	800734e <__swbuf_r>
 80077da:	6813      	ldr	r3, [r2, #0]
 80077dc:	1c58      	adds	r0, r3, #1
 80077de:	6010      	str	r0, [r2, #0]
 80077e0:	7019      	strb	r1, [r3, #0]
 80077e2:	4608      	mov	r0, r1
 80077e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <__sfputs_r>:
 80077ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ec:	4606      	mov	r6, r0
 80077ee:	460f      	mov	r7, r1
 80077f0:	4614      	mov	r4, r2
 80077f2:	18d5      	adds	r5, r2, r3
 80077f4:	42ac      	cmp	r4, r5
 80077f6:	d101      	bne.n	80077fc <__sfputs_r+0x12>
 80077f8:	2000      	movs	r0, #0
 80077fa:	e007      	b.n	800780c <__sfputs_r+0x22>
 80077fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007800:	463a      	mov	r2, r7
 8007802:	4630      	mov	r0, r6
 8007804:	f7ff ffda 	bl	80077bc <__sfputc_r>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	d1f3      	bne.n	80077f4 <__sfputs_r+0xa>
 800780c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007810 <_vfiprintf_r>:
 8007810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007814:	460d      	mov	r5, r1
 8007816:	b09d      	sub	sp, #116	@ 0x74
 8007818:	4614      	mov	r4, r2
 800781a:	4698      	mov	r8, r3
 800781c:	4606      	mov	r6, r0
 800781e:	b118      	cbz	r0, 8007828 <_vfiprintf_r+0x18>
 8007820:	6a03      	ldr	r3, [r0, #32]
 8007822:	b90b      	cbnz	r3, 8007828 <_vfiprintf_r+0x18>
 8007824:	f7ff fca2 	bl	800716c <__sinit>
 8007828:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800782a:	07d9      	lsls	r1, r3, #31
 800782c:	d405      	bmi.n	800783a <_vfiprintf_r+0x2a>
 800782e:	89ab      	ldrh	r3, [r5, #12]
 8007830:	059a      	lsls	r2, r3, #22
 8007832:	d402      	bmi.n	800783a <_vfiprintf_r+0x2a>
 8007834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007836:	f7ff feb8 	bl	80075aa <__retarget_lock_acquire_recursive>
 800783a:	89ab      	ldrh	r3, [r5, #12]
 800783c:	071b      	lsls	r3, r3, #28
 800783e:	d501      	bpl.n	8007844 <_vfiprintf_r+0x34>
 8007840:	692b      	ldr	r3, [r5, #16]
 8007842:	b99b      	cbnz	r3, 800786c <_vfiprintf_r+0x5c>
 8007844:	4629      	mov	r1, r5
 8007846:	4630      	mov	r0, r6
 8007848:	f7ff fdc0 	bl	80073cc <__swsetup_r>
 800784c:	b170      	cbz	r0, 800786c <_vfiprintf_r+0x5c>
 800784e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007850:	07dc      	lsls	r4, r3, #31
 8007852:	d504      	bpl.n	800785e <_vfiprintf_r+0x4e>
 8007854:	f04f 30ff 	mov.w	r0, #4294967295
 8007858:	b01d      	add	sp, #116	@ 0x74
 800785a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785e:	89ab      	ldrh	r3, [r5, #12]
 8007860:	0598      	lsls	r0, r3, #22
 8007862:	d4f7      	bmi.n	8007854 <_vfiprintf_r+0x44>
 8007864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007866:	f7ff fea1 	bl	80075ac <__retarget_lock_release_recursive>
 800786a:	e7f3      	b.n	8007854 <_vfiprintf_r+0x44>
 800786c:	2300      	movs	r3, #0
 800786e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007870:	2320      	movs	r3, #32
 8007872:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007876:	f8cd 800c 	str.w	r8, [sp, #12]
 800787a:	2330      	movs	r3, #48	@ 0x30
 800787c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007a2c <_vfiprintf_r+0x21c>
 8007880:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007884:	f04f 0901 	mov.w	r9, #1
 8007888:	4623      	mov	r3, r4
 800788a:	469a      	mov	sl, r3
 800788c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007890:	b10a      	cbz	r2, 8007896 <_vfiprintf_r+0x86>
 8007892:	2a25      	cmp	r2, #37	@ 0x25
 8007894:	d1f9      	bne.n	800788a <_vfiprintf_r+0x7a>
 8007896:	ebba 0b04 	subs.w	fp, sl, r4
 800789a:	d00b      	beq.n	80078b4 <_vfiprintf_r+0xa4>
 800789c:	465b      	mov	r3, fp
 800789e:	4622      	mov	r2, r4
 80078a0:	4629      	mov	r1, r5
 80078a2:	4630      	mov	r0, r6
 80078a4:	f7ff ffa1 	bl	80077ea <__sfputs_r>
 80078a8:	3001      	adds	r0, #1
 80078aa:	f000 80a7 	beq.w	80079fc <_vfiprintf_r+0x1ec>
 80078ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078b0:	445a      	add	r2, fp
 80078b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80078b4:	f89a 3000 	ldrb.w	r3, [sl]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 809f 	beq.w	80079fc <_vfiprintf_r+0x1ec>
 80078be:	2300      	movs	r3, #0
 80078c0:	f04f 32ff 	mov.w	r2, #4294967295
 80078c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078c8:	f10a 0a01 	add.w	sl, sl, #1
 80078cc:	9304      	str	r3, [sp, #16]
 80078ce:	9307      	str	r3, [sp, #28]
 80078d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80078d6:	4654      	mov	r4, sl
 80078d8:	2205      	movs	r2, #5
 80078da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078de:	4853      	ldr	r0, [pc, #332]	@ (8007a2c <_vfiprintf_r+0x21c>)
 80078e0:	f7f8 fc76 	bl	80001d0 <memchr>
 80078e4:	9a04      	ldr	r2, [sp, #16]
 80078e6:	b9d8      	cbnz	r0, 8007920 <_vfiprintf_r+0x110>
 80078e8:	06d1      	lsls	r1, r2, #27
 80078ea:	bf44      	itt	mi
 80078ec:	2320      	movmi	r3, #32
 80078ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078f2:	0713      	lsls	r3, r2, #28
 80078f4:	bf44      	itt	mi
 80078f6:	232b      	movmi	r3, #43	@ 0x2b
 80078f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007900:	2b2a      	cmp	r3, #42	@ 0x2a
 8007902:	d015      	beq.n	8007930 <_vfiprintf_r+0x120>
 8007904:	9a07      	ldr	r2, [sp, #28]
 8007906:	4654      	mov	r4, sl
 8007908:	2000      	movs	r0, #0
 800790a:	f04f 0c0a 	mov.w	ip, #10
 800790e:	4621      	mov	r1, r4
 8007910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007914:	3b30      	subs	r3, #48	@ 0x30
 8007916:	2b09      	cmp	r3, #9
 8007918:	d94b      	bls.n	80079b2 <_vfiprintf_r+0x1a2>
 800791a:	b1b0      	cbz	r0, 800794a <_vfiprintf_r+0x13a>
 800791c:	9207      	str	r2, [sp, #28]
 800791e:	e014      	b.n	800794a <_vfiprintf_r+0x13a>
 8007920:	eba0 0308 	sub.w	r3, r0, r8
 8007924:	fa09 f303 	lsl.w	r3, r9, r3
 8007928:	4313      	orrs	r3, r2
 800792a:	9304      	str	r3, [sp, #16]
 800792c:	46a2      	mov	sl, r4
 800792e:	e7d2      	b.n	80078d6 <_vfiprintf_r+0xc6>
 8007930:	9b03      	ldr	r3, [sp, #12]
 8007932:	1d19      	adds	r1, r3, #4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	9103      	str	r1, [sp, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	bfbb      	ittet	lt
 800793c:	425b      	neglt	r3, r3
 800793e:	f042 0202 	orrlt.w	r2, r2, #2
 8007942:	9307      	strge	r3, [sp, #28]
 8007944:	9307      	strlt	r3, [sp, #28]
 8007946:	bfb8      	it	lt
 8007948:	9204      	strlt	r2, [sp, #16]
 800794a:	7823      	ldrb	r3, [r4, #0]
 800794c:	2b2e      	cmp	r3, #46	@ 0x2e
 800794e:	d10a      	bne.n	8007966 <_vfiprintf_r+0x156>
 8007950:	7863      	ldrb	r3, [r4, #1]
 8007952:	2b2a      	cmp	r3, #42	@ 0x2a
 8007954:	d132      	bne.n	80079bc <_vfiprintf_r+0x1ac>
 8007956:	9b03      	ldr	r3, [sp, #12]
 8007958:	1d1a      	adds	r2, r3, #4
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	9203      	str	r2, [sp, #12]
 800795e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007962:	3402      	adds	r4, #2
 8007964:	9305      	str	r3, [sp, #20]
 8007966:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007a3c <_vfiprintf_r+0x22c>
 800796a:	7821      	ldrb	r1, [r4, #0]
 800796c:	2203      	movs	r2, #3
 800796e:	4650      	mov	r0, sl
 8007970:	f7f8 fc2e 	bl	80001d0 <memchr>
 8007974:	b138      	cbz	r0, 8007986 <_vfiprintf_r+0x176>
 8007976:	9b04      	ldr	r3, [sp, #16]
 8007978:	eba0 000a 	sub.w	r0, r0, sl
 800797c:	2240      	movs	r2, #64	@ 0x40
 800797e:	4082      	lsls	r2, r0
 8007980:	4313      	orrs	r3, r2
 8007982:	3401      	adds	r4, #1
 8007984:	9304      	str	r3, [sp, #16]
 8007986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800798a:	4829      	ldr	r0, [pc, #164]	@ (8007a30 <_vfiprintf_r+0x220>)
 800798c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007990:	2206      	movs	r2, #6
 8007992:	f7f8 fc1d 	bl	80001d0 <memchr>
 8007996:	2800      	cmp	r0, #0
 8007998:	d03f      	beq.n	8007a1a <_vfiprintf_r+0x20a>
 800799a:	4b26      	ldr	r3, [pc, #152]	@ (8007a34 <_vfiprintf_r+0x224>)
 800799c:	bb1b      	cbnz	r3, 80079e6 <_vfiprintf_r+0x1d6>
 800799e:	9b03      	ldr	r3, [sp, #12]
 80079a0:	3307      	adds	r3, #7
 80079a2:	f023 0307 	bic.w	r3, r3, #7
 80079a6:	3308      	adds	r3, #8
 80079a8:	9303      	str	r3, [sp, #12]
 80079aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ac:	443b      	add	r3, r7
 80079ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80079b0:	e76a      	b.n	8007888 <_vfiprintf_r+0x78>
 80079b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80079b6:	460c      	mov	r4, r1
 80079b8:	2001      	movs	r0, #1
 80079ba:	e7a8      	b.n	800790e <_vfiprintf_r+0xfe>
 80079bc:	2300      	movs	r3, #0
 80079be:	3401      	adds	r4, #1
 80079c0:	9305      	str	r3, [sp, #20]
 80079c2:	4619      	mov	r1, r3
 80079c4:	f04f 0c0a 	mov.w	ip, #10
 80079c8:	4620      	mov	r0, r4
 80079ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079ce:	3a30      	subs	r2, #48	@ 0x30
 80079d0:	2a09      	cmp	r2, #9
 80079d2:	d903      	bls.n	80079dc <_vfiprintf_r+0x1cc>
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d0c6      	beq.n	8007966 <_vfiprintf_r+0x156>
 80079d8:	9105      	str	r1, [sp, #20]
 80079da:	e7c4      	b.n	8007966 <_vfiprintf_r+0x156>
 80079dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80079e0:	4604      	mov	r4, r0
 80079e2:	2301      	movs	r3, #1
 80079e4:	e7f0      	b.n	80079c8 <_vfiprintf_r+0x1b8>
 80079e6:	ab03      	add	r3, sp, #12
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	462a      	mov	r2, r5
 80079ec:	4b12      	ldr	r3, [pc, #72]	@ (8007a38 <_vfiprintf_r+0x228>)
 80079ee:	a904      	add	r1, sp, #16
 80079f0:	4630      	mov	r0, r6
 80079f2:	f3af 8000 	nop.w
 80079f6:	4607      	mov	r7, r0
 80079f8:	1c78      	adds	r0, r7, #1
 80079fa:	d1d6      	bne.n	80079aa <_vfiprintf_r+0x19a>
 80079fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079fe:	07d9      	lsls	r1, r3, #31
 8007a00:	d405      	bmi.n	8007a0e <_vfiprintf_r+0x1fe>
 8007a02:	89ab      	ldrh	r3, [r5, #12]
 8007a04:	059a      	lsls	r2, r3, #22
 8007a06:	d402      	bmi.n	8007a0e <_vfiprintf_r+0x1fe>
 8007a08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a0a:	f7ff fdcf 	bl	80075ac <__retarget_lock_release_recursive>
 8007a0e:	89ab      	ldrh	r3, [r5, #12]
 8007a10:	065b      	lsls	r3, r3, #25
 8007a12:	f53f af1f 	bmi.w	8007854 <_vfiprintf_r+0x44>
 8007a16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a18:	e71e      	b.n	8007858 <_vfiprintf_r+0x48>
 8007a1a:	ab03      	add	r3, sp, #12
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	462a      	mov	r2, r5
 8007a20:	4b05      	ldr	r3, [pc, #20]	@ (8007a38 <_vfiprintf_r+0x228>)
 8007a22:	a904      	add	r1, sp, #16
 8007a24:	4630      	mov	r0, r6
 8007a26:	f000 f879 	bl	8007b1c <_printf_i>
 8007a2a:	e7e4      	b.n	80079f6 <_vfiprintf_r+0x1e6>
 8007a2c:	08008204 	.word	0x08008204
 8007a30:	0800820e 	.word	0x0800820e
 8007a34:	00000000 	.word	0x00000000
 8007a38:	080077eb 	.word	0x080077eb
 8007a3c:	0800820a 	.word	0x0800820a

08007a40 <_printf_common>:
 8007a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a44:	4616      	mov	r6, r2
 8007a46:	4698      	mov	r8, r3
 8007a48:	688a      	ldr	r2, [r1, #8]
 8007a4a:	690b      	ldr	r3, [r1, #16]
 8007a4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a50:	4293      	cmp	r3, r2
 8007a52:	bfb8      	it	lt
 8007a54:	4613      	movlt	r3, r2
 8007a56:	6033      	str	r3, [r6, #0]
 8007a58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	460c      	mov	r4, r1
 8007a60:	b10a      	cbz	r2, 8007a66 <_printf_common+0x26>
 8007a62:	3301      	adds	r3, #1
 8007a64:	6033      	str	r3, [r6, #0]
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	0699      	lsls	r1, r3, #26
 8007a6a:	bf42      	ittt	mi
 8007a6c:	6833      	ldrmi	r3, [r6, #0]
 8007a6e:	3302      	addmi	r3, #2
 8007a70:	6033      	strmi	r3, [r6, #0]
 8007a72:	6825      	ldr	r5, [r4, #0]
 8007a74:	f015 0506 	ands.w	r5, r5, #6
 8007a78:	d106      	bne.n	8007a88 <_printf_common+0x48>
 8007a7a:	f104 0a19 	add.w	sl, r4, #25
 8007a7e:	68e3      	ldr	r3, [r4, #12]
 8007a80:	6832      	ldr	r2, [r6, #0]
 8007a82:	1a9b      	subs	r3, r3, r2
 8007a84:	42ab      	cmp	r3, r5
 8007a86:	dc26      	bgt.n	8007ad6 <_printf_common+0x96>
 8007a88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a8c:	6822      	ldr	r2, [r4, #0]
 8007a8e:	3b00      	subs	r3, #0
 8007a90:	bf18      	it	ne
 8007a92:	2301      	movne	r3, #1
 8007a94:	0692      	lsls	r2, r2, #26
 8007a96:	d42b      	bmi.n	8007af0 <_printf_common+0xb0>
 8007a98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a9c:	4641      	mov	r1, r8
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	47c8      	blx	r9
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	d01e      	beq.n	8007ae4 <_printf_common+0xa4>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	6922      	ldr	r2, [r4, #16]
 8007aaa:	f003 0306 	and.w	r3, r3, #6
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	bf02      	ittt	eq
 8007ab2:	68e5      	ldreq	r5, [r4, #12]
 8007ab4:	6833      	ldreq	r3, [r6, #0]
 8007ab6:	1aed      	subeq	r5, r5, r3
 8007ab8:	68a3      	ldr	r3, [r4, #8]
 8007aba:	bf0c      	ite	eq
 8007abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ac0:	2500      	movne	r5, #0
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	bfc4      	itt	gt
 8007ac6:	1a9b      	subgt	r3, r3, r2
 8007ac8:	18ed      	addgt	r5, r5, r3
 8007aca:	2600      	movs	r6, #0
 8007acc:	341a      	adds	r4, #26
 8007ace:	42b5      	cmp	r5, r6
 8007ad0:	d11a      	bne.n	8007b08 <_printf_common+0xc8>
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	e008      	b.n	8007ae8 <_printf_common+0xa8>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	4652      	mov	r2, sl
 8007ada:	4641      	mov	r1, r8
 8007adc:	4638      	mov	r0, r7
 8007ade:	47c8      	blx	r9
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	d103      	bne.n	8007aec <_printf_common+0xac>
 8007ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aec:	3501      	adds	r5, #1
 8007aee:	e7c6      	b.n	8007a7e <_printf_common+0x3e>
 8007af0:	18e1      	adds	r1, r4, r3
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	2030      	movs	r0, #48	@ 0x30
 8007af6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007afa:	4422      	add	r2, r4
 8007afc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b04:	3302      	adds	r3, #2
 8007b06:	e7c7      	b.n	8007a98 <_printf_common+0x58>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	4641      	mov	r1, r8
 8007b0e:	4638      	mov	r0, r7
 8007b10:	47c8      	blx	r9
 8007b12:	3001      	adds	r0, #1
 8007b14:	d0e6      	beq.n	8007ae4 <_printf_common+0xa4>
 8007b16:	3601      	adds	r6, #1
 8007b18:	e7d9      	b.n	8007ace <_printf_common+0x8e>
	...

08007b1c <_printf_i>:
 8007b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b20:	7e0f      	ldrb	r7, [r1, #24]
 8007b22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b24:	2f78      	cmp	r7, #120	@ 0x78
 8007b26:	4691      	mov	r9, r2
 8007b28:	4680      	mov	r8, r0
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	469a      	mov	sl, r3
 8007b2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b32:	d807      	bhi.n	8007b44 <_printf_i+0x28>
 8007b34:	2f62      	cmp	r7, #98	@ 0x62
 8007b36:	d80a      	bhi.n	8007b4e <_printf_i+0x32>
 8007b38:	2f00      	cmp	r7, #0
 8007b3a:	f000 80d2 	beq.w	8007ce2 <_printf_i+0x1c6>
 8007b3e:	2f58      	cmp	r7, #88	@ 0x58
 8007b40:	f000 80b9 	beq.w	8007cb6 <_printf_i+0x19a>
 8007b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b4c:	e03a      	b.n	8007bc4 <_printf_i+0xa8>
 8007b4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b52:	2b15      	cmp	r3, #21
 8007b54:	d8f6      	bhi.n	8007b44 <_printf_i+0x28>
 8007b56:	a101      	add	r1, pc, #4	@ (adr r1, 8007b5c <_printf_i+0x40>)
 8007b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b5c:	08007bb5 	.word	0x08007bb5
 8007b60:	08007bc9 	.word	0x08007bc9
 8007b64:	08007b45 	.word	0x08007b45
 8007b68:	08007b45 	.word	0x08007b45
 8007b6c:	08007b45 	.word	0x08007b45
 8007b70:	08007b45 	.word	0x08007b45
 8007b74:	08007bc9 	.word	0x08007bc9
 8007b78:	08007b45 	.word	0x08007b45
 8007b7c:	08007b45 	.word	0x08007b45
 8007b80:	08007b45 	.word	0x08007b45
 8007b84:	08007b45 	.word	0x08007b45
 8007b88:	08007cc9 	.word	0x08007cc9
 8007b8c:	08007bf3 	.word	0x08007bf3
 8007b90:	08007c83 	.word	0x08007c83
 8007b94:	08007b45 	.word	0x08007b45
 8007b98:	08007b45 	.word	0x08007b45
 8007b9c:	08007ceb 	.word	0x08007ceb
 8007ba0:	08007b45 	.word	0x08007b45
 8007ba4:	08007bf3 	.word	0x08007bf3
 8007ba8:	08007b45 	.word	0x08007b45
 8007bac:	08007b45 	.word	0x08007b45
 8007bb0:	08007c8b 	.word	0x08007c8b
 8007bb4:	6833      	ldr	r3, [r6, #0]
 8007bb6:	1d1a      	adds	r2, r3, #4
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6032      	str	r2, [r6, #0]
 8007bbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e09d      	b.n	8007d04 <_printf_i+0x1e8>
 8007bc8:	6833      	ldr	r3, [r6, #0]
 8007bca:	6820      	ldr	r0, [r4, #0]
 8007bcc:	1d19      	adds	r1, r3, #4
 8007bce:	6031      	str	r1, [r6, #0]
 8007bd0:	0606      	lsls	r6, r0, #24
 8007bd2:	d501      	bpl.n	8007bd8 <_printf_i+0xbc>
 8007bd4:	681d      	ldr	r5, [r3, #0]
 8007bd6:	e003      	b.n	8007be0 <_printf_i+0xc4>
 8007bd8:	0645      	lsls	r5, r0, #25
 8007bda:	d5fb      	bpl.n	8007bd4 <_printf_i+0xb8>
 8007bdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007be0:	2d00      	cmp	r5, #0
 8007be2:	da03      	bge.n	8007bec <_printf_i+0xd0>
 8007be4:	232d      	movs	r3, #45	@ 0x2d
 8007be6:	426d      	negs	r5, r5
 8007be8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bec:	4859      	ldr	r0, [pc, #356]	@ (8007d54 <_printf_i+0x238>)
 8007bee:	230a      	movs	r3, #10
 8007bf0:	e011      	b.n	8007c16 <_printf_i+0xfa>
 8007bf2:	6821      	ldr	r1, [r4, #0]
 8007bf4:	6833      	ldr	r3, [r6, #0]
 8007bf6:	0608      	lsls	r0, r1, #24
 8007bf8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bfc:	d402      	bmi.n	8007c04 <_printf_i+0xe8>
 8007bfe:	0649      	lsls	r1, r1, #25
 8007c00:	bf48      	it	mi
 8007c02:	b2ad      	uxthmi	r5, r5
 8007c04:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c06:	4853      	ldr	r0, [pc, #332]	@ (8007d54 <_printf_i+0x238>)
 8007c08:	6033      	str	r3, [r6, #0]
 8007c0a:	bf14      	ite	ne
 8007c0c:	230a      	movne	r3, #10
 8007c0e:	2308      	moveq	r3, #8
 8007c10:	2100      	movs	r1, #0
 8007c12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c16:	6866      	ldr	r6, [r4, #4]
 8007c18:	60a6      	str	r6, [r4, #8]
 8007c1a:	2e00      	cmp	r6, #0
 8007c1c:	bfa2      	ittt	ge
 8007c1e:	6821      	ldrge	r1, [r4, #0]
 8007c20:	f021 0104 	bicge.w	r1, r1, #4
 8007c24:	6021      	strge	r1, [r4, #0]
 8007c26:	b90d      	cbnz	r5, 8007c2c <_printf_i+0x110>
 8007c28:	2e00      	cmp	r6, #0
 8007c2a:	d04b      	beq.n	8007cc4 <_printf_i+0x1a8>
 8007c2c:	4616      	mov	r6, r2
 8007c2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c32:	fb03 5711 	mls	r7, r3, r1, r5
 8007c36:	5dc7      	ldrb	r7, [r0, r7]
 8007c38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c3c:	462f      	mov	r7, r5
 8007c3e:	42bb      	cmp	r3, r7
 8007c40:	460d      	mov	r5, r1
 8007c42:	d9f4      	bls.n	8007c2e <_printf_i+0x112>
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d10b      	bne.n	8007c60 <_printf_i+0x144>
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	07df      	lsls	r7, r3, #31
 8007c4c:	d508      	bpl.n	8007c60 <_printf_i+0x144>
 8007c4e:	6923      	ldr	r3, [r4, #16]
 8007c50:	6861      	ldr	r1, [r4, #4]
 8007c52:	4299      	cmp	r1, r3
 8007c54:	bfde      	ittt	le
 8007c56:	2330      	movle	r3, #48	@ 0x30
 8007c58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c60:	1b92      	subs	r2, r2, r6
 8007c62:	6122      	str	r2, [r4, #16]
 8007c64:	f8cd a000 	str.w	sl, [sp]
 8007c68:	464b      	mov	r3, r9
 8007c6a:	aa03      	add	r2, sp, #12
 8007c6c:	4621      	mov	r1, r4
 8007c6e:	4640      	mov	r0, r8
 8007c70:	f7ff fee6 	bl	8007a40 <_printf_common>
 8007c74:	3001      	adds	r0, #1
 8007c76:	d14a      	bne.n	8007d0e <_printf_i+0x1f2>
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7c:	b004      	add	sp, #16
 8007c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	f043 0320 	orr.w	r3, r3, #32
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	4833      	ldr	r0, [pc, #204]	@ (8007d58 <_printf_i+0x23c>)
 8007c8c:	2778      	movs	r7, #120	@ 0x78
 8007c8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	6831      	ldr	r1, [r6, #0]
 8007c96:	061f      	lsls	r7, r3, #24
 8007c98:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c9c:	d402      	bmi.n	8007ca4 <_printf_i+0x188>
 8007c9e:	065f      	lsls	r7, r3, #25
 8007ca0:	bf48      	it	mi
 8007ca2:	b2ad      	uxthmi	r5, r5
 8007ca4:	6031      	str	r1, [r6, #0]
 8007ca6:	07d9      	lsls	r1, r3, #31
 8007ca8:	bf44      	itt	mi
 8007caa:	f043 0320 	orrmi.w	r3, r3, #32
 8007cae:	6023      	strmi	r3, [r4, #0]
 8007cb0:	b11d      	cbz	r5, 8007cba <_printf_i+0x19e>
 8007cb2:	2310      	movs	r3, #16
 8007cb4:	e7ac      	b.n	8007c10 <_printf_i+0xf4>
 8007cb6:	4827      	ldr	r0, [pc, #156]	@ (8007d54 <_printf_i+0x238>)
 8007cb8:	e7e9      	b.n	8007c8e <_printf_i+0x172>
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	f023 0320 	bic.w	r3, r3, #32
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	e7f6      	b.n	8007cb2 <_printf_i+0x196>
 8007cc4:	4616      	mov	r6, r2
 8007cc6:	e7bd      	b.n	8007c44 <_printf_i+0x128>
 8007cc8:	6833      	ldr	r3, [r6, #0]
 8007cca:	6825      	ldr	r5, [r4, #0]
 8007ccc:	6961      	ldr	r1, [r4, #20]
 8007cce:	1d18      	adds	r0, r3, #4
 8007cd0:	6030      	str	r0, [r6, #0]
 8007cd2:	062e      	lsls	r6, r5, #24
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	d501      	bpl.n	8007cdc <_printf_i+0x1c0>
 8007cd8:	6019      	str	r1, [r3, #0]
 8007cda:	e002      	b.n	8007ce2 <_printf_i+0x1c6>
 8007cdc:	0668      	lsls	r0, r5, #25
 8007cde:	d5fb      	bpl.n	8007cd8 <_printf_i+0x1bc>
 8007ce0:	8019      	strh	r1, [r3, #0]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	6123      	str	r3, [r4, #16]
 8007ce6:	4616      	mov	r6, r2
 8007ce8:	e7bc      	b.n	8007c64 <_printf_i+0x148>
 8007cea:	6833      	ldr	r3, [r6, #0]
 8007cec:	1d1a      	adds	r2, r3, #4
 8007cee:	6032      	str	r2, [r6, #0]
 8007cf0:	681e      	ldr	r6, [r3, #0]
 8007cf2:	6862      	ldr	r2, [r4, #4]
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f7f8 fa6a 	bl	80001d0 <memchr>
 8007cfc:	b108      	cbz	r0, 8007d02 <_printf_i+0x1e6>
 8007cfe:	1b80      	subs	r0, r0, r6
 8007d00:	6060      	str	r0, [r4, #4]
 8007d02:	6863      	ldr	r3, [r4, #4]
 8007d04:	6123      	str	r3, [r4, #16]
 8007d06:	2300      	movs	r3, #0
 8007d08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d0c:	e7aa      	b.n	8007c64 <_printf_i+0x148>
 8007d0e:	6923      	ldr	r3, [r4, #16]
 8007d10:	4632      	mov	r2, r6
 8007d12:	4649      	mov	r1, r9
 8007d14:	4640      	mov	r0, r8
 8007d16:	47d0      	blx	sl
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d0ad      	beq.n	8007c78 <_printf_i+0x15c>
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	079b      	lsls	r3, r3, #30
 8007d20:	d413      	bmi.n	8007d4a <_printf_i+0x22e>
 8007d22:	68e0      	ldr	r0, [r4, #12]
 8007d24:	9b03      	ldr	r3, [sp, #12]
 8007d26:	4298      	cmp	r0, r3
 8007d28:	bfb8      	it	lt
 8007d2a:	4618      	movlt	r0, r3
 8007d2c:	e7a6      	b.n	8007c7c <_printf_i+0x160>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4632      	mov	r2, r6
 8007d32:	4649      	mov	r1, r9
 8007d34:	4640      	mov	r0, r8
 8007d36:	47d0      	blx	sl
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d09d      	beq.n	8007c78 <_printf_i+0x15c>
 8007d3c:	3501      	adds	r5, #1
 8007d3e:	68e3      	ldr	r3, [r4, #12]
 8007d40:	9903      	ldr	r1, [sp, #12]
 8007d42:	1a5b      	subs	r3, r3, r1
 8007d44:	42ab      	cmp	r3, r5
 8007d46:	dcf2      	bgt.n	8007d2e <_printf_i+0x212>
 8007d48:	e7eb      	b.n	8007d22 <_printf_i+0x206>
 8007d4a:	2500      	movs	r5, #0
 8007d4c:	f104 0619 	add.w	r6, r4, #25
 8007d50:	e7f5      	b.n	8007d3e <_printf_i+0x222>
 8007d52:	bf00      	nop
 8007d54:	08008215 	.word	0x08008215
 8007d58:	08008226 	.word	0x08008226

08007d5c <__sflush_r>:
 8007d5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d64:	0716      	lsls	r6, r2, #28
 8007d66:	4605      	mov	r5, r0
 8007d68:	460c      	mov	r4, r1
 8007d6a:	d454      	bmi.n	8007e16 <__sflush_r+0xba>
 8007d6c:	684b      	ldr	r3, [r1, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	dc02      	bgt.n	8007d78 <__sflush_r+0x1c>
 8007d72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	dd48      	ble.n	8007e0a <__sflush_r+0xae>
 8007d78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d7a:	2e00      	cmp	r6, #0
 8007d7c:	d045      	beq.n	8007e0a <__sflush_r+0xae>
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d84:	682f      	ldr	r7, [r5, #0]
 8007d86:	6a21      	ldr	r1, [r4, #32]
 8007d88:	602b      	str	r3, [r5, #0]
 8007d8a:	d030      	beq.n	8007dee <__sflush_r+0x92>
 8007d8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	0759      	lsls	r1, r3, #29
 8007d92:	d505      	bpl.n	8007da0 <__sflush_r+0x44>
 8007d94:	6863      	ldr	r3, [r4, #4]
 8007d96:	1ad2      	subs	r2, r2, r3
 8007d98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d9a:	b10b      	cbz	r3, 8007da0 <__sflush_r+0x44>
 8007d9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d9e:	1ad2      	subs	r2, r2, r3
 8007da0:	2300      	movs	r3, #0
 8007da2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007da4:	6a21      	ldr	r1, [r4, #32]
 8007da6:	4628      	mov	r0, r5
 8007da8:	47b0      	blx	r6
 8007daa:	1c43      	adds	r3, r0, #1
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	d106      	bne.n	8007dbe <__sflush_r+0x62>
 8007db0:	6829      	ldr	r1, [r5, #0]
 8007db2:	291d      	cmp	r1, #29
 8007db4:	d82b      	bhi.n	8007e0e <__sflush_r+0xb2>
 8007db6:	4a2a      	ldr	r2, [pc, #168]	@ (8007e60 <__sflush_r+0x104>)
 8007db8:	410a      	asrs	r2, r1
 8007dba:	07d6      	lsls	r6, r2, #31
 8007dbc:	d427      	bmi.n	8007e0e <__sflush_r+0xb2>
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	6062      	str	r2, [r4, #4]
 8007dc2:	04d9      	lsls	r1, r3, #19
 8007dc4:	6922      	ldr	r2, [r4, #16]
 8007dc6:	6022      	str	r2, [r4, #0]
 8007dc8:	d504      	bpl.n	8007dd4 <__sflush_r+0x78>
 8007dca:	1c42      	adds	r2, r0, #1
 8007dcc:	d101      	bne.n	8007dd2 <__sflush_r+0x76>
 8007dce:	682b      	ldr	r3, [r5, #0]
 8007dd0:	b903      	cbnz	r3, 8007dd4 <__sflush_r+0x78>
 8007dd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007dd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007dd6:	602f      	str	r7, [r5, #0]
 8007dd8:	b1b9      	cbz	r1, 8007e0a <__sflush_r+0xae>
 8007dda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007dde:	4299      	cmp	r1, r3
 8007de0:	d002      	beq.n	8007de8 <__sflush_r+0x8c>
 8007de2:	4628      	mov	r0, r5
 8007de4:	f7ff fbf2 	bl	80075cc <_free_r>
 8007de8:	2300      	movs	r3, #0
 8007dea:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dec:	e00d      	b.n	8007e0a <__sflush_r+0xae>
 8007dee:	2301      	movs	r3, #1
 8007df0:	4628      	mov	r0, r5
 8007df2:	47b0      	blx	r6
 8007df4:	4602      	mov	r2, r0
 8007df6:	1c50      	adds	r0, r2, #1
 8007df8:	d1c9      	bne.n	8007d8e <__sflush_r+0x32>
 8007dfa:	682b      	ldr	r3, [r5, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0c6      	beq.n	8007d8e <__sflush_r+0x32>
 8007e00:	2b1d      	cmp	r3, #29
 8007e02:	d001      	beq.n	8007e08 <__sflush_r+0xac>
 8007e04:	2b16      	cmp	r3, #22
 8007e06:	d11e      	bne.n	8007e46 <__sflush_r+0xea>
 8007e08:	602f      	str	r7, [r5, #0]
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	e022      	b.n	8007e54 <__sflush_r+0xf8>
 8007e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e12:	b21b      	sxth	r3, r3
 8007e14:	e01b      	b.n	8007e4e <__sflush_r+0xf2>
 8007e16:	690f      	ldr	r7, [r1, #16]
 8007e18:	2f00      	cmp	r7, #0
 8007e1a:	d0f6      	beq.n	8007e0a <__sflush_r+0xae>
 8007e1c:	0793      	lsls	r3, r2, #30
 8007e1e:	680e      	ldr	r6, [r1, #0]
 8007e20:	bf08      	it	eq
 8007e22:	694b      	ldreq	r3, [r1, #20]
 8007e24:	600f      	str	r7, [r1, #0]
 8007e26:	bf18      	it	ne
 8007e28:	2300      	movne	r3, #0
 8007e2a:	eba6 0807 	sub.w	r8, r6, r7
 8007e2e:	608b      	str	r3, [r1, #8]
 8007e30:	f1b8 0f00 	cmp.w	r8, #0
 8007e34:	dde9      	ble.n	8007e0a <__sflush_r+0xae>
 8007e36:	6a21      	ldr	r1, [r4, #32]
 8007e38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e3a:	4643      	mov	r3, r8
 8007e3c:	463a      	mov	r2, r7
 8007e3e:	4628      	mov	r0, r5
 8007e40:	47b0      	blx	r6
 8007e42:	2800      	cmp	r0, #0
 8007e44:	dc08      	bgt.n	8007e58 <__sflush_r+0xfc>
 8007e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e4e:	81a3      	strh	r3, [r4, #12]
 8007e50:	f04f 30ff 	mov.w	r0, #4294967295
 8007e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e58:	4407      	add	r7, r0
 8007e5a:	eba8 0800 	sub.w	r8, r8, r0
 8007e5e:	e7e7      	b.n	8007e30 <__sflush_r+0xd4>
 8007e60:	dfbffffe 	.word	0xdfbffffe

08007e64 <_fflush_r>:
 8007e64:	b538      	push	{r3, r4, r5, lr}
 8007e66:	690b      	ldr	r3, [r1, #16]
 8007e68:	4605      	mov	r5, r0
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	b913      	cbnz	r3, 8007e74 <_fflush_r+0x10>
 8007e6e:	2500      	movs	r5, #0
 8007e70:	4628      	mov	r0, r5
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	b118      	cbz	r0, 8007e7e <_fflush_r+0x1a>
 8007e76:	6a03      	ldr	r3, [r0, #32]
 8007e78:	b90b      	cbnz	r3, 8007e7e <_fflush_r+0x1a>
 8007e7a:	f7ff f977 	bl	800716c <__sinit>
 8007e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0f3      	beq.n	8007e6e <_fflush_r+0xa>
 8007e86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e88:	07d0      	lsls	r0, r2, #31
 8007e8a:	d404      	bmi.n	8007e96 <_fflush_r+0x32>
 8007e8c:	0599      	lsls	r1, r3, #22
 8007e8e:	d402      	bmi.n	8007e96 <_fflush_r+0x32>
 8007e90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e92:	f7ff fb8a 	bl	80075aa <__retarget_lock_acquire_recursive>
 8007e96:	4628      	mov	r0, r5
 8007e98:	4621      	mov	r1, r4
 8007e9a:	f7ff ff5f 	bl	8007d5c <__sflush_r>
 8007e9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ea0:	07da      	lsls	r2, r3, #31
 8007ea2:	4605      	mov	r5, r0
 8007ea4:	d4e4      	bmi.n	8007e70 <_fflush_r+0xc>
 8007ea6:	89a3      	ldrh	r3, [r4, #12]
 8007ea8:	059b      	lsls	r3, r3, #22
 8007eaa:	d4e1      	bmi.n	8007e70 <_fflush_r+0xc>
 8007eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eae:	f7ff fb7d 	bl	80075ac <__retarget_lock_release_recursive>
 8007eb2:	e7dd      	b.n	8007e70 <_fflush_r+0xc>

08007eb4 <__swhatbuf_r>:
 8007eb4:	b570      	push	{r4, r5, r6, lr}
 8007eb6:	460c      	mov	r4, r1
 8007eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ebc:	2900      	cmp	r1, #0
 8007ebe:	b096      	sub	sp, #88	@ 0x58
 8007ec0:	4615      	mov	r5, r2
 8007ec2:	461e      	mov	r6, r3
 8007ec4:	da0d      	bge.n	8007ee2 <__swhatbuf_r+0x2e>
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ecc:	f04f 0100 	mov.w	r1, #0
 8007ed0:	bf14      	ite	ne
 8007ed2:	2340      	movne	r3, #64	@ 0x40
 8007ed4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ed8:	2000      	movs	r0, #0
 8007eda:	6031      	str	r1, [r6, #0]
 8007edc:	602b      	str	r3, [r5, #0]
 8007ede:	b016      	add	sp, #88	@ 0x58
 8007ee0:	bd70      	pop	{r4, r5, r6, pc}
 8007ee2:	466a      	mov	r2, sp
 8007ee4:	f000 f87c 	bl	8007fe0 <_fstat_r>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	dbec      	blt.n	8007ec6 <__swhatbuf_r+0x12>
 8007eec:	9901      	ldr	r1, [sp, #4]
 8007eee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ef2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ef6:	4259      	negs	r1, r3
 8007ef8:	4159      	adcs	r1, r3
 8007efa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007efe:	e7eb      	b.n	8007ed8 <__swhatbuf_r+0x24>

08007f00 <__smakebuf_r>:
 8007f00:	898b      	ldrh	r3, [r1, #12]
 8007f02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f04:	079d      	lsls	r5, r3, #30
 8007f06:	4606      	mov	r6, r0
 8007f08:	460c      	mov	r4, r1
 8007f0a:	d507      	bpl.n	8007f1c <__smakebuf_r+0x1c>
 8007f0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	6123      	str	r3, [r4, #16]
 8007f14:	2301      	movs	r3, #1
 8007f16:	6163      	str	r3, [r4, #20]
 8007f18:	b003      	add	sp, #12
 8007f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f1c:	ab01      	add	r3, sp, #4
 8007f1e:	466a      	mov	r2, sp
 8007f20:	f7ff ffc8 	bl	8007eb4 <__swhatbuf_r>
 8007f24:	9f00      	ldr	r7, [sp, #0]
 8007f26:	4605      	mov	r5, r0
 8007f28:	4639      	mov	r1, r7
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f7ff fbba 	bl	80076a4 <_malloc_r>
 8007f30:	b948      	cbnz	r0, 8007f46 <__smakebuf_r+0x46>
 8007f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f36:	059a      	lsls	r2, r3, #22
 8007f38:	d4ee      	bmi.n	8007f18 <__smakebuf_r+0x18>
 8007f3a:	f023 0303 	bic.w	r3, r3, #3
 8007f3e:	f043 0302 	orr.w	r3, r3, #2
 8007f42:	81a3      	strh	r3, [r4, #12]
 8007f44:	e7e2      	b.n	8007f0c <__smakebuf_r+0xc>
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	6020      	str	r0, [r4, #0]
 8007f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f4e:	81a3      	strh	r3, [r4, #12]
 8007f50:	9b01      	ldr	r3, [sp, #4]
 8007f52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f56:	b15b      	cbz	r3, 8007f70 <__smakebuf_r+0x70>
 8007f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f000 f851 	bl	8008004 <_isatty_r>
 8007f62:	b128      	cbz	r0, 8007f70 <__smakebuf_r+0x70>
 8007f64:	89a3      	ldrh	r3, [r4, #12]
 8007f66:	f023 0303 	bic.w	r3, r3, #3
 8007f6a:	f043 0301 	orr.w	r3, r3, #1
 8007f6e:	81a3      	strh	r3, [r4, #12]
 8007f70:	89a3      	ldrh	r3, [r4, #12]
 8007f72:	431d      	orrs	r5, r3
 8007f74:	81a5      	strh	r5, [r4, #12]
 8007f76:	e7cf      	b.n	8007f18 <__smakebuf_r+0x18>

08007f78 <_putc_r>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	460d      	mov	r5, r1
 8007f7c:	4614      	mov	r4, r2
 8007f7e:	4606      	mov	r6, r0
 8007f80:	b118      	cbz	r0, 8007f8a <_putc_r+0x12>
 8007f82:	6a03      	ldr	r3, [r0, #32]
 8007f84:	b90b      	cbnz	r3, 8007f8a <_putc_r+0x12>
 8007f86:	f7ff f8f1 	bl	800716c <__sinit>
 8007f8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f8c:	07d8      	lsls	r0, r3, #31
 8007f8e:	d405      	bmi.n	8007f9c <_putc_r+0x24>
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	0599      	lsls	r1, r3, #22
 8007f94:	d402      	bmi.n	8007f9c <_putc_r+0x24>
 8007f96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f98:	f7ff fb07 	bl	80075aa <__retarget_lock_acquire_recursive>
 8007f9c:	68a3      	ldr	r3, [r4, #8]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	60a3      	str	r3, [r4, #8]
 8007fa4:	da05      	bge.n	8007fb2 <_putc_r+0x3a>
 8007fa6:	69a2      	ldr	r2, [r4, #24]
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	db12      	blt.n	8007fd2 <_putc_r+0x5a>
 8007fac:	b2eb      	uxtb	r3, r5
 8007fae:	2b0a      	cmp	r3, #10
 8007fb0:	d00f      	beq.n	8007fd2 <_putc_r+0x5a>
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	6022      	str	r2, [r4, #0]
 8007fb8:	701d      	strb	r5, [r3, #0]
 8007fba:	b2ed      	uxtb	r5, r5
 8007fbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fbe:	07da      	lsls	r2, r3, #31
 8007fc0:	d405      	bmi.n	8007fce <_putc_r+0x56>
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	059b      	lsls	r3, r3, #22
 8007fc6:	d402      	bmi.n	8007fce <_putc_r+0x56>
 8007fc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fca:	f7ff faef 	bl	80075ac <__retarget_lock_release_recursive>
 8007fce:	4628      	mov	r0, r5
 8007fd0:	bd70      	pop	{r4, r5, r6, pc}
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f7ff f9b9 	bl	800734e <__swbuf_r>
 8007fdc:	4605      	mov	r5, r0
 8007fde:	e7ed      	b.n	8007fbc <_putc_r+0x44>

08007fe0 <_fstat_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4d07      	ldr	r5, [pc, #28]	@ (8008000 <_fstat_r+0x20>)
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	4608      	mov	r0, r1
 8007fea:	4611      	mov	r1, r2
 8007fec:	602b      	str	r3, [r5, #0]
 8007fee:	f7fa ffe8 	bl	8002fc2 <_fstat>
 8007ff2:	1c43      	adds	r3, r0, #1
 8007ff4:	d102      	bne.n	8007ffc <_fstat_r+0x1c>
 8007ff6:	682b      	ldr	r3, [r5, #0]
 8007ff8:	b103      	cbz	r3, 8007ffc <_fstat_r+0x1c>
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	bd38      	pop	{r3, r4, r5, pc}
 8007ffe:	bf00      	nop
 8008000:	20000764 	.word	0x20000764

08008004 <_isatty_r>:
 8008004:	b538      	push	{r3, r4, r5, lr}
 8008006:	4d06      	ldr	r5, [pc, #24]	@ (8008020 <_isatty_r+0x1c>)
 8008008:	2300      	movs	r3, #0
 800800a:	4604      	mov	r4, r0
 800800c:	4608      	mov	r0, r1
 800800e:	602b      	str	r3, [r5, #0]
 8008010:	f7fa ffe7 	bl	8002fe2 <_isatty>
 8008014:	1c43      	adds	r3, r0, #1
 8008016:	d102      	bne.n	800801e <_isatty_r+0x1a>
 8008018:	682b      	ldr	r3, [r5, #0]
 800801a:	b103      	cbz	r3, 800801e <_isatty_r+0x1a>
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	bd38      	pop	{r3, r4, r5, pc}
 8008020:	20000764 	.word	0x20000764

08008024 <_sbrk_r>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	4d06      	ldr	r5, [pc, #24]	@ (8008040 <_sbrk_r+0x1c>)
 8008028:	2300      	movs	r3, #0
 800802a:	4604      	mov	r4, r0
 800802c:	4608      	mov	r0, r1
 800802e:	602b      	str	r3, [r5, #0]
 8008030:	f7fa fff0 	bl	8003014 <_sbrk>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d102      	bne.n	800803e <_sbrk_r+0x1a>
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	b103      	cbz	r3, 800803e <_sbrk_r+0x1a>
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	bd38      	pop	{r3, r4, r5, pc}
 8008040:	20000764 	.word	0x20000764

08008044 <_init>:
 8008044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008046:	bf00      	nop
 8008048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800804a:	bc08      	pop	{r3}
 800804c:	469e      	mov	lr, r3
 800804e:	4770      	bx	lr

08008050 <_fini>:
 8008050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008052:	bf00      	nop
 8008054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008056:	bc08      	pop	{r3}
 8008058:	469e      	mov	lr, r3
 800805a:	4770      	bx	lr
