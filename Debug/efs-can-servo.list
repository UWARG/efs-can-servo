
efs-can-servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008860  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  080089f0  080089f0  000189f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d30  08008d30  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08008d30  08008d30  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d30  08008d30  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d30  08008d30  00018d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d34  08008d34  00018d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ec  20000070  08008da4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  08008da4  0002075c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012084  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034bb  00000000  00000000  00032163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  00035620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d51  00000000  00000000  000367a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002593b  00000000  00000000  000374f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f5f  00000000  00000000  0005ce34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc34a  00000000  00000000  00073d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000512c  00000000  00000000  001500e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0015520c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089d8 	.word	0x080089d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080089d8 	.word	0x080089d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_CAN1_Init+0x64>)
 800062e:	4a18      	ldr	r2, [pc, #96]	; (8000690 <MX_CAN1_Init+0x68>)
 8000630:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_CAN1_Init+0x64>)
 8000634:	220c      	movs	r2, #12
 8000636:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000638:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_CAN1_Init+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_CAN1_Init+0x64>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_CAN1_Init+0x64>)
 8000646:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800064a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_CAN1_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_CAN1_Init+0x64>)
 8000654:	2200      	movs	r2, #0
 8000656:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_CAN1_Init+0x64>)
 800065a:	2200      	movs	r2, #0
 800065c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_CAN1_Init+0x64>)
 8000660:	2200      	movs	r2, #0
 8000662:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_CAN1_Init+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_CAN1_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_CAN1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_CAN1_Init+0x64>)
 8000678:	f004 f9a2 	bl	80049c0 <HAL_CAN_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000682:	f003 f931 	bl	80038e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	2000008c 	.word	0x2000008c
 8000690:	40006400 	.word	0x40006400

08000694 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a25      	ldr	r2, [pc, #148]	; (8000748 <HAL_CAN_MspInit+0xb4>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d143      	bne.n	800073e <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006b6:	4b25      	ldr	r3, [pc, #148]	; (800074c <HAL_CAN_MspInit+0xb8>)
 80006b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ba:	4a24      	ldr	r2, [pc, #144]	; (800074c <HAL_CAN_MspInit+0xb8>)
 80006bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006c0:	6593      	str	r3, [r2, #88]	; 0x58
 80006c2:	4b22      	ldr	r3, [pc, #136]	; (800074c <HAL_CAN_MspInit+0xb8>)
 80006c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <HAL_CAN_MspInit+0xb8>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a1e      	ldr	r2, [pc, #120]	; (800074c <HAL_CAN_MspInit+0xb8>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <HAL_CAN_MspInit+0xb8>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f4:	2303      	movs	r3, #3
 80006f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006f8:	2309      	movs	r3, #9
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000706:	f005 f8bd 	bl	8005884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800071c:	2309      	movs	r3, #9
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f005 f8ab 	bl	8005884 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	2014      	movs	r0, #20
 8000734:	f005 f86f 	bl	8005816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000738:	2014      	movs	r0, #20
 800073a:	f005 f888 	bl	800584e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	; 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40006400 	.word	0x40006400
 800074c:	40021000 	.word	0x40021000

08000750 <canardInit>:
                void* mem_arena,
                size_t mem_arena_size,
                CanardOnTransferReception on_reception,
                CanardShouldAcceptTransfer should_accept,
                void* user_reference)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	603b      	str	r3, [r7, #0]
     * If your application fails here, make sure it's not built in 64-bit mode.
     * Refer to the design documentation for more info.
     */
    CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

    memset(out_ins, 0, sizeof(*out_ins));
 800075e:	222c      	movs	r2, #44	; 0x2c
 8000760:	2100      	movs	r1, #0
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f007 fbfa 	bl	8007f5c <memset>

    out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
    out_ins->on_reception = on_reception;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	609a      	str	r2, [r3, #8]
    out_ins->should_accept = should_accept;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6a3a      	ldr	r2, [r7, #32]
 8000778:	605a      	str	r2, [r3, #4]
    out_ins->rx_states = NULL;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
    out_ins->tx_queue = NULL;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
    out_ins->user_reference = user_reference;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
#if CANARD_ENABLE_TAO_OPTION
    out_ins->tao_disabled = false;
#endif
    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	095b      	lsrs	r3, r3, #5
 8000790:	617b      	str	r3, [r7, #20]
    if (pool_capacity > 0xFFFFU)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000798:	d302      	bcc.n	80007a0 <canardInit+0x50>
    {
        pool_capacity = 0xFFFFU;
 800079a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800079e:	617b      	str	r3, [r7, #20]
    }

    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	330c      	adds	r3, #12
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	b292      	uxth	r2, r2
 80007a8:	68b9      	ldr	r1, [r7, #8]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 ff71 	bl	8002692 <initPoolAllocator>
}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <canardSetLocalNodeID>:
    CANARD_ASSERT(ins != NULL);
    return ins->user_reference;
}

void canardSetLocalNodeID(CanardInstance* ins, uint8_t self_node_id)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);

    if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d109      	bne.n	80007e0 <canardSetLocalNodeID+0x28>
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d006      	beq.n	80007e0 <canardSetLocalNodeID+0x28>
        (self_node_id >= CANARD_MIN_NODE_ID) &&
        (self_node_id <= CANARD_MAX_NODE_ID))
 80007d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
        (self_node_id >= CANARD_MIN_NODE_ID) &&
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	db02      	blt.n	80007e0 <canardSetLocalNodeID+0x28>
    {
        ins->node_id = self_node_id;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	78fa      	ldrb	r2, [r7, #3]
 80007de:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        CANARD_ASSERT(false);
    }
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <canardGetLocalNodeID>:

uint8_t canardGetLocalNodeID(const CanardInstance* ins)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
    return ins->node_id;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	781b      	ldrb	r3, [r3, #0]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <canardBroadcast>:
#endif
#if CANARD_ENABLE_CANFD
                        ,bool canfd
#endif
)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08e      	sub	sp, #56	; 0x38
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	e9c7 2300 	strd	r2, r3, [r7]
    // create transfer object
    CanardTxTransfer transfer_object = {
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	2228      	movs	r2, #40	; 0x28
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f007 fb9f 	bl	8007f5c <memset>
 800081e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000822:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000826:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800082a:	843b      	strh	r3, [r7, #32]
 800082c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
 8000830:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000834:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800083c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000840:	863b      	strh	r3, [r7, #48]	; 0x30
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };

    return canardBroadcastObj(ins, &transfer_object);
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	4619      	mov	r1, r3
 8000848:	68f8      	ldr	r0, [r7, #12]
 800084a:	f000 f805 	bl	8000858 <canardBroadcastObj>
 800084e:	4603      	mov	r3, r0
}
 8000850:	4618      	mov	r0, r3
 8000852:	3738      	adds	r7, #56	; 0x38
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <canardBroadcastObj>:

int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b087      	sub	sp, #28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d106      	bne.n	8000878 <canardBroadcastObj+0x20>
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	8c1b      	ldrh	r3, [r3, #32]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <canardBroadcastObj+0x20>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000872:	f06f 0301 	mvn.w	r3, #1
 8000876:	e070      	b.n	800095a <canardBroadcastObj+0x102>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	7e1b      	ldrb	r3, [r3, #24]
 800087c:	2b1f      	cmp	r3, #31
 800087e:	d902      	bls.n	8000886 <canardBroadcastObj+0x2e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000880:	f06f 0301 	mvn.w	r3, #1
 8000884:	e069      	b.n	800095a <canardBroadcastObj+0x102>
    }

    uint32_t can_id = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0xFFFFU;
 800088a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800088e:	827b      	strh	r3, [r7, #18]

    if (canardGetLocalNodeID(ins) == 0)
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ffab 	bl	80007ec <canardGetLocalNodeID>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d138      	bne.n	800090e <canardBroadcastObj+0xb6>
    {
        if (transfer_object->payload_len > 7)
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	8c1b      	ldrh	r3, [r3, #32]
 80008a0:	2b07      	cmp	r3, #7
 80008a2:	d902      	bls.n	80008aa <canardBroadcastObj+0x52>
        {
            return -CANARD_ERROR_NODE_ID_NOT_SET;
 80008a4:	f06f 0303 	mvn.w	r3, #3
 80008a8:	e057      	b.n	800095a <canardBroadcastObj+0x102>
        }

        static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

        if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	8a1a      	ldrh	r2, [r3, #16]
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <canardBroadcastObj+0x10c>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	4013      	ands	r3, r2
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	8a1b      	ldrh	r3, [r3, #16]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d002      	beq.n	80008c4 <canardBroadcastObj+0x6c>
        {
            return -CANARD_ERROR_INVALID_ARGUMENT;
 80008be:	f06f 0301 	mvn.w	r3, #1
 80008c2:	e04a      	b.n	800095a <canardBroadcastObj+0x102>
        }

        // anonymous transfer, random discriminator
        const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	69d9      	ldr	r1, [r3, #28]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	8c1b      	ldrh	r3, [r3, #32]
 80008cc:	461a      	mov	r2, r3
 80008ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80008d2:	f001 fec1 	bl	8002658 <crcAdd>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80008de:	4013      	ands	r3, r2
 80008e0:	823b      	strh	r3, [r7, #16]
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	7e1b      	ldrb	r3, [r3, #24]
 80008e6:	061a      	lsls	r2, r3, #24
 80008e8:	8a3b      	ldrh	r3, [r7, #16]
 80008ea:	025b      	lsls	r3, r3, #9
 80008ec:	431a      	orrs	r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	8a19      	ldrh	r1, [r3, #16]
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <canardBroadcastObj+0x10c>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	400b      	ands	r3, r1
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	021b      	lsls	r3, r3, #8
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 80008fc:	ea42 0403 	orr.w	r4, r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff73 	bl	80007ec <canardGetLocalNodeID>
 8000906:	4603      	mov	r3, r0
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000908:	4323      	orrs	r3, r4
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	e012      	b.n	8000934 <canardBroadcastObj+0xdc>
    }
    else
    {
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	7e1b      	ldrb	r3, [r3, #24]
 8000912:	061a      	lsls	r2, r3, #24
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	8a1b      	ldrh	r3, [r3, #16]
 8000918:	021b      	lsls	r3, r3, #8
 800091a:	ea42 0403 	orr.w	r4, r2, r3
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ff64 	bl	80007ec <canardGetLocalNodeID>
 8000924:	4603      	mov	r3, r0
 8000926:	4323      	orrs	r3, r4
 8000928:	617b      	str	r3, [r7, #20]
        crc = calculateCRC(transfer_object);
 800092a:	6838      	ldr	r0, [r7, #0]
 800092c:	f000 f84c 	bl	80009c8 <calculateCRC>
 8000930:	4603      	mov	r3, r0
 8000932:	827b      	strh	r3, [r7, #18]
    }

    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000934:	8a7a      	ldrh	r2, [r7, #18]
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	6979      	ldr	r1, [r7, #20]
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f001 f876 	bl	8001a2c <enqueueTxFrames>
 8000940:	4603      	mov	r3, r0
 8000942:	81fb      	strh	r3, [r7, #14]

    if (result > 0) {
 8000944:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000948:	2b00      	cmp	r3, #0
 800094a:	dd04      	ble.n	8000956 <canardBroadcastObj+0xfe>
        incrementTransferID(transfer_object->inout_transfer_id);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fff6 	bl	8001942 <incrementTransferID>
    }

    return result;
 8000956:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800095a:	4618      	mov	r0, r3
 800095c:	371c      	adds	r7, #28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd90      	pop	{r4, r7, pc}
 8000962:	bf00      	nop
 8000964:	08008cb2 	.word	0x08008cb2

08000968 <canardBufferFromIdx>:
  CanardBufferBlock and CanartRxState structures to have the same size
  on 32 bit and 64 bit platforms, which allows for easier testing in
  simulator environments
 */
CANARD_INTERNAL CanardBufferBlock *canardBufferFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardBufferBlock *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardBufferBlock *)idx;
 8000972:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <canardBufferToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardBufferToIdx(CanardPoolAllocator* allocator, const CanardBufferBlock *buf)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)buf - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)buf;
 800098a:	683b      	ldr	r3, [r7, #0]
#endif
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <canardRxFromIdx>:

CANARD_INTERNAL CanardRxState *canardRxFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardRxState *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardRxState *)idx;
 80009a2:	683b      	ldr	r3, [r7, #0]
#endif
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <canardRxToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardRxToIdx(CanardPoolAllocator* allocator, const CanardRxState *rx)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)rx - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)rx;
 80009ba:	683b      	ldr	r3, [r7, #0]
#endif
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <calculateCRC>:

CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0xFFFFU;
 80009d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009d4:	81fb      	strh	r3, [r7, #14]
#if CANARD_ENABLE_CANFD
    if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
        (transfer_object->payload_len > 63 && transfer_object->canfd))
#else
    if (transfer_object->payload_len > 7)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	8c1b      	ldrh	r3, [r3, #32]
 80009da:	2b07      	cmp	r3, #7
 80009dc:	d913      	bls.n	8000a06 <calculateCRC+0x3e>
#endif
    {
        crc = crcAddSignature(crc, transfer_object->data_type_signature);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80009e4:	89f9      	ldrh	r1, [r7, #14]
 80009e6:	4608      	mov	r0, r1
 80009e8:	f001 fe07 	bl	80025fa <crcAddSignature>
 80009ec:	4603      	mov	r3, r0
 80009ee:	81fb      	strh	r3, [r7, #14]
        crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	69d9      	ldr	r1, [r3, #28]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	8c1b      	ldrh	r3, [r3, #32]
 80009f8:	461a      	mov	r2, r3
 80009fa:	89fb      	ldrh	r3, [r7, #14]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 fe2b 	bl	8002658 <crcAdd>
 8000a02:	4603      	mov	r3, r0
 8000a04:	81fb      	strh	r3, [r7, #14]
                crc = crcAddByte(crc, empty);
            }
        }
#endif
    }
    return crc;
 8000a06:	89fb      	ldrh	r3, [r7, #14]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <canardRequestOrRespond>:
#endif
#if CANARD_ENABLE_CANFD
                               ,bool canfd
#endif
)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08e      	sub	sp, #56	; 0x38
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	e9c7 2300 	strd	r2, r3, [r7]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	72fb      	strb	r3, [r7, #11]
    CanardTxTransfer transfer_object = {
        .data_type_signature = data_type_signature,
        .data_type_id = data_type_id,
        .inout_transfer_id = inout_transfer_id,
        .priority = priority,
        .transfer_type = kind == CanardRequest ? CanardTransferTypeRequest : CanardTransferTypeResponse,
 8000a20:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	bf0c      	ite	eq
 8000a28:	2301      	moveq	r3, #1
 8000a2a:	2300      	movne	r3, #0
 8000a2c:	b2db      	uxtb	r3, r3
    CanardTxTransfer transfer_object = {
 8000a2e:	743b      	strb	r3, [r7, #16]
 8000a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a34:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000a38:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	843b      	strh	r3, [r7, #32]
 8000a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
 8000a44:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000a48:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a50:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000a54:	863b      	strh	r3, [r7, #48]	; 0x30
#endif
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };
    return canardRequestOrRespondObj(ins, destination_node_id, &transfer_object);
 8000a56:	f107 0210 	add.w	r2, r7, #16
 8000a5a:	7afb      	ldrb	r3, [r7, #11]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	f000 f805 	bl	8000a6e <canardRequestOrRespondObj>
 8000a64:	4603      	mov	r3, r0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3738      	adds	r7, #56	; 0x38
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <canardRequestOrRespondObj>:

int16_t canardRequestOrRespondObj(CanardInstance* ins, uint8_t destination_node_id, CanardTxTransfer* transfer_object)
{
 8000a6e:	b590      	push	{r4, r7, lr}
 8000a70:	b087      	sub	sp, #28
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	60f8      	str	r0, [r7, #12]
 8000a76:	460b      	mov	r3, r1
 8000a78:	607a      	str	r2, [r7, #4]
 8000a7a:	72fb      	strb	r3, [r7, #11]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d106      	bne.n	8000a92 <canardRequestOrRespondObj+0x24>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	8c1b      	ldrh	r3, [r3, #32]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <canardRequestOrRespondObj+0x24>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000a8c:	f06f 0301 	mvn.w	r3, #1
 8000a90:	e042      	b.n	8000b18 <canardRequestOrRespondObj+0xaa>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	7e1b      	ldrb	r3, [r3, #24]
 8000a96:	2b1f      	cmp	r3, #31
 8000a98:	d902      	bls.n	8000aa0 <canardRequestOrRespondObj+0x32>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000a9a:	f06f 0301 	mvn.w	r3, #1
 8000a9e:	e03b      	b.n	8000b18 <canardRequestOrRespondObj+0xaa>
    }
    if (canardGetLocalNodeID(ins) == 0)
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f7ff fea3 	bl	80007ec <canardGetLocalNodeID>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d102      	bne.n	8000ab2 <canardRequestOrRespondObj+0x44>
    {
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000aac:	f06f 0303 	mvn.w	r3, #3
 8000ab0:	e032      	b.n	8000b18 <canardRequestOrRespondObj+0xaa>
    }

    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	7e1b      	ldrb	r3, [r3, #24]
 8000ab6:	061a      	lsls	r2, r3, #24
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	8a1b      	ldrh	r3, [r3, #16]
 8000abc:	041b      	lsls	r3, r3, #16
 8000abe:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	03db      	lsls	r3, r3, #15
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000ac6:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8000ac8:	7afb      	ldrb	r3, [r7, #11]
 8000aca:	021b      	lsls	r3, r3, #8
 8000acc:	ea42 0403 	orr.w	r4, r2, r3
                            (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f7ff fe8b 	bl	80007ec <canardGetLocalNodeID>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4323      	orrs	r3, r4
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ade:	617b      	str	r3, [r7, #20]

    uint16_t crc = calculateCRC(transfer_object);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff71 	bl	80009c8 <calculateCRC>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	827b      	strh	r3, [r7, #18]


    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000aea:	8a7a      	ldrh	r2, [r7, #18]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6979      	ldr	r1, [r7, #20]
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f000 ff9b 	bl	8001a2c <enqueueTxFrames>
 8000af6:	4603      	mov	r3, r0
 8000af8:	823b      	strh	r3, [r7, #16]

    if (result > 0 && transfer_object->transfer_type == CanardTransferTypeRequest)                      // Response Transfer ID must not be altered
 8000afa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	dd08      	ble.n	8000b14 <canardRequestOrRespondObj+0xa6>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d104      	bne.n	8000b14 <canardRequestOrRespondObj+0xa6>
    {
        incrementTransferID(transfer_object->inout_transfer_id);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 ff17 	bl	8001942 <incrementTransferID>
    }

    return result;
 8000b14:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	371c      	adds	r7, #28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd90      	pop	{r4, r7, pc}

08000b20 <canardPeekTxQueue>:

CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    if (ins->tx_queue == NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d101      	bne.n	8000b34 <canardPeekTxQueue+0x14>
    {
        return NULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	e002      	b.n	8000b3a <canardPeekTxQueue+0x1a>
    }
    return &ins->tx_queue->frame;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b38:	3304      	adds	r3, #4
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <canardPopTxQueue>:

void canardPopTxQueue(CanardInstance* ins)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b084      	sub	sp, #16
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = ins->tx_queue;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b52:	60fb      	str	r3, [r7, #12]
    ins->tx_queue = item->next;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	625a      	str	r2, [r3, #36]	; 0x24
    freeBlock(&ins->allocator, item);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	330c      	adds	r3, #12
 8000b60:	68f9      	ldr	r1, [r7, #12]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 fdf5 	bl	8002752 <freeBlock>
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <canardHandleRxFrame>:

int16_t canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
{
 8000b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b74:	b09f      	sub	sp, #124	; 0x7c
 8000b76:	af02      	add	r7, sp, #8
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	e9c7 2300 	strd	r2, r3, [r7]
    const CanardTransferType transfer_type = extractTransferType(frame->id);
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f001 f959 	bl	8001e3c <extractTransferType>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8000b90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d007      	beq.n	8000ba8 <canardHandleRxFrame+0x38>
                                        (uint8_t)CANARD_BROADCAST_NODE_ID :
                                        DEST_ID_FROM_ID(frame->id);
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	b2db      	uxtb	r3, r3
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8000ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	e000      	b.n	8000baa <canardHandleRxFrame+0x3a>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

    // TODO: This function should maintain statistics of transfer errors and such.

    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	da0f      	bge.n	8000bd6 <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d109      	bne.n	8000bd6 <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d103      	bne.n	8000bd6 <canardHandleRxFrame+0x66>
        (frame->data_len < 1))
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	7b1b      	ldrb	r3, [r3, #12]
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d102      	bne.n	8000bdc <canardHandleRxFrame+0x6c>
    {
        return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 8000bd6:	f06f 0309 	mvn.w	r3, #9
 8000bda:	e364      	b.n	80012a6 <canardHandleRxFrame+0x736>
    }

    if (transfer_type != CanardTransferTypeBroadcast &&
 8000bdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d00b      	beq.n	8000bfc <canardHandleRxFrame+0x8c>
        destination_node_id != canardGetLocalNodeID(ins))
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f7ff fe01 	bl	80007ec <canardGetLocalNodeID>
 8000bea:	4603      	mov	r3, r0
 8000bec:	461a      	mov	r2, r3
    if (transfer_type != CanardTransferTypeBroadcast &&
 8000bee:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d002      	beq.n	8000bfc <canardHandleRxFrame+0x8c>
    {
        return -CANARD_ERROR_RX_WRONG_ADDRESS;
 8000bf6:	f06f 030a 	mvn.w	r3, #10
 8000bfa:	e354      	b.n	80012a6 <canardHandleRxFrame+0x736>
    }

    const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	0e1b      	lsrs	r3, r3, #24
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f003 031f 	and.w	r3, r3, #31
 8000c08:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c16:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    const uint16_t data_type_id = extractDataType(frame->id);
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 f8eb 	bl	8001dfa <extractDataType>
 8000c24:	4603      	mov	r3, r0
 8000c26:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    // printf("Transfer Type: %u, Received Data ID: %u\r\n", (uint32_t)transfer_type, (uint32_t)data_type_id);
    const uint32_t transfer_descriptor =
            MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 8000c2a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8000c2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000c32:	041b      	lsls	r3, r3, #16
 8000c34:	431a      	orrs	r2, r3
 8000c36:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000c3a:	049b      	lsls	r3, r3, #18
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000c42:	065b      	lsls	r3, r3, #25
    const uint32_t transfer_descriptor =
 8000c44:	4313      	orrs	r3, r2
 8000c46:	64fb      	str	r3, [r7, #76]	; 0x4c

    const uint8_t tail_byte = frame->data[frame->data_len - 1];
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	7b1b      	ldrb	r3, [r3, #12]
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	4413      	add	r3, r2
 8000c52:	791b      	ldrb	r3, [r3, #4]
 8000c54:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        // printf("IS END\r\n");
    } else {
        // printf("NOT END\r\n");
    }

    uint64_t data_type_signature = 0;
 8000c58:	f04f 0200 	mov.w	r2, #0
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    CanardRxState* rx_state = NULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (IS_START_OF_TRANSFER(tail_byte))
 8000c68:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000c6c:	09db      	lsrs	r3, r3, #7
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d01e      	beq.n	8000cb6 <canardHandleRxFrame+0x146>
    {

        if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id))
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	685e      	ldr	r6, [r3, #4]
 8000c7c:	f897 0057 	ldrb.w	r0, [r7, #87]	; 0x57
 8000c80:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8000c84:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000c88:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	4603      	mov	r3, r0
 8000c90:	68f8      	ldr	r0, [r7, #12]
 8000c92:	47b0      	blx	r6
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00a      	beq.n	8000cb0 <canardHandleRxFrame+0x140>
        {
            rx_state = traverseRxStates(ins, transfer_descriptor);
 8000c9a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000c9c:	68f8      	ldr	r0, [r7, #12]
 8000c9e:	f001 f8f1 	bl	8001e84 <traverseRxStates>
 8000ca2:	66f8      	str	r0, [r7, #108]	; 0x6c

            if(rx_state == NULL)
 8000ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d110      	bne.n	8000ccc <canardHandleRxFrame+0x15c>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8000caa:	f06f 0302 	mvn.w	r3, #2
 8000cae:	e2fa      	b.n	80012a6 <canardHandleRxFrame+0x736>
            }
        }
        else
        {
            return -CANARD_ERROR_RX_NOT_WANTED;
 8000cb0:	f06f 030b 	mvn.w	r3, #11
 8000cb4:	e2f7      	b.n	80012a6 <canardHandleRxFrame+0x736>
        }
    }
    else
    {
        rx_state = findRxState(ins, transfer_descriptor);
 8000cb6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	f001 f912 	bl	8001ee2 <findRxState>
 8000cbe:	66f8      	str	r0, [r7, #108]	; 0x6c

        if (rx_state == NULL)
 8000cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d102      	bne.n	8000ccc <canardHandleRxFrame+0x15c>
        {
            return -CANARD_ERROR_RX_MISSED_START;
 8000cc6:	f06f 030c 	mvn.w	r3, #12
 8000cca:	e2ec      	b.n	80012a6 <canardHandleRxFrame+0x736>
    }

    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above

    // Resolving the state flags:
    const bool not_initialized = rx_state->timestamp_usec == 0;
 8000ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	bf0c      	ite	eq
 8000cd8:	2301      	moveq	r3, #1
 8000cda:	2300      	movne	r3, #0
 8000cdc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 8000ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ce2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ce6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000cea:	ebb0 0802 	subs.w	r8, r0, r2
 8000cee:	eb61 0903 	sbc.w	r9, r1, r3
 8000cf2:	4baa      	ldr	r3, [pc, #680]	; (8000f9c <canardHandleRxFrame+0x42c>)
 8000cf4:	4598      	cmp	r8, r3
 8000cf6:	f179 0300 	sbcs.w	r3, r9, #0
 8000cfa:	bf2c      	ite	cs
 8000cfc:	2301      	movcs	r3, #1
 8000cfe:	2300      	movcc	r3, #0
 8000d00:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    const bool same_iface = frame->iface_id == rx_state->iface_id;
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	7b5a      	ldrb	r2, [r3, #13]
 8000d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d0a:	7e9b      	ldrb	r3, [r3, #26]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	bf0c      	ite	eq
 8000d10:	2301      	moveq	r3, #1
 8000d12:	2300      	movne	r3, #0
 8000d14:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 8000d18:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d1c:	09db      	lsrs	r3, r3, #7
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	bf14      	ite	ne
 8000d28:	2301      	movne	r3, #1
 8000d2a:	2300      	moveq	r3, #0
 8000d2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    const bool not_previous_tid =
        computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 8000d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d32:	7ddb      	ldrb	r3, [r3, #23]
 8000d34:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d40:	f003 031f 	and.w	r3, r3, #31
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	4619      	mov	r1, r3
 8000d48:	4610      	mov	r0, r2
 8000d4a:	f000 fddb 	bl	8001904 <computeTransferIDForwardDistance>
 8000d4e:	4603      	mov	r3, r0
    const bool not_previous_tid =
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	bfcc      	ite	gt
 8000d54:	2301      	movgt	r3, #1
 8000d56:	2300      	movle	r3, #0
 8000d58:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    const bool iface_switch_allowed = (timestamp_usec - rx_state->timestamp_usec) > IFACE_SWITCH_DELAY_USEC;
 8000d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb61 0503 	sbc.w	r5, r1, r3
 8000d6c:	4b8c      	ldr	r3, [pc, #560]	; (8000fa0 <canardHandleRxFrame+0x430>)
 8000d6e:	429c      	cmp	r4, r3
 8000d70:	f175 0300 	sbcs.w	r3, r5, #0
 8000d74:	bf2c      	ite	cs
 8000d76:	2301      	movcs	r3, #1
 8000d78:	2300      	movcc	r3, #0
 8000d7a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    const bool non_wrapped_tid = computeTransferIDForwardDistance(TRANSFER_ID_FROM_TAIL_BYTE(tail_byte), (uint8_t) rx_state->transfer_id) < (1 << (TRANSFER_ID_BIT_LEN-1));
 8000d7e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000d82:	f003 031f 	and.w	r3, r3, #31
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d8a:	7ddb      	ldrb	r3, [r3, #23]
 8000d8c:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	4619      	mov	r1, r3
 8000d94:	4610      	mov	r0, r2
 8000d96:	f000 fdb5 	bl	8001904 <computeTransferIDForwardDistance>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	bfd4      	ite	le
 8000da0:	2301      	movle	r3, #1
 8000da2:	2300      	movgt	r3, #0
 8000da4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    const bool incomplete_frame = rx_state->buffer_blocks != CANARD_BUFFER_IDX_NONE;
 8000da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	bf14      	ite	ne
 8000db0:	2301      	movne	r3, #1
 8000db2:	2300      	moveq	r3, #0
 8000db4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    const bool need_restart =
            (not_initialized) ||
            (tid_timed_out) ||
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8000db8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d11f      	bne.n	8000e00 <canardHandleRxFrame+0x290>
            (not_initialized) ||
 8000dc0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d11b      	bne.n	8000e00 <canardHandleRxFrame+0x290>
            (tid_timed_out) ||
 8000dc8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00b      	beq.n	8000de8 <canardHandleRxFrame+0x278>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8000dd0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d007      	beq.n	8000de8 <canardHandleRxFrame+0x278>
 8000dd8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10f      	bne.n	8000e00 <canardHandleRxFrame+0x290>
 8000de0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d10b      	bne.n	8000e00 <canardHandleRxFrame+0x290>
 8000de8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d009      	beq.n	8000e04 <canardHandleRxFrame+0x294>
            (iface_switch_allowed && first_frame && non_wrapped_tid);
 8000df0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d005      	beq.n	8000e04 <canardHandleRxFrame+0x294>
 8000df8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <canardHandleRxFrame+0x294>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <canardHandleRxFrame+0x296>
 8000e04:	2300      	movs	r3, #0
    const bool need_restart =
 8000e06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8000e0a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

    if (need_restart)
 8000e16:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d02f      	beq.n	8000e7e <canardHandleRxFrame+0x30e>
    {
        rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 8000e1e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e22:	f003 031f 	and.w	r3, r3, #31
 8000e26:	b2d9      	uxtb	r1, r3
 8000e28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e2a:	7dd3      	ldrb	r3, [r2, #23]
 8000e2c:	f361 0386 	bfi	r3, r1, #2, #5
 8000e30:	75d3      	strb	r3, [r2, #23]
        rx_state->next_toggle = 0;
 8000e32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e34:	7dd3      	ldrb	r3, [r2, #23]
 8000e36:	f36f 13c7 	bfc	r3, #7, #1
 8000e3a:	75d3      	strb	r3, [r2, #23]
        releaseStatePayload(ins, rx_state);
 8000e3c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000e3e:	68f8      	ldr	r0, [r7, #12]
 8000e40:	f001 f8b9 	bl	8001fb6 <releaseStatePayload>
        rx_state->iface_id = frame->iface_id;
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	7b5a      	ldrb	r2, [r3, #13]
 8000e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e4a:	769a      	strb	r2, [r3, #26]
        if (!IS_START_OF_TRANSFER(tail_byte))
 8000e4c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e50:	09db      	lsrs	r3, r3, #7
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d110      	bne.n	8000e7e <canardHandleRxFrame+0x30e>
        {
            rx_state->transfer_id++;
 8000e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e5e:	7ddb      	ldrb	r3, [r3, #23]
 8000e60:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	3301      	adds	r3, #1
 8000e68:	f003 031f 	and.w	r3, r3, #31
 8000e6c:	b2d9      	uxtb	r1, r3
 8000e6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e70:	7dd3      	ldrb	r3, [r2, #23]
 8000e72:	f361 0386 	bfi	r3, r1, #2, #5
 8000e76:	75d3      	strb	r3, [r2, #23]
            return -CANARD_ERROR_RX_MISSED_START;
 8000e78:	f06f 030c 	mvn.w	r3, #12
 8000e7c:	e213      	b.n	80012a6 <canardHandleRxFrame+0x736>
        }
    }

    if (frame->iface_id != rx_state->iface_id)
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	7b5a      	ldrb	r2, [r3, #13]
 8000e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e84:	7e9b      	ldrb	r3, [r3, #26]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d001      	beq.n	8000e8e <canardHandleRxFrame+0x31e>
    {
        // drop frame if coming from unexpected interface
        return CANARD_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e20b      	b.n	80012a6 <canardHandleRxFrame+0x736>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 8000e8e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e92:	09db      	lsrs	r3, r3, #7
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d042      	beq.n	8000f24 <canardHandleRxFrame+0x3b4>
 8000e9e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ea2:	099b      	lsrs	r3, r3, #6
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d03a      	beq.n	8000f24 <canardHandleRxFrame+0x3b4>
    {
        rx_state->timestamp_usec = timestamp_usec;
 8000eae:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000eb4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        CanardRxTransfer rx_transfer = {
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	2220      	movs	r2, #32
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f007 f84b 	bl	8007f5c <memset>
 8000ec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000eca:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = frame->data,
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	3304      	adds	r3, #4
        CanardRxTransfer rx_transfer = {
 8000ed2:	61bb      	str	r3, [r7, #24]
            .payload_len = (uint8_t)(frame->data_len - 1U),
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	7b1b      	ldrb	r3, [r3, #12]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 8000ede:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000ee0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000ee4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000ee6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000eea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8000eee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ef2:	f003 031f 	and.w	r3, r3, #31
 8000ef6:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8000ef8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000efc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000f00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000f04:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        ins->on_reception(ins, &rx_transfer);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f107 0210 	add.w	r2, r7, #16
 8000f14:	4611      	mov	r1, r2
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	4798      	blx	r3

        prepareForNextTransfer(rx_state);
 8000f1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000f1c:	f000 ff4b 	bl	8001db6 <prepareForNextTransfer>
        return CANARD_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	e1c0      	b.n	80012a6 <canardHandleRxFrame+0x736>
    }

    if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 8000f24:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f28:	095b      	lsrs	r3, r3, #5
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	bf14      	ite	ne
 8000f34:	2301      	movne	r3, #1
 8000f36:	2300      	moveq	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f3e:	7ddb      	ldrb	r3, [r3, #23]
 8000f40:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d002      	beq.n	8000f50 <canardHandleRxFrame+0x3e0>
    {
        return -CANARD_ERROR_RX_WRONG_TOGGLE;
 8000f4a:	f06f 030d 	mvn.w	r3, #13
 8000f4e:	e1aa      	b.n	80012a6 <canardHandleRxFrame+0x736>
    }

    if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 8000f50:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f54:	f003 031f 	and.w	r3, r3, #31
 8000f58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f5a:	7dd2      	ldrb	r2, [r2, #23]
 8000f5c:	f3c2 0284 	ubfx	r2, r2, #2, #5
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d002      	beq.n	8000f6c <canardHandleRxFrame+0x3fc>
    {
        return -CANARD_ERROR_RX_UNEXPECTED_TID;
 8000f66:	f06f 030e 	mvn.w	r3, #14
 8000f6a:	e19c      	b.n	80012a6 <canardHandleRxFrame+0x736>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 8000f6c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f70:	09db      	lsrs	r3, r3, #7
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d062      	beq.n	8001042 <canardHandleRxFrame+0x4d2>
 8000f7c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000f80:	099b      	lsrs	r3, r3, #6
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d15a      	bne.n	8001042 <canardHandleRxFrame+0x4d2>
    {
        if (frame->data_len <= 3)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	7b1b      	ldrb	r3, [r3, #12]
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d807      	bhi.n	8000fa4 <canardHandleRxFrame+0x434>
        {
            return -CANARD_ERROR_RX_SHORT_FRAME;
 8000f94:	f06f 030f 	mvn.w	r3, #15
 8000f98:	e185      	b.n	80012a6 <canardHandleRxFrame+0x736>
 8000f9a:	bf00      	nop
 8000f9c:	001e8481 	.word	0x001e8481
 8000fa0:	000f4241 	.word	0x000f4241
        }

        // take off the crc and store the payload
        rx_state->timestamp_usec = timestamp_usec;
 8000fa4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000faa:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rx_state->payload_len = 0;
 8000fae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000fb0:	8ad3      	ldrh	r3, [r2, #22]
 8000fb2:	f36f 0309 	bfc	r3, #0, #10
 8000fb6:	82d3      	strh	r3, [r2, #22]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f103 000c 	add.w	r0, r3, #12
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	1c9a      	adds	r2, r3, #2
                                                 (uint8_t) (frame->data_len - 3));
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000fce:	f001 f827 	bl	8002020 <bufferBlockPushBytes>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        if (ret < 0)
 8000fd8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	da09      	bge.n	8000ff4 <canardHandleRxFrame+0x484>
        {
            releaseStatePayload(ins, rx_state);
 8000fe0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f000 ffe7 	bl	8001fb6 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 8000fe8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000fea:	f000 fee4 	bl	8001db6 <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8000fee:	f06f 0302 	mvn.w	r3, #2
 8000ff2:	e158      	b.n	80012a6 <canardHandleRxFrame+0x736>
        }
        rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	791b      	ldrb	r3, [r3, #4]
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	795b      	ldrb	r3, [r3, #5]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b29b      	uxth	r3, r3
 8001004:	4313      	orrs	r3, r2
 8001006:	b29a      	uxth	r2, r3
 8001008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800100a:	831a      	strh	r2, [r3, #24]
        rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 800100c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001010:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001014:	f001 faf1 	bl	80025fa <crcAddSignature>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800101e:	829a      	strh	r2, [r3, #20]
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001022:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	3304      	adds	r3, #4
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001028:	1c99      	adds	r1, r3, #2
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	7b1b      	ldrb	r3, [r3, #12]
 800102e:	3b03      	subs	r3, #3
 8001030:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001032:	461a      	mov	r2, r3
 8001034:	f001 fb10 	bl	8002658 <crcAdd>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800103e:	829a      	strh	r2, [r3, #20]
    {
 8001040:	e124      	b.n	800128c <canardHandleRxFrame+0x71c>
    }
    else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 8001042:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001046:	09db      	lsrs	r3, r3, #7
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d133      	bne.n	80010ba <canardHandleRxFrame+0x54a>
 8001052:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001056:	099b      	lsrs	r3, r3, #6
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d12b      	bne.n	80010ba <canardHandleRxFrame+0x54a>
    {
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f103 000c 	add.w	r0, r3, #12
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1d1a      	adds	r2, r3, #4
                                                 (uint8_t) (frame->data_len - 1));
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8001070:	3b01      	subs	r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001076:	f000 ffd3 	bl	8002020 <bufferBlockPushBytes>
 800107a:	4603      	mov	r3, r0
 800107c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        if (ret < 0)
 800107e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001082:	2b00      	cmp	r3, #0
 8001084:	da09      	bge.n	800109a <canardHandleRxFrame+0x52a>
        {
            releaseStatePayload(ins, rx_state);
 8001086:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 ff94 	bl	8001fb6 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 800108e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001090:	f000 fe91 	bl	8001db6 <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8001094:	f06f 0302 	mvn.w	r3, #2
 8001098:	e105      	b.n	80012a6 <canardHandleRxFrame+0x736>
        }
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 800109a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800109c:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data, (uint8_t)(frame->data_len - 1));
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1d19      	adds	r1, r3, #4
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	7b1b      	ldrb	r3, [r3, #12]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80010aa:	461a      	mov	r2, r3
 80010ac:	f001 fad4 	bl	8002658 <crcAdd>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010b6:	829a      	strh	r2, [r3, #20]
    {
 80010b8:	e0e8      	b.n	800128c <canardHandleRxFrame+0x71c>
    }
    else                                                                            // End of a multi-frame transfer
    {
        const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	7b1b      	ldrb	r3, [r3, #12]
 80010be:	3b01      	subs	r3, #1
 80010c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        uint8_t tail_offset = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

        if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 80010ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010cc:	8adb      	ldrh	r3, [r3, #22]
 80010ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d823      	bhi.n	8001120 <canardHandleRxFrame+0x5b0>
        {
            // Copy the beginning of the frame into the head, point the tail pointer to the remainder
            for (size_t i = rx_state->payload_len;
 80010d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010da:	8adb      	ldrh	r3, [r3, #22]
 80010dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	667b      	str	r3, [r7, #100]	; 0x64
 80010e4:	e012      	b.n	800110c <canardHandleRxFrame+0x59c>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
                 i++, tail_offset++)
            {
                rx_state->buffer_head[i] = frame->data[tail_offset];
 80010e6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	4413      	add	r3, r2
 80010ee:	7919      	ldrb	r1, [r3, #4]
 80010f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80010f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010f4:	4413      	add	r3, r2
 80010f6:	331b      	adds	r3, #27
 80010f8:	460a      	mov	r2, r1
 80010fa:	701a      	strb	r2, [r3, #0]
                 i++, tail_offset++)
 80010fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010fe:	3301      	adds	r3, #1
 8001100:	667b      	str	r3, [r7, #100]	; 0x64
 8001102:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001106:	3301      	adds	r3, #1
 8001108:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 800110c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800110e:	2b04      	cmp	r3, #4
 8001110:	d848      	bhi.n	80011a4 <canardHandleRxFrame+0x634>
 8001112:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8001116:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800111a:	429a      	cmp	r2, r3
 800111c:	d3e3      	bcc.n	80010e6 <canardHandleRxFrame+0x576>
 800111e:	e041      	b.n	80011a4 <canardHandleRxFrame+0x634>
            }
        }
        else
        {
            // Like above, except that the beginning goes into the last block of the storage
            CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f103 020c 	add.w	r2, r3, #12
 8001126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4619      	mov	r1, r3
 800112c:	4610      	mov	r0, r2
 800112e:	f7ff fc1b 	bl	8000968 <canardBufferFromIdx>
 8001132:	6638      	str	r0, [r7, #96]	; 0x60
            if (block != NULL)
 8001134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001136:	2b00      	cmp	r3, #0
 8001138:	d034      	beq.n	80011a4 <canardHandleRxFrame+0x634>
            {
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 800113a:	2305      	movs	r3, #5
 800113c:	65fb      	str	r3, [r7, #92]	; 0x5c
                while (block->next != NULL)
 800113e:	e005      	b.n	800114c <canardHandleRxFrame+0x5dc>
                {
                    block = block->next;
 8001140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	663b      	str	r3, [r7, #96]	; 0x60
                    offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 8001146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001148:	331c      	adds	r3, #28
 800114a:	65fb      	str	r3, [r7, #92]	; 0x5c
                while (block->next != NULL)
 800114c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f5      	bne.n	8001140 <canardHandleRxFrame+0x5d0>
                }
                CANARD_ASSERT(block != NULL);

                const size_t offset_within_block = rx_state->payload_len - offset;
 8001154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001156:	8adb      	ldrh	r3, [r3, #22]
 8001158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800115c:	b29b      	uxth	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	63bb      	str	r3, [r7, #56]	; 0x38
                CANARD_ASSERT(offset_within_block <= CANARD_BUFFER_BLOCK_DATA_SIZE);

                for (size_t i = offset_within_block;
 8001166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001168:	65bb      	str	r3, [r7, #88]	; 0x58
 800116a:	e012      	b.n	8001192 <canardHandleRxFrame+0x622>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
                     i++, tail_offset++)
                {
                    block->data[i] = frame->data[tail_offset];
 800116c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	4413      	add	r3, r2
 8001174:	7919      	ldrb	r1, [r3, #4]
 8001176:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800117a:	4413      	add	r3, r2
 800117c:	3304      	adds	r3, #4
 800117e:	460a      	mov	r2, r1
 8001180:	701a      	strb	r2, [r3, #0]
                     i++, tail_offset++)
 8001182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001184:	3301      	adds	r3, #1
 8001186:	65bb      	str	r3, [r7, #88]	; 0x58
 8001188:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800118c:	3301      	adds	r3, #1
 800118e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 8001192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001194:	2b1b      	cmp	r3, #27
 8001196:	d805      	bhi.n	80011a4 <canardHandleRxFrame+0x634>
 8001198:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800119c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d3e3      	bcc.n	800116c <canardHandleRxFrame+0x5fc>
                }
            }
        }

        CanardRxTransfer rx_transfer = {
 80011a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = rx_state->buffer_head,
 80011ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011ae:	331b      	adds	r3, #27
        CanardRxTransfer rx_transfer = {
 80011b0:	61bb      	str	r3, [r7, #24]
            .payload_middle = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks),
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f103 020c 	add.w	r2, r3, #12
 80011b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4619      	mov	r1, r3
 80011be:	4610      	mov	r0, r2
 80011c0:	f7ff fbd2 	bl	8000968 <canardBufferFromIdx>
 80011c4:	4603      	mov	r3, r0
        CanardRxTransfer rx_transfer = {
 80011c6:	61fb      	str	r3, [r7, #28]
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 80011c8:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 80011cc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d205      	bcs.n	80011e0 <canardHandleRxFrame+0x670>
 80011d4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	4413      	add	r3, r2
 80011dc:	3304      	adds	r3, #4
 80011de:	e000      	b.n	80011e2 <canardHandleRxFrame+0x672>
 80011e0:	2300      	movs	r3, #0
        CanardRxTransfer rx_transfer = {
 80011e2:	623b      	str	r3, [r7, #32]
            .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 80011e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011e6:	8adb      	ldrh	r3, [r3, #22]
 80011e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	461a      	mov	r2, r3
 80011f0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	4413      	add	r3, r2
 80011f8:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 80011fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80011fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001200:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001202:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001206:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 800120a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800120e:	f003 031f 	and.w	r3, r3, #31
 8001212:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8001214:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001218:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800121c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001220:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        rx_state->buffer_blocks = CANARD_BUFFER_IDX_NONE;     // Block list ownership has been transferred to rx_transfer!
 8001228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]

        // CRC validation
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 800122e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001230:	8a98      	ldrh	r0, [r3, #20]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1d19      	adds	r1, r3, #4
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	7b1b      	ldrb	r3, [r3, #12]
 800123a:	3b01      	subs	r3, #1
 800123c:	461a      	mov	r2, r3
 800123e:	f001 fa0b 	bl	8002658 <crcAdd>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001248:	829a      	strh	r2, [r3, #20]
        if (rx_state->calculated_crc == rx_state->payload_crc)
 800124a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800124c:	8a9a      	ldrh	r2, [r3, #20]
 800124e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001250:	8b1b      	ldrh	r3, [r3, #24]
 8001252:	429a      	cmp	r2, r3
 8001254:	d106      	bne.n	8001264 <canardHandleRxFrame+0x6f4>
        {
            ins->on_reception(ins, &rx_transfer);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f107 0210 	add.w	r2, r7, #16
 800125e:	4611      	mov	r1, r2
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	4798      	blx	r3
        }

        // Making sure the payload is released even if the application didn't bother with it
        canardReleaseRxTransferPayload(ins, &rx_transfer);
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	4619      	mov	r1, r3
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 fa92 	bl	8001794 <canardReleaseRxTransferPayload>
        prepareForNextTransfer(rx_state);
 8001270:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001272:	f000 fda0 	bl	8001db6 <prepareForNextTransfer>

        if (rx_state->calculated_crc == rx_state->payload_crc)
 8001276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001278:	8a9a      	ldrh	r2, [r3, #20]
 800127a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800127c:	8b1b      	ldrh	r3, [r3, #24]
 800127e:	429a      	cmp	r2, r3
 8001280:	d101      	bne.n	8001286 <canardHandleRxFrame+0x716>
        {
            return CANARD_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e00f      	b.n	80012a6 <canardHandleRxFrame+0x736>
        }
        else
        {
            return -CANARD_ERROR_RX_BAD_CRC;
 8001286:	f06f 0310 	mvn.w	r3, #16
 800128a:	e00c      	b.n	80012a6 <canardHandleRxFrame+0x736>
        }
    }

    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 800128c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800128e:	7ddb      	ldrb	r3, [r3, #23]
 8001290:	b25b      	sxtb	r3, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	09db      	lsrs	r3, r3, #7
 8001298:	b2d9      	uxtb	r1, r3
 800129a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800129c:	7dd3      	ldrb	r3, [r2, #23]
 800129e:	f361 13c7 	bfi	r3, r1, #7, #1
 80012a2:	75d3      	strb	r3, [r2, #23]
    return CANARD_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3774      	adds	r7, #116	; 0x74
 80012aa:	46bd      	mov	sp, r7
 80012ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080012b0 <canardCleanupStaleTransfers>:

void canardCleanupStaleTransfers(CanardInstance* ins, uint64_t current_time_usec)
{
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	e9c7 2300 	strd	r2, r3, [r7]
    CanardRxState* prev = ins->rx_states, * state = ins->rx_states;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	613b      	str	r3, [r7, #16]

    while (state != NULL)
 80012c8:	e053      	b.n	8001372 <canardCleanupStaleTransfers+0xc2>
    {
        if ((current_time_usec - state->timestamp_usec) > TRANSFER_TIMEOUT_USEC)
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012d4:	1a84      	subs	r4, r0, r2
 80012d6:	eb61 0503 	sbc.w	r5, r1, r3
 80012da:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <canardCleanupStaleTransfers+0xd4>)
 80012dc:	429c      	cmp	r4, r3
 80012de:	f175 0300 	sbcs.w	r3, r5, #0
 80012e2:	d33a      	bcc.n	800135a <canardCleanupStaleTransfers+0xaa>
        {
            if (state == ins->rx_states)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d11c      	bne.n	8001328 <canardCleanupStaleTransfers+0x78>
            {
                releaseStatePayload(ins, state);
 80012ee:	6939      	ldr	r1, [r7, #16]
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 fe60 	bl	8001fb6 <releaseStatePayload>
                ins->rx_states = canardRxFromIdx(&ins->allocator, ins->rx_states->next);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f103 020c 	add.w	r2, r3, #12
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	4610      	mov	r0, r2
 8001306:	f7ff fb47 	bl	8000998 <canardRxFromIdx>
 800130a:	4602      	mov	r2, r0
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	621a      	str	r2, [r3, #32]
                freeBlock(&ins->allocator, state);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	330c      	adds	r3, #12
 8001314:	6939      	ldr	r1, [r7, #16]
 8001316:	4618      	mov	r0, r3
 8001318:	f001 fa1b 	bl	8002752 <freeBlock>
                state = ins->rx_states;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	613b      	str	r3, [r7, #16]
                prev = state;
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e024      	b.n	8001372 <canardCleanupStaleTransfers+0xc2>
            }
            else
            {
                releaseStatePayload(ins, state);
 8001328:	6939      	ldr	r1, [r7, #16]
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f000 fe43 	bl	8001fb6 <releaseStatePayload>
                prev->next = state->next;
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	601a      	str	r2, [r3, #0]
                freeBlock(&ins->allocator, state);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	330c      	adds	r3, #12
 800133c:	6939      	ldr	r1, [r7, #16]
 800133e:	4618      	mov	r0, r3
 8001340:	f001 fa07 	bl	8002752 <freeBlock>
                state = canardRxFromIdx(&ins->allocator, prev->next);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f103 020c 	add.w	r2, r3, #12
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4619      	mov	r1, r3
 8001350:	4610      	mov	r0, r2
 8001352:	f7ff fb21 	bl	8000998 <canardRxFromIdx>
 8001356:	6138      	str	r0, [r7, #16]
 8001358:	e00b      	b.n	8001372 <canardCleanupStaleTransfers+0xc2>
            }
        }
        else
        {
            prev = state;
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	617b      	str	r3, [r7, #20]
            state = canardRxFromIdx(&ins->allocator, state->next);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f103 020c 	add.w	r2, r3, #12
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	4610      	mov	r0, r2
 800136c:	f7ff fb14 	bl	8000998 <canardRxFromIdx>
 8001370:	6138      	str	r0, [r7, #16]
    while (state != NULL)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1a8      	bne.n	80012ca <canardCleanupStaleTransfers+0x1a>
            prev_item = item;
            item = item->next;
        }
    }
#endif
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bdb0      	pop	{r4, r5, r7, pc}
 8001382:	bf00      	nop
 8001384:	001e8481 	.word	0x001e8481

08001388 <canardDecodeScalar>:
int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                           uint32_t bit_offset,
                           uint8_t bit_length,
                           bool value_is_signed,
                           void* out_value)
{
 8001388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800138c:	b08d      	sub	sp, #52	; 0x34
 800138e:	af00      	add	r7, sp, #0
 8001390:	61f8      	str	r0, [r7, #28]
 8001392:	61b9      	str	r1, [r7, #24]
 8001394:	4611      	mov	r1, r2
 8001396:	461a      	mov	r2, r3
 8001398:	460b      	mov	r3, r1
 800139a:	75fb      	strb	r3, [r7, #23]
 800139c:	4613      	mov	r3, r2
 800139e:	75bb      	strb	r3, [r7, #22]
    if (transfer == NULL || out_value == NULL)
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <canardDecodeScalar+0x24>
 80013a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <canardDecodeScalar+0x2a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80013ac:	f06f 0301 	mvn.w	r3, #1
 80013b0:	e16e      	b.n	8001690 <canardDecodeScalar+0x308>
    }

    if (bit_length < 1 || bit_length > 64)
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <canardDecodeScalar+0x36>
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	2b40      	cmp	r3, #64	; 0x40
 80013bc:	d902      	bls.n	80013c4 <canardDecodeScalar+0x3c>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80013be:	f06f 0301 	mvn.w	r3, #1
 80013c2:	e165      	b.n	8001690 <canardDecodeScalar+0x308>
    }

    if (bit_length == 1 && value_is_signed)
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d105      	bne.n	80013d6 <canardDecodeScalar+0x4e>
 80013ca:	7dbb      	ldrb	r3, [r7, #22]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <canardDecodeScalar+0x4e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80013d0:	f06f 0301 	mvn.w	r3, #1
 80013d4:	e15c      	b.n	8001690 <canardDecodeScalar+0x308>
        uint64_t u64;
        int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));   // This is important
 80013d6:	f107 0320 	add.w	r3, r7, #32
 80013da:	2208      	movs	r2, #8
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f006 fdbc 	bl	8007f5c <memset>

    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 80013e4:	f107 0320 	add.w	r3, r7, #32
 80013e8:	7dfa      	ldrb	r2, [r7, #23]
 80013ea:	69b9      	ldr	r1, [r7, #24]
 80013ec:	69f8      	ldr	r0, [r7, #28]
 80013ee:	f000 ff9f 	bl	8002330 <descatterTransferPayload>
 80013f2:	4603      	mov	r3, r0
 80013f4:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (result <= 0)
 80013f6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc02      	bgt.n	8001404 <canardDecodeScalar+0x7c>
    {
        return result;
 80013fe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001402:	e145      	b.n	8001690 <canardDecodeScalar+0x308>
     * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
     * Extra most significant bits will be filled with zeroes, which is fine.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d018      	beq.n	8001442 <canardDecodeScalar+0xba>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 8001410:	7dfb      	ldrb	r3, [r7, #23]
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	3320      	adds	r3, #32
 8001418:	f107 0210 	add.w	r2, r7, #16
 800141c:	4413      	add	r3, r2
 800141e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001422:	461a      	mov	r2, r3
 8001424:	7dfb      	ldrb	r3, [r7, #23]
 8001426:	425b      	negs	r3, r3
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	411a      	asrs	r2, r3
 800142e:	7dfb      	ldrb	r3, [r7, #23]
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	3320      	adds	r3, #32
 8001438:	f107 0110 	add.w	r1, r7, #16
 800143c:	440b      	add	r3, r1
 800143e:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
     */
    uint8_t std_byte_length = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d103      	bne.n	8001456 <canardDecodeScalar+0xce>
 800144e:	2301      	movs	r3, #1
 8001450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001454:	e01e      	b.n	8001494 <canardDecodeScalar+0x10c>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 8001456:	7dfb      	ldrb	r3, [r7, #23]
 8001458:	2b08      	cmp	r3, #8
 800145a:	d803      	bhi.n	8001464 <canardDecodeScalar+0xdc>
 800145c:	2301      	movs	r3, #1
 800145e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001462:	e017      	b.n	8001494 <canardDecodeScalar+0x10c>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	2b10      	cmp	r3, #16
 8001468:	d803      	bhi.n	8001472 <canardDecodeScalar+0xea>
 800146a:	2302      	movs	r3, #2
 800146c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001470:	e010      	b.n	8001494 <canardDecodeScalar+0x10c>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 8001472:	7dfb      	ldrb	r3, [r7, #23]
 8001474:	2b20      	cmp	r3, #32
 8001476:	d803      	bhi.n	8001480 <canardDecodeScalar+0xf8>
 8001478:	2304      	movs	r3, #4
 800147a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800147e:	e009      	b.n	8001494 <canardDecodeScalar+0x10c>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 8001480:	7dfb      	ldrb	r3, [r7, #23]
 8001482:	2b40      	cmp	r3, #64	; 0x40
 8001484:	d803      	bhi.n	800148e <canardDecodeScalar+0x106>
 8001486:	2308      	movs	r3, #8
 8001488:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800148c:	e002      	b.n	8001494 <canardDecodeScalar+0x10c>
    else
    {
        CANARD_ASSERT(false);
        return -CANARD_ERROR_INTERNAL;
 800148e:	f06f 0308 	mvn.w	r3, #8
 8001492:	e0fd      	b.n	8001690 <canardDecodeScalar+0x308>
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

    /*
     * Flipping the byte order if needed.
     */
    if (isBigEndian())
 8001494:	f001 f841 	bl	800251a <isBigEndian>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d007      	beq.n	80014ae <canardDecodeScalar+0x126>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 800149e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80014a2:	f107 0320 	add.w	r3, r7, #32
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 f847 	bl	800253c <swapByteOrder>

    /*
     * Extending the sign bit if needed. I miss templates.
     * Note that we operate on unsigned values in order to avoid undefined behaviors.
     */
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 80014ae:	7dbb      	ldrb	r3, [r7, #22]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 809b 	beq.w	80015ec <canardDecodeScalar+0x264>
 80014b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014ba:	00da      	lsls	r2, r3, #3
 80014bc:	7dfb      	ldrb	r3, [r7, #23]
 80014be:	429a      	cmp	r2, r3
 80014c0:	f000 8094 	beq.w	80015ec <canardDecodeScalar+0x264>
    {
        if (bit_length <= 8)
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d819      	bhi.n	80014fe <canardDecodeScalar+0x176>
        {
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 80014ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014ce:	461a      	mov	r2, r3
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 8085 	beq.w	80015ec <canardDecodeScalar+0x264>
            {
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 80014e2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
 80014e8:	2101      	movs	r1, #1
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	425b      	negs	r3, r3
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	f887 3020 	strb.w	r3, [r7, #32]
 80014fc:	e076      	b.n	80015ec <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 16)
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	2b10      	cmp	r3, #16
 8001502:	d815      	bhi.n	8001530 <canardDecodeScalar+0x1a8>
        {
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 8001504:	8c3b      	ldrh	r3, [r7, #32]
 8001506:	461a      	mov	r2, r3
 8001508:	7dfb      	ldrb	r3, [r7, #23]
 800150a:	3b01      	subs	r3, #1
 800150c:	fa22 f303 	lsr.w	r3, r2, r3
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d069      	beq.n	80015ec <canardDecodeScalar+0x264>
            {
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 8001518:	8c3a      	ldrh	r2, [r7, #32]
 800151a:	7dfb      	ldrb	r3, [r7, #23]
 800151c:	2101      	movs	r1, #1
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	b29b      	uxth	r3, r3
 8001524:	425b      	negs	r3, r3
 8001526:	b29b      	uxth	r3, r3
 8001528:	4313      	orrs	r3, r2
 800152a:	b29b      	uxth	r3, r3
 800152c:	843b      	strh	r3, [r7, #32]
 800152e:	e05d      	b.n	80015ec <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 32)
 8001530:	7dfb      	ldrb	r3, [r7, #23]
 8001532:	2b20      	cmp	r3, #32
 8001534:	d811      	bhi.n	800155a <canardDecodeScalar+0x1d2>
        {
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 8001536:	6a3a      	ldr	r2, [r7, #32]
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	3b01      	subs	r3, #1
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d051      	beq.n	80015ec <canardDecodeScalar+0x264>
            {
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 8001548:	6a3a      	ldr	r2, [r7, #32]
 800154a:	7dfb      	ldrb	r3, [r7, #23]
 800154c:	2101      	movs	r1, #1
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	425b      	negs	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	623b      	str	r3, [r7, #32]
 8001558:	e048      	b.n	80015ec <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length < 64)   // Strictly less, this is not a typo
 800155a:	7dfb      	ldrb	r3, [r7, #23]
 800155c:	2b3f      	cmp	r3, #63	; 0x3f
 800155e:	d842      	bhi.n	80015e6 <canardDecodeScalar+0x25e>
        {
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 8001560:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001564:	7df9      	ldrb	r1, [r7, #23]
 8001566:	1e48      	subs	r0, r1, #1
 8001568:	f1c0 0620 	rsb	r6, r0, #32
 800156c:	f1a0 0120 	sub.w	r1, r0, #32
 8001570:	fa22 f400 	lsr.w	r4, r2, r0
 8001574:	fa03 f606 	lsl.w	r6, r3, r6
 8001578:	4334      	orrs	r4, r6
 800157a:	fa23 f101 	lsr.w	r1, r3, r1
 800157e:	430c      	orrs	r4, r1
 8001580:	fa23 f500 	lsr.w	r5, r3, r0
 8001584:	f004 0301 	and.w	r3, r4, #1
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001592:	460b      	mov	r3, r1
 8001594:	4313      	orrs	r3, r2
 8001596:	d029      	beq.n	80015ec <canardDecodeScalar+0x264>
            {
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 8001598:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800159c:	7df9      	ldrb	r1, [r7, #23]
 800159e:	f04f 0201 	mov.w	r2, #1
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	f1a1 0620 	sub.w	r6, r1, #32
 80015aa:	f1c1 0020 	rsb	r0, r1, #32
 80015ae:	fa03 f901 	lsl.w	r9, r3, r1
 80015b2:	fa02 f606 	lsl.w	r6, r2, r6
 80015b6:	ea49 0906 	orr.w	r9, r9, r6
 80015ba:	fa22 f000 	lsr.w	r0, r2, r0
 80015be:	ea49 0900 	orr.w	r9, r9, r0
 80015c2:	fa02 f801 	lsl.w	r8, r2, r1
 80015c6:	2300      	movs	r3, #0
 80015c8:	f1d8 0a00 	rsbs	sl, r8, #0
 80015cc:	eb63 0b09 	sbc.w	fp, r3, r9
 80015d0:	ea44 030a 	orr.w	r3, r4, sl
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	ea45 030b 	orr.w	r3, r5, fp
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80015e0:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80015e4:	e002      	b.n	80015ec <canardDecodeScalar+0x264>
            }
        }
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 80015e6:	f06f 0308 	mvn.w	r3, #8
 80015ea:	e051      	b.n	8001690 <canardDecodeScalar+0x308>
    }

    /*
     * Copying the result out.
     */
    if (value_is_signed)
 80015ec:	7dbb      	ldrb	r3, [r7, #22]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d022      	beq.n	8001638 <canardDecodeScalar+0x2b0>
    {
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d804      	bhi.n	8001602 <canardDecodeScalar+0x27a>
 80015f8:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80015fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	e044      	b.n	800168c <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	2b10      	cmp	r3, #16
 8001606:	d804      	bhi.n	8001612 <canardDecodeScalar+0x28a>
 8001608:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800160c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800160e:	801a      	strh	r2, [r3, #0]
 8001610:	e03c      	b.n	800168c <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	2b20      	cmp	r3, #32
 8001616:	d803      	bhi.n	8001620 <canardDecodeScalar+0x298>
 8001618:	6a3a      	ldr	r2, [r7, #32]
 800161a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e035      	b.n	800168c <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b40      	cmp	r3, #64	; 0x40
 8001624:	d805      	bhi.n	8001632 <canardDecodeScalar+0x2aa>
 8001626:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800162a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800162c:	e9c1 2300 	strd	r2, r3, [r1]
 8001630:	e02c      	b.n	800168c <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8001632:	f06f 0308 	mvn.w	r3, #8
 8001636:	e02b      	b.n	8001690 <canardDecodeScalar+0x308>
        }
    }
    else
    {
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d104      	bne.n	8001648 <canardDecodeScalar+0x2c0>
 800163e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	e021      	b.n	800168c <canardDecodeScalar+0x304>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	2b08      	cmp	r3, #8
 800164c:	d804      	bhi.n	8001658 <canardDecodeScalar+0x2d0>
 800164e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001654:	701a      	strb	r2, [r3, #0]
 8001656:	e019      	b.n	800168c <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	2b10      	cmp	r3, #16
 800165c:	d803      	bhi.n	8001666 <canardDecodeScalar+0x2de>
 800165e:	8c3a      	ldrh	r2, [r7, #32]
 8001660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001662:	801a      	strh	r2, [r3, #0]
 8001664:	e012      	b.n	800168c <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	2b20      	cmp	r3, #32
 800166a:	d803      	bhi.n	8001674 <canardDecodeScalar+0x2ec>
 800166c:	6a3a      	ldr	r2, [r7, #32]
 800166e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e00b      	b.n	800168c <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 8001674:	7dfb      	ldrb	r3, [r7, #23]
 8001676:	2b40      	cmp	r3, #64	; 0x40
 8001678:	d805      	bhi.n	8001686 <canardDecodeScalar+0x2fe>
 800167a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800167e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001680:	e9c1 2300 	strd	r2, r3, [r1]
 8001684:	e002      	b.n	800168c <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8001686:	f06f 0308 	mvn.w	r3, #8
 800168a:	e001      	b.n	8001690 <canardDecodeScalar+0x308>
        }
    }

    CANARD_ASSERT(result <= bit_length);
    CANARD_ASSERT(result > 0);
    return result;
 800168c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
}
 8001690:	4618      	mov	r0, r3
 8001692:	3734      	adds	r7, #52	; 0x34
 8001694:	46bd      	mov	sp, r7
 8001696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800169a <canardEncodeScalar>:

void canardEncodeScalar(void* destination,
                        uint32_t bit_offset,
                        uint8_t bit_length,
                        const void* value)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b08a      	sub	sp, #40	; 0x28
 800169e:	af02      	add	r7, sp, #8
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	4613      	mov	r3, r2
 80016a8:	71fb      	strb	r3, [r7, #7]
     * Maybe not the best solution, but it simplifies the API.
     */
    CANARD_ASSERT(destination != NULL);
    CANARD_ASSERT(value != NULL);

    if (bit_length > 64)
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b40      	cmp	r3, #64	; 0x40
 80016ae:	d901      	bls.n	80016b4 <canardEncodeScalar+0x1a>
    {
        CANARD_ASSERT(false);
        bit_length = 64;
 80016b0:	2340      	movs	r3, #64	; 0x40
 80016b2:	71fb      	strb	r3, [r7, #7]
    }

    if (bit_length < 1)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <canardEncodeScalar+0x24>
    {
        CANARD_ASSERT(false);
        bit_length = 1;
 80016ba:	2301      	movs	r3, #1
 80016bc:	71fb      	strb	r3, [r7, #7]
        uint32_t u32;
        uint64_t u64;
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	2208      	movs	r2, #8
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f006 fc48 	bl	8007f5c <memset>

    uint8_t std_byte_length = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	77fb      	strb	r3, [r7, #31]

    // Extra most significant bits can be safely ignored here.
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d105      	bne.n	80016e2 <canardEncodeScalar+0x48>
 80016d6:	2301      	movs	r3, #1
 80016d8:	77fb      	strb	r3, [r7, #31]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	743b      	strb	r3, [r7, #16]
 80016e0:	e024      	b.n	800172c <canardEncodeScalar+0x92>
    else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d805      	bhi.n	80016f4 <canardEncodeScalar+0x5a>
 80016e8:	2301      	movs	r3, #1
 80016ea:	77fb      	strb	r3, [r7, #31]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	743b      	strb	r3, [r7, #16]
 80016f2:	e01b      	b.n	800172c <canardEncodeScalar+0x92>
    else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	2b10      	cmp	r3, #16
 80016f8:	d805      	bhi.n	8001706 <canardEncodeScalar+0x6c>
 80016fa:	2302      	movs	r3, #2
 80016fc:	77fb      	strb	r3, [r7, #31]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	823b      	strh	r3, [r7, #16]
 8001704:	e012      	b.n	800172c <canardEncodeScalar+0x92>
    else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b20      	cmp	r3, #32
 800170a:	d805      	bhi.n	8001718 <canardEncodeScalar+0x7e>
 800170c:	2304      	movs	r3, #4
 800170e:	77fb      	strb	r3, [r7, #31]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	e009      	b.n	800172c <canardEncodeScalar+0x92>
    else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	2b40      	cmp	r3, #64	; 0x40
 800171c:	d806      	bhi.n	800172c <canardEncodeScalar+0x92>
 800171e:	2308      	movs	r3, #8
 8001720:	77fb      	strb	r3, [r7, #31]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	e9c7 2304 	strd	r2, r3, [r7, #16]
            storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
        }
    }
#endif

    if (isBigEndian())
 800172c:	f000 fef5 	bl	800251a <isBigEndian>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d006      	beq.n	8001744 <canardEncodeScalar+0xaa>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 8001736:	7ffa      	ldrb	r2, [r7, #31]
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fefc 	bl	800253c <swapByteOrder>
     * Extra least significant bits will be filled with zeroes, which is fine.
     * Extra most significant bits will be discarded here.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d014      	beq.n	800177a <canardEncodeScalar+0xe0>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	08db      	lsrs	r3, r3, #3
 8001754:	b2db      	uxtb	r3, r3
 8001756:	3320      	adds	r3, #32
 8001758:	443b      	add	r3, r7
 800175a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800175e:	461a      	mov	r2, r3
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	425b      	negs	r3, r3
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	409a      	lsls	r2, r3
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	b2db      	uxtb	r3, r3
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	3320      	adds	r3, #32
 8001774:	443b      	add	r3, r7
 8001776:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Now, the storage contains properly serialized scalar. Copying it out.
     */
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 800177a:	79fa      	ldrb	r2, [r7, #7]
 800177c:	f107 0010 	add.w	r0, r7, #16
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2100      	movs	r1, #0
 8001788:	f000 fd5b 	bl	8002242 <copyBitArray>
}
 800178c:	bf00      	nop
 800178e:	3720      	adds	r7, #32
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <canardReleaseRxTransferPayload>:

void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    while (transfer->payload_middle != NULL)
 800179e:	e00f      	b.n	80017c0 <canardReleaseRxTransferPayload+0x2c>
    {
        CanardBufferBlock* const temp = transfer->payload_middle->next;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]
        freeBlock(&ins->allocator, transfer->payload_middle);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f103 020c 	add.w	r2, r3, #12
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	4619      	mov	r1, r3
 80017b4:	4610      	mov	r0, r2
 80017b6:	f000 ffcc 	bl	8002752 <freeBlock>
        transfer->payload_middle = temp;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	60da      	str	r2, [r3, #12]
    while (transfer->payload_middle != NULL)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1eb      	bne.n	80017a0 <canardReleaseRxTransferPayload+0xc>
    }

    transfer->payload_middle = NULL;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
    transfer->payload_head = NULL;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
    transfer->payload_tail = NULL;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
    transfer->payload_len = 0;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2200      	movs	r2, #0
 80017de:	829a      	strh	r2, [r3, #20]
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <canardConvertNativeFloatToFloat16>:
{
    return ins->allocator.statistics;
}

uint16_t canardConvertNativeFloatToFloat16(float value)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b08b      	sub	sp, #44	; 0x2c
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        uint32_t u;
        float f;
    };

    const union FP32 f32inf = { 255UL << 23U };
 80017f2:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80017f6:	617b      	str	r3, [r7, #20]
    const union FP32 f16inf = { 31UL << 23U };
 80017f8:	f04f 6378 	mov.w	r3, #260046848	; 0xf800000
 80017fc:	613b      	str	r3, [r7, #16]
    const union FP32 magic = { 15UL << 23U };
 80017fe:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
 8001802:	60fb      	str	r3, [r7, #12]
    const uint32_t sign_mask = 0x80000000UL;
 8001804:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001808:	623b      	str	r3, [r7, #32]
    const uint32_t round_mask = 0xFFFFF000UL;
 800180a:	4b21      	ldr	r3, [pc, #132]	; (8001890 <canardConvertNativeFloatToFloat16+0xa8>)
 800180c:	61fb      	str	r3, [r7, #28]

    union FP32 in;
    in.f = value;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60bb      	str	r3, [r7, #8]
    uint32_t sign = in.u & sign_mask;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	6a3a      	ldr	r2, [r7, #32]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
    in.u ^= sign;
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	4053      	eors	r3, r2
 8001820:	60bb      	str	r3, [r7, #8]

    uint16_t out = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (in.u >= f32inf.u)
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	429a      	cmp	r2, r3
 800182c:	d30a      	bcc.n	8001844 <canardConvertNativeFloatToFloat16+0x5c>
    {
        out = (in.u > f32inf.u) ? (uint16_t)0x7FFFU : (uint16_t)0x7C00U;
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	429a      	cmp	r2, r3
 8001834:	d902      	bls.n	800183c <canardConvertNativeFloatToFloat16+0x54>
 8001836:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800183a:	e001      	b.n	8001840 <canardConvertNativeFloatToFloat16+0x58>
 800183c:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8001840:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001842:	e018      	b.n	8001876 <canardConvertNativeFloatToFloat16+0x8e>
    }
    else
    {
        in.u &= round_mask;
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
        in.f *= magic.f;
 800184c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001850:	edd7 7a03 	vldr	s15, [r7, #12]
 8001854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001858:	edc7 7a02 	vstr	s15, [r7, #8]
        in.u -= round_mask;
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	60bb      	str	r3, [r7, #8]
        if (in.u > f16inf.u)
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d901      	bls.n	8001870 <canardConvertNativeFloatToFloat16+0x88>
        {
            in.u = f16inf.u;
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	60bb      	str	r3, [r7, #8]
        }
        out = (uint16_t)(in.u >> 13U);
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	0b5b      	lsrs	r3, r3, #13
 8001874:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    out |= (uint16_t)(sign >> 16U);
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	0c1b      	lsrs	r3, r3, #16
 800187a:	b29a      	uxth	r2, r3
 800187c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800187e:	4313      	orrs	r3, r2
 8001880:	84fb      	strh	r3, [r7, #38]	; 0x26

    return out;
 8001882:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001884:	4618      	mov	r0, r3
 8001886:	372c      	adds	r7, #44	; 0x2c
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	fffff000 	.word	0xfffff000

08001894 <canardConvertFloat16ToNativeFloat>:

float canardConvertFloat16ToNativeFloat(uint16_t value)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
    {
        uint32_t u;
        float f;
    };

    const union FP32 magic = { (254UL - 15UL) << 23U };
 800189e:	f04f 43ef 	mov.w	r3, #2004877312	; 0x77800000
 80018a2:	617b      	str	r3, [r7, #20]
    const union FP32 was_inf_nan = { (127UL + 16UL) << 23U };
 80018a4:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 80018a8:	613b      	str	r3, [r7, #16]
    union FP32 out;

    out.u = (value & 0x7FFFU) << 13U;
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	035a      	lsls	r2, r3, #13
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <canardConvertFloat16ToNativeFloat+0x6c>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
    out.f *= magic.f;
 80018b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80018b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80018bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c0:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.f >= was_inf_nan.f)
 80018c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80018c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	db03      	blt.n	80018de <canardConvertFloat16ToNativeFloat+0x4a>
    {
        out.u |= 255UL << 23U;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 80018dc:	60fb      	str	r3, [r7, #12]
    }
    out.u |= (value & 0x8000UL) << 16U;
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	041b      	lsls	r3, r3, #16
 80018e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]

    return out.f;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	ee07 3a90 	vmov	s15, r3
}
 80018f2:	eeb0 0a67 	vmov.f32	s0, s15
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	0fffe000 	.word	0x0fffe000

08001904 <computeTransferIDForwardDistance>:

/*
 * Internal (static functions)
 */
CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	460a      	mov	r2, r1
 800190e:	71fb      	strb	r3, [r7, #7]
 8001910:	4613      	mov	r3, r2
 8001912:	71bb      	strb	r3, [r7, #6]
    int16_t d = (int16_t)(a - b);
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	b29a      	uxth	r2, r3
 8001918:	79bb      	ldrb	r3, [r7, #6]
 800191a:	b29b      	uxth	r3, r3
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	b29b      	uxth	r3, r3
 8001920:	81fb      	strh	r3, [r7, #14]
    if (d < 0)
 8001922:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001926:	2b00      	cmp	r3, #0
 8001928:	da03      	bge.n	8001932 <computeTransferIDForwardDistance+0x2e>
    {
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 800192a:	89fb      	ldrh	r3, [r7, #14]
 800192c:	3320      	adds	r3, #32
 800192e:	b29b      	uxth	r3, r3
 8001930:	81fb      	strh	r3, [r7, #14]
    }
    return d;
 8001932:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <incrementTransferID>:

CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(transfer_id != NULL);

    (*transfer_id)++;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	b2da      	uxtb	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	701a      	strb	r2, [r3, #0]
    if (*transfer_id >= 32)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b1f      	cmp	r3, #31
 800195c:	d902      	bls.n	8001964 <incrementTransferID+0x22>
    {
        *transfer_id = 0;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
    }
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <dlcToDataLength>:

CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
    /*
    Data Length Code      9  10  11  12  13  14  15
    Number of data bytes 12  16  20  24  32  48  64
    */
    if (dlc <= 8) {
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	2b08      	cmp	r3, #8
 800197e:	d801      	bhi.n	8001984 <dlcToDataLength+0x14>
        return dlc;
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	e01e      	b.n	80019c2 <dlcToDataLength+0x52>
    } else if (dlc == 9) {
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	2b09      	cmp	r3, #9
 8001988:	d101      	bne.n	800198e <dlcToDataLength+0x1e>
        return 12;
 800198a:	230c      	movs	r3, #12
 800198c:	e019      	b.n	80019c2 <dlcToDataLength+0x52>
    } else if (dlc == 10) {
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	2b0a      	cmp	r3, #10
 8001992:	d101      	bne.n	8001998 <dlcToDataLength+0x28>
        return 16;
 8001994:	2310      	movs	r3, #16
 8001996:	e014      	b.n	80019c2 <dlcToDataLength+0x52>
    } else if (dlc == 11) {
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	2b0b      	cmp	r3, #11
 800199c:	d101      	bne.n	80019a2 <dlcToDataLength+0x32>
        return 20;
 800199e:	2314      	movs	r3, #20
 80019a0:	e00f      	b.n	80019c2 <dlcToDataLength+0x52>
    } else if (dlc == 12) {
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	2b0c      	cmp	r3, #12
 80019a6:	d101      	bne.n	80019ac <dlcToDataLength+0x3c>
        return 24;
 80019a8:	2318      	movs	r3, #24
 80019aa:	e00a      	b.n	80019c2 <dlcToDataLength+0x52>
    } else if (dlc == 13) {
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	2b0d      	cmp	r3, #13
 80019b0:	d101      	bne.n	80019b6 <dlcToDataLength+0x46>
        return 32;
 80019b2:	2320      	movs	r3, #32
 80019b4:	e005      	b.n	80019c2 <dlcToDataLength+0x52>
    } else if (dlc == 14) {
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	2b0e      	cmp	r3, #14
 80019ba:	d101      	bne.n	80019c0 <dlcToDataLength+0x50>
        return 48;
 80019bc:	2330      	movs	r3, #48	; 0x30
 80019be:	e000      	b.n	80019c2 <dlcToDataLength+0x52>
    }
    return 64;
 80019c0:	2340      	movs	r3, #64	; 0x40
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <dataLengthToDlc>:

CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	80fb      	strh	r3, [r7, #6]
    if (data_length <= 8) {
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d801      	bhi.n	80019e2 <dataLengthToDlc+0x14>
        return data_length;
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	e01e      	b.n	8001a20 <dataLengthToDlc+0x52>
    } else if (data_length <= 12) {
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	2b0c      	cmp	r3, #12
 80019e6:	d801      	bhi.n	80019ec <dataLengthToDlc+0x1e>
        return 9;
 80019e8:	2309      	movs	r3, #9
 80019ea:	e019      	b.n	8001a20 <dataLengthToDlc+0x52>
    } else if (data_length <= 16) {
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	2b10      	cmp	r3, #16
 80019f0:	d801      	bhi.n	80019f6 <dataLengthToDlc+0x28>
        return 10;
 80019f2:	230a      	movs	r3, #10
 80019f4:	e014      	b.n	8001a20 <dataLengthToDlc+0x52>
    } else if (data_length <= 20) {
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	2b14      	cmp	r3, #20
 80019fa:	d801      	bhi.n	8001a00 <dataLengthToDlc+0x32>
        return 11;
 80019fc:	230b      	movs	r3, #11
 80019fe:	e00f      	b.n	8001a20 <dataLengthToDlc+0x52>
    } else if (data_length <= 24) {
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	2b18      	cmp	r3, #24
 8001a04:	d801      	bhi.n	8001a0a <dataLengthToDlc+0x3c>
        return 12;
 8001a06:	230c      	movs	r3, #12
 8001a08:	e00a      	b.n	8001a20 <dataLengthToDlc+0x52>
    } else if (data_length <= 32) {
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	2b20      	cmp	r3, #32
 8001a0e:	d801      	bhi.n	8001a14 <dataLengthToDlc+0x46>
        return 13;
 8001a10:	230d      	movs	r3, #13
 8001a12:	e005      	b.n	8001a20 <dataLengthToDlc+0x52>
    } else if (data_length <= 48) {
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	2b30      	cmp	r3, #48	; 0x30
 8001a18:	d801      	bhi.n	8001a1e <dataLengthToDlc+0x50>
        return 14;
 8001a1a:	230e      	movs	r3, #14
 8001a1c:	e000      	b.n	8001a20 <dataLengthToDlc+0x52>
    }
    return 15;
 8001a1e:	230f      	movs	r3, #15
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <enqueueTxFrames>:
CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                        uint32_t can_id,
                                        uint16_t crc,
                                        CanardTxTransfer* transfer
)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	80fb      	strh	r3, [r7, #6]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

    if (transfer->inout_transfer_id == NULL)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <enqueueTxFrames+0x1e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001a44:	f06f 0301 	mvn.w	r3, #1
 8001a48:	e0f9      	b.n	8001c3e <enqueueTxFrames+0x212>
    }

    if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	8c1b      	ldrh	r3, [r3, #32]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d006      	beq.n	8001a60 <enqueueTxFrames+0x34>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d102      	bne.n	8001a60 <enqueueTxFrames+0x34>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001a5a:	f06f 0301 	mvn.w	r3, #1
 8001a5e:	e0ee      	b.n	8001c3e <enqueueTxFrames+0x212>
    }

    int16_t result = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	84fb      	strh	r3, [r7, #38]	; 0x26
#if CANARD_ENABLE_CANFD
    uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
#else
    uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 8001a64:	2308      	movs	r3, #8
 8001a66:	77fb      	strb	r3, [r7, #31]
#endif
    if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	8c1a      	ldrh	r2, [r3, #32]
 8001a6c:	7ffb      	ldrb	r3, [r7, #31]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d24b      	bcs.n	8001b0c <enqueueTxFrames+0xe0>
    {
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	330c      	adds	r3, #12
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 f929 	bl	8001cd0 <createTxItem>
 8001a7e:	6178      	str	r0, [r7, #20]
        if (queue_item == NULL)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <enqueueTxFrames+0x60>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8001a86:	f06f 0302 	mvn.w	r3, #2
 8001a8a:	e0d8      	b.n	8001c3e <enqueueTxFrames+0x212>
        }

        memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f103 0008 	add.w	r0, r3, #8
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	69d9      	ldr	r1, [r3, #28]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	8c1b      	ldrh	r3, [r3, #32]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f006 fb08 	bl	80080b0 <memcpy>

        transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	8c1b      	ldrh	r3, [r3, #32]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff90 	bl	80019ce <dataLengthToDlc>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff5d 	bl	8001970 <dlcToDataLength>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	841a      	strh	r2, [r3, #32]
        queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	8c1b      	ldrh	r3, [r3, #32]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	741a      	strb	r2, [r3, #16]
        queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	f003 031f 	and.w	r3, r3, #31
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	8c12      	ldrh	r2, [r2, #32]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	440b      	add	r3, r1
 8001aea:	721a      	strb	r2, [r3, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	605a      	str	r2, [r3, #4]
        queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
        queue_item->frame.canfd = transfer->canfd;
#endif
        pushTxQueue(ins, queue_item);
 8001af6:	6979      	ldr	r1, [r7, #20]
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 f8a4 	bl	8001c46 <pushTxQueue>
        result++;
 8001afe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3301      	adds	r3, #1
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b0a:	e096      	b.n	8001c3a <enqueueTxFrames+0x20e>
    }
    else                                                                    // Multi frame transfer
    {
        uint16_t data_index = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	84bb      	strh	r3, [r7, #36]	; 0x24
        uint8_t toggle = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        uint8_t sot_eot = 0x80;
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        CanardTxQueueItem* queue_item = NULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]

        while (transfer->payload_len - data_index != 0)
 8001b20:	e085      	b.n	8001c2e <enqueueTxFrames+0x202>
        {
            queue_item = createTxItem(&ins->allocator);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	330c      	adds	r3, #12
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f8d2 	bl	8001cd0 <createTxItem>
 8001b2c:	61b8      	str	r0, [r7, #24]
            if (queue_item == NULL)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <enqueueTxFrames+0x10e>
            {
                CANARD_ASSERT(false);
                return -CANARD_ERROR_OUT_OF_MEMORY;          // TODO: Purge all frames enqueued so far
 8001b34:	f06f 0302 	mvn.w	r3, #2
 8001b38:	e081      	b.n	8001c3e <enqueueTxFrames+0x212>
            }

            uint16_t i = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	843b      	strh	r3, [r7, #32]
            if (data_index == 0)
 8001b3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10c      	bne.n	8001b5e <enqueueTxFrames+0x132>
            {
                // add crc
                queue_item->frame.data[0] = (uint8_t) (crc);
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	721a      	strb	r2, [r3, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	0a1b      	lsrs	r3, r3, #8
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	725a      	strb	r2, [r3, #9]
                i = 2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	843b      	strh	r3, [r7, #32]
 8001b5c:	e012      	b.n	8001b84 <enqueueTxFrames+0x158>
            }
            else
            {
                i = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	843b      	strh	r3, [r7, #32]
            }

            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8001b62:	e00f      	b.n	8001b84 <enqueueTxFrames+0x158>
            {
                queue_item->frame.data[i] = transfer->payload[data_index];
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b6a:	441a      	add	r2, r3
 8001b6c:	8c3b      	ldrh	r3, [r7, #32]
 8001b6e:	7811      	ldrb	r1, [r2, #0]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4413      	add	r3, r2
 8001b74:	460a      	mov	r2, r1
 8001b76:	721a      	strb	r2, [r3, #8]
            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8001b78:	8c3b      	ldrh	r3, [r7, #32]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	843b      	strh	r3, [r7, #32]
 8001b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b80:	3301      	adds	r3, #1
 8001b82:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001b84:	8c3a      	ldrh	r2, [r7, #32]
 8001b86:	7ffb      	ldrb	r3, [r7, #31]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	da04      	bge.n	8001b98 <enqueueTxFrames+0x16c>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	8c1b      	ldrh	r3, [r3, #32]
 8001b92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d3e5      	bcc.n	8001b64 <enqueueTxFrames+0x138>
            }
            // tail byte
            sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	8c1b      	ldrh	r3, [r3, #32]
 8001b9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d002      	beq.n	8001ba8 <enqueueTxFrames+0x17c>
 8001ba2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ba6:	e000      	b.n	8001baa <enqueueTxFrames+0x17e>
 8001ba8:	2340      	movs	r3, #64	; 0x40
 8001baa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            
            i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 8001bae:	8c3b      	ldrh	r3, [r7, #32]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff0a 	bl	80019ce <dataLengthToDlc>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fed7 	bl	8001970 <dlcToDataLength>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	843b      	strh	r3, [r7, #32]
            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 8001bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bcc:	015b      	lsls	r3, r3, #5
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b2d9      	uxtb	r1, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	8c3b      	ldrh	r3, [r7, #32]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	b2d1      	uxtb	r1, r2
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4413      	add	r3, r2
 8001bee:	460a      	mov	r2, r1
 8001bf0:	721a      	strb	r2, [r3, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	605a      	str	r2, [r3, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 8001bfc:	8c3b      	ldrh	r3, [r7, #32]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	3301      	adds	r3, #1
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	741a      	strb	r2, [r3, #16]
            queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
            queue_item->frame.canfd = transfer->canfd;
#endif
            pushTxQueue(ins, queue_item);
 8001c08:	69b9      	ldr	r1, [r7, #24]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 f81b 	bl	8001c46 <pushTxQueue>

            result++;
 8001c10:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	84fb      	strh	r3, [r7, #38]	; 0x26
            toggle ^= 1;
 8001c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c20:	f083 0301 	eor.w	r3, r3, #1
 8001c24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            sot_eot = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while (transfer->payload_len - data_index != 0)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	8c1b      	ldrh	r3, [r3, #32]
 8001c32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c34:	429a      	cmp	r2, r3
 8001c36:	f47f af74 	bne.w	8001b22 <enqueueTxFrames+0xf6>
        }
    }

    return result;
 8001c3a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3728      	adds	r7, #40	; 0x28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <pushTxQueue>:

/**
 * Puts frame on on the TX queue. Higher priority placed first
 */
CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

    if (ins->tx_queue == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d103      	bne.n	8001c60 <pushTxQueue+0x1a>
    {
        ins->tx_queue = item;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
        return;
 8001c5e:	e034      	b.n	8001cca <pushTxQueue+0x84>
    }

    CanardTxQueueItem* queue = ins->tx_queue;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	60fb      	str	r3, [r7, #12]
    CanardTxQueueItem* previous = ins->tx_queue;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	60bb      	str	r3, [r7, #8]

    while (queue != NULL)
 8001c6c:	e02a      	b.n	8001cc4 <pushTxQueue+0x7e>
    {
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4619      	mov	r1, r3
 8001c78:	4610      	mov	r0, r2
 8001c7a:	f000 f840 	bl	8001cfe <isPriorityHigher>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d012      	beq.n	8001caa <pushTxQueue+0x64>
        {
            if (queue == ins->tx_queue)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d106      	bne.n	8001c9c <pushTxQueue+0x56>
            {
                item->next = queue;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	601a      	str	r2, [r3, #0]
                ins->tx_queue = item;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
            else
            {
                previous->next = item;
                item->next = queue;
            }
            return;
 8001c9a:	e016      	b.n	8001cca <pushTxQueue+0x84>
                previous->next = item;
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	601a      	str	r2, [r3, #0]
                item->next = queue;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	601a      	str	r2, [r3, #0]
            return;
 8001ca8:	e00f      	b.n	8001cca <pushTxQueue+0x84>
        }
        else
        {
            if (queue->next == NULL)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d103      	bne.n	8001cba <pushTxQueue+0x74>
            {
                queue->next = item;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	601a      	str	r2, [r3, #0]
                return;
 8001cb8:	e007      	b.n	8001cca <pushTxQueue+0x84>
            }
            else
            {
                previous = queue;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
                queue = queue->next;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60fb      	str	r3, [r7, #12]
    while (queue != NULL)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1d1      	bne.n	8001c6e <pushTxQueue+0x28>
            }
        }
    }
}
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <createTxItem>:

/**
 * Creates new tx queue item from allocator
 */
CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fd11 	bl	8002700 <allocateBlock>
 8001cde:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <createTxItem+0x1a>
    {
        return NULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e005      	b.n	8001cf6 <createTxItem+0x26>
    }
    memset(item, 0, sizeof(*item));
 8001cea:	2214      	movs	r2, #20
 8001cec:	2100      	movs	r1, #0
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f006 f934 	bl	8007f5c <memset>
    return item;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <isPriorityHigher>:

/**
 * Returns true if priority of rhs is higher than id
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b089      	sub	sp, #36	; 0x24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
    const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8001d0e:	61fb      	str	r3, [r7, #28]
    const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8001d16:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	0fdb      	lsrs	r3, r3, #31
 8001d1c:	75fb      	strb	r3, [r7, #23]
    const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0fdb      	lsrs	r3, r3, #31
 8001d22:	75bb      	strb	r3, [r7, #22]
    if (ext != rhs_ext)
 8001d24:	7dfa      	ldrb	r2, [r7, #23]
 8001d26:	7dbb      	ldrb	r3, [r7, #22]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d01d      	beq.n	8001d68 <isPriorityHigher+0x6a>
    {
        uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <isPriorityHigher+0x3a>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	0c9b      	lsrs	r3, r3, #18
 8001d36:	e000      	b.n	8001d3a <isPriorityHigher+0x3c>
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	613b      	str	r3, [r7, #16]
        uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 8001d3c:	7dbb      	ldrb	r3, [r7, #22]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <isPriorityHigher+0x4a>
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	0c9b      	lsrs	r3, r3, #18
 8001d46:	e000      	b.n	8001d4a <isPriorityHigher+0x4c>
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	60fb      	str	r3, [r7, #12]
        if (arb11 != rhs_arb11)
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d007      	beq.n	8001d64 <isPriorityHigher+0x66>
        {
            return arb11 < rhs_arb11;
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	bf34      	ite	cc
 8001d5c:	2301      	movcc	r3, #1
 8001d5e:	2300      	movcs	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	e022      	b.n	8001daa <isPriorityHigher+0xac>
        }
        else
        {
            return rhs_ext;
 8001d64:	7dbb      	ldrb	r3, [r7, #22]
 8001d66:	e020      	b.n	8001daa <isPriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	bf14      	ite	ne
 8001d72:	2301      	movne	r3, #1
 8001d74:	2300      	moveq	r3, #0
 8001d76:	757b      	strb	r3, [r7, #21]
    const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	bf14      	ite	ne
 8001d82:	2301      	movne	r3, #1
 8001d84:	2300      	moveq	r3, #0
 8001d86:	753b      	strb	r3, [r7, #20]
    if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d105      	bne.n	8001d9c <isPriorityHigher+0x9e>
 8001d90:	7d7a      	ldrb	r2, [r7, #21]
 8001d92:	7d3b      	ldrb	r3, [r7, #20]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <isPriorityHigher+0x9e>
    {
        return rhs_rtr;
 8001d98:	7d3b      	ldrb	r3, [r7, #20]
 8001d9a:	e006      	b.n	8001daa <isPriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_id < rhs_clean_id;
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	bf34      	ite	cc
 8001da4:	2301      	movcc	r3, #1
 8001da6:	2300      	movcs	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <prepareForNextTransfer>:

/**
 * preps the rx state for the next transfer. does not delete the state
 */
CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(state->buffer_blocks == CANARD_BUFFER_IDX_NONE);
    state->transfer_id++;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7ddb      	ldrb	r3, [r3, #23]
 8001dc2:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f003 031f 	and.w	r3, r3, #31
 8001dce:	b2d9      	uxtb	r1, r3
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	7dd3      	ldrb	r3, [r2, #23]
 8001dd4:	f361 0386 	bfi	r3, r1, #2, #5
 8001dd8:	75d3      	strb	r3, [r2, #23]
    state->payload_len = 0;
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	8ad3      	ldrh	r3, [r2, #22]
 8001dde:	f36f 0309 	bfc	r3, #0, #10
 8001de2:	82d3      	strh	r3, [r2, #22]
    state->next_toggle = 0;
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	7dd3      	ldrb	r3, [r2, #23]
 8001de8:	f36f 13c7 	bfc	r3, #7, #1
 8001dec:	75d3      	strb	r3, [r2, #23]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <extractDataType>:

/**
 * returns data type from id
 */
uint16_t extractDataType(uint32_t id)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b084      	sub	sp, #16
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
    if (extractTransferType(id) == CanardTransferTypeBroadcast)
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f81a 	bl	8001e3c <extractTransferType>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d10e      	bne.n	8001e2c <extractDataType+0x32>
    {
        uint16_t dtid = MSG_TYPE_FROM_ID(id);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	81fb      	strh	r3, [r7, #14]
        if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d103      	bne.n	8001e28 <extractDataType+0x2e>
        {
            dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 8001e20:	89fb      	ldrh	r3, [r7, #14]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	81fb      	strh	r3, [r7, #14]
        }
        return dtid;
 8001e28:	89fb      	ldrh	r3, [r7, #14]
 8001e2a:	e003      	b.n	8001e34 <extractDataType+0x3a>
    }
    else
    {
        return (uint16_t) SRV_TYPE_FROM_ID(id);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	b29b      	uxth	r3, r3
    }
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <extractTransferType>:

/**
 * returns transfer type from id
 */
CanardTransferType extractTransferType(uint32_t id)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
    const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	bf14      	ite	ne
 8001e4e:	2301      	movne	r3, #1
 8001e50:	2300      	moveq	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]
    if (!is_service)
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	f083 0301 	eor.w	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <extractTransferType+0x28>
    {
        return CanardTransferTypeBroadcast;
 8001e60:	2302      	movs	r3, #2
 8001e62:	e009      	b.n	8001e78 <extractTransferType+0x3c>
    }
    else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	0bdb      	lsrs	r3, r3, #15
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <extractTransferType+0x3a>
    {
        return CanardTransferTypeRequest;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <extractTransferType+0x3c>
    }
    else
    {
        return CanardTransferTypeResponse;
 8001e76:	2300      	movs	r3, #0
    }
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <traverseRxStates>:
/**
 * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
 * with either the Id or a new one at the end
 */
CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
    CanardRxState* states = ins->rx_states;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	60fb      	str	r3, [r7, #12]

    if (states == NULL) // initialize CanardRxStates
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d110      	bne.n	8001ebc <traverseRxStates+0x38>
    {
        states = createRxState(&ins->allocator, transfer_descriptor);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	330c      	adds	r3, #12
 8001e9e:	6839      	ldr	r1, [r7, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 f865 	bl	8001f70 <createRxState>
 8001ea6:	60f8      	str	r0, [r7, #12]

        if(states == NULL)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <traverseRxStates+0x2e>
        {
            return NULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e013      	b.n	8001eda <traverseRxStates+0x56>
        }

        ins->rx_states = states;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	621a      	str	r2, [r3, #32]
        return states;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	e00e      	b.n	8001eda <traverseRxStates+0x56>
    }

    states = findRxState(ins, transfer_descriptor);
 8001ebc:	6839      	ldr	r1, [r7, #0]
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f80f 	bl	8001ee2 <findRxState>
 8001ec4:	60f8      	str	r0, [r7, #12]
    if (states != NULL)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <traverseRxStates+0x4c>
    {
        return states;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	e004      	b.n	8001eda <traverseRxStates+0x56>
    }
    else
    {
        return prependRxState(ins, transfer_descriptor);
 8001ed0:	6839      	ldr	r1, [r7, #0]
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f827 	bl	8001f26 <prependRxState>
 8001ed8:	4603      	mov	r3, r0
    }
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <findRxState>:

/**
 * returns pointer to the rx state of transfer descriptor or null if not found
 */
CANARD_INTERNAL CanardRxState* findRxState(CanardInstance *ins, uint32_t transfer_descriptor)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
    CanardRxState *state = ins->rx_states;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	60fb      	str	r3, [r7, #12]
    while (state != NULL)
 8001ef2:	e010      	b.n	8001f16 <findRxState+0x34>
    {
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d101      	bne.n	8001f02 <findRxState+0x20>
        {
            return state;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	e00d      	b.n	8001f1e <findRxState+0x3c>
        }
        state = canardRxFromIdx(&ins->allocator, state->next);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f103 020c 	add.w	r2, r3, #12
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4610      	mov	r0, r2
 8001f10:	f7fe fd42 	bl	8000998 <canardRxFromIdx>
 8001f14:	60f8      	str	r0, [r7, #12]
    while (state != NULL)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1eb      	bne.n	8001ef4 <findRxState+0x12>
    }
    return NULL;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <prependRxState>:

/**
 * prepends rx state to the canard instance rx_states
 */
CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b084      	sub	sp, #16
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
    CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	330c      	adds	r3, #12
 8001f34:	6839      	ldr	r1, [r7, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f81a 	bl	8001f70 <createRxState>
 8001f3c:	60f8      	str	r0, [r7, #12]

    if(state == NULL)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <prependRxState+0x22>
    {
        return NULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	e00f      	b.n	8001f68 <prependRxState+0x42>
    }

    state->next = canardRxToIdx(&ins->allocator, ins->rx_states);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f103 020c 	add.w	r2, r3, #12
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4619      	mov	r1, r3
 8001f54:	4610      	mov	r0, r2
 8001f56:	f7fe fd2b 	bl	80009b0 <canardRxToIdx>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	601a      	str	r2, [r3, #0]
    ins->rx_states = state;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	621a      	str	r2, [r3, #32]
    return state;
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <createRxState>:

CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_descriptor)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08c      	sub	sp, #48	; 0x30
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
    CanardRxState init = {
 8001f7a:	f107 0308 	add.w	r3, r7, #8
 8001f7e:	2220      	movs	r2, #32
 8001f80:	2100      	movs	r1, #0
 8001f82:	4618      	mov	r0, r3
 8001f84:	f005 ffea 	bl	8007f5c <memset>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	61bb      	str	r3, [r7, #24]
        .next = CANARD_BUFFER_IDX_NONE,
        .buffer_blocks = CANARD_BUFFER_IDX_NONE,
        .dtid_tt_snid_dnid = transfer_descriptor
    };

    CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 fbb7 	bl	8002700 <allocateBlock>
 8001f92:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (state == NULL)
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <createRxState+0x2e>
    {
        return NULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e007      	b.n	8001fae <createRxState+0x3e>
    }
    memcpy(state, &init, sizeof(*state));
 8001f9e:	f107 0308 	add.w	r3, r7, #8
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fa8:	f006 f882 	bl	80080b0 <memcpy>

    return state;
 8001fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3730      	adds	r7, #48	; 0x30
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <releaseStatePayload>:

CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8001fc0:	e01b      	b.n	8001ffa <releaseStatePayload+0x44>
    {
        CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rxstate->buffer_blocks);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f103 020c 	add.w	r2, r3, #12
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4610      	mov	r0, r2
 8001fd0:	f7fe fcca 	bl	8000968 <canardBufferFromIdx>
 8001fd4:	60f8      	str	r0, [r7, #12]
        CanardBufferBlock* const temp = block->next;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60bb      	str	r3, [r7, #8]
        freeBlock(&ins->allocator, block);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	330c      	adds	r3, #12
 8001fe0:	68f9      	ldr	r1, [r7, #12]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fbb5 	bl	8002752 <freeBlock>
        rxstate->buffer_blocks = canardBufferToIdx(&ins->allocator, temp);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	330c      	adds	r3, #12
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fcc6 	bl	8000980 <canardBufferToIdx>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1df      	bne.n	8001fc2 <releaseStatePayload+0xc>
    }
    rxstate->payload_len = 0;
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	8ad3      	ldrh	r3, [r2, #22]
 8002006:	f36f 0309 	bfc	r3, #0, #10
 800200a:	82d3      	strh	r3, [r2, #22]
    return CANARD_OK;
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
}
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <bufferBlockPushBytes>:
 */
CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
                                             CanardRxState* state,
                                             const uint8_t* data,
                                             uint8_t data_len)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	70fb      	strb	r3, [r7, #3]
    uint16_t data_index = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	84fb      	strh	r3, [r7, #38]	; 0x26

    // if head is not full, add data to head
    if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	8adb      	ldrh	r3, [r3, #22]
 8002036:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800203a:	b29b      	uxth	r3, r3
 800203c:	2b05      	cmp	r3, #5
 800203e:	d036      	beq.n	80020ae <bufferBlockPushBytes+0x8e>
    {
        for (uint16_t i = (uint16_t)state->payload_len;
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	8adb      	ldrh	r3, [r3, #22]
 8002044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002048:	b29b      	uxth	r3, r3
 800204a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800204c:	e00e      	b.n	800206c <bufferBlockPushBytes+0x4c>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
             i++, data_index++)
        {
            state->buffer_head[i] = data[data_index];
 800204e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	441a      	add	r2, r3
 8002054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002056:	7811      	ldrb	r1, [r2, #0]
 8002058:	68ba      	ldr	r2, [r7, #8]
 800205a:	4413      	add	r3, r2
 800205c:	460a      	mov	r2, r1
 800205e:	76da      	strb	r2, [r3, #27]
             i++, data_index++)
 8002060:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002062:	3301      	adds	r3, #1
 8002064:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002066:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002068:	3301      	adds	r3, #1
 800206a:	84fb      	strh	r3, [r7, #38]	; 0x26
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 800206c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800206e:	2b04      	cmp	r3, #4
 8002070:	d804      	bhi.n	800207c <bufferBlockPushBytes+0x5c>
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	b29b      	uxth	r3, r3
 8002076:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002078:	429a      	cmp	r2, r3
 800207a:	d3e8      	bcc.n	800204e <bufferBlockPushBytes+0x2e>
        }
        if (data_index >= data_len)
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	b29b      	uxth	r3, r3
 8002080:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002082:	429a      	cmp	r2, r3
 8002084:	d313      	bcc.n	80020ae <bufferBlockPushBytes+0x8e>
        {
            state->payload_len =
                (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	8adb      	ldrh	r3, [r3, #22]
 800208a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800208e:	b29b      	uxth	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	b29b      	uxth	r3, r3
 8002096:	4413      	add	r3, r2
 8002098:	b29b      	uxth	r3, r3
 800209a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800209e:	b299      	uxth	r1, r3
            state->payload_len =
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	8ad3      	ldrh	r3, [r2, #22]
 80020a4:	f361 0309 	bfi	r3, r1, #0, #10
 80020a8:	82d3      	strh	r3, [r2, #22]
            return 1;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0ae      	b.n	800220c <bufferBlockPushBytes+0x1ec>
        }
    } // head is full.

    uint16_t index_at_nth_block =
        (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	8adb      	ldrh	r3, [r3, #22]
 80020b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	1f5a      	subs	r2, r3, #5
 80020ba:	0893      	lsrs	r3, r2, #2
 80020bc:	4955      	ldr	r1, [pc, #340]	; (8002214 <bufferBlockPushBytes+0x1f4>)
 80020be:	fba1 3103 	umull	r3, r1, r1, r3
 80020c2:	460b      	mov	r3, r1
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	1a5b      	subs	r3, r3, r1
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	1ad3      	subs	r3, r2, r3
    uint16_t index_at_nth_block =
 80020cc:	847b      	strh	r3, [r7, #34]	; 0x22

    // get to current block
    CanardBufferBlock* block = NULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]

    // buffer blocks uninitialized
    if (state->buffer_blocks == CANARD_BUFFER_IDX_NONE)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d113      	bne.n	8002102 <bufferBlockPushBytes+0xe2>
    {
        block = createBufferBlock(allocator);
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f89c 	bl	8002218 <createBufferBlock>
 80020e0:	61f8      	str	r0, [r7, #28]
        state->buffer_blocks = canardBufferToIdx(allocator, block);
 80020e2:	69f9      	ldr	r1, [r7, #28]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f7fe fc4b 	bl	8000980 <canardBufferToIdx>
 80020ea:	4602      	mov	r2, r0
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	605a      	str	r2, [r3, #4]
        if (block == NULL)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <bufferBlockPushBytes+0xdc>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 80020f6:	f06f 0302 	mvn.w	r3, #2
 80020fa:	e087      	b.n	800220c <bufferBlockPushBytes+0x1ec>
        }

        index_at_nth_block = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8002100:	e06c      	b.n	80021dc <bufferBlockPushBytes+0x1bc>
    }
    else
    {
        uint16_t nth_block = 1;
 8002102:	2301      	movs	r3, #1
 8002104:	837b      	strh	r3, [r7, #26]

        // get to block
        block = canardBufferFromIdx(allocator, state->buffer_blocks);
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4619      	mov	r1, r3
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f7fe fc2b 	bl	8000968 <canardBufferFromIdx>
 8002112:	61f8      	str	r0, [r7, #28]
        while (block->next != NULL)
 8002114:	e005      	b.n	8002122 <bufferBlockPushBytes+0x102>
        {
            nth_block++;
 8002116:	8b7b      	ldrh	r3, [r7, #26]
 8002118:	3301      	adds	r3, #1
 800211a:	837b      	strh	r3, [r7, #26]
            block = block->next;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	61fb      	str	r3, [r7, #28]
        while (block->next != NULL)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f5      	bne.n	8002116 <bufferBlockPushBytes+0xf6>
        }

        const uint16_t num_buffer_blocks =
            (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	8adb      	ldrh	r3, [r3, #22]
 800212e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	4413      	add	r3, r2
 800213a:	3b05      	subs	r3, #5
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	4a35      	ldr	r2, [pc, #212]	; (8002214 <bufferBlockPushBytes+0x1f4>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	b29b      	uxth	r3, r3
        const uint16_t num_buffer_blocks =
 8002146:	3301      	adds	r3, #1
 8002148:	82fb      	strh	r3, [r7, #22]
                         CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);

        if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 800214a:	8afa      	ldrh	r2, [r7, #22]
 800214c:	8b7b      	ldrh	r3, [r7, #26]
 800214e:	429a      	cmp	r2, r3
 8002150:	d944      	bls.n	80021dc <bufferBlockPushBytes+0x1bc>
 8002152:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002154:	2b00      	cmp	r3, #0
 8002156:	d141      	bne.n	80021dc <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f85d 	bl	8002218 <createBufferBlock>
 800215e:	4602      	mov	r2, r0
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <bufferBlockPushBytes+0x152>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 800216c:	f06f 0302 	mvn.w	r3, #2
 8002170:	e04c      	b.n	800220c <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	61fb      	str	r3, [r7, #28]
        }
    }

    // add data to current block until it becomes full, add new block if necessary
    while (data_index < data_len)
 8002178:	e030      	b.n	80021dc <bufferBlockPushBytes+0x1bc>
    {
        for (uint16_t i = index_at_nth_block;
 800217a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800217c:	833b      	strh	r3, [r7, #24]
 800217e:	e00e      	b.n	800219e <bufferBlockPushBytes+0x17e>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
             i++, data_index++)
        {
            block->data[i] = data[data_index];
 8002180:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	441a      	add	r2, r3
 8002186:	8b3b      	ldrh	r3, [r7, #24]
 8002188:	7811      	ldrb	r1, [r2, #0]
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	4413      	add	r3, r2
 800218e:	460a      	mov	r2, r1
 8002190:	711a      	strb	r2, [r3, #4]
             i++, data_index++)
 8002192:	8b3b      	ldrh	r3, [r7, #24]
 8002194:	3301      	adds	r3, #1
 8002196:	833b      	strh	r3, [r7, #24]
 8002198:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800219a:	3301      	adds	r3, #1
 800219c:	84fb      	strh	r3, [r7, #38]	; 0x26
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 800219e:	8b3b      	ldrh	r3, [r7, #24]
 80021a0:	2b1b      	cmp	r3, #27
 80021a2:	d804      	bhi.n	80021ae <bufferBlockPushBytes+0x18e>
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d3e8      	bcc.n	8002180 <bufferBlockPushBytes+0x160>
        }

        if (data_index < data_len)
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d211      	bcs.n	80021dc <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f82d 	bl	8002218 <createBufferBlock>
 80021be:	4602      	mov	r2, r0
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <bufferBlockPushBytes+0x1b2>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 80021cc:	f06f 0302 	mvn.w	r3, #2
 80021d0:	e01c      	b.n	800220c <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	61fb      	str	r3, [r7, #28]
            index_at_nth_block = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	847b      	strh	r3, [r7, #34]	; 0x22
    while (data_index < data_len)
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d3c9      	bcc.n	800217a <bufferBlockPushBytes+0x15a>
        }
    }

    state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	8adb      	ldrh	r3, [r3, #22]
 80021ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021fe:	b299      	uxth	r1, r3
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	8ad3      	ldrh	r3, [r2, #22]
 8002204:	f361 0309 	bfi	r3, r1, #0, #10
 8002208:	82d3      	strh	r3, [r2, #22]

    return 1;
 800220a:	2301      	movs	r3, #1
}
 800220c:	4618      	mov	r0, r3
 800220e:	3728      	adds	r7, #40	; 0x28
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	24924925 	.word	0x24924925

08002218 <createBufferBlock>:

CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fa6d 	bl	8002700 <allocateBlock>
 8002226:	60f8      	str	r0, [r7, #12]
    if (block == NULL)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <createBufferBlock+0x1a>
    {
        return NULL;
 800222e:	2300      	movs	r3, #0
 8002230:	e003      	b.n	800223a <createBufferBlock+0x22>
    }
    block->next = NULL;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
    return block;
 8002238:	68fb      	ldr	r3, [r7, #12]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <copyBitArray>:
/**
 * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
 */
void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                        uint8_t* dst, uint32_t dst_offset)
{
 8002242:	b480      	push	{r7}
 8002244:	b089      	sub	sp, #36	; 0x24
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(src_len > 0U);

    // Normalizing inputs
    src += src_offset / 8U;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	08db      	lsrs	r3, r3, #3
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
    dst += dst_offset / 8U;
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	4413      	add	r3, r2
 8002262:	603b      	str	r3, [r7, #0]

    src_offset %= 8U;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	60bb      	str	r3, [r7, #8]
    dst_offset %= 8U;
 800226c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	62bb      	str	r3, [r7, #40]	; 0x28

    const size_t last_bit = src_offset + src_len;
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	61fb      	str	r3, [r7, #28]
    while (last_bit - src_offset)
 800227c:	e04d      	b.n	800231a <copyBitArray+0xd8>
    {
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	76fb      	strb	r3, [r7, #27]
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8002288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	76bb      	strb	r3, [r7, #26]

        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 8002292:	7eba      	ldrb	r2, [r7, #26]
 8002294:	7efb      	ldrb	r3, [r7, #27]
 8002296:	4293      	cmp	r3, r2
 8002298:	bf38      	it	cc
 800229a:	4613      	movcc	r3, r2
 800229c:	767b      	strb	r3, [r7, #25]
        const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 800229e:	7e7b      	ldrb	r3, [r7, #25]
 80022a0:	f1c3 0208 	rsb	r2, r3, #8
 80022a4:	69f9      	ldr	r1, [r7, #28]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	1acb      	subs	r3, r1, r3
 80022aa:	4293      	cmp	r3, r2
 80022ac:	bf28      	it	cs
 80022ae:	4613      	movcs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
#else
        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 80022b2:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	7ebb      	ldrb	r3, [r7, #26]
 80022c2:	fa42 f303 	asr.w	r3, r2, r3
 80022c6:	74fb      	strb	r3, [r7, #19]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	08db      	lsrs	r3, r3, #3
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	7efb      	ldrb	r3, [r7, #27]
 80022d6:	409a      	lsls	r2, r3
 80022d8:	7ebb      	ldrb	r3, [r7, #26]
 80022da:	fa22 f303 	lsr.w	r3, r2, r3
 80022de:	74bb      	strb	r3, [r7, #18]

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	08db      	lsrs	r3, r3, #3
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	7cfb      	ldrb	r3, [r7, #19]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	4013      	ands	r3, r2
 80022f2:	b2d9      	uxtb	r1, r3
 80022f4:	7cba      	ldrb	r2, [r7, #18]
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	4013      	ands	r3, r2
 80022fa:	b2da      	uxtb	r2, r3
        dst[dst_offset / 8U] =
 80022fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fe:	08db      	lsrs	r3, r3, #3
 8002300:	6838      	ldr	r0, [r7, #0]
 8002302:	4403      	add	r3, r0
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8002304:	430a      	orrs	r2, r1
 8002306:	b2d2      	uxtb	r2, r2
        dst[dst_offset / 8U] =
 8002308:	701a      	strb	r2, [r3, #0]
#endif

        src_offset += copy_bits;
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	4413      	add	r3, r2
 8002310:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 8002312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	4413      	add	r3, r2
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
    while (last_bit - src_offset)
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	429a      	cmp	r2, r3
 8002320:	d1ad      	bne.n	800227e <copyBitArray+0x3c>
    }
}
 8002322:	bf00      	nop
 8002324:	bf00      	nop
 8002326:	3724      	adds	r7, #36	; 0x24
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <descatterTransferPayload>:

CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                 uint32_t bit_offset,
                                                 uint8_t bit_length,
                                                 void* output)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b090      	sub	sp, #64	; 0x40
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(transfer != 0);

    if (bit_offset >= transfer->payload_len * 8)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8a9b      	ldrh	r3, [r3, #20]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	461a      	mov	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4293      	cmp	r3, r2
 800234c:	d301      	bcc.n	8002352 <descatterTransferPayload+0x22>
    {
        return 0;       // Out of range, reading zero bits
 800234e:	2300      	movs	r3, #0
 8002350:	e0df      	b.n	8002512 <descatterTransferPayload+0x1e2>
    }

    if (bit_offset + bit_length > transfer->payload_len * 8)
 8002352:	79fa      	ldrb	r2, [r7, #7]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4413      	add	r3, r2
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	8a92      	ldrh	r2, [r2, #20]
 800235c:	00d2      	lsls	r2, r2, #3
 800235e:	4293      	cmp	r3, r2
 8002360:	d908      	bls.n	8002374 <descatterTransferPayload+0x44>
    {
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8a9b      	ldrh	r3, [r3, #20]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	b2da      	uxtb	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	71fb      	strb	r3, [r7, #7]
    }

    CANARD_ASSERT(bit_length > 0);

    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d104      	bne.n	8002386 <descatterTransferPayload+0x56>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80b9 	beq.w	80024f8 <descatterTransferPayload+0x1c8>
        /*
         * This part is hideously complicated and probably should be redesigned.
         * The objective here is to copy the requested number of bits from scattered storage into the temporary
         * local storage. We go through great pains to ensure that all corner cases are handled correctly.
         */
        uint32_t input_bit_offset = bit_offset;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t output_bit_offset = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        uint8_t remaining_bit_length = bit_length;
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

        // Reading head
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 8002396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002398:	2b27      	cmp	r3, #39	; 0x27
 800239a:	d82d      	bhi.n	80023f8 <descatterTransferPayload+0xc8>
        {
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 800239c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80023a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a2:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d305      	bcc.n	80023b6 <descatterTransferPayload+0x86>
 80023aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	e001      	b.n	80023ba <descatterTransferPayload+0x8a>
 80023b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80023ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                                CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6898      	ldr	r0, [r3, #8]
 80023c2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80023c6:	2300      	movs	r3, #0
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023ce:	f7ff ff38 	bl	8002242 <copyBitArray>

            input_bit_offset += amount;
 80023d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023d8:	4413      	add	r3, r2
 80023da:	637b      	str	r3, [r7, #52]	; 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + amount);
 80023dc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80023e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023e4:	4413      	add	r3, r2
 80023e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 80023ea:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80023ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        }

        // Reading middle
        uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8a9b      	ldrh	r3, [r3, #20]
 80023fc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002400:	3b05      	subs	r3, #5
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 8002406:	2328      	movs	r3, #40	; 0x28
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28
        const CanardBufferBlock* block = transfer->payload_middle;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	627b      	str	r3, [r7, #36]	; 0x24

        while ((block != NULL) && (remaining_bit_length > 0))
 8002410:	e044      	b.n	800249c <descatterTransferPayload+0x16c>
        {
            CANARD_ASSERT(remaining_bits > 0);
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002414:	2be0      	cmp	r3, #224	; 0xe0
 8002416:	bf28      	it	cs
 8002418:	23e0      	movcs	r3, #224	; 0xe0
 800241a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800241c:	4413      	add	r3, r2
 800241e:	61fb      	str	r3, [r7, #28]
                                                                         remaining_bits);

            // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
            if (block_end_bit_offset > input_bit_offset)
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	429a      	cmp	r2, r3
 8002426:	d92e      	bls.n	8002486 <descatterTransferPayload+0x156>
            {
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8002428:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800242c:	69f9      	ldr	r1, [r7, #28]
 800242e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002430:	1acb      	subs	r3, r1, r3
 8002432:	429a      	cmp	r2, r3
 8002434:	d306      	bcc.n	8002444 <descatterTransferPayload+0x114>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243c:	b2db      	uxtb	r3, r3
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	e001      	b.n	8002448 <descatterTransferPayload+0x118>
 8002444:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002448:	76fb      	strb	r3, [r7, #27]

                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 800244a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	617b      	str	r3, [r7, #20]

                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	1d18      	adds	r0, r3, #4
 8002456:	7efa      	ldrb	r2, [r7, #27]
 8002458:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6979      	ldr	r1, [r7, #20]
 8002462:	f7ff feee 	bl	8002242 <copyBitArray>

                input_bit_offset += amount;
 8002466:	7efb      	ldrb	r3, [r7, #27]
 8002468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800246a:	4413      	add	r3, r2
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 800246e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002472:	7efb      	ldrb	r3, [r7, #27]
 8002474:	4413      	add	r3, r2
 8002476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 800247a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800247e:	7efb      	ldrb	r3, [r7, #27]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
            }

            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 8002486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800248e:	4413      	add	r3, r2
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
            block_bit_offset = block_end_bit_offset;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
            block = block->next;
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
        while ((block != NULL) && (remaining_bit_length > 0))
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <descatterTransferPayload+0x17a>
 80024a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1b3      	bne.n	8002412 <descatterTransferPayload+0xe2>
        }

        CANARD_ASSERT(remaining_bit_length <= remaining_bits);

        // Reading tail
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d02c      	beq.n	800250c <descatterTransferPayload+0x1dc>
 80024b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d028      	beq.n	800250c <descatterTransferPayload+0x1dc>
        {
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
            const uint32_t offset = input_bit_offset - block_bit_offset;
 80024ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	613b      	str	r3, [r7, #16]

            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6918      	ldr	r0, [r3, #16]
 80024c6:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80024ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	6939      	ldr	r1, [r7, #16]
 80024d4:	f7ff feb5 	bl	8002242 <copyBitArray>
                         output_bit_offset);

            input_bit_offset += remaining_bit_length;
 80024d8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80024dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024de:	4413      	add	r3, r2
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 80024e2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80024e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80024ea:	4413      	add	r3, r2
 80024ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            remaining_bit_length = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    {
 80024f6:	e009      	b.n	800250c <descatterTransferPayload+0x1dc>
        CANARD_ASSERT(output_bit_offset <= 64);
        CANARD_ASSERT(remaining_bit_length == 0);
    }
    else                                                                    // Single frame
    {
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6898      	ldr	r0, [r3, #8]
 80024fc:	79fa      	ldrb	r2, [r7, #7]
 80024fe:	2300      	movs	r3, #0
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	f7ff fe9c 	bl	8002242 <copyBitArray>
 800250a:	e000      	b.n	800250e <descatterTransferPayload+0x1de>
    {
 800250c:	bf00      	nop
    }

    return bit_length;
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	b21b      	sxth	r3, r3
}
 8002512:	4618      	mov	r0, r3
 8002514:	3738      	adds	r7, #56	; 0x38
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <isBigEndian>:

CANARD_INTERNAL bool isBigEndian(void)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
#else
        uint16_t a;
        uint8_t b[2];
#endif
    } u;
    u.a = 1;
 8002520:	2301      	movs	r3, #1
 8002522:	80bb      	strh	r3, [r7, #4]
    return u.b[1] == 1;                             // Some don't...
 8002524:	797b      	ldrb	r3, [r7, #5]
 8002526:	2b01      	cmp	r3, #1
 8002528:	bf0c      	ite	eq
 800252a:	2301      	moveq	r3, #1
 800252c:	2300      	movne	r3, #0
 800252e:	b2db      	uxtb	r3, r3
#endif
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <swapByteOrder>:

CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(data != NULL);

    uint8_t* const bytes = (uint8_t*) data;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	60fb      	str	r3, [r7, #12]

    size_t fwd = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
    size_t rev = size - 1;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	3b01      	subs	r3, #1
 8002552:	613b      	str	r3, [r7, #16]

    while (fwd < rev)
 8002554:	e017      	b.n	8002586 <swapByteOrder+0x4a>
    {
        const uint8_t x = bytes[fwd];
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	4413      	add	r3, r2
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	72fb      	strb	r3, [r7, #11]
        bytes[fwd] = bytes[rev];
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	441a      	add	r2, r3
 8002566:	68f9      	ldr	r1, [r7, #12]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	440b      	add	r3, r1
 800256c:	7812      	ldrb	r2, [r2, #0]
 800256e:	701a      	strb	r2, [r3, #0]
        bytes[rev] = x;
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4413      	add	r3, r2
 8002576:	7afa      	ldrb	r2, [r7, #11]
 8002578:	701a      	strb	r2, [r3, #0]
        fwd++;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3301      	adds	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
        rev--;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	3b01      	subs	r3, #1
 8002584:	613b      	str	r3, [r7, #16]
    while (fwd < rev)
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	429a      	cmp	r2, r3
 800258c:	d3e3      	bcc.n	8002556 <swapByteOrder+0x1a>
    }
}
 800258e:	bf00      	nop
 8002590:	bf00      	nop
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <crcAddByte>:

/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	460a      	mov	r2, r1
 80025a6:	80fb      	strh	r3, [r7, #6]
 80025a8:	4613      	mov	r3, r2
 80025aa:	717b      	strb	r3, [r7, #5]
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 80025ac:	797b      	ldrb	r3, [r7, #5]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	4053      	eors	r3, r2
 80025b8:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	e012      	b.n	80025e6 <crcAddByte+0x4a>
    {
        if (crc_val & 0x8000U)
 80025c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	da08      	bge.n	80025da <crcAddByte+0x3e>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80025d2:	f083 0301 	eor.w	r3, r3, #1
 80025d6:	80fb      	strh	r3, [r7, #6]
 80025d8:	e002      	b.n	80025e0 <crcAddByte+0x44>
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	3301      	adds	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b07      	cmp	r3, #7
 80025ea:	d9e9      	bls.n	80025c0 <crcAddByte+0x24>
        }
    }
    return crc_val;
 80025ec:	88fb      	ldrh	r3, [r7, #6]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 80025fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fc:	b087      	sub	sp, #28
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4601      	mov	r1, r0
 8002602:	e9c7 2300 	strd	r2, r3, [r7]
 8002606:	460b      	mov	r3, r1
 8002608:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 800260a:	2300      	movs	r3, #0
 800260c:	82fb      	strh	r3, [r7, #22]
 800260e:	e01b      	b.n	8002648 <crcAddSignature+0x4e>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 8002610:	8af9      	ldrh	r1, [r7, #22]
 8002612:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002616:	f1c1 0620 	rsb	r6, r1, #32
 800261a:	f1a1 0020 	sub.w	r0, r1, #32
 800261e:	fa22 f401 	lsr.w	r4, r2, r1
 8002622:	fa03 f606 	lsl.w	r6, r3, r6
 8002626:	4334      	orrs	r4, r6
 8002628:	fa23 f000 	lsr.w	r0, r3, r0
 800262c:	4304      	orrs	r4, r0
 800262e:	fa23 f501 	lsr.w	r5, r3, r1
 8002632:	b2e2      	uxtb	r2, r4
 8002634:	89fb      	ldrh	r3, [r7, #14]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ffaf 	bl	800259c <crcAddByte>
 800263e:	4603      	mov	r3, r0
 8002640:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8002642:	8afb      	ldrh	r3, [r7, #22]
 8002644:	3308      	adds	r3, #8
 8002646:	82fb      	strh	r3, [r7, #22]
 8002648:	8afb      	ldrh	r3, [r7, #22]
 800264a:	2b3f      	cmp	r3, #63	; 0x3f
 800264c:	d9e0      	bls.n	8002610 <crcAddSignature+0x16>
    }
    return crc_val;
 800264e:	89fb      	ldrh	r3, [r7, #14]
}
 8002650:	4618      	mov	r0, r3
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002658 <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8002666:	e00a      	b.n	800267e <crcAdd+0x26>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	60ba      	str	r2, [r7, #8]
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	89fb      	ldrh	r3, [r7, #14]
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff91 	bl	800259c <crcAddByte>
 800267a:	4603      	mov	r3, r0
 800267c:	81fb      	strh	r3, [r7, #14]
    while (len--)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	1e5a      	subs	r2, r3, #1
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ef      	bne.n	8002668 <crcAdd+0x10>
    }
    return crc_val;
 8002688:	89fb      	ldrh	r3, [r7, #14]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       void* buf,
                                       uint16_t buf_len)
{
 8002692:	b480      	push	{r7}
 8002694:	b089      	sub	sp, #36	; 0x24
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	4613      	mov	r3, r2
 800269e:	80fb      	strh	r3, [r7, #6]
    size_t current_index = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
    CanardPoolAllocatorBlock *abuf = buf;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	617b      	str	r3, [r7, #20]
    allocator->arena = buf;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	611a      	str	r2, [r3, #16]
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3304      	adds	r3, #4
 80026b2:	61bb      	str	r3, [r7, #24]
    while (current_index < buf_len)
 80026b4:	e00b      	b.n	80026ce <initPoolAllocator+0x3c>
    {
        *current_block = &abuf[current_index];
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	015b      	lsls	r3, r3, #5
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	441a      	add	r2, r3
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	601a      	str	r2, [r3, #0]
        current_block = &((*current_block)->next);
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	61bb      	str	r3, [r7, #24]
        current_index++;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	3301      	adds	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
    while (current_index < buf_len)
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d3ef      	bcc.n	80026b6 <initPoolAllocator+0x24>
    }
    *current_block = NULL;
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

    allocator->statistics.capacity_blocks = buf_len;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	88fa      	ldrh	r2, [r7, #6]
 80026e0:	811a      	strh	r2, [r3, #8]
    allocator->statistics.current_usage_blocks = 0;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	815a      	strh	r2, [r3, #10]
    allocator->statistics.peak_usage_blocks = 0;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	819a      	strh	r2, [r3, #12]
    // user should initialize semaphore after the canardInit
    // or at first call of canard_allocate_sem_take
    allocator->semaphore = NULL;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
}
 80026f4:	bf00      	nop
 80026f6:	3724      	adds	r7, #36	; 0x24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <allocateBlock+0x14>
    {
#if CANARD_ALLOCATE_SEM
        canard_allocate_sem_give(allocator);
#endif
        return NULL;
 8002710:	2300      	movs	r3, #0
 8002712:	e018      	b.n	8002746 <allocateBlock+0x46>
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	60fb      	str	r3, [r7, #12]
    allocator->free_list = allocator->free_list->next;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	605a      	str	r2, [r3, #4]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	895b      	ldrh	r3, [r3, #10]
 8002728:	3301      	adds	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	815a      	strh	r2, [r3, #10]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	899a      	ldrh	r2, [r3, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	895b      	ldrh	r3, [r3, #10]
 8002738:	429a      	cmp	r2, r3
 800273a:	d203      	bcs.n	8002744 <allocateBlock+0x44>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	895a      	ldrh	r2, [r3, #10]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	819a      	strh	r2, [r3, #12]
    }
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
    return result;
 8002744:	68fb      	ldr	r3, [r7, #12]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	60fb      	str	r3, [r7, #12]

    block->next = allocator->free_list;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	601a      	str	r2, [r3, #0]
    allocator->free_list = block;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	605a      	str	r2, [r3, #4]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
    allocator->statistics.current_usage_blocks--;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	895b      	ldrh	r3, [r3, #10]
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	815a      	strh	r2, [r3, #10]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <enqueueRxFrame>:
  RX_ENQUEUE_MALLOCFAIL: memory was not allocated for the rx frame
  RX_ENQUEUE_OVERFLOW: queue is of max length. the oldest frame is removed (rxQueueHead) and the recieved frame is enqueued
  RX_ENQUEUE_SUCCESS: rx frame was successfully enqueued with no other consequences
  
*/
  enqueueRxReturnCode enqueueRxFrame(CanardCANFrame* rx_frame) {
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

    // recieved frame is empty
    if (rx_frame == NULL) {
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <enqueueRxFrame+0x12>
      return RX_ENQUEUE_EMPTYITEM;
 8002796:	2301      	movs	r3, #1
 8002798:	e041      	b.n	800281e <enqueueRxFrame+0x96>
    }

    bool isOverflow = false; // is true if the queue is max size
 800279a:	2300      	movs	r3, #0
 800279c:	75fb      	strb	r3, [r7, #23]

    // If the queue is full, remove the oldest frame (rxQueueHead)
    if (rxQueueSize >= MAX_QUEUE_SIZE) {
 800279e:	4b22      	ldr	r3, [pc, #136]	; (8002828 <enqueueRxFrame+0xa0>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b63      	cmp	r3, #99	; 0x63
 80027a4:	d90c      	bls.n	80027c0 <enqueueRxFrame+0x38>
      struct CanardRxQueueItem* oldHead  = rxQueueHead;
 80027a6:	4b21      	ldr	r3, [pc, #132]	; (800282c <enqueueRxFrame+0xa4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	613b      	str	r3, [r7, #16]
      rxQueueHead = rxQueueHead->next;
 80027ac:	4b1f      	ldr	r3, [pc, #124]	; (800282c <enqueueRxFrame+0xa4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1e      	ldr	r2, [pc, #120]	; (800282c <enqueueRxFrame+0xa4>)
 80027b4:	6013      	str	r3, [r2, #0]
      free(oldHead);
 80027b6:	6938      	ldr	r0, [r7, #16]
 80027b8:	f005 f90e 	bl	80079d8 <free>
      isOverflow = true;
 80027bc:	2301      	movs	r3, #1
 80027be:	75fb      	strb	r3, [r7, #23]
    }

    // dynamically allocate memory
    struct CanardRxQueueItem* newQueueItem = (struct CanardRxQueueItem*)malloc(sizeof(struct CanardRxQueueItem));
 80027c0:	2014      	movs	r0, #20
 80027c2:	f005 f901 	bl	80079c8 <malloc>
 80027c6:	4603      	mov	r3, r0
 80027c8:	60fb      	str	r3, [r7, #12]
    
    // new queue item was not created
    if (newQueueItem == NULL) {
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <enqueueRxFrame+0x4c>
      return RX_ENQUEUE_MALLOCFAIL;
 80027d0:	2302      	movs	r3, #2
 80027d2:	e024      	b.n	800281e <enqueueRxFrame+0x96>
    }

    newQueueItem->next = NULL;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
    newQueueItem->frame = *rx_frame;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	1d1c      	adds	r4, r3, #4
 80027e0:	4613      	mov	r3, r2
 80027e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // the queue is not empty
    if (rxQueueTail) {
 80027e8:	4b11      	ldr	r3, [pc, #68]	; (8002830 <enqueueRxFrame+0xa8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d004      	beq.n	80027fa <enqueueRxFrame+0x72>
      rxQueueTail->next = newQueueItem;
 80027f0:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <enqueueRxFrame+0xa8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	e002      	b.n	8002800 <enqueueRxFrame+0x78>
    } else { // the queue is empty
      rxQueueHead = newQueueItem;
 80027fa:	4a0c      	ldr	r2, [pc, #48]	; (800282c <enqueueRxFrame+0xa4>)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6013      	str	r3, [r2, #0]
    }

    rxQueueTail = newQueueItem;
 8002800:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <enqueueRxFrame+0xa8>)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6013      	str	r3, [r2, #0]

    if (isOverflow) {
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <enqueueRxFrame+0x88>
      return RX_ENQUEUE_OVERFLOW;
 800280c:	2303      	movs	r3, #3
 800280e:	e006      	b.n	800281e <enqueueRxFrame+0x96>
    }

    rxQueueSize++;
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <enqueueRxFrame+0xa0>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	3301      	adds	r3, #1
 8002816:	b2da      	uxtb	r2, r3
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <enqueueRxFrame+0xa0>)
 800281a:	701a      	strb	r2, [r3, #0]
    return RX_ENQUEUE_SUCCESS;
 800281c:	2300      	movs	r3, #0
  }
 800281e:	4618      	mov	r0, r3
 8002820:	371c      	adds	r7, #28
 8002822:	46bd      	mov	sp, r7
 8002824:	bd90      	pop	{r4, r7, pc}
 8002826:	bf00      	nop
 8002828:	200000bc 	.word	0x200000bc
 800282c:	200000b4 	.word	0x200000b4
 8002830:	200000b8 	.word	0x200000b8

08002834 <dequeueRxFrame>:


  struct dequeueRxReturnItem dequeueRxFrame() {
 8002834:	b5b0      	push	{r4, r5, r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

    struct dequeueRxReturnItem output;

    if (!rxQueueHead) { // queue is empty, return nothing
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <dequeueRxFrame+0x80>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <dequeueRxFrame+0x26>
      output.isSuccess = false;
 8002844:	2300      	movs	r3, #0
 8002846:	723b      	strb	r3, [r7, #8]
      return output;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	461d      	mov	r5, r3
 800284c:	f107 0408 	add.w	r4, r7, #8
 8002850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	602b      	str	r3, [r5, #0]
 8002858:	e028      	b.n	80028ac <dequeueRxFrame+0x78>
    }

    // queue is not empty
    struct CanardRxQueueItem* dequeuedItem = rxQueueHead;
 800285a:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <dequeueRxFrame+0x80>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	61fb      	str	r3, [r7, #28]
    output.isSuccess = true;
 8002860:	2301      	movs	r3, #1
 8002862:	723b      	strb	r3, [r7, #8]
    output.frame = dequeuedItem->frame;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f107 040c 	add.w	r4, r7, #12
 800286a:	3304      	adds	r3, #4
 800286c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800286e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    rxQueueHead = rxQueueHead->next;
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <dequeueRxFrame+0x80>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <dequeueRxFrame+0x80>)
 800287a:	6013      	str	r3, [r2, #0]

    if (!rxQueueHead) {
 800287c:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <dequeueRxFrame+0x80>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <dequeueRxFrame+0x56>
      rxQueueTail = NULL; // after dequeuing, the queue is empty
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <dequeueRxFrame+0x84>)
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
    }

    rxQueueSize--;
 800288a:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <dequeueRxFrame+0x88>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	3b01      	subs	r3, #1
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <dequeueRxFrame+0x88>)
 8002894:	701a      	strb	r2, [r3, #0]
    free(dequeuedItem);
 8002896:	69f8      	ldr	r0, [r7, #28]
 8002898:	f005 f89e 	bl	80079d8 <free>

    return output;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	461d      	mov	r5, r3
 80028a0:	f107 0408 	add.w	r4, r7, #8
 80028a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	602b      	str	r3, [r5, #0]
  }
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	3720      	adds	r7, #32
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bdb0      	pop	{r4, r5, r7, pc}
 80028b4:	200000b4 	.word	0x200000b4
 80028b8:	200000b8 	.word	0x200000b8
 80028bc:	200000bc 	.word	0x200000bc

080028c0 <canardSTM32Recieve>:
 *         This parameter can be a value of @arg FDCAN_Rx_location.
 * @param  rx_frame pointer to a CanardCANFrame structure where the received CAN message will be
 * 		stored.
 * @retval ret == 1: OK, ret < 0: CANARD_ERROR, ret == 0: Check hcan->ErrorCode
 */
int16_t canardSTM32Recieve(CAN_HandleTypeDef *hcan, uint32_t RxLocation, CanardCANFrame *const rx_frame) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08e      	sub	sp, #56	; 0x38
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
	if (rx_frame == NULL) {
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d102      	bne.n	80028d8 <canardSTM32Recieve+0x18>
		return -CANARD_ERROR_INVALID_ARGUMENT;
 80028d2:	f06f 0301 	mvn.w	r3, #1
 80028d6:	e031      	b.n	800293c <canardSTM32Recieve+0x7c>
	}

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	if (HAL_CAN_GetRxMessage(hcan, RxLocation, &RxHeader, RxData) == HAL_OK) {
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	f107 021c 	add.w	r2, r7, #28
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f002 fb45 	bl	8004f72 <HAL_CAN_GetRxMessage>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d125      	bne.n	800293a <canardSTM32Recieve+0x7a>
		//		printf("%02x", RxData[i]);
		//	}
		//	printf("\n");

		// Process ID to canard format
		rx_frame->id = RxHeader.ExtId;
 80028ee:	6a3a      	ldr	r2, [r7, #32]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	601a      	str	r2, [r3, #0]

		if (RxHeader.IDE == CAN_ID_EXT) { // canard will only process the message if it is extended ID
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d105      	bne.n	8002906 <canardSTM32Recieve+0x46>
			rx_frame->id |= CANARD_CAN_FRAME_EFF;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	601a      	str	r2, [r3, #0]
		}

		if (RxHeader.RTR == CAN_RTR_REMOTE) { // canard won't process the message if it is a remote frame
 8002906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002908:	2b02      	cmp	r3, #2
 800290a:	d105      	bne.n	8002918 <canardSTM32Recieve+0x58>
			rx_frame->id |= CANARD_CAN_FRAME_RTR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	601a      	str	r2, [r3, #0]
		}

		rx_frame->data_len = RxHeader.DLC;
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	b2da      	uxtb	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	731a      	strb	r2, [r3, #12]
		memcpy(rx_frame->data, RxData, RxHeader.DLC);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002926:	f107 0114 	add.w	r1, r7, #20
 800292a:	4618      	mov	r0, r3
 800292c:	f005 fbc0 	bl	80080b0 <memcpy>

		// assume a single interface
		rx_frame->iface_id = 0;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	735a      	strb	r2, [r3, #13]

		return 1;
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <canardSTM32Recieve+0x7c>
	}

	// Either no CAN msg to be read, or an error that can be read from hcan->ErrorCode
	return 0;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3738      	adds	r7, #56	; 0x38
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <canardSTM32Transmit>:
 *         the configuration information for the specified FDCAN.
 * @param  tx_frame pointer to a CanardCANFrame structure that contains the CAN message to
 * 		transmit.
 * @retval ret == 1: OK, ret < 0: CANARD_ERROR, ret == 0: Check hcan->ErrorCode
 */
int16_t canardSTM32Transmit(CAN_HandleTypeDef *hcan, const CanardCANFrame* const tx_frame) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
	if (tx_frame == NULL) {
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d102      	bne.n	800295a <canardSTM32Transmit+0x16>
		return -CANARD_ERROR_INVALID_ARGUMENT;
 8002954:	f06f 0301 	mvn.w	r3, #1
 8002958:	e042      	b.n	80029e0 <canardSTM32Transmit+0x9c>
	}

	if (tx_frame->id & CANARD_CAN_FRAME_ERR) {
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <canardSTM32Transmit+0x28>
		return -CANARD_ERROR_INVALID_ARGUMENT; // unsupported frame format
 8002966:	f06f 0301 	mvn.w	r3, #1
 800296a:	e039      	b.n	80029e0 <canardSTM32Transmit+0x9c>

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8];

	// Process canard id to STM FDCAN header format
	if (tx_frame->id & CANARD_CAN_FRAME_EFF) {
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	da07      	bge.n	8002984 <canardSTM32Transmit+0x40>
		TxHeader.IDE = CAN_ID_EXT;
 8002974:	2304      	movs	r3, #4
 8002976:	61bb      	str	r3, [r7, #24]
		TxHeader.ExtId = tx_frame->id & CANARD_CAN_EXT_ID_MASK;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	e006      	b.n	8002992 <canardSTM32Transmit+0x4e>
	} else {
		TxHeader.IDE = CAN_ID_STD;
 8002984:	2300      	movs	r3, #0
 8002986:	61bb      	str	r3, [r7, #24]
		TxHeader.StdId = tx_frame->id & CANARD_CAN_STD_ID_MASK;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002990:	613b      	str	r3, [r7, #16]
	}

	TxHeader.DLC = tx_frame->data_len;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	7b1b      	ldrb	r3, [r3, #12]
 8002996:	623b      	str	r3, [r7, #32]

	if (tx_frame->id & CANARD_CAN_FRAME_RTR) {
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <canardSTM32Transmit+0x66>
		TxHeader.RTR = CAN_RTR_REMOTE;
 80029a4:	2302      	movs	r3, #2
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	e001      	b.n	80029ae <canardSTM32Transmit+0x6a>
	} else {
		TxHeader.RTR = CAN_RTR_DATA;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
	}

	TxHeader.TransmitGlobalTime = DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	memcpy(TxData, tx_frame->data, TxHeader.DLC);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	1d19      	adds	r1, r3, #4
 80029b8:	6a3a      	ldr	r2, [r7, #32]
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	4618      	mov	r0, r3
 80029c0:	f005 fb76 	bl	80080b0 <memcpy>

	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &canMailbox) == HAL_OK) {
 80029c4:	f107 0208 	add.w	r2, r7, #8
 80029c8:	f107 0110 	add.w	r1, r7, #16
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <canardSTM32Transmit+0xa4>)
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f002 f9ff 	bl	8004dd2 <HAL_CAN_AddTxMessage>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <canardSTM32Transmit+0x9a>
//		printf("Successfully sent message with id: %lu \n", TxHeader.StdId);
		return 1;
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <canardSTM32Transmit+0x9c>
	}

//	printf("Failed at adding message with id: %lu to Tx Fifo", TxHeader.StdId);
	// This might be for many reasons including the Tx Fifo being full, the error can be read from hcan->ErrorCode
	return 0;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3728      	adds	r7, #40	; 0x28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	200000c0 	.word	0x200000c0

080029ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <MX_GPIO_Init+0x44>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <MX_GPIO_Init+0x44>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <MX_GPIO_Init+0x44>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <MX_GPIO_Init+0x44>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0e:	4a08      	ldr	r2, [pc, #32]	; (8002a30 <MX_GPIO_Init+0x44>)
 8002a10:	f043 0302 	orr.w	r3, r3, #2
 8002a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <MX_GPIO_Init+0x44>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]

}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000

08002a34 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002a3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002a40:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d013      	beq.n	8002a74 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002a4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002a50:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002a54:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00b      	beq.n	8002a74 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002a5c:	e000      	b.n	8002a60 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002a5e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002a60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f9      	beq.n	8002a5e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002a6a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002a74:	687b      	ldr	r3, [r7, #4]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <getUniqueID>:


/*
  get a 16 byte unique ID for this node, this should be based on the CPU unique ID or other unique ID
 */
void getUniqueID(uint8_t id[16]){
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
	uint32_t HALUniqueIDs[3];
// Make Unique ID out of the 96-bit STM32 UID and fill the rest with 0s
	memset(id, 0, 16);
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f005 fa64 	bl	8007f5c <memset>
	HALUniqueIDs[0] = HAL_GetUIDw0();
 8002a94:	f001 ff70 	bl	8004978 <HAL_GetUIDw0>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60fb      	str	r3, [r7, #12]
	HALUniqueIDs[1] = HAL_GetUIDw1();
 8002a9c:	f001 ff78 	bl	8004990 <HAL_GetUIDw1>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	613b      	str	r3, [r7, #16]
	HALUniqueIDs[2] = HAL_GetUIDw2();
 8002aa4:	f001 ff80 	bl	80049a8 <HAL_GetUIDw2>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	617b      	str	r3, [r7, #20]
	memcpy(id, HALUniqueIDs, 12);
 8002aac:	f107 030c 	add.w	r3, r7, #12
 8002ab0:	220c      	movs	r2, #12
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f005 fafb 	bl	80080b0 <memcpy>
}
 8002aba:	bf00      	nop
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <setServoPWM>:

// Might have to change the code if the handler (&htim) changes based on # of servos were controlling
void setServoPWM(uint8_t ServoNum){
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
	switch (ServoNum) {
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d124      	bne.n	8002b1e <setServoPWM+0x5a>
	case 0:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PULSE_RANGE*20-(servos[0].position * (PULSE_RANGE/2) + (PULSE_RANGE*1.5)));
 8002ad4:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <setServoPWM+0x6c>)
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002b34 <setServoPWM+0x70>
 8002ade:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae2:	ee17 0a90 	vmov	r0, s15
 8002ae6:	f7fd fd27 	bl	8000538 <__aeabi_f2d>
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <setServoPWM+0x74>)
 8002af0:	f7fd fbc4 	bl	800027c <__adddf3>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	f04f 0000 	mov.w	r0, #0
 8002afc:	490f      	ldr	r1, [pc, #60]	; (8002b3c <setServoPWM+0x78>)
 8002afe:	f7fd fbbb 	bl	8000278 <__aeabi_dsub>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	490e      	ldr	r1, [pc, #56]	; (8002b40 <setServoPWM+0x7c>)
 8002b08:	680c      	ldr	r4, [r1, #0]
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f7fd fd6b 	bl	80005e8 <__aeabi_d2uiz>
 8002b12:	4603      	mov	r3, r0
 8002b14:	6363      	str	r3, [r4, #52]	; 0x34
		printf("SERVO 0 PWM SET");
 8002b16:	480b      	ldr	r0, [pc, #44]	; (8002b44 <setServoPWM+0x80>)
 8002b18:	f005 f8c2 	bl	8007ca0 <iprintf>
		break;
 8002b1c:	e003      	b.n	8002b26 <setServoPWM+0x62>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, servos[3].position * (PULSE_RANGE/2) + (PULSE_RANGE*1.5));
		printf("SERVO 3 PWM SET");
		break;
		*/
	default:
		printf("INVALID SERVO ID, NOTHING SET");
 8002b1e:	480a      	ldr	r0, [pc, #40]	; (8002b48 <setServoPWM+0x84>)
 8002b20:	f005 f8be 	bl	8007ca0 <iprintf>
		break;
 8002b24:	bf00      	nop
	}
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd90      	pop	{r4, r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000518 	.word	0x20000518
 8002b34:	44c80000 	.word	0x44c80000
 8002b38:	40b2c000 	.word	0x40b2c000
 8002b3c:	40ef4000 	.word	0x40ef4000
 8002b40:	20000574 	.word	0x20000574
 8002b44:	080089f0 	.word	0x080089f0
 8002b48:	08008a00 	.word	0x08008a00

08002b4c <startAllPWM>:

void startAllPWM(){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002b50:	2100      	movs	r1, #0
 8002b52:	4804      	ldr	r0, [pc, #16]	; (8002b64 <startAllPWM+0x18>)
 8002b54:	f003 ff2c 	bl	80069b0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4802      	ldr	r0, [pc, #8]	; (8002b64 <startAllPWM+0x18>)
 8002b5c:	f004 fd92 	bl	8007684 <HAL_TIMEx_PWMN_Start>
  /*
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  */
}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000574 	.word	0x20000574

08002b68 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	// Receiving
	CanardCANFrame rx_frame;

	const int16_t rx_res = canardSTM32Recieve(hcan, CAN_RX_FIFO0, &rx_frame);
 8002b70:	f107 030c 	add.w	r3, r7, #12
 8002b74:	461a      	mov	r2, r3
 8002b76:	2100      	movs	r1, #0
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff fea1 	bl	80028c0 <canardSTM32Recieve>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	83fb      	strh	r3, [r7, #30]

	if (rx_res < 0) {
 8002b82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	da06      	bge.n	8002b98 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
		printf("Receive error %d\n", rx_res);
 8002b8a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4817      	ldr	r0, [pc, #92]	; (8002bf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8002b92:	f005 f885 	bl	8007ca0 <iprintf>
				break;
			case RX_ENQUEUE_SUCCESS:
				break;
		}
	}
}
 8002b96:	e026      	b.n	8002be6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
	else if (rx_res > 0)        // Success - process the frame
 8002b98:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	dd22      	ble.n	8002be6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
		enqueueRxReturnCode enqueueRxReturnCode = enqueueRxFrame(&rx_frame);
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fdef 	bl	8002788 <enqueueRxFrame>
 8002baa:	4603      	mov	r3, r0
 8002bac:	777b      	strb	r3, [r7, #29]
		switch (enqueueRxReturnCode) {
 8002bae:	7f7b      	ldrb	r3, [r7, #29]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d818      	bhi.n	8002be6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
 8002bb4:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bba:	bf00      	nop
 8002bbc:	08002be5 	.word	0x08002be5
 8002bc0:	08002bcd 	.word	0x08002bcd
 8002bc4:	08002bd5 	.word	0x08002bd5
 8002bc8:	08002bdd 	.word	0x08002bdd
				printf("Rx frame is empty");
 8002bcc:	4809      	ldr	r0, [pc, #36]	; (8002bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8002bce:	f005 f867 	bl	8007ca0 <iprintf>
				break;
 8002bd2:	e008      	b.n	8002be6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
				printf("CanardRxQueueItem memory allocation failed");
 8002bd4:	4808      	ldr	r0, [pc, #32]	; (8002bf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8002bd6:	f005 f863 	bl	8007ca0 <iprintf>
				break;
 8002bda:	e004      	b.n	8002be6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
				printf("rxQueue is full, oldest frame has been removed");
 8002bdc:	4807      	ldr	r0, [pc, #28]	; (8002bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8002bde:	f005 f85f 	bl	8007ca0 <iprintf>
				break;
 8002be2:	e000      	b.n	8002be6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
				break;
 8002be4:	bf00      	nop
}
 8002be6:	bf00      	nop
 8002be8:	3720      	adds	r7, #32
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	08008a20 	.word	0x08008a20
 8002bf4:	08008a34 	.word	0x08008a34
 8002bf8:	08008a48 	.word	0x08008a48
 8002bfc:	08008a74 	.word	0x08008a74

08002c00 <processCanardRxQueue>:

void processCanardRxQueue() {
 8002c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c04:	b088      	sub	sp, #32
 8002c06:	af00      	add	r7, sp, #0
	struct dequeueRxReturnItem dequeueRxReturnItem = dequeueRxFrame();
 8002c08:	1d3b      	adds	r3, r7, #4
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fe12 	bl	8002834 <dequeueRxFrame>
	const uint64_t timestamp = HAL_GetTick() * 1000ULL;
 8002c10:	f001 fea6 	bl	8004960 <HAL_GetTick>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2200      	movs	r2, #0
 8002c18:	469a      	mov	sl, r3
 8002c1a:	4693      	mov	fp, r2
 8002c1c:	4652      	mov	r2, sl
 8002c1e:	465b      	mov	r3, fp
 8002c20:	f04f 0000 	mov.w	r0, #0
 8002c24:	f04f 0100 	mov.w	r1, #0
 8002c28:	0159      	lsls	r1, r3, #5
 8002c2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c2e:	0150      	lsls	r0, r2, #5
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	ebb2 040a 	subs.w	r4, r2, sl
 8002c38:	eb63 050b 	sbc.w	r5, r3, fp
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	00ab      	lsls	r3, r5, #2
 8002c46:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002c4a:	00a2      	lsls	r2, r4, #2
 8002c4c:	4614      	mov	r4, r2
 8002c4e:	461d      	mov	r5, r3
 8002c50:	eb14 080a 	adds.w	r8, r4, sl
 8002c54:	eb45 090b 	adc.w	r9, r5, fp
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c68:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c6c:	4690      	mov	r8, r2
 8002c6e:	4699      	mov	r9, r3
 8002c70:	e9c7 8906 	strd	r8, r9, [r7, #24]

	if (dequeueRxReturnItem.isSuccess) {
 8002c74:	793b      	ldrb	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d006      	beq.n	8002c88 <processCanardRxQueue+0x88>
		canardHandleRxFrame(&canard, &(dequeueRxReturnItem.frame), timestamp);
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	1d19      	adds	r1, r3, #4
 8002c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c82:	4804      	ldr	r0, [pc, #16]	; (8002c94 <processCanardRxQueue+0x94>)
 8002c84:	f7fd ff74 	bl	8000b70 <canardHandleRxFrame>
	}
}
 8002c88:	bf00      	nop
 8002c8a:	3720      	adds	r7, #32
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c92:	bf00      	nop
 8002c94:	200000ec 	.word	0x200000ec

08002c98 <handle_NodeStatus>:
// NOTE: All canard handlers and senders are based on this reference: https://dronecan.github.io/Specification/7._List_of_standard_data_types/
// Alternatively, you can look at the corresponding generated header file in the dsdlc_generated folder

// Canard Handlers ( Many have code copied from libcanard esc_node example: https://github.com/dronecan/libcanard/blob/master/examples/ESCNode/esc_node.c )

void handle_NodeStatus(CanardInstance *ins, CanardRxTransfer *transfer) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
	struct uavcan_protocol_NodeStatus nodeStatus;

	if (uavcan_protocol_NodeStatus_decode(transfer, &nodeStatus)) {
 8002ca2:	f107 030c 	add.w	r3, r7, #12
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6838      	ldr	r0, [r7, #0]
 8002caa:	f001 fd3b 	bl	8004724 <uavcan_protocol_NodeStatus_decode>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d15d      	bne.n	8002d70 <handle_NodeStatus+0xd8>
		return;
	}

	printf("Node health: %ud Node Mode: %ud\n", nodeStatus.health, nodeStatus.mode);
 8002cb4:	7c3b      	ldrb	r3, [r7, #16]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	7c7b      	ldrb	r3, [r7, #17]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	482e      	ldr	r0, [pc, #184]	; (8002d78 <handle_NodeStatus+0xe0>)
 8002cbe:	f004 ffef 	bl	8007ca0 <iprintf>

	printf("Node Health ");
 8002cc2:	482e      	ldr	r0, [pc, #184]	; (8002d7c <handle_NodeStatus+0xe4>)
 8002cc4:	f004 ffec 	bl	8007ca0 <iprintf>

	switch (nodeStatus.health) {
 8002cc8:	7c3b      	ldrb	r3, [r7, #16]
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d81a      	bhi.n	8002d04 <handle_NodeStatus+0x6c>
 8002cce:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <handle_NodeStatus+0x3c>)
 8002cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd4:	08002ce5 	.word	0x08002ce5
 8002cd8:	08002ced 	.word	0x08002ced
 8002cdc:	08002cf5 	.word	0x08002cf5
 8002ce0:	08002cfd 	.word	0x08002cfd
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK:
		printf("OK\n");
 8002ce4:	4826      	ldr	r0, [pc, #152]	; (8002d80 <handle_NodeStatus+0xe8>)
 8002ce6:	f005 f849 	bl	8007d7c <puts>
		break;
 8002cea:	e00f      	b.n	8002d0c <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_WARNING:
		printf("WARNING\n");
 8002cec:	4825      	ldr	r0, [pc, #148]	; (8002d84 <handle_NodeStatus+0xec>)
 8002cee:	f005 f845 	bl	8007d7c <puts>
		break;
 8002cf2:	e00b      	b.n	8002d0c <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_ERROR:
		printf("ERROR\n");
 8002cf4:	4824      	ldr	r0, [pc, #144]	; (8002d88 <handle_NodeStatus+0xf0>)
 8002cf6:	f005 f841 	bl	8007d7c <puts>
		break;
 8002cfa:	e007      	b.n	8002d0c <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_CRITICAL:
		printf("CRITICAL\n");
 8002cfc:	4823      	ldr	r0, [pc, #140]	; (8002d8c <handle_NodeStatus+0xf4>)
 8002cfe:	f005 f83d 	bl	8007d7c <puts>
		break;
 8002d02:	e003      	b.n	8002d0c <handle_NodeStatus+0x74>
	default:
		printf("UNKNOWN?\n");
 8002d04:	4822      	ldr	r0, [pc, #136]	; (8002d90 <handle_NodeStatus+0xf8>)
 8002d06:	f005 f839 	bl	8007d7c <puts>
		break;
 8002d0a:	bf00      	nop
	}

	printf("Node Mode ");
 8002d0c:	4821      	ldr	r0, [pc, #132]	; (8002d94 <handle_NodeStatus+0xfc>)
 8002d0e:	f004 ffc7 	bl	8007ca0 <iprintf>

	switch(nodeStatus.mode) {
 8002d12:	7c7b      	ldrb	r3, [r7, #17]
 8002d14:	2b07      	cmp	r3, #7
 8002d16:	d827      	bhi.n	8002d68 <handle_NodeStatus+0xd0>
 8002d18:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <handle_NodeStatus+0x88>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d41 	.word	0x08002d41
 8002d24:	08002d49 	.word	0x08002d49
 8002d28:	08002d51 	.word	0x08002d51
 8002d2c:	08002d59 	.word	0x08002d59
 8002d30:	08002d69 	.word	0x08002d69
 8002d34:	08002d69 	.word	0x08002d69
 8002d38:	08002d69 	.word	0x08002d69
 8002d3c:	08002d61 	.word	0x08002d61
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL:
		printf("OPERATIONAL\n");
 8002d40:	4815      	ldr	r0, [pc, #84]	; (8002d98 <handle_NodeStatus+0x100>)
 8002d42:	f005 f81b 	bl	8007d7c <puts>
		break;
 8002d46:	e014      	b.n	8002d72 <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_INITIALIZATION:
		printf("INITIALIZATION\n");
 8002d48:	4814      	ldr	r0, [pc, #80]	; (8002d9c <handle_NodeStatus+0x104>)
 8002d4a:	f005 f817 	bl	8007d7c <puts>
		break;
 8002d4e:	e010      	b.n	8002d72 <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_MAINTENANCE:
		printf("MAINTENANCE\n");
 8002d50:	4813      	ldr	r0, [pc, #76]	; (8002da0 <handle_NodeStatus+0x108>)
 8002d52:	f005 f813 	bl	8007d7c <puts>
		break;
 8002d56:	e00c      	b.n	8002d72 <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_SOFTWARE_UPDATE:
		printf("SOFTWARE UPDATE\n");
 8002d58:	4812      	ldr	r0, [pc, #72]	; (8002da4 <handle_NodeStatus+0x10c>)
 8002d5a:	f005 f80f 	bl	8007d7c <puts>
		break;
 8002d5e:	e008      	b.n	8002d72 <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_OFFLINE:
		printf("OFFLINE\n");
 8002d60:	4811      	ldr	r0, [pc, #68]	; (8002da8 <handle_NodeStatus+0x110>)
 8002d62:	f005 f80b 	bl	8007d7c <puts>
		break;
 8002d66:	e004      	b.n	8002d72 <handle_NodeStatus+0xda>
	default:
		printf("UNKNOWN?\n");
 8002d68:	4809      	ldr	r0, [pc, #36]	; (8002d90 <handle_NodeStatus+0xf8>)
 8002d6a:	f005 f807 	bl	8007d7c <puts>
		break;
 8002d6e:	e000      	b.n	8002d72 <handle_NodeStatus+0xda>
		return;
 8002d70:	bf00      	nop
	}
}
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	08008aa4 	.word	0x08008aa4
 8002d7c:	08008ac8 	.word	0x08008ac8
 8002d80:	08008ad8 	.word	0x08008ad8
 8002d84:	08008adc 	.word	0x08008adc
 8002d88:	08008ae4 	.word	0x08008ae4
 8002d8c:	08008aec 	.word	0x08008aec
 8002d90:	08008af8 	.word	0x08008af8
 8002d94:	08008b04 	.word	0x08008b04
 8002d98:	08008b10 	.word	0x08008b10
 8002d9c:	08008b1c 	.word	0x08008b1c
 8002da0:	08008b2c 	.word	0x08008b2c
 8002da4:	08008b38 	.word	0x08008b38
 8002da8:	08008b48 	.word	0x08008b48

08002dac <handle_NotifyState>:

void handle_NotifyState(CanardInstance *ins, CanardRxTransfer *transfer) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b0c8      	sub	sp, #288	; 0x120
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002db6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002dba:	6018      	str	r0, [r3, #0]
 8002dbc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002dc0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002dc4:	6019      	str	r1, [r3, #0]
	struct ardupilot_indication_NotifyState notifyState;

	if (ardupilot_indication_NotifyState_decode(transfer, &notifyState)) {
 8002dc6:	f107 0208 	add.w	r2, r7, #8
 8002dca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002dce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	f001 f8e6 	bl	8003fa6 <ardupilot_indication_NotifyState_decode>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d13b      	bne.n	8002e58 <handle_NotifyState+0xac>
		return;
	}

	uint32_t nl = notifyState.vehicle_state & 0xFFFFFFFF;  // ignoring the last 32 bits for printing since the highest vehicle_state value right now is 23 even though they're allowed to be up to 64bit unsigned integer
 8002de0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002de4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002de8:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8002dec:	4613      	mov	r3, r2
 8002dee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	printf("Vehicle State: %lu ", nl);
 8002df2:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8002df6:	481b      	ldr	r0, [pc, #108]	; (8002e64 <handle_NotifyState+0xb8>)
 8002df8:	f004 ff52 	bl	8007ca0 <iprintf>

	if (notifyState.aux_data.len > 0) {
 8002dfc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e00:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e04:	785b      	ldrb	r3, [r3, #1]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d022      	beq.n	8002e50 <handle_NotifyState+0xa4>
		printf("Aux Data: 0x");
 8002e0a:	4817      	ldr	r0, [pc, #92]	; (8002e68 <handle_NotifyState+0xbc>)
 8002e0c:	f004 ff48 	bl	8007ca0 <iprintf>

		for (int i = 0; i < notifyState.aux_data.len; i++) {
 8002e10:	2300      	movs	r3, #0
 8002e12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002e16:	e011      	b.n	8002e3c <handle_NotifyState+0x90>
			printf("%02x", notifyState.aux_data.data[i]);
 8002e18:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e1c:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8002e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e24:	4413      	add	r3, r2
 8002e26:	3302      	adds	r3, #2
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	480f      	ldr	r0, [pc, #60]	; (8002e6c <handle_NotifyState+0xc0>)
 8002e2e:	f004 ff37 	bl	8007ca0 <iprintf>
		for (int i = 0; i < notifyState.aux_data.len; i++) {
 8002e32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e36:	3301      	adds	r3, #1
 8002e38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002e3c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e40:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e44:	785b      	ldrb	r3, [r3, #1]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	dbe3      	blt.n	8002e18 <handle_NotifyState+0x6c>
		}
	}

	printf("\n");
 8002e50:	200a      	movs	r0, #10
 8002e52:	f004 ff37 	bl	8007cc4 <putchar>
 8002e56:	e000      	b.n	8002e5a <handle_NotifyState+0xae>
		return;
 8002e58:	bf00      	nop

}
 8002e5a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	08008b50 	.word	0x08008b50
 8002e68:	08008b64 	.word	0x08008b64
 8002e6c:	08008b74 	.word	0x08008b74

08002e70 <check_actuator_id>:
/**
 * take actuator id from command, return the servo's index in the array
 */
static inline int check_actuator_id(uint8_t actuator_id){
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < NUM_SERVOS; i ++){
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	e00b      	b.n	8002e98 <check_actuator_id+0x28>
    if (SERVO_IDS[i] == actuator_id){ // checks that the command actuator id means one of our servo
 8002e80:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <check_actuator_id+0x40>)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4413      	add	r3, r2
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	79fa      	ldrb	r2, [r7, #7]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d101      	bne.n	8002e92 <check_actuator_id+0x22>
      return i;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	e007      	b.n	8002ea2 <check_actuator_id+0x32>
  for(int i = 0; i < NUM_SERVOS; i ++){
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3301      	adds	r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	ddf0      	ble.n	8002e80 <check_actuator_id+0x10>
    }
  }

  return -1;  // command actuator id is not in array
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	08008cb4 	.word	0x08008cb4

08002eb4 <handle_ArrayCommand>:

/*
 * handle a servo ArrayCommand request
 */
static void handle_ArrayCommand(CanardInstance *ins, CanardRxTransfer *transfer)
{
 8002eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb8:	b0a8      	sub	sp, #160	; 0xa0
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	6039      	str	r1, [r7, #0]
	printf("entered array command\n");
 8002ec0:	4855      	ldr	r0, [pc, #340]	; (8003018 <handle_ArrayCommand+0x164>)
 8002ec2:	f004 ff5b 	bl	8007d7c <puts>
    struct uavcan_equipment_actuator_ArrayCommand cmd;
    if (uavcan_equipment_actuator_ArrayCommand_decode(transfer, &cmd)) { //return true if decode is invalid
 8002ec6:	f107 030c 	add.w	r3, r7, #12
 8002eca:	4619      	mov	r1, r3
 8002ecc:	6838      	ldr	r0, [r7, #0]
 8002ece:	f001 f939 	bl	8004144 <uavcan_equipment_actuator_ArrayCommand_decode>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f040 809a 	bne.w	800300e <handle_ArrayCommand+0x15a>
        return;
    }
    uint64_t tnow = HAL_GetTick() * 1000ULL;
 8002eda:	f001 fd41 	bl	8004960 <HAL_GetTick>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	469a      	mov	sl, r3
 8002ee4:	4693      	mov	fp, r2
 8002ee6:	4652      	mov	r2, sl
 8002ee8:	465b      	mov	r3, fp
 8002eea:	f04f 0000 	mov.w	r0, #0
 8002eee:	f04f 0100 	mov.w	r1, #0
 8002ef2:	0159      	lsls	r1, r3, #5
 8002ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef8:	0150      	lsls	r0, r2, #5
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	ebb2 040a 	subs.w	r4, r2, sl
 8002f02:	eb63 050b 	sbc.w	r5, r3, fp
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	00ab      	lsls	r3, r5, #2
 8002f10:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002f14:	00a2      	lsls	r2, r4, #2
 8002f16:	4614      	mov	r4, r2
 8002f18:	461d      	mov	r5, r3
 8002f1a:	eb14 080a 	adds.w	r8, r4, sl
 8002f1e:	eb45 090b 	adc.w	r9, r5, fp
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f36:	4690      	mov	r8, r2
 8002f38:	4699      	mov	r9, r3
 8002f3a:	e9c7 8924 	strd	r8, r9, [r7, #144]	; 0x90
    for (uint8_t i=0; i < cmd.commands.len; i++) {
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002f44:	e05d      	b.n	8003002 <handle_ArrayCommand+0x14e>
        uint8_t actuator_id = cmd.commands.data[i].actuator_id;
 8002f46:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	33a0      	adds	r3, #160	; 0xa0
 8002f4e:	443b      	add	r3, r7
 8002f50:	f813 3c90 	ldrb.w	r3, [r3, #-144]
 8002f54:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        int servo_array_index = check_actuator_id(actuator_id);
 8002f58:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff87 	bl	8002e70 <check_actuator_id>
 8002f62:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        if (servo_array_index < 0 || servo_array_index >= NUM_SERVOS) {
 8002f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	db43      	blt.n	8002ff6 <handle_ArrayCommand+0x142>
 8002f6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	dc3f      	bgt.n	8002ff6 <handle_ArrayCommand+0x142>
            // not for us
            continue;
        }
        switch (cmd.commands.data[i].command_type) {
 8002f76:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	33a0      	adds	r3, #160	; 0xa0
 8002f7e:	443b      	add	r3, r7
 8002f80:	f813 3c8f 	ldrb.w	r3, [r3, #-143]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <handle_ArrayCommand+0xda>
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d014      	beq.n	8002fb6 <handle_ArrayCommand+0x102>
 8002f8c:	e027      	b.n	8002fde <handle_ArrayCommand+0x12a>
        case UAVCAN_EQUIPMENT_ACTUATOR_COMMAND_COMMAND_TYPE_UNITLESS:
        	// command_value the floating point percentage varies from -1 to 1
            servos[servo_array_index].position = cmd.commands.data[i].command_value;
 8002f8e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	33a0      	adds	r3, #160	; 0xa0
 8002f96:	443b      	add	r3, r7
 8002f98:	3b8c      	subs	r3, #140	; 0x8c
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	491f      	ldr	r1, [pc, #124]	; (800301c <handle_ArrayCommand+0x168>)
 8002f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	440b      	add	r3, r1
 8002fa6:	601a      	str	r2, [r3, #0]
            setServoPWM(servo_array_index);
 8002fa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fd88 	bl	8002ac4 <setServoPWM>
            break;
 8002fb4:	e013      	b.n	8002fde <handle_ArrayCommand+0x12a>
        case UAVCAN_EQUIPMENT_ACTUATOR_COMMAND_COMMAND_TYPE_PWM:
            servos[servo_array_index].position = cmd.commands.data[i].command_value;
 8002fb6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	33a0      	adds	r3, #160	; 0xa0
 8002fbe:	443b      	add	r3, r7
 8002fc0:	3b8c      	subs	r3, #140	; 0x8c
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4915      	ldr	r1, [pc, #84]	; (800301c <handle_ArrayCommand+0x168>)
 8002fc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	440b      	add	r3, r1
 8002fce:	601a      	str	r2, [r3, #0]
            //set the PWM signal duty cycle
            setServoPWM(servo_array_index);
 8002fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fd74 	bl	8002ac4 <setServoPWM>
            break;
 8002fdc:	bf00      	nop
        }
        servos[servo_array_index].last_update_us = tnow;
 8002fde:	4a0f      	ldr	r2, [pc, #60]	; (800301c <handle_ArrayCommand+0x168>)
 8002fe0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f103 0108 	add.w	r1, r3, #8
 8002fec:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002ff0:	e9c1 2300 	strd	r2, r3, [r1]
 8002ff4:	e000      	b.n	8002ff8 <handle_ArrayCommand+0x144>
            continue;
 8002ff6:	bf00      	nop
    for (uint8_t i=0; i < cmd.commands.len; i++) {
 8002ff8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003002:	7b3b      	ldrb	r3, [r7, #12]
 8003004:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8003008:	429a      	cmp	r2, r3
 800300a:	d39c      	bcc.n	8002f46 <handle_ArrayCommand+0x92>
 800300c:	e000      	b.n	8003010 <handle_ArrayCommand+0x15c>
        return;
 800300e:	bf00      	nop

        //call a function to run the servos with the data set in this function
    }
}
 8003010:	37a0      	adds	r7, #160	; 0xa0
 8003012:	46bd      	mov	sp, r7
 8003014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003018:	08008b7c 	.word	0x08008b7c
 800301c:	20000518 	.word	0x20000518

08003020 <handle_GetNodeInfo>:

/*
  handle a GetNodeInfo request
*/
// TODO: All the data in here is temporary for testing. If actually need to send valid data, edit accordingly.
void handle_GetNodeInfo(CanardInstance *ins, CanardRxTransfer *transfer) {
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
 8003026:	af06      	add	r7, sp, #24
 8003028:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800302c:	f5a3 7343 	sub.w	r3, r3, #780	; 0x30c
 8003030:	6018      	str	r0, [r3, #0]
 8003032:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003036:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800303a:	6019      	str	r1, [r3, #0]
	printf("GetNodeInfo request from %d\n", transfer->source_node_id);
 800303c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003040:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	7edb      	ldrb	r3, [r3, #27]
 8003048:	4619      	mov	r1, r3
 800304a:	484f      	ldr	r0, [pc, #316]	; (8003188 <handle_GetNodeInfo+0x168>)
 800304c:	f004 fe28 	bl	8007ca0 <iprintf>

	uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];
	struct uavcan_protocol_GetNodeInfoResponse pkt;

	memset(&pkt, 0, sizeof(pkt));
 8003050:	f107 0308 	add.w	r3, r7, #8
 8003054:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f004 ff7e 	bl	8007f5c <memset>

	node_status.uptime_sec = HAL_GetTick() / 1000ULL;
 8003060:	f001 fc7e 	bl	8004960 <HAL_GetTick>
 8003064:	4603      	mov	r3, r0
 8003066:	4a49      	ldr	r2, [pc, #292]	; (800318c <handle_GetNodeInfo+0x16c>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	099b      	lsrs	r3, r3, #6
 800306e:	4a48      	ldr	r2, [pc, #288]	; (8003190 <handle_GetNodeInfo+0x170>)
 8003070:	6013      	str	r3, [r2, #0]
	pkt.status = node_status;
 8003072:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003076:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800307a:	4a45      	ldr	r2, [pc, #276]	; (8003190 <handle_GetNodeInfo+0x170>)
 800307c:	ca07      	ldmia	r2, {r0, r1, r2}
 800307e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// fill in your major and minor firmware version
	pkt.software_version.major = 1;
 8003082:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003086:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800308a:	2201      	movs	r2, #1
 800308c:	741a      	strb	r2, [r3, #16]
	pkt.software_version.minor = 0;
 800308e:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003092:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8003096:	2200      	movs	r2, #0
 8003098:	745a      	strb	r2, [r3, #17]
	pkt.software_version.optional_field_flags = 0;
 800309a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800309e:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80030a2:	2200      	movs	r2, #0
 80030a4:	749a      	strb	r2, [r3, #18]
	pkt.software_version.vcs_commit = 0; // should put git hash in here
 80030a6:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80030aa:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80030ae:	2200      	movs	r2, #0
 80030b0:	615a      	str	r2, [r3, #20]

	// should fill in hardware version
	pkt.hardware_version.major = 1;
 80030b2:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80030b6:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2020 	strb.w	r2, [r3, #32]
	pkt.hardware_version.minor = 0;
 80030c0:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80030c4:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	// just setting all 16 bytes to 1 for testing
	getUniqueID(pkt.hardware_version.unique_id);
 80030ce:	f107 0308 	add.w	r3, r7, #8
 80030d2:	3322      	adds	r3, #34	; 0x22
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fcd4 	bl	8002a82 <getUniqueID>

	strncpy((char*)pkt.name.data, "SERVONode", sizeof(pkt.name.data));
 80030da:	f107 0308 	add.w	r3, r7, #8
 80030de:	f203 1333 	addw	r3, r3, #307	; 0x133
 80030e2:	2250      	movs	r2, #80	; 0x50
 80030e4:	492b      	ldr	r1, [pc, #172]	; (8003194 <handle_GetNodeInfo+0x174>)
 80030e6:	4618      	mov	r0, r3
 80030e8:	f004 ff40 	bl	8007f6c <strncpy>
	pkt.name.len = strnlen((char*)pkt.name.data, sizeof(pkt.name.data));
 80030ec:	f107 0308 	add.w	r3, r7, #8
 80030f0:	f203 1333 	addw	r3, r3, #307	; 0x133
 80030f4:	2150      	movs	r1, #80	; 0x50
 80030f6:	4618      	mov	r0, r3
 80030f8:	f004 ff4b 	bl	8007f92 <strnlen>
 80030fc:	4603      	mov	r3, r0
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003104:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8003108:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

	uint16_t total_size = uavcan_protocol_GetNodeInfoResponse_encode(&pkt, buffer);
 800310c:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8003110:	f107 0308 	add.w	r3, r7, #8
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f001 fa2a 	bl	8004570 <uavcan_protocol_GetNodeInfoResponse_encode>
 800311c:	4603      	mov	r3, r0
 800311e:	f8a7 330e 	strh.w	r3, [r7, #782]	; 0x30e

	canardRequestOrRespond(ins,
 8003122:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003126:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	7edc      	ldrb	r4, [r3, #27]
 800312e:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8003132:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3319      	adds	r3, #25
 800313a:	f507 7244 	add.w	r2, r7, #784	; 0x310
 800313e:	f5a2 7244 	sub.w	r2, r2, #784	; 0x310
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	7e92      	ldrb	r2, [r2, #26]
 8003146:	f507 7144 	add.w	r1, r7, #784	; 0x310
 800314a:	f5a1 7043 	sub.w	r0, r1, #780	; 0x30c
 800314e:	f8b7 130e 	ldrh.w	r1, [r7, #782]	; 0x30e
 8003152:	9105      	str	r1, [sp, #20]
 8003154:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8003158:	9104      	str	r1, [sp, #16]
 800315a:	2100      	movs	r1, #0
 800315c:	9103      	str	r1, [sp, #12]
 800315e:	9202      	str	r2, [sp, #8]
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	2301      	movs	r3, #1
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	a306      	add	r3, pc, #24	; (adr r3, 8003180 <handle_GetNodeInfo+0x160>)
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	4621      	mov	r1, r4
 800316e:	6800      	ldr	r0, [r0, #0]
 8003170:	f7fd fc4e 	bl	8000a10 <canardRequestOrRespond>
						   &transfer->transfer_id,
						   transfer->priority,
						   CanardResponse,
						   &buffer[0],
						   total_size);
}
 8003174:	bf00      	nop
 8003176:	f507 7745 	add.w	r7, r7, #788	; 0x314
 800317a:	46bd      	mov	sp, r7
 800317c:	bd90      	pop	{r4, r7, pc}
 800317e:	bf00      	nop
 8003180:	21c46a9e 	.word	0x21c46a9e
 8003184:	ee468a81 	.word	0xee468a81
 8003188:	08008b94 	.word	0x08008b94
 800318c:	10624dd3 	.word	0x10624dd3
 8003190:	20000560 	.word	0x20000560
 8003194:	08008bb4 	.word	0x08008bb4

08003198 <rand_prng>:

// Function to generate a pseudo-random 32-bit unsigned integer
uint32_t rand_prng(void) {
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  #define LCG_MULTIPLIER  1664525UL
  // c (increment)
  #define LCG_INCREMENT   1013904223UL
  // m (modulus) - Implicitly 2^32 due to uint32_t overflow

  prng_seed = (LCG_MULTIPLIER * prng_seed + LCG_INCREMENT);
 800319c:	4b07      	ldr	r3, [pc, #28]	; (80031bc <rand_prng+0x24>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a07      	ldr	r2, [pc, #28]	; (80031c0 <rand_prng+0x28>)
 80031a2:	fb03 f202 	mul.w	r2, r3, r2
 80031a6:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <rand_prng+0x2c>)
 80031a8:	4413      	add	r3, r2
 80031aa:	4a04      	ldr	r2, [pc, #16]	; (80031bc <rand_prng+0x24>)
 80031ac:	6013      	str	r3, [r2, #0]
  return prng_seed;
 80031ae:	4b03      	ldr	r3, [pc, #12]	; (80031bc <rand_prng+0x24>)
 80031b0:	681b      	ldr	r3, [r3, #0]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	20000000 	.word	0x20000000
 80031c0:	0019660d 	.word	0x0019660d
 80031c4:	3c6ef35f 	.word	0x3c6ef35f

080031c8 <handle_DNA_Allocation>:

static void handle_DNA_Allocation(CanardInstance *ins, CanardRxTransfer *transfer){
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b08d      	sub	sp, #52	; 0x34
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
	if(canardGetLocalNodeID(&canard) != CANARD_BROADCAST_NODE_ID){
 80031d2:	4835      	ldr	r0, [pc, #212]	; (80032a8 <handle_DNA_Allocation+0xe0>)
 80031d4:	f7fd fb0a 	bl	80007ec <canardGetLocalNodeID>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d15e      	bne.n	800329c <handle_DNA_Allocation+0xd4>
		// allocated
		return;
	}

	DNA.send_next_node_id_allocation_request_at_ms = HAL_GetTick()
 80031de:	f001 fbbf 	bl	8004960 <HAL_GetTick>
 80031e2:	4604      	mov	r4, r0
			+ UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MIN_REQUEST_PERIOD_MS
			+ (rand_prng() % UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_FOLLOWUP_DELAY_MS);
 80031e4:	f7ff ffd8 	bl	8003198 <rand_prng>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b30      	ldr	r3, [pc, #192]	; (80032ac <handle_DNA_Allocation+0xe4>)
 80031ec:	fba3 1302 	umull	r1, r3, r3, r2
 80031f0:	09db      	lsrs	r3, r3, #7
 80031f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	4423      	add	r3, r4
 80031fe:	f503 7316 	add.w	r3, r3, #600	; 0x258
	DNA.send_next_node_id_allocation_request_at_ms = HAL_GetTick()
 8003202:	4a2b      	ldr	r2, [pc, #172]	; (80032b0 <handle_DNA_Allocation+0xe8>)
 8003204:	6013      	str	r3, [r2, #0]

	if (transfer->source_node_id == CANARD_BROADCAST_NODE_ID){
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	7edb      	ldrb	r3, [r3, #27]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <handle_DNA_Allocation+0x54>
		printf("Allocation request from another allocatee\n");
 800320e:	4829      	ldr	r0, [pc, #164]	; (80032b4 <handle_DNA_Allocation+0xec>)
 8003210:	f004 fdb4 	bl	8007d7c <puts>
		DNA.node_id_allocation_unique_id_offset = 0;
 8003214:	4b26      	ldr	r3, [pc, #152]	; (80032b0 <handle_DNA_Allocation+0xe8>)
 8003216:	2200      	movs	r2, #0
 8003218:	605a      	str	r2, [r3, #4]
		return;
 800321a:	e042      	b.n	80032a2 <handle_DNA_Allocation+0xda>
	}

	// Copying the unique ID from the message
	struct uavcan_protocol_dynamic_node_id_Allocation msg;

	if (uavcan_protocol_dynamic_node_id_Allocation_decode(transfer, &msg)) {
 800321c:	f107 031c 	add.w	r3, r7, #28
 8003220:	4619      	mov	r1, r3
 8003222:	6838      	ldr	r0, [r7, #0]
 8003224:	f001 fb10 	bl	8004848 <uavcan_protocol_dynamic_node_id_Allocation_decode>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d138      	bne.n	80032a0 <handle_DNA_Allocation+0xd8>
		return;
	}

	// Obtaining the local unique ID
	uint8_t my_unique_id[sizeof(msg.unique_id.data)];
	getUniqueID(my_unique_id);
 800322e:	f107 030c 	add.w	r3, r7, #12
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fc25 	bl	8002a82 <getUniqueID>

	// Matching the received UID against the local one
	if (memcmp(msg.unique_id.data, my_unique_id, msg.unique_id.len) != 0) {
 8003238:	7fbb      	ldrb	r3, [r7, #30]
 800323a:	461a      	mov	r2, r3
 800323c:	f107 010c 	add.w	r1, r7, #12
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	3303      	adds	r3, #3
 8003246:	4618      	mov	r0, r3
 8003248:	f004 fe78 	bl	8007f3c <memcmp>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d006      	beq.n	8003260 <handle_DNA_Allocation+0x98>
		printf("Mismatching allocation response\n");
 8003252:	4819      	ldr	r0, [pc, #100]	; (80032b8 <handle_DNA_Allocation+0xf0>)
 8003254:	f004 fd92 	bl	8007d7c <puts>
		DNA.node_id_allocation_unique_id_offset = 0;
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <handle_DNA_Allocation+0xe8>)
 800325a:	2200      	movs	r2, #0
 800325c:	605a      	str	r2, [r3, #4]
		// No match, return
		return;
 800325e:	e020      	b.n	80032a2 <handle_DNA_Allocation+0xda>
	}

	if (msg.unique_id.len < sizeof(msg.unique_id.data)) {
 8003260:	7fbb      	ldrb	r3, [r7, #30]
 8003262:	2b0f      	cmp	r3, #15
 8003264:	d80f      	bhi.n	8003286 <handle_DNA_Allocation+0xbe>
		// The allocator has confirmed part of unique ID, switching to
		// the next stage and updating the timeout.
		DNA.node_id_allocation_unique_id_offset = msg.unique_id.len;
 8003266:	7fbb      	ldrb	r3, [r7, #30]
 8003268:	461a      	mov	r2, r3
 800326a:	4b11      	ldr	r3, [pc, #68]	; (80032b0 <handle_DNA_Allocation+0xe8>)
 800326c:	605a      	str	r2, [r3, #4]
		DNA.send_next_node_id_allocation_request_at_ms -= UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MIN_REQUEST_PERIOD_MS;
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <handle_DNA_Allocation+0xe8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003276:	4a0e      	ldr	r2, [pc, #56]	; (80032b0 <handle_DNA_Allocation+0xe8>)
 8003278:	6013      	str	r3, [r2, #0]

		printf("Matching allocation response: %d\n", msg.unique_id.len);
 800327a:	7fbb      	ldrb	r3, [r7, #30]
 800327c:	4619      	mov	r1, r3
 800327e:	480f      	ldr	r0, [pc, #60]	; (80032bc <handle_DNA_Allocation+0xf4>)
 8003280:	f004 fd0e 	bl	8007ca0 <iprintf>
 8003284:	e00d      	b.n	80032a2 <handle_DNA_Allocation+0xda>
	} else {
		// Allocation complete - copying the allocated node ID from the message
		canardSetLocalNodeID(ins, msg.node_id);
 8003286:	7f3b      	ldrb	r3, [r7, #28]
 8003288:	4619      	mov	r1, r3
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fd fa94 	bl	80007b8 <canardSetLocalNodeID>
		printf("Node ID allocated: %d\n", msg.node_id);
 8003290:	7f3b      	ldrb	r3, [r7, #28]
 8003292:	4619      	mov	r1, r3
 8003294:	480a      	ldr	r0, [pc, #40]	; (80032c0 <handle_DNA_Allocation+0xf8>)
 8003296:	f004 fd03 	bl	8007ca0 <iprintf>
 800329a:	e002      	b.n	80032a2 <handle_DNA_Allocation+0xda>
		return;
 800329c:	bf00      	nop
 800329e:	e000      	b.n	80032a2 <handle_DNA_Allocation+0xda>
		return;
 80032a0:	bf00      	nop
	}
}
 80032a2:	3734      	adds	r7, #52	; 0x34
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd90      	pop	{r4, r7, pc}
 80032a8:	200000ec 	.word	0x200000ec
 80032ac:	51eb851f 	.word	0x51eb851f
 80032b0:	20000558 	.word	0x20000558
 80032b4:	08008bc0 	.word	0x08008bc0
 80032b8:	08008bec 	.word	0x08008bec
 80032bc:	08008c0c 	.word	0x08008c0c
 80032c0:	08008c30 	.word	0x08008c30
 80032c4:	00000000 	.word	0x00000000

080032c8 <request_DNA>:

static void request_DNA()
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b090      	sub	sp, #64	; 0x40
 80032cc:	af06      	add	r7, sp, #24
    const uint32_t now = HAL_GetTick();
 80032ce:	f001 fb47 	bl	8004960 <HAL_GetTick>
 80032d2:	6238      	str	r0, [r7, #32]
    static uint8_t node_id_allocation_transfer_id = 0;

    DNA.send_next_node_id_allocation_request_at_ms =
        now + UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MIN_REQUEST_PERIOD_MS +
        (rand_prng() % UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_FOLLOWUP_DELAY_MS);
 80032d4:	f7ff ff60 	bl	8003198 <rand_prng>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b33      	ldr	r3, [pc, #204]	; (80033a8 <request_DNA+0xe0>)
 80032dc:	fba3 1302 	umull	r1, r3, r3, r2
 80032e0:	09db      	lsrs	r3, r3, #7
 80032e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	1ad3      	subs	r3, r2, r3
        now + UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MIN_REQUEST_PERIOD_MS +
 80032ec:	6a3a      	ldr	r2, [r7, #32]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 7316 	add.w	r3, r3, #600	; 0x258
    DNA.send_next_node_id_allocation_request_at_ms =
 80032f4:	4a2d      	ldr	r2, [pc, #180]	; (80033ac <request_DNA+0xe4>)
 80032f6:	6013      	str	r3, [r2, #0]

    // Structure of the request is documented in the DSDL definition
    // See http://uavcan.org/Specification/6._Application_level_functions/#dynamic-node-id-allocation
    uint8_t allocation_request[CANARD_CAN_FRAME_MAX_DATA_LEN - 1];
    allocation_request[0] = (uint8_t)(PREFERRED_NODE_ID << 1U);
 80032f8:	2392      	movs	r3, #146	; 0x92
 80032fa:	753b      	strb	r3, [r7, #20]

    if (DNA.node_id_allocation_unique_id_offset == 0) {
 80032fc:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <request_DNA+0xe4>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d104      	bne.n	800330e <request_DNA+0x46>
        allocation_request[0] |= 1;     // First part of unique ID
 8003304:	7d3b      	ldrb	r3, [r7, #20]
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	b2db      	uxtb	r3, r3
 800330c:	753b      	strb	r3, [r7, #20]
    }

    uint8_t my_unique_id[16];
    getUniqueID(my_unique_id);
 800330e:	1d3b      	adds	r3, r7, #4
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fbb6 	bl	8002a82 <getUniqueID>

    static const uint8_t MaxLenOfUniqueIDInRequest = 6;
    uint8_t uid_size = (uint8_t)(16 - DNA.node_id_allocation_unique_id_offset);
 8003316:	4b25      	ldr	r3, [pc, #148]	; (80033ac <request_DNA+0xe4>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f1c3 0310 	rsb	r3, r3, #16
 8003320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (uid_size > MaxLenOfUniqueIDInRequest) {
 8003324:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <request_DNA+0xe8>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800332c:	429a      	cmp	r2, r3
 800332e:	d903      	bls.n	8003338 <request_DNA+0x70>
        uid_size = MaxLenOfUniqueIDInRequest;
 8003330:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <request_DNA+0xe8>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    memmove(&allocation_request[1], &my_unique_id[DNA.node_id_allocation_unique_id_offset], uid_size);
 8003338:	4b1c      	ldr	r3, [pc, #112]	; (80033ac <request_DNA+0xe4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	1d3a      	adds	r2, r7, #4
 800333e:	18d1      	adds	r1, r2, r3
 8003340:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	3301      	adds	r3, #1
 800334a:	4618      	mov	r0, r3
 800334c:	f004 feb0 	bl	80080b0 <memcpy>

    // Broadcasting the request
    const int16_t bcast_res = canardBroadcast(&canard,
 8003350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003354:	b29b      	uxth	r3, r3
 8003356:	3301      	adds	r3, #1
 8003358:	b29b      	uxth	r3, r3
 800335a:	9304      	str	r3, [sp, #16]
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	9303      	str	r3, [sp, #12]
 8003362:	2318      	movs	r3, #24
 8003364:	9302      	str	r3, [sp, #8]
 8003366:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <request_DNA+0xec>)
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	2301      	movs	r3, #1
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	a30c      	add	r3, pc, #48	; (adr r3, 80033a0 <request_DNA+0xd8>)
 8003370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003374:	4810      	ldr	r0, [pc, #64]	; (80033b8 <request_DNA+0xf0>)
 8003376:	f7fd fa45 	bl	8000804 <canardBroadcast>
 800337a:	4603      	mov	r3, r0
 800337c:	83fb      	strh	r3, [r7, #30]
                                              UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_ID,
                                              &node_id_allocation_transfer_id,
                                              CANARD_TRANSFER_PRIORITY_LOW,
                                              &allocation_request[0],
                                              (uint16_t) (uid_size + 1));
    if (bcast_res < 0) {
 800337e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003382:	2b00      	cmp	r3, #0
 8003384:	da05      	bge.n	8003392 <request_DNA+0xca>
        printf("Could not broadcast ID allocation req; error %d\n", bcast_res);
 8003386:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800338a:	4619      	mov	r1, r3
 800338c:	480b      	ldr	r0, [pc, #44]	; (80033bc <request_DNA+0xf4>)
 800338e:	f004 fc87 	bl	8007ca0 <iprintf>
    }

    // Preparing for timeout; if response is received, this value will be updated from the callback.
    DNA.node_id_allocation_unique_id_offset = 0;
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <request_DNA+0xe4>)
 8003394:	2200      	movs	r2, #0
 8003396:	605a      	str	r2, [r3, #4]
}
 8003398:	bf00      	nop
 800339a:	3728      	adds	r7, #40	; 0x28
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20a11d40 	.word	0x20a11d40
 80033a4:	0b2a8126 	.word	0x0b2a8126
 80033a8:	51eb851f 	.word	0x51eb851f
 80033ac:	20000558 	.word	0x20000558
 80033b0:	08008cb8 	.word	0x08008cb8
 80033b4:	2000056c 	.word	0x2000056c
 80033b8:	200000ec 	.word	0x200000ec
 80033bc:	08008c48 	.word	0x08008c48

080033c0 <send_NodeStatus>:

/*
  send the 1Hz NodeStatus message. This is what allows a node to show
  up in the DroneCAN GUI tool and in the flight controller logs
 */
void send_NodeStatus(void) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b0e6      	sub	sp, #408	; 0x198
 80033c4:	af06      	add	r7, sp, #24
    uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];

    node_status.uptime_sec = HAL_GetTick() / 1000UL;
 80033c6:	f001 facb 	bl	8004960 <HAL_GetTick>
 80033ca:	4603      	mov	r3, r0
 80033cc:	4a1a      	ldr	r2, [pc, #104]	; (8003438 <send_NodeStatus+0x78>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	099b      	lsrs	r3, r3, #6
 80033d4:	4a19      	ldr	r2, [pc, #100]	; (800343c <send_NodeStatus+0x7c>)
 80033d6:	6013      	str	r3, [r2, #0]
    node_status.health = UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK;
 80033d8:	4b18      	ldr	r3, [pc, #96]	; (800343c <send_NodeStatus+0x7c>)
 80033da:	2200      	movs	r2, #0
 80033dc:	711a      	strb	r2, [r3, #4]
    node_status.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL;
 80033de:	4b17      	ldr	r3, [pc, #92]	; (800343c <send_NodeStatus+0x7c>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	715a      	strb	r2, [r3, #5]
    node_status.sub_mode = 0;
 80033e4:	4b15      	ldr	r3, [pc, #84]	; (800343c <send_NodeStatus+0x7c>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	719a      	strb	r2, [r3, #6]

    // put whatever you like in here for display in GUI
    node_status.vendor_specific_status_code = 1234;
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <send_NodeStatus+0x7c>)
 80033ec:	f240 42d2 	movw	r2, #1234	; 0x4d2
 80033f0:	811a      	strh	r2, [r3, #8]

    uint32_t len = uavcan_protocol_NodeStatus_encode(&node_status, buffer);
 80033f2:	463b      	mov	r3, r7
 80033f4:	4619      	mov	r1, r3
 80033f6:	4811      	ldr	r0, [pc, #68]	; (800343c <send_NodeStatus+0x7c>)
 80033f8:	f001 f97a 	bl	80046f0 <uavcan_protocol_NodeStatus_encode>
 80033fc:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    // we need a static variable for the transfer ID. This is
    // incremeneted on each transfer, allowing for detection of packet
    // loss
    static uint8_t transfer_id;

    canardBroadcast(&canard,
 8003400:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003404:	b29b      	uxth	r3, r3
 8003406:	9304      	str	r3, [sp, #16]
 8003408:	463b      	mov	r3, r7
 800340a:	9303      	str	r3, [sp, #12]
 800340c:	2318      	movs	r3, #24
 800340e:	9302      	str	r3, [sp, #8]
 8003410:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <send_NodeStatus+0x80>)
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	f240 1355 	movw	r3, #341	; 0x155
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	a305      	add	r3, pc, #20	; (adr r3, 8003430 <send_NodeStatus+0x70>)
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	4808      	ldr	r0, [pc, #32]	; (8003444 <send_NodeStatus+0x84>)
 8003422:	f7fd f9ef 	bl	8000804 <canardBroadcast>
                    UAVCAN_PROTOCOL_NODESTATUS_ID,
                    &transfer_id,
                    CANARD_TRANSFER_PRIORITY_LOW,
                    buffer,
                    len);
}
 8003426:	bf00      	nop
 8003428:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	c1a7c6f1 	.word	0xc1a7c6f1
 8003434:	0f0868d0 	.word	0x0f0868d0
 8003438:	10624dd3 	.word	0x10624dd3
 800343c:	20000560 	.word	0x20000560
 8003440:	2000056d 	.word	0x2000056d
 8003444:	200000ec 	.word	0x200000ec

08003448 <shouldAcceptTransfer>:
bool shouldAcceptTransfer(const CanardInstance *ins,
                                 uint64_t *out_data_type_signature,
                                 uint16_t data_type_id,
                                 CanardTransferType transfer_type,
                                 uint8_t source_node_id)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	4611      	mov	r1, r2
 8003454:	461a      	mov	r2, r3
 8003456:	460b      	mov	r3, r1
 8003458:	80fb      	strh	r3, [r7, #6]
 800345a:	4613      	mov	r3, r2
 800345c:	717b      	strb	r3, [r7, #5]
	if (transfer_type == CanardTransferTypeRequest) {
 800345e:	797b      	ldrb	r3, [r7, #5]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d10a      	bne.n	800347a <shouldAcceptTransfer+0x32>
	// check if we want to handle a specific service request
		switch (data_type_id) {
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d107      	bne.n	800347a <shouldAcceptTransfer+0x32>
		case UAVCAN_PROTOCOL_GETNODEINFO_ID: {
			*out_data_type_signature = UAVCAN_PROTOCOL_GETNODEINFO_REQUEST_SIGNATURE;
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	a31e      	add	r3, pc, #120	; (adr r3, 80034e8 <shouldAcceptTransfer+0xa0>)
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 8003476:	2301      	movs	r3, #1
 8003478:	e02e      	b.n	80034d8 <shouldAcceptTransfer+0x90>
		}
		}
	}
	if (transfer_type == CanardTransferTypeResponse) {
 800347a:	797b      	ldrb	r3, [r7, #5]
 800347c:	2b00      	cmp	r3, #0
		// check if we want to handle a specific service request
		switch (data_type_id) {
		}
	}
	if (transfer_type == CanardTransferTypeBroadcast) {
 800347e:	797b      	ldrb	r3, [r7, #5]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d128      	bne.n	80034d6 <shouldAcceptTransfer+0x8e>
		// see if we want to handle a specific broadcast packet
		switch (data_type_id) {
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	f644 6227 	movw	r2, #20007	; 0x4e27
 800348a:	4293      	cmp	r3, r2
 800348c:	d01b      	beq.n	80034c6 <shouldAcceptTransfer+0x7e>
 800348e:	f644 6227 	movw	r2, #20007	; 0x4e27
 8003492:	4293      	cmp	r3, r2
 8003494:	dc1f      	bgt.n	80034d6 <shouldAcceptTransfer+0x8e>
 8003496:	f240 1255 	movw	r2, #341	; 0x155
 800349a:	4293      	cmp	r3, r2
 800349c:	d00b      	beq.n	80034b6 <shouldAcceptTransfer+0x6e>
 800349e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d117      	bne.n	80034d6 <shouldAcceptTransfer+0x8e>
		case UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_ID: {
			*out_data_type_signature = UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_SIGNATURE; //Change this
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	a311      	add	r3, pc, #68	; (adr r3, 80034f0 <shouldAcceptTransfer+0xa8>)
 80034aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ae:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e010      	b.n	80034d8 <shouldAcceptTransfer+0x90>
		}
		case UAVCAN_PROTOCOL_NODESTATUS_ID: {
			*out_data_type_signature = UAVCAN_PROTOCOL_NODESTATUS_SIGNATURE;
 80034b6:	68b9      	ldr	r1, [r7, #8]
 80034b8:	a30f      	add	r3, pc, #60	; (adr r3, 80034f8 <shouldAcceptTransfer+0xb0>)
 80034ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034be:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e008      	b.n	80034d8 <shouldAcceptTransfer+0x90>
		}
		case ARDUPILOT_INDICATION_NOTIFYSTATE_ID: {
			*out_data_type_signature = ARDUPILOT_INDICATION_NOTIFYSTATE_SIGNATURE;
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	a30d      	add	r3, pc, #52	; (adr r3, 8003500 <shouldAcceptTransfer+0xb8>)
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <shouldAcceptTransfer+0x90>
		}
		}
	}
	// we don't want any other messages
	return false;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	f3af 8000 	nop.w
 80034e8:	21c46a9e 	.word	0x21c46a9e
 80034ec:	ee468a81 	.word	0xee468a81
 80034f0:	38ec3af3 	.word	0x38ec3af3
 80034f4:	d8a74862 	.word	0xd8a74862
 80034f8:	c1a7c6f1 	.word	0xc1a7c6f1
 80034fc:	0f0868d0 	.word	0x0f0868d0
 8003500:	1651fdec 	.word	0x1651fdec
 8003504:	631f2a9c 	.word	0x631f2a9c

08003508 <onTransferReceived>:

void onTransferReceived(CanardInstance *ins, CanardRxTransfer *transfer) {
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
//		for (int i = 0; i < transfer->payload_len; i++) {
//			printf("%02x", transfer->payload_head[i]);
//		}
//
//		printf("\n");
	if (transfer->transfer_type == CanardTransferTypeRequest) {
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	7e1b      	ldrb	r3, [r3, #24]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d108      	bne.n	800352c <onTransferReceived+0x24>
		// check if we want to handle a specific service request
		switch (transfer->data_type_id) {
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	8adb      	ldrh	r3, [r3, #22]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d104      	bne.n	800352c <onTransferReceived+0x24>
		case UAVCAN_PROTOCOL_GETNODEINFO_ID: {
			handle_GetNodeInfo(ins, transfer);
 8003522:	6839      	ldr	r1, [r7, #0]
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff fd7b 	bl	8003020 <handle_GetNodeInfo>
			break;
 800352a:	bf00      	nop
		}
		}
	}
	if (transfer->transfer_type == CanardTransferTypeResponse) {
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	7e1b      	ldrb	r3, [r3, #24]
 8003530:	2b00      	cmp	r3, #0
		switch (transfer->data_type_id) {
		}
	}
	if (transfer->transfer_type == CanardTransferTypeBroadcast) {
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	7e1b      	ldrb	r3, [r3, #24]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d12c      	bne.n	8003594 <onTransferReceived+0x8c>
		// check if we want to handle a specific broadcast message
		switch (transfer->data_type_id) {
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	8adb      	ldrh	r3, [r3, #22]
 800353e:	f644 6227 	movw	r2, #20007	; 0x4e27
 8003542:	4293      	cmp	r3, r2
 8003544:	d01c      	beq.n	8003580 <onTransferReceived+0x78>
 8003546:	f644 6227 	movw	r2, #20007	; 0x4e27
 800354a:	4293      	cmp	r3, r2
 800354c:	dc22      	bgt.n	8003594 <onTransferReceived+0x8c>
 800354e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8003552:	4293      	cmp	r3, r2
 8003554:	d00a      	beq.n	800356c <onTransferReceived+0x64>
 8003556:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800355a:	4293      	cmp	r3, r2
 800355c:	dc1a      	bgt.n	8003594 <onTransferReceived+0x8c>
 800355e:	2b01      	cmp	r3, #1
 8003560:	d013      	beq.n	800358a <onTransferReceived+0x82>
 8003562:	f240 1255 	movw	r2, #341	; 0x155
 8003566:	4293      	cmp	r3, r2
 8003568:	d005      	beq.n	8003576 <onTransferReceived+0x6e>
            handle_DNA_Allocation(ins, transfer);
            break;
        }
		}
	}
}
 800356a:	e013      	b.n	8003594 <onTransferReceived+0x8c>
			handle_ArrayCommand(ins, transfer);
 800356c:	6839      	ldr	r1, [r7, #0]
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff fca0 	bl	8002eb4 <handle_ArrayCommand>
			break;
 8003574:	e00e      	b.n	8003594 <onTransferReceived+0x8c>
			handle_NodeStatus(ins, transfer);
 8003576:	6839      	ldr	r1, [r7, #0]
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff fb8d 	bl	8002c98 <handle_NodeStatus>
			break;
 800357e:	e009      	b.n	8003594 <onTransferReceived+0x8c>
			handle_NotifyState(ins, transfer);
 8003580:	6839      	ldr	r1, [r7, #0]
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff fc12 	bl	8002dac <handle_NotifyState>
			break;
 8003588:	e004      	b.n	8003594 <onTransferReceived+0x8c>
            handle_DNA_Allocation(ins, transfer);
 800358a:	6839      	ldr	r1, [r7, #0]
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff fe1b 	bl	80031c8 <handle_DNA_Allocation>
            break;
 8003592:	bf00      	nop
}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <processCanardTxQueue>:

void processCanardTxQueue(CAN_HandleTypeDef *hcan) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	// Transmitting

	for (const CanardCANFrame *tx_frame ; (tx_frame = canardPeekTxQueue(&canard)) != NULL;) {
 80035a4:	e01a      	b.n	80035dc <processCanardTxQueue+0x40>
		const int16_t tx_res = canardSTM32Transmit(hcan, tx_frame);
 80035a6:	68f9      	ldr	r1, [r7, #12]
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff f9cb 	bl	8002944 <canardSTM32Transmit>
 80035ae:	4603      	mov	r3, r0
 80035b0:	817b      	strh	r3, [r7, #10]

		if (tx_res < 0) {
 80035b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	da06      	bge.n	80035c8 <processCanardTxQueue+0x2c>
			printf("Transmit error %d\n", tx_res);
 80035ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035be:	4619      	mov	r1, r3
 80035c0:	480c      	ldr	r0, [pc, #48]	; (80035f4 <processCanardTxQueue+0x58>)
 80035c2:	f004 fb6d 	bl	8007ca0 <iprintf>
 80035c6:	e006      	b.n	80035d6 <processCanardTxQueue+0x3a>
		} else if (tx_res > 0) {
 80035c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	dd02      	ble.n	80035d6 <processCanardTxQueue+0x3a>
			printf("Successfully transmitted message\n");
 80035d0:	4809      	ldr	r0, [pc, #36]	; (80035f8 <processCanardTxQueue+0x5c>)
 80035d2:	f004 fbd3 	bl	8007d7c <puts>
		}

		// Pop canardTxQueue either way
		canardPopTxQueue(&canard);
 80035d6:	4809      	ldr	r0, [pc, #36]	; (80035fc <processCanardTxQueue+0x60>)
 80035d8:	f7fd fab5 	bl	8000b46 <canardPopTxQueue>
	for (const CanardCANFrame *tx_frame ; (tx_frame = canardPeekTxQueue(&canard)) != NULL;) {
 80035dc:	4807      	ldr	r0, [pc, #28]	; (80035fc <processCanardTxQueue+0x60>)
 80035de:	f7fd fa9f 	bl	8000b20 <canardPeekTxQueue>
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1dd      	bne.n	80035a6 <processCanardTxQueue+0xa>
	}
}
 80035ea:	bf00      	nop
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	08008c7c 	.word	0x08008c7c
 80035f8:	08008c90 	.word	0x08008c90
 80035fc:	200000ec 	.word	0x200000ec

08003600 <process1HzTasks>:

/*
  This function is called at 1 Hz rate from the main loop.
*/
void process1HzTasks(uint64_t timestamp_usec) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	e9c7 0100 	strd	r0, r1, [r7]
    /*
      Purge transfers that are no longer transmitted. This can free up some memory
    */
    canardCleanupStaleTransfers(&canard, timestamp_usec);
 800360a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800360e:	4804      	ldr	r0, [pc, #16]	; (8003620 <process1HzTasks+0x20>)
 8003610:	f7fd fe4e 	bl	80012b0 <canardCleanupStaleTransfers>

    /*
      Transmit the node status message
    */
    send_NodeStatus();
 8003614:	f7ff fed4 	bl	80033c0 <send_NodeStatus>
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	200000ec 	.word	0x200000ec
 8003624:	00000000 	.word	0x00000000

08003628 <send_ServoStatus>:

/*
  send servo status at 50Hz
*/
static void send_ServoStatus(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b090      	sub	sp, #64	; 0x40
 800362c:	af06      	add	r7, sp, #24
    // send a separate status packet for each servo
    for (uint8_t i=0; i<NUM_SERVOS; i++) {
 800362e:	2300      	movs	r3, #0
 8003630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003634:	e037      	b.n	80036a6 <send_ServoStatus+0x7e>
        struct uavcan_equipment_actuator_Status pkt;
        memset(&pkt, 0, sizeof(pkt));
 8003636:	f107 030c 	add.w	r3, r7, #12
 800363a:	2214      	movs	r2, #20
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f004 fc8c 	bl	8007f5c <memset>
        uint8_t buffer[UAVCAN_EQUIPMENT_ACTUATOR_STATUS_MAX_SIZE];

        // make up some synthetic status data
        pkt.actuator_id = i;
 8003644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003648:	733b      	strb	r3, [r7, #12]
        pkt.position = servos[i].position;
 800364a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800364e:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <send_ServoStatus+0x98>)
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	4413      	add	r3, r2
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	613b      	str	r3, [r7, #16]
        pkt.force = 0;
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
        pkt.speed = 0; // m/s or rad/s
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	61bb      	str	r3, [r7, #24]
        pkt.power_rating_pct = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	773b      	strb	r3, [r7, #28]

        uint32_t len = uavcan_equipment_actuator_Status_encode(&pkt, buffer);
 8003668:	1d3a      	adds	r2, r7, #4
 800366a:	f107 030c 	add.w	r3, r7, #12
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fdfa 	bl	800426a <uavcan_equipment_actuator_Status_encode>
 8003676:	6238      	str	r0, [r7, #32]
        // we need a static variable for the transfer ID. This is
        // incremeneted on each transfer, allowing for detection of packet
        // loss
        static uint8_t transfer_id;

        canardBroadcast(&canard,
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	b29b      	uxth	r3, r3
 800367c:	9304      	str	r3, [sp, #16]
 800367e:	1d3b      	adds	r3, r7, #4
 8003680:	9303      	str	r3, [sp, #12]
 8003682:	2318      	movs	r3, #24
 8003684:	9302      	str	r3, [sp, #8]
 8003686:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <send_ServoStatus+0x9c>)
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	f240 33f3 	movw	r3, #1011	; 0x3f3
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	a309      	add	r3, pc, #36	; (adr r3, 80036b8 <send_ServoStatus+0x90>)
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	480c      	ldr	r0, [pc, #48]	; (80036c8 <send_ServoStatus+0xa0>)
 8003698:	f7fd f8b4 	bl	8000804 <canardBroadcast>
    for (uint8_t i=0; i<NUM_SERVOS; i++) {
 800369c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036a0:	3301      	adds	r3, #1
 80036a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d9c3      	bls.n	8003636 <send_ServoStatus+0xe>
                        &transfer_id,
                        CANARD_TRANSFER_PRIORITY_LOW,
                        buffer,
                        len);
    }
}
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	3728      	adds	r7, #40	; 0x28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	faf1ea04 	.word	0xfaf1ea04
 80036bc:	5e9bba44 	.word	0x5e9bba44
 80036c0:	20000518 	.word	0x20000518
 80036c4:	2000056e 	.word	0x2000056e
 80036c8:	200000ec 	.word	0x200000ec

080036cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d0:	b08c      	sub	sp, #48	; 0x30
 80036d2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036d4:	f001 f8dc 	bl	8004890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036d8:	f000 f8aa 	bl	8003830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036dc:	f7ff f986 	bl	80029ec <MX_GPIO_Init>
  MX_CAN1_Init();
 80036e0:	f7fc ffa2 	bl	8000628 <MX_CAN1_Init>
  MX_TIM1_Init();
 80036e4:	f000 fa14 	bl	8003b10 <MX_TIM1_Init>
  MX_TIM2_Init();
 80036e8:	f000 fad6 	bl	8003c98 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


	//CHECK: can maybe remove (prev code from Hardy Testing)
	canfil.FilterBank = 0;
 80036ec:	4b49      	ldr	r3, [pc, #292]	; (8003814 <main+0x148>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	615a      	str	r2, [r3, #20]
	canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 80036f2:	4b48      	ldr	r3, [pc, #288]	; (8003814 <main+0x148>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	619a      	str	r2, [r3, #24]
	canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 80036f8:	4b46      	ldr	r3, [pc, #280]	; (8003814 <main+0x148>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	611a      	str	r2, [r3, #16]
	canfil.FilterIdHigh = 0;
 80036fe:	4b45      	ldr	r3, [pc, #276]	; (8003814 <main+0x148>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
	canfil.FilterIdLow = 0;
 8003704:	4b43      	ldr	r3, [pc, #268]	; (8003814 <main+0x148>)
 8003706:	2200      	movs	r2, #0
 8003708:	605a      	str	r2, [r3, #4]
	canfil.FilterMaskIdHigh = 0;
 800370a:	4b42      	ldr	r3, [pc, #264]	; (8003814 <main+0x148>)
 800370c:	2200      	movs	r2, #0
 800370e:	609a      	str	r2, [r3, #8]
	canfil.FilterMaskIdLow = 0;
 8003710:	4b40      	ldr	r3, [pc, #256]	; (8003814 <main+0x148>)
 8003712:	2200      	movs	r2, #0
 8003714:	60da      	str	r2, [r3, #12]
	canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8003716:	4b3f      	ldr	r3, [pc, #252]	; (8003814 <main+0x148>)
 8003718:	2201      	movs	r2, #1
 800371a:	61da      	str	r2, [r3, #28]
	canfil.FilterActivation = ENABLE;
 800371c:	4b3d      	ldr	r3, [pc, #244]	; (8003814 <main+0x148>)
 800371e:	2201      	movs	r2, #1
 8003720:	621a      	str	r2, [r3, #32]
	canfil.SlaveStartFilterBank = 14;
 8003722:	4b3c      	ldr	r3, [pc, #240]	; (8003814 <main+0x148>)
 8003724:	220e      	movs	r2, #14
 8003726:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1,&canfil);
 8003728:	493a      	ldr	r1, [pc, #232]	; (8003814 <main+0x148>)
 800372a:	483b      	ldr	r0, [pc, #236]	; (8003818 <main+0x14c>)
 800372c:	f001 fa43 	bl	8004bb6 <HAL_CAN_ConfigFilter>
  	HAL_CAN_Start(&hcan1);
 8003730:	4839      	ldr	r0, [pc, #228]	; (8003818 <main+0x14c>)
 8003732:	f001 fb0a 	bl	8004d4a <HAL_CAN_Start>
  	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003736:	2102      	movs	r1, #2
 8003738:	4837      	ldr	r0, [pc, #220]	; (8003818 <main+0x14c>)
 800373a:	f001 fd3c 	bl	80051b6 <HAL_CAN_ActivateNotification>

	// configuring the pwm wave for servo module
	startAllPWM();
 800373e:	f7ff fa05 	bl	8002b4c <startAllPWM>

	canardInit(&canard,
 8003742:	2300      	movs	r3, #0
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	4b35      	ldr	r3, [pc, #212]	; (800381c <main+0x150>)
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	4b35      	ldr	r3, [pc, #212]	; (8003820 <main+0x154>)
 800374c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003750:	4934      	ldr	r1, [pc, #208]	; (8003824 <main+0x158>)
 8003752:	4835      	ldr	r0, [pc, #212]	; (8003828 <main+0x15c>)
 8003754:	f7fc fffc 	bl	8000750 <canardInit>
				  sizeof(memory_pool),
				  onTransferReceived,
				  shouldAcceptTransfer,
				  NULL);

	uint64_t next_1hz_service_at = HAL_GetTick();
 8003758:	f001 f902 	bl	8004960 <HAL_GetTick>
 800375c:	4603      	mov	r3, r0
 800375e:	2200      	movs	r2, #0
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	60fa      	str	r2, [r7, #12]
 8003764:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003768:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint64_t next_50hz_service_at = HAL_GetTick();
 800376c:	f001 f8f8 	bl	8004960 <HAL_GetTick>
 8003770:	4603      	mov	r3, r0
 8003772:	2200      	movs	r2, #0
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800377c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  processCanardTxQueue(&hcan1);
 8003780:	4825      	ldr	r0, [pc, #148]	; (8003818 <main+0x14c>)
 8003782:	f7ff ff0b 	bl	800359c <processCanardTxQueue>
	
 	  processCanardRxQueue();
 8003786:	f7ff fa3b 	bl	8002c00 <processCanardRxQueue>

	  const uint64_t ts = HAL_GetTick();
 800378a:	f001 f8e9 	bl	8004960 <HAL_GetTick>
 800378e:	4603      	mov	r3, r0
 8003790:	2200      	movs	r2, #0
 8003792:	469a      	mov	sl, r3
 8003794:	4693      	mov	fp, r2
 8003796:	e9c7 ab04 	strd	sl, fp, [r7, #16]

	  if (canardGetLocalNodeID(&canard) == CANARD_BROADCAST_NODE_ID){
 800379a:	4823      	ldr	r0, [pc, #140]	; (8003828 <main+0x15c>)
 800379c:	f7fd f826 	bl	80007ec <canardGetLocalNodeID>
		  // waiting for DNA
	  }

	  // check if we are doing DNA
	  if (canardGetLocalNodeID(&canard) == CANARD_BROADCAST_NODE_ID) {
 80037a0:	4821      	ldr	r0, [pc, #132]	; (8003828 <main+0x15c>)
 80037a2:	f7fd f823 	bl	80007ec <canardGetLocalNodeID>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d109      	bne.n	80037c0 <main+0xf4>
		  if (HAL_GetTick() > DNA.send_next_node_id_allocation_request_at_ms) {
 80037ac:	f001 f8d8 	bl	8004960 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	4b1e      	ldr	r3, [pc, #120]	; (800382c <main+0x160>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d929      	bls.n	800380e <main+0x142>
			  request_DNA();
 80037ba:	f7ff fd85 	bl	80032c8 <request_DNA>
		  }
		  continue;
 80037be:	e026      	b.n	800380e <main+0x142>
	  }

	  if (ts >= next_1hz_service_at){
 80037c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037c8:	4290      	cmp	r0, r2
 80037ca:	eb71 0303 	sbcs.w	r3, r1, r3
 80037ce:	d30b      	bcc.n	80037e8 <main+0x11c>
		  next_1hz_service_at += 1000ULL;
 80037d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037d4:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 80037d8:	f143 0500 	adc.w	r5, r3, #0
 80037dc:	e9c7 4508 	strd	r4, r5, [r7, #32]
		  process1HzTasks(ts);
 80037e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037e4:	f7ff ff0c 	bl	8003600 <process1HzTasks>
	  }
	  if (ts >= next_50hz_service_at){
 80037e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037f0:	4290      	cmp	r0, r2
 80037f2:	eb71 0303 	sbcs.w	r3, r1, r3
 80037f6:	d3c3      	bcc.n	8003780 <main+0xb4>
		  next_50hz_service_at += 1000ULL/50U;
 80037f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037fc:	f112 0814 	adds.w	r8, r2, #20
 8003800:	f143 0900 	adc.w	r9, r3, #0
 8003804:	e9c7 8906 	strd	r8, r9, [r7, #24]
		  send_ServoStatus();
 8003808:	f7ff ff0e 	bl	8003628 <send_ServoStatus>
 800380c:	e7b8      	b.n	8003780 <main+0xb4>
		  continue;
 800380e:	bf00      	nop
  {
 8003810:	e7b6      	b.n	8003780 <main+0xb4>
 8003812:	bf00      	nop
 8003814:	200000c4 	.word	0x200000c4
 8003818:	2000008c 	.word	0x2000008c
 800381c:	08003449 	.word	0x08003449
 8003820:	08003509 	.word	0x08003509
 8003824:	20000118 	.word	0x20000118
 8003828:	200000ec 	.word	0x200000ec
 800382c:	20000558 	.word	0x20000558

08003830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b096      	sub	sp, #88	; 0x58
 8003834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003836:	f107 0314 	add.w	r3, r7, #20
 800383a:	2244      	movs	r2, #68	; 0x44
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f004 fb8c 	bl	8007f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003844:	463b      	mov	r3, r7
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]
 800384e:	60da      	str	r2, [r3, #12]
 8003850:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003852:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003856:	f002 f99d 	bl	8005b94 <HAL_PWREx_ControlVoltageScaling>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003860:	f000 f842 	bl	80038e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003864:	2301      	movs	r3, #1
 8003866:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003868:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800386c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800386e:	2302      	movs	r3, #2
 8003870:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003872:	2303      	movs	r3, #3
 8003874:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003876:	2301      	movs	r3, #1
 8003878:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 800387a:	230c      	movs	r3, #12
 800387c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800387e:	2307      	movs	r3, #7
 8003880:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003882:	2302      	movs	r3, #2
 8003884:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003886:	2302      	movs	r3, #2
 8003888:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800388a:	f107 0314 	add.w	r3, r7, #20
 800388e:	4618      	mov	r0, r3
 8003890:	f002 f9d6 	bl	8005c40 <HAL_RCC_OscConfig>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800389a:	f000 f825 	bl	80038e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800389e:	230f      	movs	r3, #15
 80038a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038a2:	2303      	movs	r3, #3
 80038a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038b2:	463b      	mov	r3, r7
 80038b4:	2102      	movs	r1, #2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f002 fdd6 	bl	8006468 <HAL_RCC_ClockConfig>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80038c2:	f000 f811 	bl	80038e8 <Error_Handler>
  }
}
 80038c6:	bf00      	nop
 80038c8:	3758      	adds	r7, #88	; 0x58
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff f8ab 	bl	8002a34 <ITM_SendChar>
	return ch;
 80038de:	687b      	ldr	r3, [r7, #4]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038ec:	b672      	cpsid	i
}
 80038ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038f0:	e7fe      	b.n	80038f0 <Error_Handler+0x8>
	...

080038f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038fa:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <HAL_MspInit+0x44>)
 80038fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fe:	4a0e      	ldr	r2, [pc, #56]	; (8003938 <HAL_MspInit+0x44>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	6613      	str	r3, [r2, #96]	; 0x60
 8003906:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <HAL_MspInit+0x44>)
 8003908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	607b      	str	r3, [r7, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <HAL_MspInit+0x44>)
 8003914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003916:	4a08      	ldr	r2, [pc, #32]	; (8003938 <HAL_MspInit+0x44>)
 8003918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391c:	6593      	str	r3, [r2, #88]	; 0x58
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_MspInit+0x44>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000

0800393c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003940:	e7fe      	b.n	8003940 <NMI_Handler+0x4>

08003942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003942:	b480      	push	{r7}
 8003944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003946:	e7fe      	b.n	8003946 <HardFault_Handler+0x4>

08003948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800394c:	e7fe      	b.n	800394c <MemManage_Handler+0x4>

0800394e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800394e:	b480      	push	{r7}
 8003950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003952:	e7fe      	b.n	8003952 <BusFault_Handler+0x4>

08003954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003958:	e7fe      	b.n	8003958 <UsageFault_Handler+0x4>

0800395a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800395a:	b480      	push	{r7}
 800395c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800396c:	bf00      	nop
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003976:	b480      	push	{r7}
 8003978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003988:	f000 ffd6 	bl	8004938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800398c:	bf00      	nop
 800398e:	bd80      	pop	{r7, pc}

08003990 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003994:	4802      	ldr	r0, [pc, #8]	; (80039a0 <CAN1_RX0_IRQHandler+0x10>)
 8003996:	f001 fc34 	bl	8005202 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	2000008c 	.word	0x2000008c

080039a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	e00a      	b.n	80039cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039b6:	f3af 8000 	nop.w
 80039ba:	4601      	mov	r1, r0
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	60ba      	str	r2, [r7, #8]
 80039c2:	b2ca      	uxtb	r2, r1
 80039c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	3301      	adds	r3, #1
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	dbf0      	blt.n	80039b6 <_read+0x12>
  }

  return len;
 80039d4:	687b      	ldr	r3, [r7, #4]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b086      	sub	sp, #24
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	e009      	b.n	8003a04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	60ba      	str	r2, [r7, #8]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff ff68 	bl	80038ce <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	3301      	adds	r3, #1
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	dbf1      	blt.n	80039f0 <_write+0x12>
  }
  return len;
 8003a0c:	687b      	ldr	r3, [r7, #4]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <_close>:

int _close(int file)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a3e:	605a      	str	r2, [r3, #4]
  return 0;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <_isatty>:

int _isatty(int file)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a56:	2301      	movs	r3, #1
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a88:	4a14      	ldr	r2, [pc, #80]	; (8003adc <_sbrk+0x5c>)
 8003a8a:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <_sbrk+0x60>)
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a94:	4b13      	ldr	r3, [pc, #76]	; (8003ae4 <_sbrk+0x64>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d102      	bne.n	8003aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a9c:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <_sbrk+0x64>)
 8003a9e:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <_sbrk+0x68>)
 8003aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aa2:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <_sbrk+0x64>)
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d207      	bcs.n	8003ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ab0:	f004 fad2 	bl	8008058 <__errno>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	220c      	movs	r2, #12
 8003ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	e009      	b.n	8003ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ac0:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <_sbrk+0x64>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <_sbrk+0x64>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4413      	add	r3, r2
 8003ace:	4a05      	ldr	r2, [pc, #20]	; (8003ae4 <_sbrk+0x64>)
 8003ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20010000 	.word	0x20010000
 8003ae0:	00000400 	.word	0x00000400
 8003ae4:	20000570 	.word	0x20000570
 8003ae8:	20000760 	.word	0x20000760

08003aec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <SystemInit+0x20>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <SystemInit+0x20>)
 8003af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b09a      	sub	sp, #104	; 0x68
 8003b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	605a      	str	r2, [r3, #4]
 8003b20:	609a      	str	r2, [r3, #8]
 8003b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
 8003b40:	615a      	str	r2, [r3, #20]
 8003b42:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b44:	1d3b      	adds	r3, r7, #4
 8003b46:	222c      	movs	r2, #44	; 0x2c
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f004 fa06 	bl	8007f5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b50:	4b4f      	ldr	r3, [pc, #316]	; (8003c90 <MX_TIM1_Init+0x180>)
 8003b52:	4a50      	ldr	r2, [pc, #320]	; (8003c94 <MX_TIM1_Init+0x184>)
 8003b54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 8003b56:	4b4e      	ldr	r3, [pc, #312]	; (8003c90 <MX_TIM1_Init+0x180>)
 8003b58:	220e      	movs	r2, #14
 8003b5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b5c:	4b4c      	ldr	r3, [pc, #304]	; (8003c90 <MX_TIM1_Init+0x180>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000;
 8003b62:	4b4b      	ldr	r3, [pc, #300]	; (8003c90 <MX_TIM1_Init+0x180>)
 8003b64:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8003b68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b6a:	4b49      	ldr	r3, [pc, #292]	; (8003c90 <MX_TIM1_Init+0x180>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b70:	4b47      	ldr	r3, [pc, #284]	; (8003c90 <MX_TIM1_Init+0x180>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b76:	4b46      	ldr	r3, [pc, #280]	; (8003c90 <MX_TIM1_Init+0x180>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003b7c:	4844      	ldr	r0, [pc, #272]	; (8003c90 <MX_TIM1_Init+0x180>)
 8003b7e:	f002 fe5f 	bl	8006840 <HAL_TIM_Base_Init>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003b88:	f7ff feae 	bl	80038e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b90:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003b92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b96:	4619      	mov	r1, r3
 8003b98:	483d      	ldr	r0, [pc, #244]	; (8003c90 <MX_TIM1_Init+0x180>)
 8003b9a:	f003 f8fb 	bl	8006d94 <HAL_TIM_ConfigClockSource>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003ba4:	f7ff fea0 	bl	80038e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ba8:	4839      	ldr	r0, [pc, #228]	; (8003c90 <MX_TIM1_Init+0x180>)
 8003baa:	f002 fea0 	bl	80068ee <HAL_TIM_PWM_Init>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003bb4:	f7ff fe98 	bl	80038e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003bc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4831      	ldr	r0, [pc, #196]	; (8003c90 <MX_TIM1_Init+0x180>)
 8003bcc:	f003 fdf8 	bl	80077c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003bd6:	f7ff fe87 	bl	80038e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bda:	2360      	movs	r3, #96	; 0x60
 8003bdc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003be2:	2300      	movs	r3, #0
 8003be4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003be6:	2300      	movs	r3, #0
 8003be8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4824      	ldr	r0, [pc, #144]	; (8003c90 <MX_TIM1_Init+0x180>)
 8003c00:	f002 ffb4 	bl	8006b6c <HAL_TIM_PWM_ConfigChannel>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003c0a:	f7ff fe6d 	bl	80038e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c12:	2204      	movs	r2, #4
 8003c14:	4619      	mov	r1, r3
 8003c16:	481e      	ldr	r0, [pc, #120]	; (8003c90 <MX_TIM1_Init+0x180>)
 8003c18:	f002 ffa8 	bl	8006b6c <HAL_TIM_PWM_ConfigChannel>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003c22:	f7ff fe61 	bl	80038e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c2a:	2208      	movs	r2, #8
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4818      	ldr	r0, [pc, #96]	; (8003c90 <MX_TIM1_Init+0x180>)
 8003c30:	f002 ff9c 	bl	8006b6c <HAL_TIM_PWM_ConfigChannel>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8003c3a:	f7ff fe55 	bl	80038e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003c60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003c6e:	1d3b      	adds	r3, r7, #4
 8003c70:	4619      	mov	r1, r3
 8003c72:	4807      	ldr	r0, [pc, #28]	; (8003c90 <MX_TIM1_Init+0x180>)
 8003c74:	f003 fe0a 	bl	800788c <HAL_TIMEx_ConfigBreakDeadTime>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8003c7e:	f7ff fe33 	bl	80038e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003c82:	4803      	ldr	r0, [pc, #12]	; (8003c90 <MX_TIM1_Init+0x180>)
 8003c84:	f000 f8b0 	bl	8003de8 <HAL_TIM_MspPostInit>

}
 8003c88:	bf00      	nop
 8003c8a:	3768      	adds	r7, #104	; 0x68
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20000574 	.word	0x20000574
 8003c94:	40012c00 	.word	0x40012c00

08003c98 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08e      	sub	sp, #56	; 0x38
 8003c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
 8003ca8:	609a      	str	r2, [r3, #8]
 8003caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cac:	f107 031c 	add.w	r3, r7, #28
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cb8:	463b      	mov	r3, r7
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	609a      	str	r2, [r3, #8]
 8003cc2:	60da      	str	r2, [r3, #12]
 8003cc4:	611a      	str	r2, [r3, #16]
 8003cc6:	615a      	str	r2, [r3, #20]
 8003cc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003cca:	4b2d      	ldr	r3, [pc, #180]	; (8003d80 <MX_TIM2_Init+0xe8>)
 8003ccc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003cd0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <MX_TIM2_Init+0xe8>)
 8003cd4:	220e      	movs	r2, #14
 8003cd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cd8:	4b29      	ldr	r3, [pc, #164]	; (8003d80 <MX_TIM2_Init+0xe8>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000;
 8003cde:	4b28      	ldr	r3, [pc, #160]	; (8003d80 <MX_TIM2_Init+0xe8>)
 8003ce0:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8003ce4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ce6:	4b26      	ldr	r3, [pc, #152]	; (8003d80 <MX_TIM2_Init+0xe8>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cec:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <MX_TIM2_Init+0xe8>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003cf2:	4823      	ldr	r0, [pc, #140]	; (8003d80 <MX_TIM2_Init+0xe8>)
 8003cf4:	f002 fda4 	bl	8006840 <HAL_TIM_Base_Init>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003cfe:	f7ff fdf3 	bl	80038e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	481c      	ldr	r0, [pc, #112]	; (8003d80 <MX_TIM2_Init+0xe8>)
 8003d10:	f003 f840 	bl	8006d94 <HAL_TIM_ConfigClockSource>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003d1a:	f7ff fde5 	bl	80038e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003d1e:	4818      	ldr	r0, [pc, #96]	; (8003d80 <MX_TIM2_Init+0xe8>)
 8003d20:	f002 fde5 	bl	80068ee <HAL_TIM_PWM_Init>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003d2a:	f7ff fddd 	bl	80038e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d36:	f107 031c 	add.w	r3, r7, #28
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4810      	ldr	r0, [pc, #64]	; (8003d80 <MX_TIM2_Init+0xe8>)
 8003d3e:	f003 fd3f 	bl	80077c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003d48:	f7ff fdce 	bl	80038e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d4c:	2360      	movs	r3, #96	; 0x60
 8003d4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d5c:	463b      	mov	r3, r7
 8003d5e:	2200      	movs	r2, #0
 8003d60:	4619      	mov	r1, r3
 8003d62:	4807      	ldr	r0, [pc, #28]	; (8003d80 <MX_TIM2_Init+0xe8>)
 8003d64:	f002 ff02 	bl	8006b6c <HAL_TIM_PWM_ConfigChannel>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003d6e:	f7ff fdbb 	bl	80038e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003d72:	4803      	ldr	r0, [pc, #12]	; (8003d80 <MX_TIM2_Init+0xe8>)
 8003d74:	f000 f838 	bl	8003de8 <HAL_TIM_MspPostInit>

}
 8003d78:	bf00      	nop
 8003d7a:	3738      	adds	r7, #56	; 0x38
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	200005c0 	.word	0x200005c0

08003d84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a13      	ldr	r2, [pc, #76]	; (8003de0 <HAL_TIM_Base_MspInit+0x5c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d10c      	bne.n	8003db0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d96:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <HAL_TIM_Base_MspInit+0x60>)
 8003d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9a:	4a12      	ldr	r2, [pc, #72]	; (8003de4 <HAL_TIM_Base_MspInit+0x60>)
 8003d9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003da0:	6613      	str	r3, [r2, #96]	; 0x60
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <HAL_TIM_Base_MspInit+0x60>)
 8003da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003dae:	e010      	b.n	8003dd2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db8:	d10b      	bne.n	8003dd2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dba:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <HAL_TIM_Base_MspInit+0x60>)
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbe:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <HAL_TIM_Base_MspInit+0x60>)
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8003dc6:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <HAL_TIM_Base_MspInit+0x60>)
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40012c00 	.word	0x40012c00
 8003de4:	40021000 	.word	0x40021000

08003de8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df0:	f107 0314 	add.w	r3, r7, #20
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a24      	ldr	r2, [pc, #144]	; (8003e98 <HAL_TIM_MspPostInit+0xb0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d11e      	bne.n	8003e48 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0a:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <HAL_TIM_MspPostInit+0xb4>)
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0e:	4a23      	ldr	r2, [pc, #140]	; (8003e9c <HAL_TIM_MspPostInit+0xb4>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e16:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <HAL_TIM_MspPostInit+0xb4>)
 8003e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8003e22:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8003e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e30:	2300      	movs	r3, #0
 8003e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e34:	2301      	movs	r3, #1
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e38:	f107 0314 	add.w	r3, r7, #20
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e42:	f001 fd1f 	bl	8005884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003e46:	e022      	b.n	8003e8e <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e50:	d11d      	bne.n	8003e8e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e52:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <HAL_TIM_MspPostInit+0xb4>)
 8003e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e56:	4a11      	ldr	r2, [pc, #68]	; (8003e9c <HAL_TIM_MspPostInit+0xb4>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e5e:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <HAL_TIM_MspPostInit+0xb4>)
 8003e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e70:	2302      	movs	r3, #2
 8003e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e80:	f107 0314 	add.w	r3, r7, #20
 8003e84:	4619      	mov	r1, r3
 8003e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e8a:	f001 fcfb 	bl	8005884 <HAL_GPIO_Init>
}
 8003e8e:	bf00      	nop
 8003e90:	3728      	adds	r7, #40	; 0x28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40021000 	.word	0x40021000

08003ea0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ed8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ea4:	f7ff fe22 	bl	8003aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ea8:	480c      	ldr	r0, [pc, #48]	; (8003edc <LoopForever+0x6>)
  ldr r1, =_edata
 8003eaa:	490d      	ldr	r1, [pc, #52]	; (8003ee0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003eac:	4a0d      	ldr	r2, [pc, #52]	; (8003ee4 <LoopForever+0xe>)
  movs r3, #0
 8003eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003eb0:	e002      	b.n	8003eb8 <LoopCopyDataInit>

08003eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eb6:	3304      	adds	r3, #4

08003eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ebc:	d3f9      	bcc.n	8003eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ec0:	4c0a      	ldr	r4, [pc, #40]	; (8003eec <LoopForever+0x16>)
  movs r3, #0
 8003ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ec4:	e001      	b.n	8003eca <LoopFillZerobss>

08003ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ec8:	3204      	adds	r2, #4

08003eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ecc:	d3fb      	bcc.n	8003ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ece:	f004 f8c9 	bl	8008064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ed2:	f7ff fbfb 	bl	80036cc <main>

08003ed6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ed6:	e7fe      	b.n	8003ed6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ed8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ee0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003ee4:	08008d38 	.word	0x08008d38
  ldr r2, =_sbss
 8003ee8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003eec:	2000075c 	.word	0x2000075c

08003ef0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ef0:	e7fe      	b.n	8003ef0 <ADC1_IRQHandler>

08003ef2 <_ardupilot_indication_NotifyState_decode>:
}

/*
 decode ardupilot_indication_NotifyState, return true on failure, false on success
*/
bool _ardupilot_indication_NotifyState_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct ardupilot_indication_NotifyState* msg, bool tao) {
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b088      	sub	sp, #32
 8003ef6:	af02      	add	r7, sp, #8
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data_type);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	6819      	ldr	r1, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	2208      	movs	r2, #8
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7fd fa3b 	bl	8001388 <canardDecodeScalar>

    *bit_ofs += 8;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f103 0208 	add.w	r2, r3, #8
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data.len);
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	6819      	ldr	r1, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3301      	adds	r3, #1
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	2208      	movs	r2, #8
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f7fd fa2b 	bl	8001388 <canardDecodeScalar>
    *bit_ofs += 8;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f103 0208 	add.w	r2, r3, #8
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	601a      	str	r2, [r3, #0]
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->aux_data.len > 255) {
        return true; /* invalid value */
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->aux_data.len; i++) {
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	e014      	b.n	8003f6e <_ardupilot_indication_NotifyState_decode+0x7c>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data.data[i]);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	6819      	ldr	r1, [r3, #0]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3302      	adds	r3, #2
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	2300      	movs	r3, #0
 8003f54:	2208      	movs	r2, #8
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f7fd fa16 	bl	8001388 <canardDecodeScalar>

        *bit_ofs += 8;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f103 0208 	add.w	r2, r3, #8
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->aux_data.len; i++) {
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	785b      	ldrb	r3, [r3, #1]
 8003f72:	461a      	mov	r2, r3
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d3e4      	bcc.n	8003f44 <_ardupilot_indication_NotifyState_decode+0x52>





    canardDecodeScalar(transfer, *bit_ofs, 64, false, &msg->vehicle_state);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	2300      	movs	r3, #0
 8003f88:	2240      	movs	r2, #64	; 0x40
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f7fd f9fc 	bl	8001388 <canardDecodeScalar>

    *bit_ofs += 64;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8003f9c:	2300      	movs	r3, #0

}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <ardupilot_indication_NotifyState_decode>:
}

/*
  return true if the decode is invalid
 */
bool ardupilot_indication_NotifyState_decode(const CanardRxTransfer* transfer, struct ardupilot_indication_NotifyState* msg) {
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b084      	sub	sp, #16
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > ARDUPILOT_INDICATION_NOTIFYSTATE_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60bb      	str	r3, [r7, #8]
    if (_ardupilot_indication_NotifyState_decode(transfer, &bit_ofs, msg,
 8003fb4:	f107 0108 	add.w	r1, r7, #8
 8003fb8:	2301      	movs	r3, #1
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff ff98 	bl	8003ef2 <_ardupilot_indication_NotifyState_decode>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <ardupilot_indication_NotifyState_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e00c      	b.n	8003fe6 <ardupilot_indication_NotifyState_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	3307      	adds	r3, #7
 8003fd0:	08db      	lsrs	r3, r3, #3
 8003fd2:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8a9b      	ldrh	r3, [r3, #20]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <_uavcan_equipment_actuator_Command_decode>:
}

/*
 decode uavcan_equipment_actuator_Command, return true on failure, false on success
*/
bool _uavcan_equipment_actuator_Command_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_Command* msg, bool tao) {
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b088      	sub	sp, #32
 8003ff2:	af02      	add	r7, sp, #8
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->actuator_id);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	6819      	ldr	r1, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	2300      	movs	r3, #0
 8004006:	2208      	movs	r2, #8
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f7fd f9bd 	bl	8001388 <canardDecodeScalar>

    *bit_ofs += 8;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f103 0208 	add.w	r2, r3, #8
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->command_type);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	6819      	ldr	r1, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3301      	adds	r3, #1
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	2300      	movs	r3, #0
 8004026:	2208      	movs	r2, #8
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f7fd f9ad 	bl	8001388 <canardDecodeScalar>

    *bit_ofs += 8;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f103 0208 	add.w	r2, r3, #8
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	601a      	str	r2, [r3, #0]



    {
        uint16_t float16_val;
        canardDecodeScalar(transfer, *bit_ofs, 16, true, &float16_val);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	f107 0316 	add.w	r3, r7, #22
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2301      	movs	r3, #1
 8004046:	2210      	movs	r2, #16
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f7fd f99d 	bl	8001388 <canardDecodeScalar>
        msg->command_value = canardConvertFloat16ToNativeFloat(float16_val);
 800404e:	8afb      	ldrh	r3, [r7, #22]
 8004050:	4618      	mov	r0, r3
 8004052:	f7fd fc1f 	bl	8001894 <canardConvertFloat16ToNativeFloat>
 8004056:	eef0 7a40 	vmov.f32	s15, s0
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	edc3 7a01 	vstr	s15, [r3, #4]
    }

    *bit_ofs += 16;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f103 0210 	add.w	r2, r3, #16
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	601a      	str	r2, [r3, #0]





    return false; /* success */
 800406c:	2300      	movs	r3, #0

}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <_uavcan_equipment_actuator_ArrayCommand_decode>:
}

/*
 decode uavcan_equipment_actuator_ArrayCommand, return true on failure, false on success
*/
bool _uavcan_equipment_actuator_ArrayCommand_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_ArrayCommand* msg, bool tao) {
 8004076:	b580      	push	{r7, lr}
 8004078:	b088      	sub	sp, #32
 800407a:	af02      	add	r7, sp, #8
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
 8004082:	70fb      	strb	r3, [r7, #3]





    if (!tao) {
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	f083 0301 	eor.w	r3, r3, #1
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00d      	beq.n	80040ac <_uavcan_equipment_actuator_ArrayCommand_decode+0x36>


        canardDecodeScalar(transfer, *bit_ofs, 4, false, &msg->commands.len);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	2300      	movs	r3, #0
 800409a:	2204      	movs	r2, #4
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7fd f973 	bl	8001388 <canardDecodeScalar>
        *bit_ofs += 4;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	1d1a      	adds	r2, r3, #4
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	601a      	str	r2, [r3, #0]





    if (tao) {
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d022      	beq.n	80040f8 <_uavcan_equipment_actuator_ArrayCommand_decode+0x82>

        msg->commands.len = 0;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
        while ((transfer->payload_len*8) > *bit_ofs) {
 80040b8:	e015      	b.n	80040e6 <_uavcan_equipment_actuator_ArrayCommand_decode+0x70>

            if (_uavcan_equipment_actuator_Command_decode(transfer, bit_ofs, &msg->commands.data[msg->commands.len], false)) {return true;}
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	4413      	add	r3, r2
 80040c4:	1d1a      	adds	r2, r3, #4
 80040c6:	2300      	movs	r3, #0
 80040c8:	68b9      	ldr	r1, [r7, #8]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f7ff ff8f 	bl	8003fee <_uavcan_equipment_actuator_Command_decode>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <_uavcan_equipment_actuator_ArrayCommand_decode+0x64>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e030      	b.n	800413c <_uavcan_equipment_actuator_ArrayCommand_decode+0xc6>
            msg->commands.len++;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	3301      	adds	r3, #1
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	701a      	strb	r2, [r3, #0]
        while ((transfer->payload_len*8) > *bit_ofs) {
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8a9b      	ldrh	r3, [r3, #20]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	461a      	mov	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d8e1      	bhi.n	80040ba <_uavcan_equipment_actuator_ArrayCommand_decode+0x44>
 80040f6:	e020      	b.n	800413a <_uavcan_equipment_actuator_ArrayCommand_decode+0xc4>



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
        if (msg->commands.len > 15) {
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b0f      	cmp	r3, #15
 80040fe:	d901      	bls.n	8004104 <_uavcan_equipment_actuator_ArrayCommand_decode+0x8e>
            return true; /* invalid value */
 8004100:	2301      	movs	r3, #1
 8004102:	e01b      	b.n	800413c <_uavcan_equipment_actuator_ArrayCommand_decode+0xc6>
        }
#pragma GCC diagnostic pop
        for (size_t i=0; i < msg->commands.len; i++) {
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	e011      	b.n	800412e <_uavcan_equipment_actuator_ArrayCommand_decode+0xb8>



            if (_uavcan_equipment_actuator_Command_decode(transfer, bit_ofs, &msg->commands.data[i], false)) {return true;}
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	1d1a      	adds	r2, r3, #4
 8004114:	2300      	movs	r3, #0
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f7ff ff68 	bl	8003fee <_uavcan_equipment_actuator_Command_decode>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <_uavcan_equipment_actuator_ArrayCommand_decode+0xb2>
 8004124:	2301      	movs	r3, #1
 8004126:	e009      	b.n	800413c <_uavcan_equipment_actuator_ArrayCommand_decode+0xc6>
        for (size_t i=0; i < msg->commands.len; i++) {
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	3301      	adds	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	4293      	cmp	r3, r2
 8004138:	d3e7      	bcc.n	800410a <_uavcan_equipment_actuator_ArrayCommand_decode+0x94>





    return false; /* success */
 800413a:	2300      	movs	r3, #0

}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <uavcan_equipment_actuator_ArrayCommand_decode>:
}

/*
  return true if the decode is invalid
 */
bool uavcan_equipment_actuator_ArrayCommand_decode(const CanardRxTransfer* transfer, struct uavcan_equipment_actuator_ArrayCommand* msg) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	60bb      	str	r3, [r7, #8]
    if (_uavcan_equipment_actuator_ArrayCommand_decode(transfer, &bit_ofs, msg,
 8004152:	f107 0108 	add.w	r1, r7, #8
 8004156:	2301      	movs	r3, #1
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff ff8b 	bl	8004076 <_uavcan_equipment_actuator_ArrayCommand_decode>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <uavcan_equipment_actuator_ArrayCommand_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8004166:	2301      	movs	r3, #1
 8004168:	e00c      	b.n	8004184 <uavcan_equipment_actuator_ArrayCommand_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	3307      	adds	r3, #7
 800416e:	08db      	lsrs	r3, r3, #3
 8004170:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	8a9b      	ldrh	r3, [r3, #20]
 8004176:	461a      	mov	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4293      	cmp	r3, r2
 800417c:	bf14      	ite	ne
 800417e:	2301      	movne	r3, #1
 8004180:	2300      	moveq	r3, #0
 8004182:	b2db      	uxtb	r3, r3
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <_uavcan_equipment_actuator_Status_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_equipment_actuator_Status_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_Status* msg, bool tao);
static inline bool _uavcan_equipment_actuator_Status_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_Status* msg, bool tao);
void _uavcan_equipment_actuator_Status_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_Status* msg, bool tao) {
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->actuator_id);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	6819      	ldr	r1, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2208      	movs	r2, #8
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7fd fa79 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 8;
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f103 0208 	add.w	r2, r3, #8
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	601a      	str	r2, [r3, #0]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->position);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80041ba:	eeb0 0a67 	vmov.f32	s0, s15
 80041be:	f7fd fb13 	bl	80017e8 <canardConvertNativeFloatToFloat16>
 80041c2:	4603      	mov	r3, r0
 80041c4:	82fb      	strh	r3, [r7, #22]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	f107 0316 	add.w	r3, r7, #22
 80041ce:	2210      	movs	r2, #16
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f7fd fa62 	bl	800169a <canardEncodeScalar>
    }

    *bit_ofs += 16;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f103 0210 	add.w	r2, r3, #16
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	601a      	str	r2, [r3, #0]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->force);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80041e8:	eeb0 0a67 	vmov.f32	s0, s15
 80041ec:	f7fd fafc 	bl	80017e8 <canardConvertNativeFloatToFloat16>
 80041f0:	4603      	mov	r3, r0
 80041f2:	82bb      	strh	r3, [r7, #20]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	6819      	ldr	r1, [r3, #0]
 80041f8:	f107 0314 	add.w	r3, r7, #20
 80041fc:	2210      	movs	r2, #16
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7fd fa4b 	bl	800169a <canardEncodeScalar>
    }

    *bit_ofs += 16;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f103 0210 	add.w	r2, r3, #16
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	601a      	str	r2, [r3, #0]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->speed);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	edd3 7a03 	vldr	s15, [r3, #12]
 8004216:	eeb0 0a67 	vmov.f32	s0, s15
 800421a:	f7fd fae5 	bl	80017e8 <canardConvertNativeFloatToFloat16>
 800421e:	4603      	mov	r3, r0
 8004220:	827b      	strh	r3, [r7, #18]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	6819      	ldr	r1, [r3, #0]
 8004226:	f107 0312 	add.w	r3, r7, #18
 800422a:	2210      	movs	r2, #16
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f7fd fa34 	bl	800169a <canardEncodeScalar>
    }

    *bit_ofs += 16;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f103 0210 	add.w	r2, r3, #16
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	601a      	str	r2, [r3, #0]





    *bit_ofs += 1;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 7, &msg->power_rating_pct);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	6819      	ldr	r1, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3310      	adds	r3, #16
 8004250:	2207      	movs	r2, #7
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7fd fa21 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 7;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	1dda      	adds	r2, r3, #7
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	601a      	str	r2, [r3, #0]





}
 8004262:	bf00      	nop
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <uavcan_equipment_actuator_Status_encode>:

uint32_t uavcan_equipment_actuator_Status_encode(struct uavcan_equipment_actuator_Status* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_EQUIPMENT_ACTUATOR_STATUS_MAX_SIZE);
 8004278:	2208      	movs	r2, #8
 800427a:	2100      	movs	r1, #0
 800427c:	6838      	ldr	r0, [r7, #0]
 800427e:	f003 fe6d 	bl	8007f5c <memset>
    _uavcan_equipment_actuator_Status_encode(buffer, &bit_ofs, msg, 
 8004282:	f107 010c 	add.w	r1, r7, #12
 8004286:	2301      	movs	r3, #1
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6838      	ldr	r0, [r7, #0]
 800428c:	f7ff ff7e 	bl	800418c <_uavcan_equipment_actuator_Status_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3307      	adds	r3, #7
 8004294:	08db      	lsrs	r3, r3, #3
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <_uavcan_protocol_HardwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_HardwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao) {
 800429e:	b580      	push	{r7, lr}
 80042a0:	b088      	sub	sp, #32
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6819      	ldr	r1, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2208      	movs	r2, #8
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f7fd f9f0 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 8;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f103 0208 	add.w	r2, r3, #8
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	6819      	ldr	r1, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3301      	adds	r3, #1
 80042ce:	2208      	movs	r2, #8
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f7fd f9e2 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 8;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f103 0208 	add.w	r2, r3, #8
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	601a      	str	r2, [r3, #0]





    for (size_t i=0; i < 16; i++) {
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	e012      	b.n	800430e <_uavcan_protocol_HardwareVersion_encode+0x70>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->unique_id[i]);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6819      	ldr	r1, [r3, #0]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	4413      	add	r3, r2
 80042f2:	3302      	adds	r3, #2
 80042f4:	2208      	movs	r2, #8
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f7fd f9cf 	bl	800169a <canardEncodeScalar>

        *bit_ofs += 8;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f103 0208 	add.w	r2, r3, #8
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < 16; i++) {
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	3301      	adds	r3, #1
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	2b0f      	cmp	r3, #15
 8004312:	d9e9      	bls.n	80042e8 <_uavcan_protocol_HardwareVersion_encode+0x4a>





    if (!tao) {
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	f083 0301 	eor.w	r3, r3, #1
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00d      	beq.n	800433c <_uavcan_protocol_HardwareVersion_encode+0x9e>


        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.len);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	6819      	ldr	r1, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3312      	adds	r3, #18
 8004328:	2208      	movs	r2, #8
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f7fd f9b5 	bl	800169a <canardEncodeScalar>
        *bit_ofs += 8;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f103 0208 	add.w	r2, r3, #8
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t certificate_of_authenticity_len = msg->certificate_of_authenticity.len > 255 ? 255 : msg->certificate_of_authenticity.len;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	7c9b      	ldrb	r3, [r3, #18]
 8004340:	617b      	str	r3, [r7, #20]
#pragma GCC diagnostic pop
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 8004342:	2300      	movs	r3, #0
 8004344:	61bb      	str	r3, [r7, #24]
 8004346:	e013      	b.n	8004370 <_uavcan_protocol_HardwareVersion_encode+0xd2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.data[i]);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	6819      	ldr	r1, [r3, #0]
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	3310      	adds	r3, #16
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	4413      	add	r3, r2
 8004354:	3303      	adds	r3, #3
 8004356:	2208      	movs	r2, #8
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7fd f99e 	bl	800169a <canardEncodeScalar>

        *bit_ofs += 8;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f103 0208 	add.w	r2, r3, #8
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	3301      	adds	r3, #1
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	429a      	cmp	r2, r3
 8004376:	d3e7      	bcc.n	8004348 <_uavcan_protocol_HardwareVersion_encode+0xaa>





}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
 800438e:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6819      	ldr	r1, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f7fd f97e 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 32;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f103 0220 	add.w	r2, r3, #32
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	6819      	ldr	r1, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	2202      	movs	r2, #2
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7fd f970 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 2;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	1c9a      	adds	r2, r3, #2
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	6819      	ldr	r1, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3305      	adds	r3, #5
 80043cc:	2203      	movs	r2, #3
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7fd f963 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 3;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	1cda      	adds	r2, r3, #3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	6819      	ldr	r1, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3306      	adds	r3, #6
 80043e6:	2203      	movs	r2, #3
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f7fd f956 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 3;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	1cda      	adds	r2, r3, #3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	6819      	ldr	r1, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3308      	adds	r3, #8
 8004400:	2210      	movs	r2, #16
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f7fd f949 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 16;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f103 0210 	add.w	r2, r3, #16
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	601a      	str	r2, [r3, #0]





}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <_uavcan_protocol_SoftwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_SoftwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao) {
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	6819      	ldr	r1, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2208      	movs	r2, #8
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f7fd f931 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 8;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f103 0208 	add.w	r2, r3, #8
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	6819      	ldr	r1, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3301      	adds	r3, #1
 800444c:	2208      	movs	r2, #8
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f7fd f923 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 8;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f103 0208 	add.w	r2, r3, #8
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->optional_field_flags);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	6819      	ldr	r1, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3302      	adds	r3, #2
 8004468:	2208      	movs	r2, #8
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7fd f915 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 8;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f103 0208 	add.w	r2, r3, #8
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->vcs_commit);
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	2220      	movs	r2, #32
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f7fd f907 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 32;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f103 0220 	add.w	r2, r3, #32
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 64, &msg->image_crc);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	6819      	ldr	r1, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3308      	adds	r3, #8
 80044a0:	2240      	movs	r2, #64	; 0x40
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f7fd f8f9 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 64;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	601a      	str	r2, [r3, #0]





}
 80044b4:	bf00      	nop
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <_uavcan_protocol_GetNodeInfoResponse_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
static inline bool _uavcan_protocol_GetNodeInfoResponse_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	70fb      	strb	r3, [r7, #3]





    _uavcan_protocol_NodeStatus_encode(buffer, bit_ofs, &msg->status, false);
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	2300      	movs	r3, #0
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f7ff ff56 	bl	8004382 <_uavcan_protocol_NodeStatus_encode>





    _uavcan_protocol_SoftwareVersion_encode(buffer, bit_ofs, &msg->software_version, false);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f103 0210 	add.w	r2, r3, #16
 80044dc:	2300      	movs	r3, #0
 80044de:	68b9      	ldr	r1, [r7, #8]
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff ff9b 	bl	800441c <_uavcan_protocol_SoftwareVersion_encode>





    _uavcan_protocol_HardwareVersion_encode(buffer, bit_ofs, &msg->hardware_version, false);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f103 0220 	add.w	r2, r3, #32
 80044ec:	2300      	movs	r3, #0
 80044ee:	68b9      	ldr	r1, [r7, #8]
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f7ff fed4 	bl	800429e <_uavcan_protocol_HardwareVersion_encode>





    if (!tao) {
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	f083 0301 	eor.w	r3, r3, #1
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00d      	beq.n	800451e <_uavcan_protocol_GetNodeInfoResponse_encode+0x62>


        canardEncodeScalar(buffer, *bit_ofs, 7, &msg->name.len);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	6819      	ldr	r1, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f503 7399 	add.w	r3, r3, #306	; 0x132
 800450c:	2207      	movs	r2, #7
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f7fd f8c3 	bl	800169a <canardEncodeScalar>
        *bit_ofs += 7;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	1dda      	adds	r2, r3, #7
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t name_len = msg->name.len > 80 ? 80 : msg->name.len;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 8004524:	2b50      	cmp	r3, #80	; 0x50
 8004526:	bf28      	it	cs
 8004528:	2350      	movcs	r3, #80	; 0x50
 800452a:	b2db      	uxtb	r3, r3
 800452c:	613b      	str	r3, [r7, #16]
#pragma GCC diagnostic pop
    for (size_t i=0; i < name_len; i++) {
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	e014      	b.n	800455e <_uavcan_protocol_GetNodeInfoResponse_encode+0xa2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->name.data[i]);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	6819      	ldr	r1, [r3, #0]
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	4413      	add	r3, r2
 8004542:	3303      	adds	r3, #3
 8004544:	2208      	movs	r2, #8
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f7fd f8a7 	bl	800169a <canardEncodeScalar>

        *bit_ofs += 8;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f103 0208 	add.w	r2, r3, #8
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < name_len; i++) {
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	3301      	adds	r3, #1
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	429a      	cmp	r2, r3
 8004564:	d3e6      	bcc.n	8004534 <_uavcan_protocol_GetNodeInfoResponse_encode+0x78>





}
 8004566:	bf00      	nop
 8004568:	bf00      	nop
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <uavcan_protocol_GetNodeInfoResponse_encode>:

uint32_t uavcan_protocol_GetNodeInfoResponse_encode(struct uavcan_protocol_GetNodeInfoResponse* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE);
 800457e:	f240 1279 	movw	r2, #377	; 0x179
 8004582:	2100      	movs	r1, #0
 8004584:	6838      	ldr	r0, [r7, #0]
 8004586:	f003 fce9 	bl	8007f5c <memset>
    _uavcan_protocol_GetNodeInfoResponse_encode(buffer, &bit_ofs, msg, 
 800458a:	f107 010c 	add.w	r1, r7, #12
 800458e:	2301      	movs	r3, #1
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6838      	ldr	r0, [r7, #0]
 8004594:	f7ff ff92 	bl	80044bc <_uavcan_protocol_GetNodeInfoResponse_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3307      	adds	r3, #7
 800459c:	08db      	lsrs	r3, r3, #3
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6819      	ldr	r1, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f7fd f86c 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 32;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f103 0220 	add.w	r2, r3, #32
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6819      	ldr	r1, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3304      	adds	r3, #4
 80045d6:	2202      	movs	r2, #2
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7fd f85e 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 2;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	1c9a      	adds	r2, r3, #2
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6819      	ldr	r1, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3305      	adds	r3, #5
 80045f0:	2203      	movs	r2, #3
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7fd f851 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 3;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	1cda      	adds	r2, r3, #3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	6819      	ldr	r1, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3306      	adds	r3, #6
 800460a:	2203      	movs	r2, #3
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f7fd f844 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 3;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	1cda      	adds	r2, r3, #3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	6819      	ldr	r1, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3308      	adds	r3, #8
 8004624:	2210      	movs	r2, #16
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7fd f837 	bl	800169a <canardEncodeScalar>

    *bit_ofs += 16;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f103 0210 	add.w	r2, r3, #16
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	601a      	str	r2, [r3, #0]





}
 8004638:	bf00      	nop
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <_uavcan_protocol_NodeStatus_decode>:

/*
 decode uavcan_protocol_NodeStatus, return true on failure, false on success
*/
bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 32, false, &msg->uptime_sec);
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	6819      	ldr	r1, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	2300      	movs	r3, #0
 8004658:	2220      	movs	r2, #32
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7fc fe94 	bl	8001388 <canardDecodeScalar>

    *bit_ofs += 32;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f103 0220 	add.w	r2, r3, #32
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 2, false, &msg->health);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	2300      	movs	r3, #0
 8004678:	2202      	movs	r2, #2
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7fc fe84 	bl	8001388 <canardDecodeScalar>

    *bit_ofs += 2;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	1c9a      	adds	r2, r3, #2
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->mode);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	6819      	ldr	r1, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3305      	adds	r3, #5
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	2300      	movs	r3, #0
 8004696:	2203      	movs	r2, #3
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f7fc fe75 	bl	8001388 <canardDecodeScalar>

    *bit_ofs += 3;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	1cda      	adds	r2, r3, #3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->sub_mode);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	6819      	ldr	r1, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3306      	adds	r3, #6
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	2300      	movs	r3, #0
 80046b4:	2203      	movs	r2, #3
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7fc fe66 	bl	8001388 <canardDecodeScalar>

    *bit_ofs += 3;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	1cda      	adds	r2, r3, #3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->vendor_specific_status_code);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	6819      	ldr	r1, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3308      	adds	r3, #8
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	2300      	movs	r3, #0
 80046d2:	2210      	movs	r2, #16
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f7fc fe57 	bl	8001388 <canardDecodeScalar>

    *bit_ofs += 16;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f103 0210 	add.w	r2, r3, #16
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	601a      	str	r2, [r3, #0]





    return false; /* success */
 80046e6:	2300      	movs	r3, #0

}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <uavcan_protocol_NodeStatus_encode>:

uint32_t uavcan_protocol_NodeStatus_encode(struct uavcan_protocol_NodeStatus* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE);
 80046fe:	2207      	movs	r2, #7
 8004700:	2100      	movs	r1, #0
 8004702:	6838      	ldr	r0, [r7, #0]
 8004704:	f003 fc2a 	bl	8007f5c <memset>
    _uavcan_protocol_NodeStatus_encode(buffer, &bit_ofs, msg, 
 8004708:	f107 010c 	add.w	r1, r7, #12
 800470c:	2301      	movs	r3, #1
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6838      	ldr	r0, [r7, #0]
 8004712:	f7ff ff48 	bl	80045a6 <_uavcan_protocol_NodeStatus_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3307      	adds	r3, #7
 800471a:	08db      	lsrs	r3, r3, #3
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <uavcan_protocol_NodeStatus_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_NodeStatus* msg) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_NodeStatus_decode(transfer, &bit_ofs, msg,
 8004732:	f107 0108 	add.w	r1, r7, #8
 8004736:	2301      	movs	r3, #1
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff ff80 	bl	8004640 <_uavcan_protocol_NodeStatus_decode>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <uavcan_protocol_NodeStatus_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8004746:	2301      	movs	r3, #1
 8004748:	e00c      	b.n	8004764 <uavcan_protocol_NodeStatus_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	3307      	adds	r3, #7
 800474e:	08db      	lsrs	r3, r3, #3
 8004750:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8a9b      	ldrh	r3, [r3, #20]
 8004756:	461a      	mov	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4293      	cmp	r3, r2
 800475c:	bf14      	ite	ne
 800475e:	2301      	movne	r3, #1
 8004760:	2300      	moveq	r3, #0
 8004762:	b2db      	uxtb	r3, r3
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <_uavcan_protocol_dynamic_node_id_Allocation_decode>:
}

/*
 decode uavcan_protocol_dynamic_node_id_Allocation, return true on failure, false on success
*/
bool _uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_dynamic_node_id_Allocation* msg, bool tao) {
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af02      	add	r7, sp, #8
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 7, false, &msg->node_id);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	6819      	ldr	r1, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	2300      	movs	r3, #0
 8004784:	2207      	movs	r2, #7
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7fc fdfe 	bl	8001388 <canardDecodeScalar>

    *bit_ofs += 7;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	1dda      	adds	r2, r3, #7
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 1, false, &msg->first_part_of_unique_id);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	6819      	ldr	r1, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3301      	adds	r3, #1
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	2300      	movs	r3, #0
 80047a2:	2201      	movs	r2, #1
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f7fc fdef 	bl	8001388 <canardDecodeScalar>

    *bit_ofs += 1;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	601a      	str	r2, [r3, #0]





    if (!tao) {
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	f083 0301 	eor.w	r3, r3, #1
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00f      	beq.n	80047e0 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x74>


        canardDecodeScalar(transfer, *bit_ofs, 5, false, &msg->unique_id.len);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	6819      	ldr	r1, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3302      	adds	r3, #2
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	2300      	movs	r3, #0
 80047cc:	2205      	movs	r2, #5
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f7fc fdda 	bl	8001388 <canardDecodeScalar>
        *bit_ofs += 5;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	1d5a      	adds	r2, r3, #5
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e00a      	b.n	80047f6 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x8a>



    } else {

        msg->unique_id.len = ((transfer->payload_len*8)-*bit_ofs)/8;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8a9b      	ldrh	r3, [r3, #20]
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	461a      	mov	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	08db      	lsrs	r3, r3, #3
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	709a      	strb	r2, [r3, #2]



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->unique_id.len > 16) {
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	789b      	ldrb	r3, [r3, #2]
 80047fa:	2b10      	cmp	r3, #16
 80047fc:	d901      	bls.n	8004802 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x96>
        return true; /* invalid value */
 80047fe:	2301      	movs	r3, #1
 8004800:	e01e      	b.n	8004840 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0xd4>
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->unique_id.len; i++) {
 8004802:	2300      	movs	r3, #0
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	e014      	b.n	8004832 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0xc6>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->unique_id.data[i]);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6819      	ldr	r1, [r3, #0]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	4413      	add	r3, r2
 8004812:	3303      	adds	r3, #3
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	2300      	movs	r3, #0
 8004818:	2208      	movs	r2, #8
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f7fc fdb4 	bl	8001388 <canardDecodeScalar>

        *bit_ofs += 8;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f103 0208 	add.w	r2, r3, #8
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->unique_id.len; i++) {
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	3301      	adds	r3, #1
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	789b      	ldrb	r3, [r3, #2]
 8004836:	461a      	mov	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	4293      	cmp	r3, r2
 800483c:	d3e4      	bcc.n	8004808 <_uavcan_protocol_dynamic_node_id_Allocation_decode+0x9c>





    return false; /* success */
 800483e:	2300      	movs	r3, #0

}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <uavcan_protocol_dynamic_node_id_Allocation_decode>:
}

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_dynamic_node_id_Allocation_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_dynamic_node_id_Allocation* msg) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_DYNAMIC_NODE_ID_ALLOCATION_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8004852:	2300      	movs	r3, #0
 8004854:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_dynamic_node_id_Allocation_decode(transfer, &bit_ofs, msg,
 8004856:	f107 0108 	add.w	r1, r7, #8
 800485a:	2301      	movs	r3, #1
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7ff ff84 	bl	800476c <_uavcan_protocol_dynamic_node_id_Allocation_decode>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <uavcan_protocol_dynamic_node_id_Allocation_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 800486a:	2301      	movs	r3, #1
 800486c:	e00c      	b.n	8004888 <uavcan_protocol_dynamic_node_id_Allocation_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	3307      	adds	r3, #7
 8004872:	08db      	lsrs	r3, r3, #3
 8004874:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	8a9b      	ldrh	r3, [r3, #20]
 800487a:	461a      	mov	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4293      	cmp	r3, r2
 8004880:	bf14      	ite	ne
 8004882:	2301      	movne	r3, #1
 8004884:	2300      	moveq	r3, #0
 8004886:	b2db      	uxtb	r3, r3
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800489a:	2003      	movs	r0, #3
 800489c:	f000 ffb0 	bl	8005800 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048a0:	200f      	movs	r0, #15
 80048a2:	f000 f80d 	bl	80048c0 <HAL_InitTick>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	71fb      	strb	r3, [r7, #7]
 80048b0:	e001      	b.n	80048b6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048b2:	f7ff f81f 	bl	80038f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048b6:	79fb      	ldrb	r3, [r7, #7]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80048cc:	4b17      	ldr	r3, [pc, #92]	; (800492c <HAL_InitTick+0x6c>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d023      	beq.n	800491c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80048d4:	4b16      	ldr	r3, [pc, #88]	; (8004930 <HAL_InitTick+0x70>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b14      	ldr	r3, [pc, #80]	; (800492c <HAL_InitTick+0x6c>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	4619      	mov	r1, r3
 80048de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80048e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 ffbd 	bl	800586a <HAL_SYSTICK_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10f      	bne.n	8004916 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b0f      	cmp	r3, #15
 80048fa:	d809      	bhi.n	8004910 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048fc:	2200      	movs	r2, #0
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	f000 ff87 	bl	8005816 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004908:	4a0a      	ldr	r2, [pc, #40]	; (8004934 <HAL_InitTick+0x74>)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e007      	b.n	8004920 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
 8004914:	e004      	b.n	8004920 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	73fb      	strb	r3, [r7, #15]
 800491a:	e001      	b.n	8004920 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004920:	7bfb      	ldrb	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	2000000c 	.word	0x2000000c
 8004930:	20000004 	.word	0x20000004
 8004934:	20000008 	.word	0x20000008

08004938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <HAL_IncTick+0x20>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_IncTick+0x24>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4413      	add	r3, r2
 8004948:	4a04      	ldr	r2, [pc, #16]	; (800495c <HAL_IncTick+0x24>)
 800494a:	6013      	str	r3, [r2, #0]
}
 800494c:	bf00      	nop
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	2000000c 	.word	0x2000000c
 800495c:	2000060c 	.word	0x2000060c

08004960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  return uwTick;
 8004964:	4b03      	ldr	r3, [pc, #12]	; (8004974 <HAL_GetTick+0x14>)
 8004966:	681b      	ldr	r3, [r3, #0]
}
 8004968:	4618      	mov	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	2000060c 	.word	0x2000060c

08004978 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800497c:	4b03      	ldr	r3, [pc, #12]	; (800498c <HAL_GetUIDw0+0x14>)
 800497e:	681b      	ldr	r3, [r3, #0]
}
 8004980:	4618      	mov	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	1fff7590 	.word	0x1fff7590

08004990 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8004994:	4b03      	ldr	r3, [pc, #12]	; (80049a4 <HAL_GetUIDw1+0x14>)
 8004996:	681b      	ldr	r3, [r3, #0]
}
 8004998:	4618      	mov	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	1fff7594 	.word	0x1fff7594

080049a8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80049ac:	4b03      	ldr	r3, [pc, #12]	; (80049bc <HAL_GetUIDw2+0x14>)
 80049ae:	681b      	ldr	r3, [r3, #0]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	1fff7598 	.word	0x1fff7598

080049c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e0ed      	b.n	8004bae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fb fe58 	bl	8000694 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049f4:	f7ff ffb4 	bl	8004960 <HAL_GetTick>
 80049f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80049fa:	e012      	b.n	8004a22 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80049fc:	f7ff ffb0 	bl	8004960 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b0a      	cmp	r3, #10
 8004a08:	d90b      	bls.n	8004a22 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2205      	movs	r2, #5
 8004a1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e0c5      	b.n	8004bae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0e5      	beq.n	80049fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0202 	bic.w	r2, r2, #2
 8004a3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a40:	f7ff ff8e 	bl	8004960 <HAL_GetTick>
 8004a44:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a46:	e012      	b.n	8004a6e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a48:	f7ff ff8a 	bl	8004960 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b0a      	cmp	r3, #10
 8004a54:	d90b      	bls.n	8004a6e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2205      	movs	r2, #5
 8004a66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e09f      	b.n	8004bae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e5      	bne.n	8004a48 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	7e1b      	ldrb	r3, [r3, #24]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d108      	bne.n	8004a96 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	e007      	b.n	8004aa6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	7e5b      	ldrb	r3, [r3, #25]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d108      	bne.n	8004ac0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	e007      	b.n	8004ad0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ace:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	7e9b      	ldrb	r3, [r3, #26]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d108      	bne.n	8004aea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0220 	orr.w	r2, r2, #32
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	e007      	b.n	8004afa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0220 	bic.w	r2, r2, #32
 8004af8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	7edb      	ldrb	r3, [r3, #27]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d108      	bne.n	8004b14 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0210 	bic.w	r2, r2, #16
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e007      	b.n	8004b24 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0210 	orr.w	r2, r2, #16
 8004b22:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	7f1b      	ldrb	r3, [r3, #28]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d108      	bne.n	8004b3e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0208 	orr.w	r2, r2, #8
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	e007      	b.n	8004b4e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0208 	bic.w	r2, r2, #8
 8004b4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	7f5b      	ldrb	r3, [r3, #29]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d108      	bne.n	8004b68 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 0204 	orr.w	r2, r2, #4
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	e007      	b.n	8004b78 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0204 	bic.w	r2, r2, #4
 8004b76:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	ea42 0103 	orr.w	r1, r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	1e5a      	subs	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b087      	sub	sp, #28
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bcc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004bce:	7cfb      	ldrb	r3, [r7, #19]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d003      	beq.n	8004bdc <HAL_CAN_ConfigFilter+0x26>
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	f040 80aa 	bne.w	8004d30 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004be2:	f043 0201 	orr.w	r2, r3, #1
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	43db      	mvns	r3, r3
 8004c06:	401a      	ands	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d123      	bne.n	8004c5e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	401a      	ands	r2, r3
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c38:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	3248      	adds	r2, #72	; 0x48
 8004c3e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c52:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c54:	6979      	ldr	r1, [r7, #20]
 8004c56:	3348      	adds	r3, #72	; 0x48
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	440b      	add	r3, r1
 8004c5c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d122      	bne.n	8004cac <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004c86:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	3248      	adds	r2, #72	; 0x48
 8004c8c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ca0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ca2:	6979      	ldr	r1, [r7, #20]
 8004ca4:	3348      	adds	r3, #72	; 0x48
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	440b      	add	r3, r1
 8004caa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d109      	bne.n	8004cc8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	401a      	ands	r2, r3
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004cc6:	e007      	b.n	8004cd8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	401a      	ands	r2, r3
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004cf2:	e007      	b.n	8004d04 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d107      	bne.n	8004d1c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	431a      	orrs	r2, r3
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d22:	f023 0201 	bic.w	r2, r3, #1
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e006      	b.n	8004d3e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
  }
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d12e      	bne.n	8004dbc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2202      	movs	r2, #2
 8004d62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d76:	f7ff fdf3 	bl	8004960 <HAL_GetTick>
 8004d7a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d7c:	e012      	b.n	8004da4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d7e:	f7ff fdef 	bl	8004960 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b0a      	cmp	r3, #10
 8004d8a:	d90b      	bls.n	8004da4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2205      	movs	r2, #5
 8004d9c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e012      	b.n	8004dca <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e5      	bne.n	8004d7e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e006      	b.n	8004dca <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
  }
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b089      	sub	sp, #36	; 0x24
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
 8004dde:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004de6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004df0:	7ffb      	ldrb	r3, [r7, #31]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d003      	beq.n	8004dfe <HAL_CAN_AddTxMessage+0x2c>
 8004df6:	7ffb      	ldrb	r3, [r7, #31]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	f040 80ad 	bne.w	8004f58 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d105      	bne.n	8004e1e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8095 	beq.w	8004f48 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	0e1b      	lsrs	r3, r3, #24
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004e28:	2201      	movs	r2, #1
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	409a      	lsls	r2, r3
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10d      	bne.n	8004e56 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004e44:	68f9      	ldr	r1, [r7, #12]
 8004e46:	6809      	ldr	r1, [r1, #0]
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	3318      	adds	r3, #24
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	440b      	add	r3, r1
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	e00f      	b.n	8004e76 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e60:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004e6a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	3318      	adds	r3, #24
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	440b      	add	r3, r1
 8004e74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6819      	ldr	r1, [r3, #0]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	3318      	adds	r3, #24
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	440b      	add	r3, r1
 8004e86:	3304      	adds	r3, #4
 8004e88:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	7d1b      	ldrb	r3, [r3, #20]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d111      	bne.n	8004eb6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	3318      	adds	r3, #24
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	4413      	add	r3, r2
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	6811      	ldr	r1, [r2, #0]
 8004ea6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	3318      	adds	r3, #24
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	440b      	add	r3, r1
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3307      	adds	r3, #7
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	061a      	lsls	r2, r3, #24
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3306      	adds	r3, #6
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	041b      	lsls	r3, r3, #16
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3305      	adds	r3, #5
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	021b      	lsls	r3, r3, #8
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	3204      	adds	r2, #4
 8004ed6:	7812      	ldrb	r2, [r2, #0]
 8004ed8:	4610      	mov	r0, r2
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	6811      	ldr	r1, [r2, #0]
 8004ede:	ea43 0200 	orr.w	r2, r3, r0
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	440b      	add	r3, r1
 8004ee8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004eec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3303      	adds	r3, #3
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	061a      	lsls	r2, r3, #24
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3302      	adds	r3, #2
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3301      	adds	r3, #1
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	7812      	ldrb	r2, [r2, #0]
 8004f0e:	4610      	mov	r0, r2
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	6811      	ldr	r1, [r2, #0]
 8004f14:	ea43 0200 	orr.w	r2, r3, r0
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	440b      	add	r3, r1
 8004f1e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004f22:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	3318      	adds	r3, #24
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	4413      	add	r3, r2
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	6811      	ldr	r1, [r2, #0]
 8004f36:	f043 0201 	orr.w	r2, r3, #1
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	3318      	adds	r3, #24
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	440b      	add	r3, r1
 8004f42:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	e00e      	b.n	8004f66 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e006      	b.n	8004f66 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3724      	adds	r7, #36	; 0x24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004f72:	b480      	push	{r7}
 8004f74:	b087      	sub	sp, #28
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	607a      	str	r2, [r7, #4]
 8004f7e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f86:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d003      	beq.n	8004f96 <HAL_CAN_GetRxMessage+0x24>
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	f040 8103 	bne.w	800519c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10e      	bne.n	8004fba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d116      	bne.n	8004fd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e0f7      	b.n	80051aa <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d107      	bne.n	8004fd8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e0e8      	b.n	80051aa <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	331b      	adds	r3, #27
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	4413      	add	r3, r2
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0204 	and.w	r2, r3, #4
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10c      	bne.n	8005010 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	331b      	adds	r3, #27
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	4413      	add	r3, r2
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	0d5b      	lsrs	r3, r3, #21
 8005006:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e00b      	b.n	8005028 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	331b      	adds	r3, #27
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	4413      	add	r3, r2
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	08db      	lsrs	r3, r3, #3
 8005020:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	331b      	adds	r3, #27
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	4413      	add	r3, r2
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0202 	and.w	r2, r3, #2
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	331b      	adds	r3, #27
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	4413      	add	r3, r2
 800504a:	3304      	adds	r3, #4
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2208      	movs	r2, #8
 800505a:	611a      	str	r2, [r3, #16]
 800505c:	e00b      	b.n	8005076 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	331b      	adds	r3, #27
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	4413      	add	r3, r2
 800506a:	3304      	adds	r3, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 020f 	and.w	r2, r3, #15
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	331b      	adds	r3, #27
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	4413      	add	r3, r2
 8005082:	3304      	adds	r3, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	b2da      	uxtb	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	331b      	adds	r3, #27
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	4413      	add	r3, r2
 800509a:	3304      	adds	r3, #4
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	0c1b      	lsrs	r3, r3, #16
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	0a1a      	lsrs	r2, r3, #8
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	3301      	adds	r3, #1
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	4413      	add	r3, r2
 80050e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	0c1a      	lsrs	r2, r3, #16
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	3302      	adds	r3, #2
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	0e1a      	lsrs	r2, r3, #24
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	3303      	adds	r3, #3
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	4413      	add	r3, r2
 8005114:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	3304      	adds	r3, #4
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	4413      	add	r3, r2
 800512c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	0a1a      	lsrs	r2, r3, #8
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	3305      	adds	r3, #5
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	4413      	add	r3, r2
 8005146:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	0c1a      	lsrs	r2, r3, #16
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	3306      	adds	r3, #6
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	4413      	add	r3, r2
 8005160:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	0e1a      	lsrs	r2, r3, #24
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	3307      	adds	r3, #7
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d108      	bne.n	8005188 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0220 	orr.w	r2, r2, #32
 8005184:	60da      	str	r2, [r3, #12]
 8005186:	e007      	b.n	8005198 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691a      	ldr	r2, [r3, #16]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0220 	orr.w	r2, r2, #32
 8005196:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	e006      	b.n	80051aa <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
  }
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b085      	sub	sp, #20
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051c6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d002      	beq.n	80051d4 <HAL_CAN_ActivateNotification+0x1e>
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d109      	bne.n	80051e8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6959      	ldr	r1, [r3, #20]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	e006      	b.n	80051f6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
  }
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b08a      	sub	sp, #40	; 0x28
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800520a:	2300      	movs	r3, #0
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d07c      	beq.n	8005342 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d023      	beq.n	800529a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2201      	movs	r2, #1
 8005258:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f983 	bl	8005570 <HAL_CAN_TxMailbox0CompleteCallback>
 800526a:	e016      	b.n	800529a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
 800527e:	e00c      	b.n	800529a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d004      	beq.n	8005294 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
 8005292:	e002      	b.n	800529a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f989 	bl	80055ac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d024      	beq.n	80052ee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f963 	bl	8005584 <HAL_CAN_TxMailbox1CompleteCallback>
 80052be:	e016      	b.n	80052ee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d004      	beq.n	80052d4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
 80052d2:	e00c      	b.n	80052ee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
 80052e6:	e002      	b.n	80052ee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f969 	bl	80055c0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d024      	beq.n	8005342 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005300:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f943 	bl	8005598 <HAL_CAN_TxMailbox2CompleteCallback>
 8005312:	e016      	b.n	8005342 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d004      	beq.n	8005328 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
 8005326:	e00c      	b.n	8005342 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d004      	beq.n	800533c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
 800533a:	e002      	b.n	8005342 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f949 	bl	80055d4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00c      	beq.n	8005366 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	2b00      	cmp	r3, #0
 8005354:	d007      	beq.n	8005366 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800535c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2210      	movs	r2, #16
 8005364:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00b      	beq.n	8005388 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b00      	cmp	r3, #0
 8005378:	d006      	beq.n	8005388 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2208      	movs	r2, #8
 8005380:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f930 	bl	80055e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0303 	and.w	r3, r3, #3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7fd fbe1 	bl	8002b68 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00c      	beq.n	80053ca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d007      	beq.n	80053ca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2210      	movs	r2, #16
 80053c8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00b      	beq.n	80053ec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d006      	beq.n	80053ec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2208      	movs	r2, #8
 80053e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f912 	bl	8005610 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d009      	beq.n	800540a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f8f9 	bl	80055fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00b      	beq.n	800542c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f003 0310 	and.w	r3, r3, #16
 800541a:	2b00      	cmp	r3, #0
 800541c:	d006      	beq.n	800542c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2210      	movs	r2, #16
 8005424:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f8fc 	bl	8005624 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00b      	beq.n	800544e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	2b00      	cmp	r3, #0
 800543e:	d006      	beq.n	800544e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2208      	movs	r2, #8
 8005446:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f8f5 	bl	8005638 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d07b      	beq.n	8005550 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	d072      	beq.n	8005548 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005468:	2b00      	cmp	r3, #0
 800546a:	d008      	beq.n	800547e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	f043 0301 	orr.w	r3, r3, #1
 800547c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	f043 0302 	orr.w	r3, r3, #2
 8005498:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d008      	beq.n	80054b6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	f043 0304 	orr.w	r3, r3, #4
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d043      	beq.n	8005548 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d03e      	beq.n	8005548 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054d0:	2b60      	cmp	r3, #96	; 0x60
 80054d2:	d02b      	beq.n	800552c <HAL_CAN_IRQHandler+0x32a>
 80054d4:	2b60      	cmp	r3, #96	; 0x60
 80054d6:	d82e      	bhi.n	8005536 <HAL_CAN_IRQHandler+0x334>
 80054d8:	2b50      	cmp	r3, #80	; 0x50
 80054da:	d022      	beq.n	8005522 <HAL_CAN_IRQHandler+0x320>
 80054dc:	2b50      	cmp	r3, #80	; 0x50
 80054de:	d82a      	bhi.n	8005536 <HAL_CAN_IRQHandler+0x334>
 80054e0:	2b40      	cmp	r3, #64	; 0x40
 80054e2:	d019      	beq.n	8005518 <HAL_CAN_IRQHandler+0x316>
 80054e4:	2b40      	cmp	r3, #64	; 0x40
 80054e6:	d826      	bhi.n	8005536 <HAL_CAN_IRQHandler+0x334>
 80054e8:	2b30      	cmp	r3, #48	; 0x30
 80054ea:	d010      	beq.n	800550e <HAL_CAN_IRQHandler+0x30c>
 80054ec:	2b30      	cmp	r3, #48	; 0x30
 80054ee:	d822      	bhi.n	8005536 <HAL_CAN_IRQHandler+0x334>
 80054f0:	2b10      	cmp	r3, #16
 80054f2:	d002      	beq.n	80054fa <HAL_CAN_IRQHandler+0x2f8>
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d005      	beq.n	8005504 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80054f8:	e01d      	b.n	8005536 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	f043 0308 	orr.w	r3, r3, #8
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005502:	e019      	b.n	8005538 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	f043 0310 	orr.w	r3, r3, #16
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800550c:	e014      	b.n	8005538 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	f043 0320 	orr.w	r3, r3, #32
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005516:	e00f      	b.n	8005538 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005520:	e00a      	b.n	8005538 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800552a:	e005      	b.n	8005538 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005534:	e000      	b.n	8005538 <HAL_CAN_IRQHandler+0x336>
            break;
 8005536:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699a      	ldr	r2, [r3, #24]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005546:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2204      	movs	r2, #4
 800554e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	2b00      	cmp	r3, #0
 8005554:	d008      	beq.n	8005568 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f872 	bl	800564c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005568:	bf00      	nop
 800556a:	3728      	adds	r7, #40	; 0x28
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <__NVIC_SetPriorityGrouping>:
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005670:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800567c:	4013      	ands	r3, r2
 800567e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800568c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005692:	4a04      	ldr	r2, [pc, #16]	; (80056a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	60d3      	str	r3, [r2, #12]
}
 8005698:	bf00      	nop
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	e000ed00 	.word	0xe000ed00

080056a8 <__NVIC_GetPriorityGrouping>:
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056ac:	4b04      	ldr	r3, [pc, #16]	; (80056c0 <__NVIC_GetPriorityGrouping+0x18>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	0a1b      	lsrs	r3, r3, #8
 80056b2:	f003 0307 	and.w	r3, r3, #7
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	e000ed00 	.word	0xe000ed00

080056c4 <__NVIC_EnableIRQ>:
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	db0b      	blt.n	80056ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	f003 021f 	and.w	r2, r3, #31
 80056dc:	4907      	ldr	r1, [pc, #28]	; (80056fc <__NVIC_EnableIRQ+0x38>)
 80056de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	2001      	movs	r0, #1
 80056e6:	fa00 f202 	lsl.w	r2, r0, r2
 80056ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	e000e100 	.word	0xe000e100

08005700 <__NVIC_SetPriority>:
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	6039      	str	r1, [r7, #0]
 800570a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800570c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005710:	2b00      	cmp	r3, #0
 8005712:	db0a      	blt.n	800572a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	b2da      	uxtb	r2, r3
 8005718:	490c      	ldr	r1, [pc, #48]	; (800574c <__NVIC_SetPriority+0x4c>)
 800571a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571e:	0112      	lsls	r2, r2, #4
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	440b      	add	r3, r1
 8005724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005728:	e00a      	b.n	8005740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	b2da      	uxtb	r2, r3
 800572e:	4908      	ldr	r1, [pc, #32]	; (8005750 <__NVIC_SetPriority+0x50>)
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	3b04      	subs	r3, #4
 8005738:	0112      	lsls	r2, r2, #4
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	440b      	add	r3, r1
 800573e:	761a      	strb	r2, [r3, #24]
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	e000e100 	.word	0xe000e100
 8005750:	e000ed00 	.word	0xe000ed00

08005754 <NVIC_EncodePriority>:
{
 8005754:	b480      	push	{r7}
 8005756:	b089      	sub	sp, #36	; 0x24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f1c3 0307 	rsb	r3, r3, #7
 800576e:	2b04      	cmp	r3, #4
 8005770:	bf28      	it	cs
 8005772:	2304      	movcs	r3, #4
 8005774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	3304      	adds	r3, #4
 800577a:	2b06      	cmp	r3, #6
 800577c:	d902      	bls.n	8005784 <NVIC_EncodePriority+0x30>
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	3b03      	subs	r3, #3
 8005782:	e000      	b.n	8005786 <NVIC_EncodePriority+0x32>
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005788:	f04f 32ff 	mov.w	r2, #4294967295
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43da      	mvns	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	401a      	ands	r2, r3
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800579c:	f04f 31ff 	mov.w	r1, #4294967295
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	fa01 f303 	lsl.w	r3, r1, r3
 80057a6:	43d9      	mvns	r1, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057ac:	4313      	orrs	r3, r2
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3724      	adds	r7, #36	; 0x24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <SysTick_Config>:
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057cc:	d301      	bcc.n	80057d2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80057ce:	2301      	movs	r3, #1
 80057d0:	e00f      	b.n	80057f2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057d2:	4a0a      	ldr	r2, [pc, #40]	; (80057fc <SysTick_Config+0x40>)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057da:	210f      	movs	r1, #15
 80057dc:	f04f 30ff 	mov.w	r0, #4294967295
 80057e0:	f7ff ff8e 	bl	8005700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057e4:	4b05      	ldr	r3, [pc, #20]	; (80057fc <SysTick_Config+0x40>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057ea:	4b04      	ldr	r3, [pc, #16]	; (80057fc <SysTick_Config+0x40>)
 80057ec:	2207      	movs	r2, #7
 80057ee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	e000e010 	.word	0xe000e010

08005800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff ff29 	bl	8005660 <__NVIC_SetPriorityGrouping>
}
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b086      	sub	sp, #24
 800581a:	af00      	add	r7, sp, #0
 800581c:	4603      	mov	r3, r0
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	607a      	str	r2, [r7, #4]
 8005822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005828:	f7ff ff3e 	bl	80056a8 <__NVIC_GetPriorityGrouping>
 800582c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	6978      	ldr	r0, [r7, #20]
 8005834:	f7ff ff8e 	bl	8005754 <NVIC_EncodePriority>
 8005838:	4602      	mov	r2, r0
 800583a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800583e:	4611      	mov	r1, r2
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff ff5d 	bl	8005700 <__NVIC_SetPriority>
}
 8005846:	bf00      	nop
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b082      	sub	sp, #8
 8005852:	af00      	add	r7, sp, #0
 8005854:	4603      	mov	r3, r0
 8005856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff ff31 	bl	80056c4 <__NVIC_EnableIRQ>
}
 8005862:	bf00      	nop
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b082      	sub	sp, #8
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff ffa2 	bl	80057bc <SysTick_Config>
 8005878:	4603      	mov	r3, r0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005892:	e154      	b.n	8005b3e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	2101      	movs	r1, #1
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	fa01 f303 	lsl.w	r3, r1, r3
 80058a0:	4013      	ands	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 8146 	beq.w	8005b38 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f003 0303 	and.w	r3, r3, #3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d005      	beq.n	80058c4 <HAL_GPIO_Init+0x40>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f003 0303 	and.w	r3, r3, #3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d130      	bne.n	8005926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	2203      	movs	r2, #3
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	43db      	mvns	r3, r3
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4013      	ands	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058fa:	2201      	movs	r2, #1
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	43db      	mvns	r3, r3
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4013      	ands	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	f003 0201 	and.w	r2, r3, #1
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	4313      	orrs	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	2b03      	cmp	r3, #3
 8005930:	d017      	beq.n	8005962 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	2203      	movs	r2, #3
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	43db      	mvns	r3, r3
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4013      	ands	r3, r2
 8005948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d123      	bne.n	80059b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	08da      	lsrs	r2, r3, #3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3208      	adds	r2, #8
 8005976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	220f      	movs	r2, #15
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	43db      	mvns	r3, r3
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4013      	ands	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	08da      	lsrs	r2, r3, #3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3208      	adds	r2, #8
 80059b0:	6939      	ldr	r1, [r7, #16]
 80059b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	2203      	movs	r2, #3
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	43db      	mvns	r3, r3
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4013      	ands	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f003 0203 	and.w	r2, r3, #3
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 80a0 	beq.w	8005b38 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059f8:	4b58      	ldr	r3, [pc, #352]	; (8005b5c <HAL_GPIO_Init+0x2d8>)
 80059fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fc:	4a57      	ldr	r2, [pc, #348]	; (8005b5c <HAL_GPIO_Init+0x2d8>)
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	6613      	str	r3, [r2, #96]	; 0x60
 8005a04:	4b55      	ldr	r3, [pc, #340]	; (8005b5c <HAL_GPIO_Init+0x2d8>)
 8005a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	60bb      	str	r3, [r7, #8]
 8005a0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005a10:	4a53      	ldr	r2, [pc, #332]	; (8005b60 <HAL_GPIO_Init+0x2dc>)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	089b      	lsrs	r3, r3, #2
 8005a16:	3302      	adds	r3, #2
 8005a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	220f      	movs	r2, #15
 8005a28:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4013      	ands	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005a3a:	d019      	beq.n	8005a70 <HAL_GPIO_Init+0x1ec>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a49      	ldr	r2, [pc, #292]	; (8005b64 <HAL_GPIO_Init+0x2e0>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d013      	beq.n	8005a6c <HAL_GPIO_Init+0x1e8>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a48      	ldr	r2, [pc, #288]	; (8005b68 <HAL_GPIO_Init+0x2e4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00d      	beq.n	8005a68 <HAL_GPIO_Init+0x1e4>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a47      	ldr	r2, [pc, #284]	; (8005b6c <HAL_GPIO_Init+0x2e8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d007      	beq.n	8005a64 <HAL_GPIO_Init+0x1e0>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a46      	ldr	r2, [pc, #280]	; (8005b70 <HAL_GPIO_Init+0x2ec>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d101      	bne.n	8005a60 <HAL_GPIO_Init+0x1dc>
 8005a5c:	2304      	movs	r3, #4
 8005a5e:	e008      	b.n	8005a72 <HAL_GPIO_Init+0x1ee>
 8005a60:	2307      	movs	r3, #7
 8005a62:	e006      	b.n	8005a72 <HAL_GPIO_Init+0x1ee>
 8005a64:	2303      	movs	r3, #3
 8005a66:	e004      	b.n	8005a72 <HAL_GPIO_Init+0x1ee>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e002      	b.n	8005a72 <HAL_GPIO_Init+0x1ee>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e000      	b.n	8005a72 <HAL_GPIO_Init+0x1ee>
 8005a70:	2300      	movs	r3, #0
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	f002 0203 	and.w	r2, r2, #3
 8005a78:	0092      	lsls	r2, r2, #2
 8005a7a:	4093      	lsls	r3, r2
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005a82:	4937      	ldr	r1, [pc, #220]	; (8005b60 <HAL_GPIO_Init+0x2dc>)
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	089b      	lsrs	r3, r3, #2
 8005a88:	3302      	adds	r3, #2
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a90:	4b38      	ldr	r3, [pc, #224]	; (8005b74 <HAL_GPIO_Init+0x2f0>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ab4:	4a2f      	ldr	r2, [pc, #188]	; (8005b74 <HAL_GPIO_Init+0x2f0>)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005aba:	4b2e      	ldr	r3, [pc, #184]	; (8005b74 <HAL_GPIO_Init+0x2f0>)
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ade:	4a25      	ldr	r2, [pc, #148]	; (8005b74 <HAL_GPIO_Init+0x2f0>)
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005ae4:	4b23      	ldr	r3, [pc, #140]	; (8005b74 <HAL_GPIO_Init+0x2f0>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	43db      	mvns	r3, r3
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	4013      	ands	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b08:	4a1a      	ldr	r2, [pc, #104]	; (8005b74 <HAL_GPIO_Init+0x2f0>)
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005b0e:	4b19      	ldr	r3, [pc, #100]	; (8005b74 <HAL_GPIO_Init+0x2f0>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	43db      	mvns	r3, r3
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005b32:	4a10      	ldr	r2, [pc, #64]	; (8005b74 <HAL_GPIO_Init+0x2f0>)
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f47f aea3 	bne.w	8005894 <HAL_GPIO_Init+0x10>
  }
}
 8005b4e:	bf00      	nop
 8005b50:	bf00      	nop
 8005b52:	371c      	adds	r7, #28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	40010000 	.word	0x40010000
 8005b64:	48000400 	.word	0x48000400
 8005b68:	48000800 	.word	0x48000800
 8005b6c:	48000c00 	.word	0x48000c00
 8005b70:	48001000 	.word	0x48001000
 8005b74:	40010400 	.word	0x40010400

08005b78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005b7c:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <HAL_PWREx_GetVoltageRange+0x18>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	40007000 	.word	0x40007000

08005b94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba2:	d130      	bne.n	8005c06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ba4:	4b23      	ldr	r3, [pc, #140]	; (8005c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bb0:	d038      	beq.n	8005c24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bb2:	4b20      	ldr	r3, [pc, #128]	; (8005c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005bba:	4a1e      	ldr	r2, [pc, #120]	; (8005c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bc2:	4b1d      	ldr	r3, [pc, #116]	; (8005c38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2232      	movs	r2, #50	; 0x32
 8005bc8:	fb02 f303 	mul.w	r3, r2, r3
 8005bcc:	4a1b      	ldr	r2, [pc, #108]	; (8005c3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005bce:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd2:	0c9b      	lsrs	r3, r3, #18
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bd8:	e002      	b.n	8005be0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005be0:	4b14      	ldr	r3, [pc, #80]	; (8005c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bec:	d102      	bne.n	8005bf4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1f2      	bne.n	8005bda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bf4:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c00:	d110      	bne.n	8005c24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e00f      	b.n	8005c26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c06:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c12:	d007      	beq.n	8005c24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c14:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c1c:	4a05      	ldr	r2, [pc, #20]	; (8005c34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40007000 	.word	0x40007000
 8005c38:	20000004 	.word	0x20000004
 8005c3c:	431bde83 	.word	0x431bde83

08005c40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f000 bc02 	b.w	8006458 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c54:	4b96      	ldr	r3, [pc, #600]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 030c 	and.w	r3, r3, #12
 8005c5c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c5e:	4b94      	ldr	r3, [pc, #592]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0310 	and.w	r3, r3, #16
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 80e4 	beq.w	8005e3e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d007      	beq.n	8005c8c <HAL_RCC_OscConfig+0x4c>
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	2b0c      	cmp	r3, #12
 8005c80:	f040 808b 	bne.w	8005d9a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	f040 8087 	bne.w	8005d9a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c8c:	4b88      	ldr	r3, [pc, #544]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d005      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x64>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e3d9      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1a      	ldr	r2, [r3, #32]
 8005ca8:	4b81      	ldr	r3, [pc, #516]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d004      	beq.n	8005cbe <HAL_RCC_OscConfig+0x7e>
 8005cb4:	4b7e      	ldr	r3, [pc, #504]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cbc:	e005      	b.n	8005cca <HAL_RCC_OscConfig+0x8a>
 8005cbe:	4b7c      	ldr	r3, [pc, #496]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cc4:	091b      	lsrs	r3, r3, #4
 8005cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d223      	bcs.n	8005d16 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fd54 	bl	8006780 <RCC_SetFlashLatencyFromMSIRange>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e3ba      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ce2:	4b73      	ldr	r3, [pc, #460]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a72      	ldr	r2, [pc, #456]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005ce8:	f043 0308 	orr.w	r3, r3, #8
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	4b70      	ldr	r3, [pc, #448]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	496d      	ldr	r1, [pc, #436]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d00:	4b6b      	ldr	r3, [pc, #428]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	4968      	ldr	r1, [pc, #416]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	604b      	str	r3, [r1, #4]
 8005d14:	e025      	b.n	8005d62 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d16:	4b66      	ldr	r3, [pc, #408]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a65      	ldr	r2, [pc, #404]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005d1c:	f043 0308 	orr.w	r3, r3, #8
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	4b63      	ldr	r3, [pc, #396]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	4960      	ldr	r1, [pc, #384]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d34:	4b5e      	ldr	r3, [pc, #376]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	021b      	lsls	r3, r3, #8
 8005d42:	495b      	ldr	r1, [pc, #364]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d109      	bne.n	8005d62 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fd14 	bl	8006780 <RCC_SetFlashLatencyFromMSIRange>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e37a      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d62:	f000 fc81 	bl	8006668 <HAL_RCC_GetSysClockFreq>
 8005d66:	4602      	mov	r2, r0
 8005d68:	4b51      	ldr	r3, [pc, #324]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	091b      	lsrs	r3, r3, #4
 8005d6e:	f003 030f 	and.w	r3, r3, #15
 8005d72:	4950      	ldr	r1, [pc, #320]	; (8005eb4 <HAL_RCC_OscConfig+0x274>)
 8005d74:	5ccb      	ldrb	r3, [r1, r3]
 8005d76:	f003 031f 	and.w	r3, r3, #31
 8005d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7e:	4a4e      	ldr	r2, [pc, #312]	; (8005eb8 <HAL_RCC_OscConfig+0x278>)
 8005d80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005d82:	4b4e      	ldr	r3, [pc, #312]	; (8005ebc <HAL_RCC_OscConfig+0x27c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fe fd9a 	bl	80048c0 <HAL_InitTick>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d052      	beq.n	8005e3c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	e35e      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d032      	beq.n	8005e08 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005da2:	4b43      	ldr	r3, [pc, #268]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a42      	ldr	r2, [pc, #264]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005da8:	f043 0301 	orr.w	r3, r3, #1
 8005dac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005dae:	f7fe fdd7 	bl	8004960 <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005db6:	f7fe fdd3 	bl	8004960 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e347      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005dc8:	4b39      	ldr	r3, [pc, #228]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0f0      	beq.n	8005db6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dd4:	4b36      	ldr	r3, [pc, #216]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a35      	ldr	r2, [pc, #212]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005dda:	f043 0308 	orr.w	r3, r3, #8
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	4b33      	ldr	r3, [pc, #204]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	4930      	ldr	r1, [pc, #192]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005df2:	4b2f      	ldr	r3, [pc, #188]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	021b      	lsls	r3, r3, #8
 8005e00:	492b      	ldr	r1, [pc, #172]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	604b      	str	r3, [r1, #4]
 8005e06:	e01a      	b.n	8005e3e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e08:	4b29      	ldr	r3, [pc, #164]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a28      	ldr	r2, [pc, #160]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005e0e:	f023 0301 	bic.w	r3, r3, #1
 8005e12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e14:	f7fe fda4 	bl	8004960 <HAL_GetTick>
 8005e18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e1c:	f7fe fda0 	bl	8004960 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e314      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005e2e:	4b20      	ldr	r3, [pc, #128]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1f0      	bne.n	8005e1c <HAL_RCC_OscConfig+0x1dc>
 8005e3a:	e000      	b.n	8005e3e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d073      	beq.n	8005f32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d005      	beq.n	8005e5c <HAL_RCC_OscConfig+0x21c>
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	2b0c      	cmp	r3, #12
 8005e54:	d10e      	bne.n	8005e74 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d10b      	bne.n	8005e74 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e5c:	4b14      	ldr	r3, [pc, #80]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d063      	beq.n	8005f30 <HAL_RCC_OscConfig+0x2f0>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d15f      	bne.n	8005f30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e2f1      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e7c:	d106      	bne.n	8005e8c <HAL_RCC_OscConfig+0x24c>
 8005e7e:	4b0c      	ldr	r3, [pc, #48]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a0b      	ldr	r2, [pc, #44]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	e025      	b.n	8005ed8 <HAL_RCC_OscConfig+0x298>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e94:	d114      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x280>
 8005e96:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a05      	ldr	r2, [pc, #20]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	4b03      	ldr	r3, [pc, #12]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a02      	ldr	r2, [pc, #8]	; (8005eb0 <HAL_RCC_OscConfig+0x270>)
 8005ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	e013      	b.n	8005ed8 <HAL_RCC_OscConfig+0x298>
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	08008cbc 	.word	0x08008cbc
 8005eb8:	20000004 	.word	0x20000004
 8005ebc:	20000008 	.word	0x20000008
 8005ec0:	4ba0      	ldr	r3, [pc, #640]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a9f      	ldr	r2, [pc, #636]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	4b9d      	ldr	r3, [pc, #628]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a9c      	ldr	r2, [pc, #624]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d013      	beq.n	8005f08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fe fd3e 	bl	8004960 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ee8:	f7fe fd3a 	bl	8004960 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b64      	cmp	r3, #100	; 0x64
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e2ae      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005efa:	4b92      	ldr	r3, [pc, #584]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x2a8>
 8005f06:	e014      	b.n	8005f32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f08:	f7fe fd2a 	bl	8004960 <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f10:	f7fe fd26 	bl	8004960 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b64      	cmp	r3, #100	; 0x64
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e29a      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f22:	4b88      	ldr	r3, [pc, #544]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0x2d0>
 8005f2e:	e000      	b.n	8005f32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d060      	beq.n	8006000 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d005      	beq.n	8005f50 <HAL_RCC_OscConfig+0x310>
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	2b0c      	cmp	r3, #12
 8005f48:	d119      	bne.n	8005f7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d116      	bne.n	8005f7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f50:	4b7c      	ldr	r3, [pc, #496]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d005      	beq.n	8005f68 <HAL_RCC_OscConfig+0x328>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e277      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f68:	4b76      	ldr	r3, [pc, #472]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	061b      	lsls	r3, r3, #24
 8005f76:	4973      	ldr	r1, [pc, #460]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f7c:	e040      	b.n	8006000 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d023      	beq.n	8005fce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f86:	4b6f      	ldr	r3, [pc, #444]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a6e      	ldr	r2, [pc, #440]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f92:	f7fe fce5 	bl	8004960 <HAL_GetTick>
 8005f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f98:	e008      	b.n	8005fac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f9a:	f7fe fce1 	bl	8004960 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e255      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fac:	4b65      	ldr	r3, [pc, #404]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0f0      	beq.n	8005f9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fb8:	4b62      	ldr	r3, [pc, #392]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	061b      	lsls	r3, r3, #24
 8005fc6:	495f      	ldr	r1, [pc, #380]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	604b      	str	r3, [r1, #4]
 8005fcc:	e018      	b.n	8006000 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fce:	4b5d      	ldr	r3, [pc, #372]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a5c      	ldr	r2, [pc, #368]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fda:	f7fe fcc1 	bl	8004960 <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fe0:	e008      	b.n	8005ff4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fe2:	f7fe fcbd 	bl	8004960 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e231      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ff4:	4b53      	ldr	r3, [pc, #332]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1f0      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0308 	and.w	r3, r3, #8
 8006008:	2b00      	cmp	r3, #0
 800600a:	d03c      	beq.n	8006086 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d01c      	beq.n	800604e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006014:	4b4b      	ldr	r3, [pc, #300]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8006016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800601a:	4a4a      	ldr	r2, [pc, #296]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 800601c:	f043 0301 	orr.w	r3, r3, #1
 8006020:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006024:	f7fe fc9c 	bl	8004960 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800602c:	f7fe fc98 	bl	8004960 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e20c      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800603e:	4b41      	ldr	r3, [pc, #260]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8006040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0ef      	beq.n	800602c <HAL_RCC_OscConfig+0x3ec>
 800604c:	e01b      	b.n	8006086 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800604e:	4b3d      	ldr	r3, [pc, #244]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8006050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006054:	4a3b      	ldr	r2, [pc, #236]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8006056:	f023 0301 	bic.w	r3, r3, #1
 800605a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800605e:	f7fe fc7f 	bl	8004960 <HAL_GetTick>
 8006062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006064:	e008      	b.n	8006078 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006066:	f7fe fc7b 	bl	8004960 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d901      	bls.n	8006078 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e1ef      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006078:	4b32      	ldr	r3, [pc, #200]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 800607a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1ef      	bne.n	8006066 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 80a6 	beq.w	80061e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006094:	2300      	movs	r3, #0
 8006096:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006098:	4b2a      	ldr	r3, [pc, #168]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 800609a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10d      	bne.n	80060c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060a4:	4b27      	ldr	r3, [pc, #156]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 80060a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a8:	4a26      	ldr	r2, [pc, #152]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 80060aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ae:	6593      	str	r3, [r2, #88]	; 0x58
 80060b0:	4b24      	ldr	r3, [pc, #144]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 80060b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060bc:	2301      	movs	r3, #1
 80060be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060c0:	4b21      	ldr	r3, [pc, #132]	; (8006148 <HAL_RCC_OscConfig+0x508>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d118      	bne.n	80060fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060cc:	4b1e      	ldr	r3, [pc, #120]	; (8006148 <HAL_RCC_OscConfig+0x508>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a1d      	ldr	r2, [pc, #116]	; (8006148 <HAL_RCC_OscConfig+0x508>)
 80060d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060d8:	f7fe fc42 	bl	8004960 <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060e0:	f7fe fc3e 	bl	8004960 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e1b2      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060f2:	4b15      	ldr	r3, [pc, #84]	; (8006148 <HAL_RCC_OscConfig+0x508>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0f0      	beq.n	80060e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d108      	bne.n	8006118 <HAL_RCC_OscConfig+0x4d8>
 8006106:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8006108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610c:	4a0d      	ldr	r2, [pc, #52]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 800610e:	f043 0301 	orr.w	r3, r3, #1
 8006112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006116:	e029      	b.n	800616c <HAL_RCC_OscConfig+0x52c>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	2b05      	cmp	r3, #5
 800611e:	d115      	bne.n	800614c <HAL_RCC_OscConfig+0x50c>
 8006120:	4b08      	ldr	r3, [pc, #32]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006126:	4a07      	ldr	r2, [pc, #28]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8006128:	f043 0304 	orr.w	r3, r3, #4
 800612c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006130:	4b04      	ldr	r3, [pc, #16]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8006132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006136:	4a03      	ldr	r2, [pc, #12]	; (8006144 <HAL_RCC_OscConfig+0x504>)
 8006138:	f043 0301 	orr.w	r3, r3, #1
 800613c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006140:	e014      	b.n	800616c <HAL_RCC_OscConfig+0x52c>
 8006142:	bf00      	nop
 8006144:	40021000 	.word	0x40021000
 8006148:	40007000 	.word	0x40007000
 800614c:	4b9a      	ldr	r3, [pc, #616]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 800614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006152:	4a99      	ldr	r2, [pc, #612]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 8006154:	f023 0301 	bic.w	r3, r3, #1
 8006158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800615c:	4b96      	ldr	r3, [pc, #600]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006162:	4a95      	ldr	r2, [pc, #596]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 8006164:	f023 0304 	bic.w	r3, r3, #4
 8006168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d016      	beq.n	80061a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006174:	f7fe fbf4 	bl	8004960 <HAL_GetTick>
 8006178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800617a:	e00a      	b.n	8006192 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800617c:	f7fe fbf0 	bl	8004960 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	f241 3288 	movw	r2, #5000	; 0x1388
 800618a:	4293      	cmp	r3, r2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e162      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006192:	4b89      	ldr	r3, [pc, #548]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006198:	f003 0302 	and.w	r3, r3, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0ed      	beq.n	800617c <HAL_RCC_OscConfig+0x53c>
 80061a0:	e015      	b.n	80061ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a2:	f7fe fbdd 	bl	8004960 <HAL_GetTick>
 80061a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061a8:	e00a      	b.n	80061c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061aa:	f7fe fbd9 	bl	8004960 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e14b      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061c0:	4b7d      	ldr	r3, [pc, #500]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 80061c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1ed      	bne.n	80061aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061ce:	7ffb      	ldrb	r3, [r7, #31]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d105      	bne.n	80061e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061d4:	4b78      	ldr	r3, [pc, #480]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 80061d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d8:	4a77      	ldr	r2, [pc, #476]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 80061da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d03c      	beq.n	8006266 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01c      	beq.n	800622e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061f4:	4b70      	ldr	r3, [pc, #448]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 80061f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061fa:	4a6f      	ldr	r2, [pc, #444]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 80061fc:	f043 0301 	orr.w	r3, r3, #1
 8006200:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006204:	f7fe fbac 	bl	8004960 <HAL_GetTick>
 8006208:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800620c:	f7fe fba8 	bl	8004960 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e11c      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800621e:	4b66      	ldr	r3, [pc, #408]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 8006220:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0ef      	beq.n	800620c <HAL_RCC_OscConfig+0x5cc>
 800622c:	e01b      	b.n	8006266 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800622e:	4b62      	ldr	r3, [pc, #392]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 8006230:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006234:	4a60      	ldr	r2, [pc, #384]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 8006236:	f023 0301 	bic.w	r3, r3, #1
 800623a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623e:	f7fe fb8f 	bl	8004960 <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006246:	f7fe fb8b 	bl	8004960 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e0ff      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006258:	4b57      	ldr	r3, [pc, #348]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 800625a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1ef      	bne.n	8006246 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 80f3 	beq.w	8006456 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006274:	2b02      	cmp	r3, #2
 8006276:	f040 80c9 	bne.w	800640c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800627a:	4b4f      	ldr	r3, [pc, #316]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f003 0203 	and.w	r2, r3, #3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	429a      	cmp	r2, r3
 800628c:	d12c      	bne.n	80062e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006298:	3b01      	subs	r3, #1
 800629a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800629c:	429a      	cmp	r2, r3
 800629e:	d123      	bne.n	80062e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d11b      	bne.n	80062e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062bc:	429a      	cmp	r2, r3
 80062be:	d113      	bne.n	80062e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ca:	085b      	lsrs	r3, r3, #1
 80062cc:	3b01      	subs	r3, #1
 80062ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d109      	bne.n	80062e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	085b      	lsrs	r3, r3, #1
 80062e0:	3b01      	subs	r3, #1
 80062e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d06b      	beq.n	80063c0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	2b0c      	cmp	r3, #12
 80062ec:	d062      	beq.n	80063b4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80062ee:	4b32      	ldr	r3, [pc, #200]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e0ac      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80062fe:	4b2e      	ldr	r3, [pc, #184]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a2d      	ldr	r2, [pc, #180]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 8006304:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006308:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800630a:	f7fe fb29 	bl	8004960 <HAL_GetTick>
 800630e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006310:	e008      	b.n	8006324 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006312:	f7fe fb25 	bl	8004960 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d901      	bls.n	8006324 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e099      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006324:	4b24      	ldr	r3, [pc, #144]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1f0      	bne.n	8006312 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006330:	4b21      	ldr	r3, [pc, #132]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	4b21      	ldr	r3, [pc, #132]	; (80063bc <HAL_RCC_OscConfig+0x77c>)
 8006336:	4013      	ands	r3, r2
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006340:	3a01      	subs	r2, #1
 8006342:	0112      	lsls	r2, r2, #4
 8006344:	4311      	orrs	r1, r2
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800634a:	0212      	lsls	r2, r2, #8
 800634c:	4311      	orrs	r1, r2
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006352:	0852      	lsrs	r2, r2, #1
 8006354:	3a01      	subs	r2, #1
 8006356:	0552      	lsls	r2, r2, #21
 8006358:	4311      	orrs	r1, r2
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800635e:	0852      	lsrs	r2, r2, #1
 8006360:	3a01      	subs	r2, #1
 8006362:	0652      	lsls	r2, r2, #25
 8006364:	4311      	orrs	r1, r2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800636a:	06d2      	lsls	r2, r2, #27
 800636c:	430a      	orrs	r2, r1
 800636e:	4912      	ldr	r1, [pc, #72]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 8006370:	4313      	orrs	r3, r2
 8006372:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006374:	4b10      	ldr	r3, [pc, #64]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a0f      	ldr	r2, [pc, #60]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 800637a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800637e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006380:	4b0d      	ldr	r3, [pc, #52]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4a0c      	ldr	r2, [pc, #48]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 8006386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800638a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800638c:	f7fe fae8 	bl	8004960 <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006394:	f7fe fae4 	bl	8004960 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e058      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063a6:	4b04      	ldr	r3, [pc, #16]	; (80063b8 <HAL_RCC_OscConfig+0x778>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0f0      	beq.n	8006394 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80063b2:	e050      	b.n	8006456 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e04f      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
 80063b8:	40021000 	.word	0x40021000
 80063bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063c0:	4b27      	ldr	r3, [pc, #156]	; (8006460 <HAL_RCC_OscConfig+0x820>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d144      	bne.n	8006456 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80063cc:	4b24      	ldr	r3, [pc, #144]	; (8006460 <HAL_RCC_OscConfig+0x820>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a23      	ldr	r2, [pc, #140]	; (8006460 <HAL_RCC_OscConfig+0x820>)
 80063d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063d8:	4b21      	ldr	r3, [pc, #132]	; (8006460 <HAL_RCC_OscConfig+0x820>)
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	4a20      	ldr	r2, [pc, #128]	; (8006460 <HAL_RCC_OscConfig+0x820>)
 80063de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063e4:	f7fe fabc 	bl	8004960 <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ec:	f7fe fab8 	bl	8004960 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e02c      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063fe:	4b18      	ldr	r3, [pc, #96]	; (8006460 <HAL_RCC_OscConfig+0x820>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0f0      	beq.n	80063ec <HAL_RCC_OscConfig+0x7ac>
 800640a:	e024      	b.n	8006456 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	2b0c      	cmp	r3, #12
 8006410:	d01f      	beq.n	8006452 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006412:	4b13      	ldr	r3, [pc, #76]	; (8006460 <HAL_RCC_OscConfig+0x820>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a12      	ldr	r2, [pc, #72]	; (8006460 <HAL_RCC_OscConfig+0x820>)
 8006418:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800641c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800641e:	f7fe fa9f 	bl	8004960 <HAL_GetTick>
 8006422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006424:	e008      	b.n	8006438 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006426:	f7fe fa9b 	bl	8004960 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e00f      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006438:	4b09      	ldr	r3, [pc, #36]	; (8006460 <HAL_RCC_OscConfig+0x820>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1f0      	bne.n	8006426 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006444:	4b06      	ldr	r3, [pc, #24]	; (8006460 <HAL_RCC_OscConfig+0x820>)
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	4905      	ldr	r1, [pc, #20]	; (8006460 <HAL_RCC_OscConfig+0x820>)
 800644a:	4b06      	ldr	r3, [pc, #24]	; (8006464 <HAL_RCC_OscConfig+0x824>)
 800644c:	4013      	ands	r3, r2
 800644e:	60cb      	str	r3, [r1, #12]
 8006450:	e001      	b.n	8006456 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	40021000 	.word	0x40021000
 8006464:	feeefffc 	.word	0xfeeefffc

08006468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e0e7      	b.n	800664c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800647c:	4b75      	ldr	r3, [pc, #468]	; (8006654 <HAL_RCC_ClockConfig+0x1ec>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d910      	bls.n	80064ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648a:	4b72      	ldr	r3, [pc, #456]	; (8006654 <HAL_RCC_ClockConfig+0x1ec>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f023 0207 	bic.w	r2, r3, #7
 8006492:	4970      	ldr	r1, [pc, #448]	; (8006654 <HAL_RCC_ClockConfig+0x1ec>)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	4313      	orrs	r3, r2
 8006498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800649a:	4b6e      	ldr	r3, [pc, #440]	; (8006654 <HAL_RCC_ClockConfig+0x1ec>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d001      	beq.n	80064ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e0cf      	b.n	800664c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d010      	beq.n	80064da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	4b66      	ldr	r3, [pc, #408]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d908      	bls.n	80064da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064c8:	4b63      	ldr	r3, [pc, #396]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	4960      	ldr	r1, [pc, #384]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d04c      	beq.n	8006580 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d107      	bne.n	80064fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064ee:	4b5a      	ldr	r3, [pc, #360]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d121      	bne.n	800653e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e0a6      	b.n	800664c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b02      	cmp	r3, #2
 8006504:	d107      	bne.n	8006516 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006506:	4b54      	ldr	r3, [pc, #336]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d115      	bne.n	800653e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e09a      	b.n	800664c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d107      	bne.n	800652e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800651e:	4b4e      	ldr	r3, [pc, #312]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e08e      	b.n	800664c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800652e:	4b4a      	ldr	r3, [pc, #296]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e086      	b.n	800664c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800653e:	4b46      	ldr	r3, [pc, #280]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f023 0203 	bic.w	r2, r3, #3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	4943      	ldr	r1, [pc, #268]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 800654c:	4313      	orrs	r3, r2
 800654e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006550:	f7fe fa06 	bl	8004960 <HAL_GetTick>
 8006554:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006556:	e00a      	b.n	800656e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006558:	f7fe fa02 	bl	8004960 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	f241 3288 	movw	r2, #5000	; 0x1388
 8006566:	4293      	cmp	r3, r2
 8006568:	d901      	bls.n	800656e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e06e      	b.n	800664c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800656e:	4b3a      	ldr	r3, [pc, #232]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 020c 	and.w	r2, r3, #12
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	429a      	cmp	r2, r3
 800657e:	d1eb      	bne.n	8006558 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d010      	beq.n	80065ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	4b31      	ldr	r3, [pc, #196]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006598:	429a      	cmp	r2, r3
 800659a:	d208      	bcs.n	80065ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800659c:	4b2e      	ldr	r3, [pc, #184]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	492b      	ldr	r1, [pc, #172]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065ae:	4b29      	ldr	r3, [pc, #164]	; (8006654 <HAL_RCC_ClockConfig+0x1ec>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d210      	bcs.n	80065de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065bc:	4b25      	ldr	r3, [pc, #148]	; (8006654 <HAL_RCC_ClockConfig+0x1ec>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f023 0207 	bic.w	r2, r3, #7
 80065c4:	4923      	ldr	r1, [pc, #140]	; (8006654 <HAL_RCC_ClockConfig+0x1ec>)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065cc:	4b21      	ldr	r3, [pc, #132]	; (8006654 <HAL_RCC_ClockConfig+0x1ec>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d001      	beq.n	80065de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e036      	b.n	800664c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0304 	and.w	r3, r3, #4
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d008      	beq.n	80065fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065ea:	4b1b      	ldr	r3, [pc, #108]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	4918      	ldr	r1, [pc, #96]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0308 	and.w	r3, r3, #8
 8006604:	2b00      	cmp	r3, #0
 8006606:	d009      	beq.n	800661c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006608:	4b13      	ldr	r3, [pc, #76]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	4910      	ldr	r1, [pc, #64]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 8006618:	4313      	orrs	r3, r2
 800661a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800661c:	f000 f824 	bl	8006668 <HAL_RCC_GetSysClockFreq>
 8006620:	4602      	mov	r2, r0
 8006622:	4b0d      	ldr	r3, [pc, #52]	; (8006658 <HAL_RCC_ClockConfig+0x1f0>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	091b      	lsrs	r3, r3, #4
 8006628:	f003 030f 	and.w	r3, r3, #15
 800662c:	490b      	ldr	r1, [pc, #44]	; (800665c <HAL_RCC_ClockConfig+0x1f4>)
 800662e:	5ccb      	ldrb	r3, [r1, r3]
 8006630:	f003 031f 	and.w	r3, r3, #31
 8006634:	fa22 f303 	lsr.w	r3, r2, r3
 8006638:	4a09      	ldr	r2, [pc, #36]	; (8006660 <HAL_RCC_ClockConfig+0x1f8>)
 800663a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800663c:	4b09      	ldr	r3, [pc, #36]	; (8006664 <HAL_RCC_ClockConfig+0x1fc>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4618      	mov	r0, r3
 8006642:	f7fe f93d 	bl	80048c0 <HAL_InitTick>
 8006646:	4603      	mov	r3, r0
 8006648:	72fb      	strb	r3, [r7, #11]

  return status;
 800664a:	7afb      	ldrb	r3, [r7, #11]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	40022000 	.word	0x40022000
 8006658:	40021000 	.word	0x40021000
 800665c:	08008cbc 	.word	0x08008cbc
 8006660:	20000004 	.word	0x20000004
 8006664:	20000008 	.word	0x20000008

08006668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006668:	b480      	push	{r7}
 800666a:	b089      	sub	sp, #36	; 0x24
 800666c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	2300      	movs	r3, #0
 8006674:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006676:	4b3e      	ldr	r3, [pc, #248]	; (8006770 <HAL_RCC_GetSysClockFreq+0x108>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f003 030c 	and.w	r3, r3, #12
 800667e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006680:	4b3b      	ldr	r3, [pc, #236]	; (8006770 <HAL_RCC_GetSysClockFreq+0x108>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <HAL_RCC_GetSysClockFreq+0x34>
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b0c      	cmp	r3, #12
 8006694:	d121      	bne.n	80066da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d11e      	bne.n	80066da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800669c:	4b34      	ldr	r3, [pc, #208]	; (8006770 <HAL_RCC_GetSysClockFreq+0x108>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0308 	and.w	r3, r3, #8
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d107      	bne.n	80066b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80066a8:	4b31      	ldr	r3, [pc, #196]	; (8006770 <HAL_RCC_GetSysClockFreq+0x108>)
 80066aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066ae:	0a1b      	lsrs	r3, r3, #8
 80066b0:	f003 030f 	and.w	r3, r3, #15
 80066b4:	61fb      	str	r3, [r7, #28]
 80066b6:	e005      	b.n	80066c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80066b8:	4b2d      	ldr	r3, [pc, #180]	; (8006770 <HAL_RCC_GetSysClockFreq+0x108>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	091b      	lsrs	r3, r3, #4
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80066c4:	4a2b      	ldr	r2, [pc, #172]	; (8006774 <HAL_RCC_GetSysClockFreq+0x10c>)
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10d      	bne.n	80066f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066d8:	e00a      	b.n	80066f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b04      	cmp	r3, #4
 80066de:	d102      	bne.n	80066e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066e0:	4b25      	ldr	r3, [pc, #148]	; (8006778 <HAL_RCC_GetSysClockFreq+0x110>)
 80066e2:	61bb      	str	r3, [r7, #24]
 80066e4:	e004      	b.n	80066f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d101      	bne.n	80066f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066ec:	4b23      	ldr	r3, [pc, #140]	; (800677c <HAL_RCC_GetSysClockFreq+0x114>)
 80066ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	2b0c      	cmp	r3, #12
 80066f4:	d134      	bne.n	8006760 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066f6:	4b1e      	ldr	r3, [pc, #120]	; (8006770 <HAL_RCC_GetSysClockFreq+0x108>)
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d003      	beq.n	800670e <HAL_RCC_GetSysClockFreq+0xa6>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b03      	cmp	r3, #3
 800670a:	d003      	beq.n	8006714 <HAL_RCC_GetSysClockFreq+0xac>
 800670c:	e005      	b.n	800671a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800670e:	4b1a      	ldr	r3, [pc, #104]	; (8006778 <HAL_RCC_GetSysClockFreq+0x110>)
 8006710:	617b      	str	r3, [r7, #20]
      break;
 8006712:	e005      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006714:	4b19      	ldr	r3, [pc, #100]	; (800677c <HAL_RCC_GetSysClockFreq+0x114>)
 8006716:	617b      	str	r3, [r7, #20]
      break;
 8006718:	e002      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	617b      	str	r3, [r7, #20]
      break;
 800671e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006720:	4b13      	ldr	r3, [pc, #76]	; (8006770 <HAL_RCC_GetSysClockFreq+0x108>)
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	091b      	lsrs	r3, r3, #4
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	3301      	adds	r3, #1
 800672c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800672e:	4b10      	ldr	r3, [pc, #64]	; (8006770 <HAL_RCC_GetSysClockFreq+0x108>)
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	0a1b      	lsrs	r3, r3, #8
 8006734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	fb03 f202 	mul.w	r2, r3, r2
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	fbb2 f3f3 	udiv	r3, r2, r3
 8006744:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006746:	4b0a      	ldr	r3, [pc, #40]	; (8006770 <HAL_RCC_GetSysClockFreq+0x108>)
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	0e5b      	lsrs	r3, r3, #25
 800674c:	f003 0303 	and.w	r3, r3, #3
 8006750:	3301      	adds	r3, #1
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	fbb2 f3f3 	udiv	r3, r2, r3
 800675e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006760:	69bb      	ldr	r3, [r7, #24]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3724      	adds	r7, #36	; 0x24
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	40021000 	.word	0x40021000
 8006774:	08008ccc 	.word	0x08008ccc
 8006778:	00f42400 	.word	0x00f42400
 800677c:	007a1200 	.word	0x007a1200

08006780 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006788:	2300      	movs	r3, #0
 800678a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800678c:	4b2a      	ldr	r3, [pc, #168]	; (8006838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800678e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006798:	f7ff f9ee 	bl	8005b78 <HAL_PWREx_GetVoltageRange>
 800679c:	6178      	str	r0, [r7, #20]
 800679e:	e014      	b.n	80067ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80067a0:	4b25      	ldr	r3, [pc, #148]	; (8006838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a4:	4a24      	ldr	r2, [pc, #144]	; (8006838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067aa:	6593      	str	r3, [r2, #88]	; 0x58
 80067ac:	4b22      	ldr	r3, [pc, #136]	; (8006838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80067b8:	f7ff f9de 	bl	8005b78 <HAL_PWREx_GetVoltageRange>
 80067bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80067be:	4b1e      	ldr	r3, [pc, #120]	; (8006838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c2:	4a1d      	ldr	r2, [pc, #116]	; (8006838 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d0:	d10b      	bne.n	80067ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b80      	cmp	r3, #128	; 0x80
 80067d6:	d919      	bls.n	800680c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2ba0      	cmp	r3, #160	; 0xa0
 80067dc:	d902      	bls.n	80067e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80067de:	2302      	movs	r3, #2
 80067e0:	613b      	str	r3, [r7, #16]
 80067e2:	e013      	b.n	800680c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80067e4:	2301      	movs	r3, #1
 80067e6:	613b      	str	r3, [r7, #16]
 80067e8:	e010      	b.n	800680c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b80      	cmp	r3, #128	; 0x80
 80067ee:	d902      	bls.n	80067f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80067f0:	2303      	movs	r3, #3
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	e00a      	b.n	800680c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b80      	cmp	r3, #128	; 0x80
 80067fa:	d102      	bne.n	8006802 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80067fc:	2302      	movs	r3, #2
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	e004      	b.n	800680c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b70      	cmp	r3, #112	; 0x70
 8006806:	d101      	bne.n	800680c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006808:	2301      	movs	r3, #1
 800680a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800680c:	4b0b      	ldr	r3, [pc, #44]	; (800683c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f023 0207 	bic.w	r2, r3, #7
 8006814:	4909      	ldr	r1, [pc, #36]	; (800683c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800681c:	4b07      	ldr	r3, [pc, #28]	; (800683c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	429a      	cmp	r2, r3
 8006828:	d001      	beq.n	800682e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e000      	b.n	8006830 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	40021000 	.word	0x40021000
 800683c:	40022000 	.word	0x40022000

08006840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e049      	b.n	80068e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d106      	bne.n	800686c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fd fa8c 	bl	8003d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3304      	adds	r3, #4
 800687c:	4619      	mov	r1, r3
 800687e:	4610      	mov	r0, r2
 8006880:	f000 fb52 	bl	8006f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b082      	sub	sp, #8
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e049      	b.n	8006994 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d106      	bne.n	800691a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f841 	bl	800699c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2202      	movs	r2, #2
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	3304      	adds	r3, #4
 800692a:	4619      	mov	r1, r3
 800692c:	4610      	mov	r0, r2
 800692e:	f000 fafb 	bl	8006f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d109      	bne.n	80069d4 <HAL_TIM_PWM_Start+0x24>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	bf14      	ite	ne
 80069cc:	2301      	movne	r3, #1
 80069ce:	2300      	moveq	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	e03c      	b.n	8006a4e <HAL_TIM_PWM_Start+0x9e>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d109      	bne.n	80069ee <HAL_TIM_PWM_Start+0x3e>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	bf14      	ite	ne
 80069e6:	2301      	movne	r3, #1
 80069e8:	2300      	moveq	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	e02f      	b.n	8006a4e <HAL_TIM_PWM_Start+0x9e>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d109      	bne.n	8006a08 <HAL_TIM_PWM_Start+0x58>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	bf14      	ite	ne
 8006a00:	2301      	movne	r3, #1
 8006a02:	2300      	moveq	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	e022      	b.n	8006a4e <HAL_TIM_PWM_Start+0x9e>
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b0c      	cmp	r3, #12
 8006a0c:	d109      	bne.n	8006a22 <HAL_TIM_PWM_Start+0x72>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	bf14      	ite	ne
 8006a1a:	2301      	movne	r3, #1
 8006a1c:	2300      	moveq	r3, #0
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	e015      	b.n	8006a4e <HAL_TIM_PWM_Start+0x9e>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b10      	cmp	r3, #16
 8006a26:	d109      	bne.n	8006a3c <HAL_TIM_PWM_Start+0x8c>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	bf14      	ite	ne
 8006a34:	2301      	movne	r3, #1
 8006a36:	2300      	moveq	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	e008      	b.n	8006a4e <HAL_TIM_PWM_Start+0x9e>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	bf14      	ite	ne
 8006a48:	2301      	movne	r3, #1
 8006a4a:	2300      	moveq	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e07e      	b.n	8006b54 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <HAL_TIM_PWM_Start+0xb6>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a64:	e023      	b.n	8006aae <HAL_TIM_PWM_Start+0xfe>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	d104      	bne.n	8006a76 <HAL_TIM_PWM_Start+0xc6>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a74:	e01b      	b.n	8006aae <HAL_TIM_PWM_Start+0xfe>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d104      	bne.n	8006a86 <HAL_TIM_PWM_Start+0xd6>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a84:	e013      	b.n	8006aae <HAL_TIM_PWM_Start+0xfe>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b0c      	cmp	r3, #12
 8006a8a:	d104      	bne.n	8006a96 <HAL_TIM_PWM_Start+0xe6>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a94:	e00b      	b.n	8006aae <HAL_TIM_PWM_Start+0xfe>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b10      	cmp	r3, #16
 8006a9a:	d104      	bne.n	8006aa6 <HAL_TIM_PWM_Start+0xf6>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aa4:	e003      	b.n	8006aae <HAL_TIM_PWM_Start+0xfe>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 fdbe 	bl	8007638 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a26      	ldr	r2, [pc, #152]	; (8006b5c <HAL_TIM_PWM_Start+0x1ac>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d009      	beq.n	8006ada <HAL_TIM_PWM_Start+0x12a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a25      	ldr	r2, [pc, #148]	; (8006b60 <HAL_TIM_PWM_Start+0x1b0>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d004      	beq.n	8006ada <HAL_TIM_PWM_Start+0x12a>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a23      	ldr	r2, [pc, #140]	; (8006b64 <HAL_TIM_PWM_Start+0x1b4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d101      	bne.n	8006ade <HAL_TIM_PWM_Start+0x12e>
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <HAL_TIM_PWM_Start+0x130>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d007      	beq.n	8006af4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006af2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <HAL_TIM_PWM_Start+0x1ac>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d009      	beq.n	8006b12 <HAL_TIM_PWM_Start+0x162>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b06:	d004      	beq.n	8006b12 <HAL_TIM_PWM_Start+0x162>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a14      	ldr	r2, [pc, #80]	; (8006b60 <HAL_TIM_PWM_Start+0x1b0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d115      	bne.n	8006b3e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <HAL_TIM_PWM_Start+0x1b8>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b06      	cmp	r3, #6
 8006b22:	d015      	beq.n	8006b50 <HAL_TIM_PWM_Start+0x1a0>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b2a:	d011      	beq.n	8006b50 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0201 	orr.w	r2, r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b3c:	e008      	b.n	8006b50 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f042 0201 	orr.w	r2, r2, #1
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	e000      	b.n	8006b52 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	40012c00 	.word	0x40012c00
 8006b60:	40014000 	.word	0x40014000
 8006b64:	40014400 	.word	0x40014400
 8006b68:	00010007 	.word	0x00010007

08006b6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e0ff      	b.n	8006d8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b14      	cmp	r3, #20
 8006b96:	f200 80f0 	bhi.w	8006d7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ba0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba0:	08006bf5 	.word	0x08006bf5
 8006ba4:	08006d7b 	.word	0x08006d7b
 8006ba8:	08006d7b 	.word	0x08006d7b
 8006bac:	08006d7b 	.word	0x08006d7b
 8006bb0:	08006c35 	.word	0x08006c35
 8006bb4:	08006d7b 	.word	0x08006d7b
 8006bb8:	08006d7b 	.word	0x08006d7b
 8006bbc:	08006d7b 	.word	0x08006d7b
 8006bc0:	08006c77 	.word	0x08006c77
 8006bc4:	08006d7b 	.word	0x08006d7b
 8006bc8:	08006d7b 	.word	0x08006d7b
 8006bcc:	08006d7b 	.word	0x08006d7b
 8006bd0:	08006cb7 	.word	0x08006cb7
 8006bd4:	08006d7b 	.word	0x08006d7b
 8006bd8:	08006d7b 	.word	0x08006d7b
 8006bdc:	08006d7b 	.word	0x08006d7b
 8006be0:	08006cf9 	.word	0x08006cf9
 8006be4:	08006d7b 	.word	0x08006d7b
 8006be8:	08006d7b 	.word	0x08006d7b
 8006bec:	08006d7b 	.word	0x08006d7b
 8006bf0:	08006d39 	.word	0x08006d39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fa04 	bl	8007008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699a      	ldr	r2, [r3, #24]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0208 	orr.w	r2, r2, #8
 8006c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0204 	bic.w	r2, r2, #4
 8006c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6999      	ldr	r1, [r3, #24]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	619a      	str	r2, [r3, #24]
      break;
 8006c32:	e0a5      	b.n	8006d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fa60 	bl	8007100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699a      	ldr	r2, [r3, #24]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6999      	ldr	r1, [r3, #24]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	021a      	lsls	r2, r3, #8
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	619a      	str	r2, [r3, #24]
      break;
 8006c74:	e084      	b.n	8006d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fab9 	bl	80071f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0208 	orr.w	r2, r2, #8
 8006c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0204 	bic.w	r2, r2, #4
 8006ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69d9      	ldr	r1, [r3, #28]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	61da      	str	r2, [r3, #28]
      break;
 8006cb4:	e064      	b.n	8006d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68b9      	ldr	r1, [r7, #8]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fb11 	bl	80072e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69da      	ldr	r2, [r3, #28]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69d9      	ldr	r1, [r3, #28]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	021a      	lsls	r2, r3, #8
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	61da      	str	r2, [r3, #28]
      break;
 8006cf6:	e043      	b.n	8006d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68b9      	ldr	r1, [r7, #8]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fb4e 	bl	80073a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0208 	orr.w	r2, r2, #8
 8006d12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0204 	bic.w	r2, r2, #4
 8006d22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	691a      	ldr	r2, [r3, #16]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d36:	e023      	b.n	8006d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68b9      	ldr	r1, [r7, #8]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fb86 	bl	8007450 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	021a      	lsls	r2, r3, #8
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d78:	e002      	b.n	8006d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop

08006d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d101      	bne.n	8006db0 <HAL_TIM_ConfigClockSource+0x1c>
 8006dac:	2302      	movs	r3, #2
 8006dae:	e0b6      	b.n	8006f1e <HAL_TIM_ConfigClockSource+0x18a>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dec:	d03e      	beq.n	8006e6c <HAL_TIM_ConfigClockSource+0xd8>
 8006dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006df2:	f200 8087 	bhi.w	8006f04 <HAL_TIM_ConfigClockSource+0x170>
 8006df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dfa:	f000 8086 	beq.w	8006f0a <HAL_TIM_ConfigClockSource+0x176>
 8006dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e02:	d87f      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x170>
 8006e04:	2b70      	cmp	r3, #112	; 0x70
 8006e06:	d01a      	beq.n	8006e3e <HAL_TIM_ConfigClockSource+0xaa>
 8006e08:	2b70      	cmp	r3, #112	; 0x70
 8006e0a:	d87b      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x170>
 8006e0c:	2b60      	cmp	r3, #96	; 0x60
 8006e0e:	d050      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x11e>
 8006e10:	2b60      	cmp	r3, #96	; 0x60
 8006e12:	d877      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x170>
 8006e14:	2b50      	cmp	r3, #80	; 0x50
 8006e16:	d03c      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0xfe>
 8006e18:	2b50      	cmp	r3, #80	; 0x50
 8006e1a:	d873      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x170>
 8006e1c:	2b40      	cmp	r3, #64	; 0x40
 8006e1e:	d058      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x13e>
 8006e20:	2b40      	cmp	r3, #64	; 0x40
 8006e22:	d86f      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x170>
 8006e24:	2b30      	cmp	r3, #48	; 0x30
 8006e26:	d064      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x15e>
 8006e28:	2b30      	cmp	r3, #48	; 0x30
 8006e2a:	d86b      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x170>
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	d060      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x15e>
 8006e30:	2b20      	cmp	r3, #32
 8006e32:	d867      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x170>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d05c      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x15e>
 8006e38:	2b10      	cmp	r3, #16
 8006e3a:	d05a      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x15e>
 8006e3c:	e062      	b.n	8006f04 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e4e:	f000 fbd3 	bl	80075f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	609a      	str	r2, [r3, #8]
      break;
 8006e6a:	e04f      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e7c:	f000 fbbc 	bl	80075f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e8e:	609a      	str	r2, [r3, #8]
      break;
 8006e90:	e03c      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f000 fb30 	bl	8007504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2150      	movs	r1, #80	; 0x50
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fb89 	bl	80075c2 <TIM_ITRx_SetConfig>
      break;
 8006eb0:	e02c      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f000 fb4f 	bl	8007562 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2160      	movs	r1, #96	; 0x60
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fb79 	bl	80075c2 <TIM_ITRx_SetConfig>
      break;
 8006ed0:	e01c      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f000 fb10 	bl	8007504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2140      	movs	r1, #64	; 0x40
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fb69 	bl	80075c2 <TIM_ITRx_SetConfig>
      break;
 8006ef0:	e00c      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4619      	mov	r1, r3
 8006efc:	4610      	mov	r0, r2
 8006efe:	f000 fb60 	bl	80075c2 <TIM_ITRx_SetConfig>
      break;
 8006f02:	e003      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	73fb      	strb	r3, [r7, #15]
      break;
 8006f08:	e000      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006f0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
	...

08006f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a30      	ldr	r2, [pc, #192]	; (8006ffc <TIM_Base_SetConfig+0xd4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d003      	beq.n	8006f48 <TIM_Base_SetConfig+0x20>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f46:	d108      	bne.n	8006f5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a27      	ldr	r2, [pc, #156]	; (8006ffc <TIM_Base_SetConfig+0xd4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00b      	beq.n	8006f7a <TIM_Base_SetConfig+0x52>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f68:	d007      	beq.n	8006f7a <TIM_Base_SetConfig+0x52>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a24      	ldr	r2, [pc, #144]	; (8007000 <TIM_Base_SetConfig+0xd8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d003      	beq.n	8006f7a <TIM_Base_SetConfig+0x52>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a23      	ldr	r2, [pc, #140]	; (8007004 <TIM_Base_SetConfig+0xdc>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d108      	bne.n	8006f8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a12      	ldr	r2, [pc, #72]	; (8006ffc <TIM_Base_SetConfig+0xd4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d007      	beq.n	8006fc8 <TIM_Base_SetConfig+0xa0>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a11      	ldr	r2, [pc, #68]	; (8007000 <TIM_Base_SetConfig+0xd8>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d003      	beq.n	8006fc8 <TIM_Base_SetConfig+0xa0>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a10      	ldr	r2, [pc, #64]	; (8007004 <TIM_Base_SetConfig+0xdc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d103      	bne.n	8006fd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d105      	bne.n	8006fee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f023 0201 	bic.w	r2, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	611a      	str	r2, [r3, #16]
  }
}
 8006fee:	bf00      	nop
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	40012c00 	.word	0x40012c00
 8007000:	40014000 	.word	0x40014000
 8007004:	40014400 	.word	0x40014400

08007008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	f023 0201 	bic.w	r2, r3, #1
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0303 	bic.w	r3, r3, #3
 8007042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f023 0302 	bic.w	r3, r3, #2
 8007054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a24      	ldr	r2, [pc, #144]	; (80070f4 <TIM_OC1_SetConfig+0xec>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d007      	beq.n	8007078 <TIM_OC1_SetConfig+0x70>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a23      	ldr	r2, [pc, #140]	; (80070f8 <TIM_OC1_SetConfig+0xf0>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d003      	beq.n	8007078 <TIM_OC1_SetConfig+0x70>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a22      	ldr	r2, [pc, #136]	; (80070fc <TIM_OC1_SetConfig+0xf4>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d10c      	bne.n	8007092 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f023 0308 	bic.w	r3, r3, #8
 800707e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f023 0304 	bic.w	r3, r3, #4
 8007090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a17      	ldr	r2, [pc, #92]	; (80070f4 <TIM_OC1_SetConfig+0xec>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d007      	beq.n	80070aa <TIM_OC1_SetConfig+0xa2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a16      	ldr	r2, [pc, #88]	; (80070f8 <TIM_OC1_SetConfig+0xf0>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d003      	beq.n	80070aa <TIM_OC1_SetConfig+0xa2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a15      	ldr	r2, [pc, #84]	; (80070fc <TIM_OC1_SetConfig+0xf4>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d111      	bne.n	80070ce <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	621a      	str	r2, [r3, #32]
}
 80070e8:	bf00      	nop
 80070ea:	371c      	adds	r7, #28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	40012c00 	.word	0x40012c00
 80070f8:	40014000 	.word	0x40014000
 80070fc:	40014400 	.word	0x40014400

08007100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	f023 0210 	bic.w	r2, r3, #16
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800712e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800713a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	021b      	lsls	r3, r3, #8
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f023 0320 	bic.w	r3, r3, #32
 800714e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	4313      	orrs	r3, r2
 800715a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a22      	ldr	r2, [pc, #136]	; (80071e8 <TIM_OC2_SetConfig+0xe8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d10d      	bne.n	8007180 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800716a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	011b      	lsls	r3, r3, #4
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	4313      	orrs	r3, r2
 8007176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800717e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a19      	ldr	r2, [pc, #100]	; (80071e8 <TIM_OC2_SetConfig+0xe8>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d007      	beq.n	8007198 <TIM_OC2_SetConfig+0x98>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a18      	ldr	r2, [pc, #96]	; (80071ec <TIM_OC2_SetConfig+0xec>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d003      	beq.n	8007198 <TIM_OC2_SetConfig+0x98>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a17      	ldr	r2, [pc, #92]	; (80071f0 <TIM_OC2_SetConfig+0xf0>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d113      	bne.n	80071c0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800719e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	4313      	orrs	r3, r2
 80071be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	621a      	str	r2, [r3, #32]
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	40012c00 	.word	0x40012c00
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40014400 	.word	0x40014400

080071f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0303 	bic.w	r3, r3, #3
 800722e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a21      	ldr	r2, [pc, #132]	; (80072d8 <TIM_OC3_SetConfig+0xe4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d10d      	bne.n	8007272 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800725c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	021b      	lsls	r3, r3, #8
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	4313      	orrs	r3, r2
 8007268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a18      	ldr	r2, [pc, #96]	; (80072d8 <TIM_OC3_SetConfig+0xe4>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d007      	beq.n	800728a <TIM_OC3_SetConfig+0x96>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a17      	ldr	r2, [pc, #92]	; (80072dc <TIM_OC3_SetConfig+0xe8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d003      	beq.n	800728a <TIM_OC3_SetConfig+0x96>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a16      	ldr	r2, [pc, #88]	; (80072e0 <TIM_OC3_SetConfig+0xec>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d113      	bne.n	80072b2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	621a      	str	r2, [r3, #32]
}
 80072cc:	bf00      	nop
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	40012c00 	.word	0x40012c00
 80072dc:	40014000 	.word	0x40014000
 80072e0:	40014400 	.word	0x40014400

080072e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800731e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	021b      	lsls	r3, r3, #8
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	4313      	orrs	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	031b      	lsls	r3, r3, #12
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	4313      	orrs	r3, r2
 800733e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a14      	ldr	r2, [pc, #80]	; (8007394 <TIM_OC4_SetConfig+0xb0>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d007      	beq.n	8007358 <TIM_OC4_SetConfig+0x74>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a13      	ldr	r2, [pc, #76]	; (8007398 <TIM_OC4_SetConfig+0xb4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d003      	beq.n	8007358 <TIM_OC4_SetConfig+0x74>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a12      	ldr	r2, [pc, #72]	; (800739c <TIM_OC4_SetConfig+0xb8>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d109      	bne.n	800736c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800735e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	019b      	lsls	r3, r3, #6
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	4313      	orrs	r3, r2
 800736a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	621a      	str	r2, [r3, #32]
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	40012c00 	.word	0x40012c00
 8007398:	40014000 	.word	0x40014000
 800739c:	40014400 	.word	0x40014400

080073a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80073e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	041b      	lsls	r3, r3, #16
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a13      	ldr	r2, [pc, #76]	; (8007444 <TIM_OC5_SetConfig+0xa4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d007      	beq.n	800740a <TIM_OC5_SetConfig+0x6a>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a12      	ldr	r2, [pc, #72]	; (8007448 <TIM_OC5_SetConfig+0xa8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d003      	beq.n	800740a <TIM_OC5_SetConfig+0x6a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a11      	ldr	r2, [pc, #68]	; (800744c <TIM_OC5_SetConfig+0xac>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d109      	bne.n	800741e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007410:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	021b      	lsls	r3, r3, #8
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	4313      	orrs	r3, r2
 800741c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	621a      	str	r2, [r3, #32]
}
 8007438:	bf00      	nop
 800743a:	371c      	adds	r7, #28
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	40012c00 	.word	0x40012c00
 8007448:	40014000 	.word	0x40014000
 800744c:	40014400 	.word	0x40014400

08007450 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800747e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	021b      	lsls	r3, r3, #8
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	051b      	lsls	r3, r3, #20
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a14      	ldr	r2, [pc, #80]	; (80074f8 <TIM_OC6_SetConfig+0xa8>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d007      	beq.n	80074bc <TIM_OC6_SetConfig+0x6c>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a13      	ldr	r2, [pc, #76]	; (80074fc <TIM_OC6_SetConfig+0xac>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d003      	beq.n	80074bc <TIM_OC6_SetConfig+0x6c>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a12      	ldr	r2, [pc, #72]	; (8007500 <TIM_OC6_SetConfig+0xb0>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d109      	bne.n	80074d0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	029b      	lsls	r3, r3, #10
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	40012c00 	.word	0x40012c00
 80074fc:	40014000 	.word	0x40014000
 8007500:	40014400 	.word	0x40014400

08007504 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	f023 0201 	bic.w	r2, r3, #1
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800752e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	011b      	lsls	r3, r3, #4
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	4313      	orrs	r3, r2
 8007538:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f023 030a 	bic.w	r3, r3, #10
 8007540:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	4313      	orrs	r3, r2
 8007548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	621a      	str	r2, [r3, #32]
}
 8007556:	bf00      	nop
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007562:	b480      	push	{r7}
 8007564:	b087      	sub	sp, #28
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	f023 0210 	bic.w	r2, r3, #16
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800758c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	031b      	lsls	r3, r3, #12
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	4313      	orrs	r3, r2
 8007596:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800759e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	011b      	lsls	r3, r3, #4
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	621a      	str	r2, [r3, #32]
}
 80075b6:	bf00      	nop
 80075b8:	371c      	adds	r7, #28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b085      	sub	sp, #20
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4313      	orrs	r3, r2
 80075e0:	f043 0307 	orr.w	r3, r3, #7
 80075e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	609a      	str	r2, [r3, #8]
}
 80075ec:	bf00      	nop
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007612:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	021a      	lsls	r2, r3, #8
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	431a      	orrs	r2, r3
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	4313      	orrs	r3, r2
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	4313      	orrs	r3, r2
 8007624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	609a      	str	r2, [r3, #8]
}
 800762c:	bf00      	nop
 800762e:	371c      	adds	r7, #28
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f003 031f 	and.w	r3, r3, #31
 800764a:	2201      	movs	r2, #1
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6a1a      	ldr	r2, [r3, #32]
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	43db      	mvns	r3, r3
 800765a:	401a      	ands	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a1a      	ldr	r2, [r3, #32]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f003 031f 	and.w	r3, r3, #31
 800766a:	6879      	ldr	r1, [r7, #4]
 800766c:	fa01 f303 	lsl.w	r3, r1, r3
 8007670:	431a      	orrs	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	621a      	str	r2, [r3, #32]
}
 8007676:	bf00      	nop
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
	...

08007684 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d109      	bne.n	80076a8 <HAL_TIMEx_PWMN_Start+0x24>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b01      	cmp	r3, #1
 800769e:	bf14      	ite	ne
 80076a0:	2301      	movne	r3, #1
 80076a2:	2300      	moveq	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	e022      	b.n	80076ee <HAL_TIMEx_PWMN_Start+0x6a>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d109      	bne.n	80076c2 <HAL_TIMEx_PWMN_Start+0x3e>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	bf14      	ite	ne
 80076ba:	2301      	movne	r3, #1
 80076bc:	2300      	moveq	r3, #0
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	e015      	b.n	80076ee <HAL_TIMEx_PWMN_Start+0x6a>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d109      	bne.n	80076dc <HAL_TIMEx_PWMN_Start+0x58>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	bf14      	ite	ne
 80076d4:	2301      	movne	r3, #1
 80076d6:	2300      	moveq	r3, #0
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	e008      	b.n	80076ee <HAL_TIMEx_PWMN_Start+0x6a>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	bf14      	ite	ne
 80076e8:	2301      	movne	r3, #1
 80076ea:	2300      	moveq	r3, #0
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e05a      	b.n	80077ac <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d104      	bne.n	8007706 <HAL_TIMEx_PWMN_Start+0x82>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2202      	movs	r2, #2
 8007700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007704:	e013      	b.n	800772e <HAL_TIMEx_PWMN_Start+0xaa>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b04      	cmp	r3, #4
 800770a:	d104      	bne.n	8007716 <HAL_TIMEx_PWMN_Start+0x92>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007714:	e00b      	b.n	800772e <HAL_TIMEx_PWMN_Start+0xaa>
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b08      	cmp	r3, #8
 800771a:	d104      	bne.n	8007726 <HAL_TIMEx_PWMN_Start+0xa2>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2202      	movs	r2, #2
 8007720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007724:	e003      	b.n	800772e <HAL_TIMEx_PWMN_Start+0xaa>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2202      	movs	r2, #2
 800772a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2204      	movs	r2, #4
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	4618      	mov	r0, r3
 8007738:	f000 f920 	bl	800797c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800774a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a18      	ldr	r2, [pc, #96]	; (80077b4 <HAL_TIMEx_PWMN_Start+0x130>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d009      	beq.n	800776a <HAL_TIMEx_PWMN_Start+0xe6>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800775e:	d004      	beq.n	800776a <HAL_TIMEx_PWMN_Start+0xe6>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a14      	ldr	r2, [pc, #80]	; (80077b8 <HAL_TIMEx_PWMN_Start+0x134>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d115      	bne.n	8007796 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	4b12      	ldr	r3, [pc, #72]	; (80077bc <HAL_TIMEx_PWMN_Start+0x138>)
 8007772:	4013      	ands	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b06      	cmp	r3, #6
 800777a:	d015      	beq.n	80077a8 <HAL_TIMEx_PWMN_Start+0x124>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007782:	d011      	beq.n	80077a8 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f042 0201 	orr.w	r2, r2, #1
 8007792:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007794:	e008      	b.n	80077a8 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0201 	orr.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	e000      	b.n	80077aa <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	40012c00 	.word	0x40012c00
 80077b8:	40014000 	.word	0x40014000
 80077bc:	00010007 	.word	0x00010007

080077c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e04f      	b.n	8007878 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a21      	ldr	r2, [pc, #132]	; (8007884 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d108      	bne.n	8007814 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007808:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	4313      	orrs	r3, r2
 8007812:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	4313      	orrs	r3, r2
 8007824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a14      	ldr	r2, [pc, #80]	; (8007884 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d009      	beq.n	800784c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007840:	d004      	beq.n	800784c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a10      	ldr	r2, [pc, #64]	; (8007888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d10c      	bne.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007852:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	4313      	orrs	r3, r2
 800785c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	40012c00 	.word	0x40012c00
 8007888:	40014000 	.word	0x40014000

0800788c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e060      	b.n	800796a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	4313      	orrs	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	041b      	lsls	r3, r3, #16
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a14      	ldr	r2, [pc, #80]	; (8007978 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d115      	bne.n	8007958 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	051b      	lsls	r3, r3, #20
 8007938:	4313      	orrs	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	4313      	orrs	r3, r2
 8007948:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	4313      	orrs	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	40012c00 	.word	0x40012c00

0800797c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	2204      	movs	r2, #4
 8007990:	fa02 f303 	lsl.w	r3, r2, r3
 8007994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6a1a      	ldr	r2, [r3, #32]
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	43db      	mvns	r3, r3
 800799e:	401a      	ands	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a1a      	ldr	r2, [r3, #32]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f003 030f 	and.w	r3, r3, #15
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	fa01 f303 	lsl.w	r3, r1, r3
 80079b4:	431a      	orrs	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	621a      	str	r2, [r3, #32]
}
 80079ba:	bf00      	nop
 80079bc:	371c      	adds	r7, #28
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
	...

080079c8 <malloc>:
 80079c8:	4b02      	ldr	r3, [pc, #8]	; (80079d4 <malloc+0xc>)
 80079ca:	4601      	mov	r1, r0
 80079cc:	6818      	ldr	r0, [r3, #0]
 80079ce:	f000 b82b 	b.w	8007a28 <_malloc_r>
 80079d2:	bf00      	nop
 80079d4:	20000068 	.word	0x20000068

080079d8 <free>:
 80079d8:	4b02      	ldr	r3, [pc, #8]	; (80079e4 <free+0xc>)
 80079da:	4601      	mov	r1, r0
 80079dc:	6818      	ldr	r0, [r3, #0]
 80079de:	f000 bb75 	b.w	80080cc <_free_r>
 80079e2:	bf00      	nop
 80079e4:	20000068 	.word	0x20000068

080079e8 <sbrk_aligned>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	4e0e      	ldr	r6, [pc, #56]	; (8007a24 <sbrk_aligned+0x3c>)
 80079ec:	460c      	mov	r4, r1
 80079ee:	6831      	ldr	r1, [r6, #0]
 80079f0:	4605      	mov	r5, r0
 80079f2:	b911      	cbnz	r1, 80079fa <sbrk_aligned+0x12>
 80079f4:	f000 fb0e 	bl	8008014 <_sbrk_r>
 80079f8:	6030      	str	r0, [r6, #0]
 80079fa:	4621      	mov	r1, r4
 80079fc:	4628      	mov	r0, r5
 80079fe:	f000 fb09 	bl	8008014 <_sbrk_r>
 8007a02:	1c43      	adds	r3, r0, #1
 8007a04:	d00a      	beq.n	8007a1c <sbrk_aligned+0x34>
 8007a06:	1cc4      	adds	r4, r0, #3
 8007a08:	f024 0403 	bic.w	r4, r4, #3
 8007a0c:	42a0      	cmp	r0, r4
 8007a0e:	d007      	beq.n	8007a20 <sbrk_aligned+0x38>
 8007a10:	1a21      	subs	r1, r4, r0
 8007a12:	4628      	mov	r0, r5
 8007a14:	f000 fafe 	bl	8008014 <_sbrk_r>
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d101      	bne.n	8007a20 <sbrk_aligned+0x38>
 8007a1c:	f04f 34ff 	mov.w	r4, #4294967295
 8007a20:	4620      	mov	r0, r4
 8007a22:	bd70      	pop	{r4, r5, r6, pc}
 8007a24:	20000614 	.word	0x20000614

08007a28 <_malloc_r>:
 8007a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a2c:	1ccd      	adds	r5, r1, #3
 8007a2e:	f025 0503 	bic.w	r5, r5, #3
 8007a32:	3508      	adds	r5, #8
 8007a34:	2d0c      	cmp	r5, #12
 8007a36:	bf38      	it	cc
 8007a38:	250c      	movcc	r5, #12
 8007a3a:	2d00      	cmp	r5, #0
 8007a3c:	4607      	mov	r7, r0
 8007a3e:	db01      	blt.n	8007a44 <_malloc_r+0x1c>
 8007a40:	42a9      	cmp	r1, r5
 8007a42:	d905      	bls.n	8007a50 <_malloc_r+0x28>
 8007a44:	230c      	movs	r3, #12
 8007a46:	603b      	str	r3, [r7, #0]
 8007a48:	2600      	movs	r6, #0
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b24 <_malloc_r+0xfc>
 8007a54:	f000 f868 	bl	8007b28 <__malloc_lock>
 8007a58:	f8d8 3000 	ldr.w	r3, [r8]
 8007a5c:	461c      	mov	r4, r3
 8007a5e:	bb5c      	cbnz	r4, 8007ab8 <_malloc_r+0x90>
 8007a60:	4629      	mov	r1, r5
 8007a62:	4638      	mov	r0, r7
 8007a64:	f7ff ffc0 	bl	80079e8 <sbrk_aligned>
 8007a68:	1c43      	adds	r3, r0, #1
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	d155      	bne.n	8007b1a <_malloc_r+0xf2>
 8007a6e:	f8d8 4000 	ldr.w	r4, [r8]
 8007a72:	4626      	mov	r6, r4
 8007a74:	2e00      	cmp	r6, #0
 8007a76:	d145      	bne.n	8007b04 <_malloc_r+0xdc>
 8007a78:	2c00      	cmp	r4, #0
 8007a7a:	d048      	beq.n	8007b0e <_malloc_r+0xe6>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	4631      	mov	r1, r6
 8007a80:	4638      	mov	r0, r7
 8007a82:	eb04 0903 	add.w	r9, r4, r3
 8007a86:	f000 fac5 	bl	8008014 <_sbrk_r>
 8007a8a:	4581      	cmp	r9, r0
 8007a8c:	d13f      	bne.n	8007b0e <_malloc_r+0xe6>
 8007a8e:	6821      	ldr	r1, [r4, #0]
 8007a90:	1a6d      	subs	r5, r5, r1
 8007a92:	4629      	mov	r1, r5
 8007a94:	4638      	mov	r0, r7
 8007a96:	f7ff ffa7 	bl	80079e8 <sbrk_aligned>
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	d037      	beq.n	8007b0e <_malloc_r+0xe6>
 8007a9e:	6823      	ldr	r3, [r4, #0]
 8007aa0:	442b      	add	r3, r5
 8007aa2:	6023      	str	r3, [r4, #0]
 8007aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d038      	beq.n	8007b1e <_malloc_r+0xf6>
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	42a2      	cmp	r2, r4
 8007ab0:	d12b      	bne.n	8007b0a <_malloc_r+0xe2>
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	605a      	str	r2, [r3, #4]
 8007ab6:	e00f      	b.n	8007ad8 <_malloc_r+0xb0>
 8007ab8:	6822      	ldr	r2, [r4, #0]
 8007aba:	1b52      	subs	r2, r2, r5
 8007abc:	d41f      	bmi.n	8007afe <_malloc_r+0xd6>
 8007abe:	2a0b      	cmp	r2, #11
 8007ac0:	d917      	bls.n	8007af2 <_malloc_r+0xca>
 8007ac2:	1961      	adds	r1, r4, r5
 8007ac4:	42a3      	cmp	r3, r4
 8007ac6:	6025      	str	r5, [r4, #0]
 8007ac8:	bf18      	it	ne
 8007aca:	6059      	strne	r1, [r3, #4]
 8007acc:	6863      	ldr	r3, [r4, #4]
 8007ace:	bf08      	it	eq
 8007ad0:	f8c8 1000 	streq.w	r1, [r8]
 8007ad4:	5162      	str	r2, [r4, r5]
 8007ad6:	604b      	str	r3, [r1, #4]
 8007ad8:	4638      	mov	r0, r7
 8007ada:	f104 060b 	add.w	r6, r4, #11
 8007ade:	f000 f829 	bl	8007b34 <__malloc_unlock>
 8007ae2:	f026 0607 	bic.w	r6, r6, #7
 8007ae6:	1d23      	adds	r3, r4, #4
 8007ae8:	1af2      	subs	r2, r6, r3
 8007aea:	d0ae      	beq.n	8007a4a <_malloc_r+0x22>
 8007aec:	1b9b      	subs	r3, r3, r6
 8007aee:	50a3      	str	r3, [r4, r2]
 8007af0:	e7ab      	b.n	8007a4a <_malloc_r+0x22>
 8007af2:	42a3      	cmp	r3, r4
 8007af4:	6862      	ldr	r2, [r4, #4]
 8007af6:	d1dd      	bne.n	8007ab4 <_malloc_r+0x8c>
 8007af8:	f8c8 2000 	str.w	r2, [r8]
 8007afc:	e7ec      	b.n	8007ad8 <_malloc_r+0xb0>
 8007afe:	4623      	mov	r3, r4
 8007b00:	6864      	ldr	r4, [r4, #4]
 8007b02:	e7ac      	b.n	8007a5e <_malloc_r+0x36>
 8007b04:	4634      	mov	r4, r6
 8007b06:	6876      	ldr	r6, [r6, #4]
 8007b08:	e7b4      	b.n	8007a74 <_malloc_r+0x4c>
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	e7cc      	b.n	8007aa8 <_malloc_r+0x80>
 8007b0e:	230c      	movs	r3, #12
 8007b10:	603b      	str	r3, [r7, #0]
 8007b12:	4638      	mov	r0, r7
 8007b14:	f000 f80e 	bl	8007b34 <__malloc_unlock>
 8007b18:	e797      	b.n	8007a4a <_malloc_r+0x22>
 8007b1a:	6025      	str	r5, [r4, #0]
 8007b1c:	e7dc      	b.n	8007ad8 <_malloc_r+0xb0>
 8007b1e:	605b      	str	r3, [r3, #4]
 8007b20:	deff      	udf	#255	; 0xff
 8007b22:	bf00      	nop
 8007b24:	20000610 	.word	0x20000610

08007b28 <__malloc_lock>:
 8007b28:	4801      	ldr	r0, [pc, #4]	; (8007b30 <__malloc_lock+0x8>)
 8007b2a:	f000 babf 	b.w	80080ac <__retarget_lock_acquire_recursive>
 8007b2e:	bf00      	nop
 8007b30:	20000758 	.word	0x20000758

08007b34 <__malloc_unlock>:
 8007b34:	4801      	ldr	r0, [pc, #4]	; (8007b3c <__malloc_unlock+0x8>)
 8007b36:	f000 baba 	b.w	80080ae <__retarget_lock_release_recursive>
 8007b3a:	bf00      	nop
 8007b3c:	20000758 	.word	0x20000758

08007b40 <std>:
 8007b40:	2300      	movs	r3, #0
 8007b42:	b510      	push	{r4, lr}
 8007b44:	4604      	mov	r4, r0
 8007b46:	e9c0 3300 	strd	r3, r3, [r0]
 8007b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b4e:	6083      	str	r3, [r0, #8]
 8007b50:	8181      	strh	r1, [r0, #12]
 8007b52:	6643      	str	r3, [r0, #100]	; 0x64
 8007b54:	81c2      	strh	r2, [r0, #14]
 8007b56:	6183      	str	r3, [r0, #24]
 8007b58:	4619      	mov	r1, r3
 8007b5a:	2208      	movs	r2, #8
 8007b5c:	305c      	adds	r0, #92	; 0x5c
 8007b5e:	f000 f9fd 	bl	8007f5c <memset>
 8007b62:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <std+0x38>)
 8007b64:	6263      	str	r3, [r4, #36]	; 0x24
 8007b66:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <std+0x3c>)
 8007b68:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b6a:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <std+0x40>)
 8007b6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b6e:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <std+0x44>)
 8007b70:	6224      	str	r4, [r4, #32]
 8007b72:	6323      	str	r3, [r4, #48]	; 0x30
 8007b74:	bd10      	pop	{r4, pc}
 8007b76:	bf00      	nop
 8007b78:	08007d8d 	.word	0x08007d8d
 8007b7c:	08007daf 	.word	0x08007daf
 8007b80:	08007de7 	.word	0x08007de7
 8007b84:	08007e0b 	.word	0x08007e0b

08007b88 <stdio_exit_handler>:
 8007b88:	4a02      	ldr	r2, [pc, #8]	; (8007b94 <stdio_exit_handler+0xc>)
 8007b8a:	4903      	ldr	r1, [pc, #12]	; (8007b98 <stdio_exit_handler+0x10>)
 8007b8c:	4803      	ldr	r0, [pc, #12]	; (8007b9c <stdio_exit_handler+0x14>)
 8007b8e:	f000 b869 	b.w	8007c64 <_fwalk_sglue>
 8007b92:	bf00      	nop
 8007b94:	20000010 	.word	0x20000010
 8007b98:	08008819 	.word	0x08008819
 8007b9c:	2000001c 	.word	0x2000001c

08007ba0 <cleanup_stdio>:
 8007ba0:	6841      	ldr	r1, [r0, #4]
 8007ba2:	4b0c      	ldr	r3, [pc, #48]	; (8007bd4 <cleanup_stdio+0x34>)
 8007ba4:	4299      	cmp	r1, r3
 8007ba6:	b510      	push	{r4, lr}
 8007ba8:	4604      	mov	r4, r0
 8007baa:	d001      	beq.n	8007bb0 <cleanup_stdio+0x10>
 8007bac:	f000 fe34 	bl	8008818 <_fflush_r>
 8007bb0:	68a1      	ldr	r1, [r4, #8]
 8007bb2:	4b09      	ldr	r3, [pc, #36]	; (8007bd8 <cleanup_stdio+0x38>)
 8007bb4:	4299      	cmp	r1, r3
 8007bb6:	d002      	beq.n	8007bbe <cleanup_stdio+0x1e>
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f000 fe2d 	bl	8008818 <_fflush_r>
 8007bbe:	68e1      	ldr	r1, [r4, #12]
 8007bc0:	4b06      	ldr	r3, [pc, #24]	; (8007bdc <cleanup_stdio+0x3c>)
 8007bc2:	4299      	cmp	r1, r3
 8007bc4:	d004      	beq.n	8007bd0 <cleanup_stdio+0x30>
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bcc:	f000 be24 	b.w	8008818 <_fflush_r>
 8007bd0:	bd10      	pop	{r4, pc}
 8007bd2:	bf00      	nop
 8007bd4:	20000618 	.word	0x20000618
 8007bd8:	20000680 	.word	0x20000680
 8007bdc:	200006e8 	.word	0x200006e8

08007be0 <global_stdio_init.part.0>:
 8007be0:	b510      	push	{r4, lr}
 8007be2:	4b0b      	ldr	r3, [pc, #44]	; (8007c10 <global_stdio_init.part.0+0x30>)
 8007be4:	4c0b      	ldr	r4, [pc, #44]	; (8007c14 <global_stdio_init.part.0+0x34>)
 8007be6:	4a0c      	ldr	r2, [pc, #48]	; (8007c18 <global_stdio_init.part.0+0x38>)
 8007be8:	601a      	str	r2, [r3, #0]
 8007bea:	4620      	mov	r0, r4
 8007bec:	2200      	movs	r2, #0
 8007bee:	2104      	movs	r1, #4
 8007bf0:	f7ff ffa6 	bl	8007b40 <std>
 8007bf4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	2109      	movs	r1, #9
 8007bfc:	f7ff ffa0 	bl	8007b40 <std>
 8007c00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007c04:	2202      	movs	r2, #2
 8007c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c0a:	2112      	movs	r1, #18
 8007c0c:	f7ff bf98 	b.w	8007b40 <std>
 8007c10:	20000750 	.word	0x20000750
 8007c14:	20000618 	.word	0x20000618
 8007c18:	08007b89 	.word	0x08007b89

08007c1c <__sfp_lock_acquire>:
 8007c1c:	4801      	ldr	r0, [pc, #4]	; (8007c24 <__sfp_lock_acquire+0x8>)
 8007c1e:	f000 ba45 	b.w	80080ac <__retarget_lock_acquire_recursive>
 8007c22:	bf00      	nop
 8007c24:	20000759 	.word	0x20000759

08007c28 <__sfp_lock_release>:
 8007c28:	4801      	ldr	r0, [pc, #4]	; (8007c30 <__sfp_lock_release+0x8>)
 8007c2a:	f000 ba40 	b.w	80080ae <__retarget_lock_release_recursive>
 8007c2e:	bf00      	nop
 8007c30:	20000759 	.word	0x20000759

08007c34 <__sinit>:
 8007c34:	b510      	push	{r4, lr}
 8007c36:	4604      	mov	r4, r0
 8007c38:	f7ff fff0 	bl	8007c1c <__sfp_lock_acquire>
 8007c3c:	6a23      	ldr	r3, [r4, #32]
 8007c3e:	b11b      	cbz	r3, 8007c48 <__sinit+0x14>
 8007c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c44:	f7ff bff0 	b.w	8007c28 <__sfp_lock_release>
 8007c48:	4b04      	ldr	r3, [pc, #16]	; (8007c5c <__sinit+0x28>)
 8007c4a:	6223      	str	r3, [r4, #32]
 8007c4c:	4b04      	ldr	r3, [pc, #16]	; (8007c60 <__sinit+0x2c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1f5      	bne.n	8007c40 <__sinit+0xc>
 8007c54:	f7ff ffc4 	bl	8007be0 <global_stdio_init.part.0>
 8007c58:	e7f2      	b.n	8007c40 <__sinit+0xc>
 8007c5a:	bf00      	nop
 8007c5c:	08007ba1 	.word	0x08007ba1
 8007c60:	20000750 	.word	0x20000750

08007c64 <_fwalk_sglue>:
 8007c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c68:	4607      	mov	r7, r0
 8007c6a:	4688      	mov	r8, r1
 8007c6c:	4614      	mov	r4, r2
 8007c6e:	2600      	movs	r6, #0
 8007c70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c74:	f1b9 0901 	subs.w	r9, r9, #1
 8007c78:	d505      	bpl.n	8007c86 <_fwalk_sglue+0x22>
 8007c7a:	6824      	ldr	r4, [r4, #0]
 8007c7c:	2c00      	cmp	r4, #0
 8007c7e:	d1f7      	bne.n	8007c70 <_fwalk_sglue+0xc>
 8007c80:	4630      	mov	r0, r6
 8007c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c86:	89ab      	ldrh	r3, [r5, #12]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d907      	bls.n	8007c9c <_fwalk_sglue+0x38>
 8007c8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c90:	3301      	adds	r3, #1
 8007c92:	d003      	beq.n	8007c9c <_fwalk_sglue+0x38>
 8007c94:	4629      	mov	r1, r5
 8007c96:	4638      	mov	r0, r7
 8007c98:	47c0      	blx	r8
 8007c9a:	4306      	orrs	r6, r0
 8007c9c:	3568      	adds	r5, #104	; 0x68
 8007c9e:	e7e9      	b.n	8007c74 <_fwalk_sglue+0x10>

08007ca0 <iprintf>:
 8007ca0:	b40f      	push	{r0, r1, r2, r3}
 8007ca2:	b507      	push	{r0, r1, r2, lr}
 8007ca4:	4906      	ldr	r1, [pc, #24]	; (8007cc0 <iprintf+0x20>)
 8007ca6:	ab04      	add	r3, sp, #16
 8007ca8:	6808      	ldr	r0, [r1, #0]
 8007caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cae:	6881      	ldr	r1, [r0, #8]
 8007cb0:	9301      	str	r3, [sp, #4]
 8007cb2:	f000 fa81 	bl	80081b8 <_vfiprintf_r>
 8007cb6:	b003      	add	sp, #12
 8007cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cbc:	b004      	add	sp, #16
 8007cbe:	4770      	bx	lr
 8007cc0:	20000068 	.word	0x20000068

08007cc4 <putchar>:
 8007cc4:	4b02      	ldr	r3, [pc, #8]	; (8007cd0 <putchar+0xc>)
 8007cc6:	4601      	mov	r1, r0
 8007cc8:	6818      	ldr	r0, [r3, #0]
 8007cca:	6882      	ldr	r2, [r0, #8]
 8007ccc:	f000 be2e 	b.w	800892c <_putc_r>
 8007cd0:	20000068 	.word	0x20000068

08007cd4 <_puts_r>:
 8007cd4:	6a03      	ldr	r3, [r0, #32]
 8007cd6:	b570      	push	{r4, r5, r6, lr}
 8007cd8:	6884      	ldr	r4, [r0, #8]
 8007cda:	4605      	mov	r5, r0
 8007cdc:	460e      	mov	r6, r1
 8007cde:	b90b      	cbnz	r3, 8007ce4 <_puts_r+0x10>
 8007ce0:	f7ff ffa8 	bl	8007c34 <__sinit>
 8007ce4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ce6:	07db      	lsls	r3, r3, #31
 8007ce8:	d405      	bmi.n	8007cf6 <_puts_r+0x22>
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	0598      	lsls	r0, r3, #22
 8007cee:	d402      	bmi.n	8007cf6 <_puts_r+0x22>
 8007cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cf2:	f000 f9db 	bl	80080ac <__retarget_lock_acquire_recursive>
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	0719      	lsls	r1, r3, #28
 8007cfa:	d513      	bpl.n	8007d24 <_puts_r+0x50>
 8007cfc:	6923      	ldr	r3, [r4, #16]
 8007cfe:	b18b      	cbz	r3, 8007d24 <_puts_r+0x50>
 8007d00:	3e01      	subs	r6, #1
 8007d02:	68a3      	ldr	r3, [r4, #8]
 8007d04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	60a3      	str	r3, [r4, #8]
 8007d0c:	b9e9      	cbnz	r1, 8007d4a <_puts_r+0x76>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	da2e      	bge.n	8007d70 <_puts_r+0x9c>
 8007d12:	4622      	mov	r2, r4
 8007d14:	210a      	movs	r1, #10
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 f87b 	bl	8007e12 <__swbuf_r>
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d007      	beq.n	8007d30 <_puts_r+0x5c>
 8007d20:	250a      	movs	r5, #10
 8007d22:	e007      	b.n	8007d34 <_puts_r+0x60>
 8007d24:	4621      	mov	r1, r4
 8007d26:	4628      	mov	r0, r5
 8007d28:	f000 f8b0 	bl	8007e8c <__swsetup_r>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d0e7      	beq.n	8007d00 <_puts_r+0x2c>
 8007d30:	f04f 35ff 	mov.w	r5, #4294967295
 8007d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d36:	07da      	lsls	r2, r3, #31
 8007d38:	d405      	bmi.n	8007d46 <_puts_r+0x72>
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	059b      	lsls	r3, r3, #22
 8007d3e:	d402      	bmi.n	8007d46 <_puts_r+0x72>
 8007d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d42:	f000 f9b4 	bl	80080ae <__retarget_lock_release_recursive>
 8007d46:	4628      	mov	r0, r5
 8007d48:	bd70      	pop	{r4, r5, r6, pc}
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	da04      	bge.n	8007d58 <_puts_r+0x84>
 8007d4e:	69a2      	ldr	r2, [r4, #24]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	dc06      	bgt.n	8007d62 <_puts_r+0x8e>
 8007d54:	290a      	cmp	r1, #10
 8007d56:	d004      	beq.n	8007d62 <_puts_r+0x8e>
 8007d58:	6823      	ldr	r3, [r4, #0]
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	6022      	str	r2, [r4, #0]
 8007d5e:	7019      	strb	r1, [r3, #0]
 8007d60:	e7cf      	b.n	8007d02 <_puts_r+0x2e>
 8007d62:	4622      	mov	r2, r4
 8007d64:	4628      	mov	r0, r5
 8007d66:	f000 f854 	bl	8007e12 <__swbuf_r>
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d1c9      	bne.n	8007d02 <_puts_r+0x2e>
 8007d6e:	e7df      	b.n	8007d30 <_puts_r+0x5c>
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	250a      	movs	r5, #10
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	6022      	str	r2, [r4, #0]
 8007d78:	701d      	strb	r5, [r3, #0]
 8007d7a:	e7db      	b.n	8007d34 <_puts_r+0x60>

08007d7c <puts>:
 8007d7c:	4b02      	ldr	r3, [pc, #8]	; (8007d88 <puts+0xc>)
 8007d7e:	4601      	mov	r1, r0
 8007d80:	6818      	ldr	r0, [r3, #0]
 8007d82:	f7ff bfa7 	b.w	8007cd4 <_puts_r>
 8007d86:	bf00      	nop
 8007d88:	20000068 	.word	0x20000068

08007d8c <__sread>:
 8007d8c:	b510      	push	{r4, lr}
 8007d8e:	460c      	mov	r4, r1
 8007d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d94:	f000 f92c 	bl	8007ff0 <_read_r>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	bfab      	itete	ge
 8007d9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8007da0:	181b      	addge	r3, r3, r0
 8007da2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007da6:	bfac      	ite	ge
 8007da8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007daa:	81a3      	strhlt	r3, [r4, #12]
 8007dac:	bd10      	pop	{r4, pc}

08007dae <__swrite>:
 8007dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007db2:	461f      	mov	r7, r3
 8007db4:	898b      	ldrh	r3, [r1, #12]
 8007db6:	05db      	lsls	r3, r3, #23
 8007db8:	4605      	mov	r5, r0
 8007dba:	460c      	mov	r4, r1
 8007dbc:	4616      	mov	r6, r2
 8007dbe:	d505      	bpl.n	8007dcc <__swrite+0x1e>
 8007dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f000 f900 	bl	8007fcc <_lseek_r>
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dd6:	81a3      	strh	r3, [r4, #12]
 8007dd8:	4632      	mov	r2, r6
 8007dda:	463b      	mov	r3, r7
 8007ddc:	4628      	mov	r0, r5
 8007dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007de2:	f000 b927 	b.w	8008034 <_write_r>

08007de6 <__sseek>:
 8007de6:	b510      	push	{r4, lr}
 8007de8:	460c      	mov	r4, r1
 8007dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dee:	f000 f8ed 	bl	8007fcc <_lseek_r>
 8007df2:	1c43      	adds	r3, r0, #1
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	bf15      	itete	ne
 8007df8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007dfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007dfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e02:	81a3      	strheq	r3, [r4, #12]
 8007e04:	bf18      	it	ne
 8007e06:	81a3      	strhne	r3, [r4, #12]
 8007e08:	bd10      	pop	{r4, pc}

08007e0a <__sclose>:
 8007e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e0e:	f000 b8cd 	b.w	8007fac <_close_r>

08007e12 <__swbuf_r>:
 8007e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e14:	460e      	mov	r6, r1
 8007e16:	4614      	mov	r4, r2
 8007e18:	4605      	mov	r5, r0
 8007e1a:	b118      	cbz	r0, 8007e24 <__swbuf_r+0x12>
 8007e1c:	6a03      	ldr	r3, [r0, #32]
 8007e1e:	b90b      	cbnz	r3, 8007e24 <__swbuf_r+0x12>
 8007e20:	f7ff ff08 	bl	8007c34 <__sinit>
 8007e24:	69a3      	ldr	r3, [r4, #24]
 8007e26:	60a3      	str	r3, [r4, #8]
 8007e28:	89a3      	ldrh	r3, [r4, #12]
 8007e2a:	071a      	lsls	r2, r3, #28
 8007e2c:	d525      	bpl.n	8007e7a <__swbuf_r+0x68>
 8007e2e:	6923      	ldr	r3, [r4, #16]
 8007e30:	b31b      	cbz	r3, 8007e7a <__swbuf_r+0x68>
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	6922      	ldr	r2, [r4, #16]
 8007e36:	1a98      	subs	r0, r3, r2
 8007e38:	6963      	ldr	r3, [r4, #20]
 8007e3a:	b2f6      	uxtb	r6, r6
 8007e3c:	4283      	cmp	r3, r0
 8007e3e:	4637      	mov	r7, r6
 8007e40:	dc04      	bgt.n	8007e4c <__swbuf_r+0x3a>
 8007e42:	4621      	mov	r1, r4
 8007e44:	4628      	mov	r0, r5
 8007e46:	f000 fce7 	bl	8008818 <_fflush_r>
 8007e4a:	b9e0      	cbnz	r0, 8007e86 <__swbuf_r+0x74>
 8007e4c:	68a3      	ldr	r3, [r4, #8]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	60a3      	str	r3, [r4, #8]
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	6022      	str	r2, [r4, #0]
 8007e58:	701e      	strb	r6, [r3, #0]
 8007e5a:	6962      	ldr	r2, [r4, #20]
 8007e5c:	1c43      	adds	r3, r0, #1
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d004      	beq.n	8007e6c <__swbuf_r+0x5a>
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	07db      	lsls	r3, r3, #31
 8007e66:	d506      	bpl.n	8007e76 <__swbuf_r+0x64>
 8007e68:	2e0a      	cmp	r6, #10
 8007e6a:	d104      	bne.n	8007e76 <__swbuf_r+0x64>
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	4628      	mov	r0, r5
 8007e70:	f000 fcd2 	bl	8008818 <_fflush_r>
 8007e74:	b938      	cbnz	r0, 8007e86 <__swbuf_r+0x74>
 8007e76:	4638      	mov	r0, r7
 8007e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	f000 f805 	bl	8007e8c <__swsetup_r>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d0d5      	beq.n	8007e32 <__swbuf_r+0x20>
 8007e86:	f04f 37ff 	mov.w	r7, #4294967295
 8007e8a:	e7f4      	b.n	8007e76 <__swbuf_r+0x64>

08007e8c <__swsetup_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4b2a      	ldr	r3, [pc, #168]	; (8007f38 <__swsetup_r+0xac>)
 8007e90:	4605      	mov	r5, r0
 8007e92:	6818      	ldr	r0, [r3, #0]
 8007e94:	460c      	mov	r4, r1
 8007e96:	b118      	cbz	r0, 8007ea0 <__swsetup_r+0x14>
 8007e98:	6a03      	ldr	r3, [r0, #32]
 8007e9a:	b90b      	cbnz	r3, 8007ea0 <__swsetup_r+0x14>
 8007e9c:	f7ff feca 	bl	8007c34 <__sinit>
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ea6:	0718      	lsls	r0, r3, #28
 8007ea8:	d422      	bmi.n	8007ef0 <__swsetup_r+0x64>
 8007eaa:	06d9      	lsls	r1, r3, #27
 8007eac:	d407      	bmi.n	8007ebe <__swsetup_r+0x32>
 8007eae:	2309      	movs	r3, #9
 8007eb0:	602b      	str	r3, [r5, #0]
 8007eb2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007eb6:	81a3      	strh	r3, [r4, #12]
 8007eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebc:	e034      	b.n	8007f28 <__swsetup_r+0x9c>
 8007ebe:	0758      	lsls	r0, r3, #29
 8007ec0:	d512      	bpl.n	8007ee8 <__swsetup_r+0x5c>
 8007ec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ec4:	b141      	cbz	r1, 8007ed8 <__swsetup_r+0x4c>
 8007ec6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eca:	4299      	cmp	r1, r3
 8007ecc:	d002      	beq.n	8007ed4 <__swsetup_r+0x48>
 8007ece:	4628      	mov	r0, r5
 8007ed0:	f000 f8fc 	bl	80080cc <_free_r>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	6363      	str	r3, [r4, #52]	; 0x34
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ede:	81a3      	strh	r3, [r4, #12]
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	6063      	str	r3, [r4, #4]
 8007ee4:	6923      	ldr	r3, [r4, #16]
 8007ee6:	6023      	str	r3, [r4, #0]
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	f043 0308 	orr.w	r3, r3, #8
 8007eee:	81a3      	strh	r3, [r4, #12]
 8007ef0:	6923      	ldr	r3, [r4, #16]
 8007ef2:	b94b      	cbnz	r3, 8007f08 <__swsetup_r+0x7c>
 8007ef4:	89a3      	ldrh	r3, [r4, #12]
 8007ef6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007efe:	d003      	beq.n	8007f08 <__swsetup_r+0x7c>
 8007f00:	4621      	mov	r1, r4
 8007f02:	4628      	mov	r0, r5
 8007f04:	f000 fcd6 	bl	80088b4 <__smakebuf_r>
 8007f08:	89a0      	ldrh	r0, [r4, #12]
 8007f0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f0e:	f010 0301 	ands.w	r3, r0, #1
 8007f12:	d00a      	beq.n	8007f2a <__swsetup_r+0x9e>
 8007f14:	2300      	movs	r3, #0
 8007f16:	60a3      	str	r3, [r4, #8]
 8007f18:	6963      	ldr	r3, [r4, #20]
 8007f1a:	425b      	negs	r3, r3
 8007f1c:	61a3      	str	r3, [r4, #24]
 8007f1e:	6923      	ldr	r3, [r4, #16]
 8007f20:	b943      	cbnz	r3, 8007f34 <__swsetup_r+0xa8>
 8007f22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f26:	d1c4      	bne.n	8007eb2 <__swsetup_r+0x26>
 8007f28:	bd38      	pop	{r3, r4, r5, pc}
 8007f2a:	0781      	lsls	r1, r0, #30
 8007f2c:	bf58      	it	pl
 8007f2e:	6963      	ldrpl	r3, [r4, #20]
 8007f30:	60a3      	str	r3, [r4, #8]
 8007f32:	e7f4      	b.n	8007f1e <__swsetup_r+0x92>
 8007f34:	2000      	movs	r0, #0
 8007f36:	e7f7      	b.n	8007f28 <__swsetup_r+0x9c>
 8007f38:	20000068 	.word	0x20000068

08007f3c <memcmp>:
 8007f3c:	b510      	push	{r4, lr}
 8007f3e:	3901      	subs	r1, #1
 8007f40:	4402      	add	r2, r0
 8007f42:	4290      	cmp	r0, r2
 8007f44:	d101      	bne.n	8007f4a <memcmp+0xe>
 8007f46:	2000      	movs	r0, #0
 8007f48:	e005      	b.n	8007f56 <memcmp+0x1a>
 8007f4a:	7803      	ldrb	r3, [r0, #0]
 8007f4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007f50:	42a3      	cmp	r3, r4
 8007f52:	d001      	beq.n	8007f58 <memcmp+0x1c>
 8007f54:	1b18      	subs	r0, r3, r4
 8007f56:	bd10      	pop	{r4, pc}
 8007f58:	3001      	adds	r0, #1
 8007f5a:	e7f2      	b.n	8007f42 <memcmp+0x6>

08007f5c <memset>:
 8007f5c:	4402      	add	r2, r0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d100      	bne.n	8007f66 <memset+0xa>
 8007f64:	4770      	bx	lr
 8007f66:	f803 1b01 	strb.w	r1, [r3], #1
 8007f6a:	e7f9      	b.n	8007f60 <memset+0x4>

08007f6c <strncpy>:
 8007f6c:	b510      	push	{r4, lr}
 8007f6e:	3901      	subs	r1, #1
 8007f70:	4603      	mov	r3, r0
 8007f72:	b132      	cbz	r2, 8007f82 <strncpy+0x16>
 8007f74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007f78:	f803 4b01 	strb.w	r4, [r3], #1
 8007f7c:	3a01      	subs	r2, #1
 8007f7e:	2c00      	cmp	r4, #0
 8007f80:	d1f7      	bne.n	8007f72 <strncpy+0x6>
 8007f82:	441a      	add	r2, r3
 8007f84:	2100      	movs	r1, #0
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d100      	bne.n	8007f8c <strncpy+0x20>
 8007f8a:	bd10      	pop	{r4, pc}
 8007f8c:	f803 1b01 	strb.w	r1, [r3], #1
 8007f90:	e7f9      	b.n	8007f86 <strncpy+0x1a>

08007f92 <strnlen>:
 8007f92:	b510      	push	{r4, lr}
 8007f94:	4602      	mov	r2, r0
 8007f96:	4401      	add	r1, r0
 8007f98:	428a      	cmp	r2, r1
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	d003      	beq.n	8007fa6 <strnlen+0x14>
 8007f9e:	781c      	ldrb	r4, [r3, #0]
 8007fa0:	3201      	adds	r2, #1
 8007fa2:	2c00      	cmp	r4, #0
 8007fa4:	d1f8      	bne.n	8007f98 <strnlen+0x6>
 8007fa6:	1a18      	subs	r0, r3, r0
 8007fa8:	bd10      	pop	{r4, pc}
	...

08007fac <_close_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	4d06      	ldr	r5, [pc, #24]	; (8007fc8 <_close_r+0x1c>)
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	4608      	mov	r0, r1
 8007fb6:	602b      	str	r3, [r5, #0]
 8007fb8:	f7fb fd2d 	bl	8003a16 <_close>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_close_r+0x1a>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_close_r+0x1a>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	20000754 	.word	0x20000754

08007fcc <_lseek_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d07      	ldr	r5, [pc, #28]	; (8007fec <_lseek_r+0x20>)
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	4608      	mov	r0, r1
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	602a      	str	r2, [r5, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f7fb fd42 	bl	8003a64 <_lseek>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	d102      	bne.n	8007fea <_lseek_r+0x1e>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	b103      	cbz	r3, 8007fea <_lseek_r+0x1e>
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	bd38      	pop	{r3, r4, r5, pc}
 8007fec:	20000754 	.word	0x20000754

08007ff0 <_read_r>:
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	4d07      	ldr	r5, [pc, #28]	; (8008010 <_read_r+0x20>)
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	4608      	mov	r0, r1
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	602a      	str	r2, [r5, #0]
 8007ffe:	461a      	mov	r2, r3
 8008000:	f7fb fcd0 	bl	80039a4 <_read>
 8008004:	1c43      	adds	r3, r0, #1
 8008006:	d102      	bne.n	800800e <_read_r+0x1e>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	b103      	cbz	r3, 800800e <_read_r+0x1e>
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	bd38      	pop	{r3, r4, r5, pc}
 8008010:	20000754 	.word	0x20000754

08008014 <_sbrk_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	4d06      	ldr	r5, [pc, #24]	; (8008030 <_sbrk_r+0x1c>)
 8008018:	2300      	movs	r3, #0
 800801a:	4604      	mov	r4, r0
 800801c:	4608      	mov	r0, r1
 800801e:	602b      	str	r3, [r5, #0]
 8008020:	f7fb fd2e 	bl	8003a80 <_sbrk>
 8008024:	1c43      	adds	r3, r0, #1
 8008026:	d102      	bne.n	800802e <_sbrk_r+0x1a>
 8008028:	682b      	ldr	r3, [r5, #0]
 800802a:	b103      	cbz	r3, 800802e <_sbrk_r+0x1a>
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	20000754 	.word	0x20000754

08008034 <_write_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	4d07      	ldr	r5, [pc, #28]	; (8008054 <_write_r+0x20>)
 8008038:	4604      	mov	r4, r0
 800803a:	4608      	mov	r0, r1
 800803c:	4611      	mov	r1, r2
 800803e:	2200      	movs	r2, #0
 8008040:	602a      	str	r2, [r5, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	f7fb fccb 	bl	80039de <_write>
 8008048:	1c43      	adds	r3, r0, #1
 800804a:	d102      	bne.n	8008052 <_write_r+0x1e>
 800804c:	682b      	ldr	r3, [r5, #0]
 800804e:	b103      	cbz	r3, 8008052 <_write_r+0x1e>
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	bd38      	pop	{r3, r4, r5, pc}
 8008054:	20000754 	.word	0x20000754

08008058 <__errno>:
 8008058:	4b01      	ldr	r3, [pc, #4]	; (8008060 <__errno+0x8>)
 800805a:	6818      	ldr	r0, [r3, #0]
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	20000068 	.word	0x20000068

08008064 <__libc_init_array>:
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	4d0d      	ldr	r5, [pc, #52]	; (800809c <__libc_init_array+0x38>)
 8008068:	4c0d      	ldr	r4, [pc, #52]	; (80080a0 <__libc_init_array+0x3c>)
 800806a:	1b64      	subs	r4, r4, r5
 800806c:	10a4      	asrs	r4, r4, #2
 800806e:	2600      	movs	r6, #0
 8008070:	42a6      	cmp	r6, r4
 8008072:	d109      	bne.n	8008088 <__libc_init_array+0x24>
 8008074:	4d0b      	ldr	r5, [pc, #44]	; (80080a4 <__libc_init_array+0x40>)
 8008076:	4c0c      	ldr	r4, [pc, #48]	; (80080a8 <__libc_init_array+0x44>)
 8008078:	f000 fcae 	bl	80089d8 <_init>
 800807c:	1b64      	subs	r4, r4, r5
 800807e:	10a4      	asrs	r4, r4, #2
 8008080:	2600      	movs	r6, #0
 8008082:	42a6      	cmp	r6, r4
 8008084:	d105      	bne.n	8008092 <__libc_init_array+0x2e>
 8008086:	bd70      	pop	{r4, r5, r6, pc}
 8008088:	f855 3b04 	ldr.w	r3, [r5], #4
 800808c:	4798      	blx	r3
 800808e:	3601      	adds	r6, #1
 8008090:	e7ee      	b.n	8008070 <__libc_init_array+0xc>
 8008092:	f855 3b04 	ldr.w	r3, [r5], #4
 8008096:	4798      	blx	r3
 8008098:	3601      	adds	r6, #1
 800809a:	e7f2      	b.n	8008082 <__libc_init_array+0x1e>
 800809c:	08008d30 	.word	0x08008d30
 80080a0:	08008d30 	.word	0x08008d30
 80080a4:	08008d30 	.word	0x08008d30
 80080a8:	08008d34 	.word	0x08008d34

080080ac <__retarget_lock_acquire_recursive>:
 80080ac:	4770      	bx	lr

080080ae <__retarget_lock_release_recursive>:
 80080ae:	4770      	bx	lr

080080b0 <memcpy>:
 80080b0:	440a      	add	r2, r1
 80080b2:	4291      	cmp	r1, r2
 80080b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80080b8:	d100      	bne.n	80080bc <memcpy+0xc>
 80080ba:	4770      	bx	lr
 80080bc:	b510      	push	{r4, lr}
 80080be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080c6:	4291      	cmp	r1, r2
 80080c8:	d1f9      	bne.n	80080be <memcpy+0xe>
 80080ca:	bd10      	pop	{r4, pc}

080080cc <_free_r>:
 80080cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ce:	2900      	cmp	r1, #0
 80080d0:	d044      	beq.n	800815c <_free_r+0x90>
 80080d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d6:	9001      	str	r0, [sp, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f1a1 0404 	sub.w	r4, r1, #4
 80080de:	bfb8      	it	lt
 80080e0:	18e4      	addlt	r4, r4, r3
 80080e2:	f7ff fd21 	bl	8007b28 <__malloc_lock>
 80080e6:	4a1e      	ldr	r2, [pc, #120]	; (8008160 <_free_r+0x94>)
 80080e8:	9801      	ldr	r0, [sp, #4]
 80080ea:	6813      	ldr	r3, [r2, #0]
 80080ec:	b933      	cbnz	r3, 80080fc <_free_r+0x30>
 80080ee:	6063      	str	r3, [r4, #4]
 80080f0:	6014      	str	r4, [r2, #0]
 80080f2:	b003      	add	sp, #12
 80080f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080f8:	f7ff bd1c 	b.w	8007b34 <__malloc_unlock>
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	d908      	bls.n	8008112 <_free_r+0x46>
 8008100:	6825      	ldr	r5, [r4, #0]
 8008102:	1961      	adds	r1, r4, r5
 8008104:	428b      	cmp	r3, r1
 8008106:	bf01      	itttt	eq
 8008108:	6819      	ldreq	r1, [r3, #0]
 800810a:	685b      	ldreq	r3, [r3, #4]
 800810c:	1949      	addeq	r1, r1, r5
 800810e:	6021      	streq	r1, [r4, #0]
 8008110:	e7ed      	b.n	80080ee <_free_r+0x22>
 8008112:	461a      	mov	r2, r3
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	b10b      	cbz	r3, 800811c <_free_r+0x50>
 8008118:	42a3      	cmp	r3, r4
 800811a:	d9fa      	bls.n	8008112 <_free_r+0x46>
 800811c:	6811      	ldr	r1, [r2, #0]
 800811e:	1855      	adds	r5, r2, r1
 8008120:	42a5      	cmp	r5, r4
 8008122:	d10b      	bne.n	800813c <_free_r+0x70>
 8008124:	6824      	ldr	r4, [r4, #0]
 8008126:	4421      	add	r1, r4
 8008128:	1854      	adds	r4, r2, r1
 800812a:	42a3      	cmp	r3, r4
 800812c:	6011      	str	r1, [r2, #0]
 800812e:	d1e0      	bne.n	80080f2 <_free_r+0x26>
 8008130:	681c      	ldr	r4, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	6053      	str	r3, [r2, #4]
 8008136:	440c      	add	r4, r1
 8008138:	6014      	str	r4, [r2, #0]
 800813a:	e7da      	b.n	80080f2 <_free_r+0x26>
 800813c:	d902      	bls.n	8008144 <_free_r+0x78>
 800813e:	230c      	movs	r3, #12
 8008140:	6003      	str	r3, [r0, #0]
 8008142:	e7d6      	b.n	80080f2 <_free_r+0x26>
 8008144:	6825      	ldr	r5, [r4, #0]
 8008146:	1961      	adds	r1, r4, r5
 8008148:	428b      	cmp	r3, r1
 800814a:	bf04      	itt	eq
 800814c:	6819      	ldreq	r1, [r3, #0]
 800814e:	685b      	ldreq	r3, [r3, #4]
 8008150:	6063      	str	r3, [r4, #4]
 8008152:	bf04      	itt	eq
 8008154:	1949      	addeq	r1, r1, r5
 8008156:	6021      	streq	r1, [r4, #0]
 8008158:	6054      	str	r4, [r2, #4]
 800815a:	e7ca      	b.n	80080f2 <_free_r+0x26>
 800815c:	b003      	add	sp, #12
 800815e:	bd30      	pop	{r4, r5, pc}
 8008160:	20000610 	.word	0x20000610

08008164 <__sfputc_r>:
 8008164:	6893      	ldr	r3, [r2, #8]
 8008166:	3b01      	subs	r3, #1
 8008168:	2b00      	cmp	r3, #0
 800816a:	b410      	push	{r4}
 800816c:	6093      	str	r3, [r2, #8]
 800816e:	da08      	bge.n	8008182 <__sfputc_r+0x1e>
 8008170:	6994      	ldr	r4, [r2, #24]
 8008172:	42a3      	cmp	r3, r4
 8008174:	db01      	blt.n	800817a <__sfputc_r+0x16>
 8008176:	290a      	cmp	r1, #10
 8008178:	d103      	bne.n	8008182 <__sfputc_r+0x1e>
 800817a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800817e:	f7ff be48 	b.w	8007e12 <__swbuf_r>
 8008182:	6813      	ldr	r3, [r2, #0]
 8008184:	1c58      	adds	r0, r3, #1
 8008186:	6010      	str	r0, [r2, #0]
 8008188:	7019      	strb	r1, [r3, #0]
 800818a:	4608      	mov	r0, r1
 800818c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008190:	4770      	bx	lr

08008192 <__sfputs_r>:
 8008192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008194:	4606      	mov	r6, r0
 8008196:	460f      	mov	r7, r1
 8008198:	4614      	mov	r4, r2
 800819a:	18d5      	adds	r5, r2, r3
 800819c:	42ac      	cmp	r4, r5
 800819e:	d101      	bne.n	80081a4 <__sfputs_r+0x12>
 80081a0:	2000      	movs	r0, #0
 80081a2:	e007      	b.n	80081b4 <__sfputs_r+0x22>
 80081a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a8:	463a      	mov	r2, r7
 80081aa:	4630      	mov	r0, r6
 80081ac:	f7ff ffda 	bl	8008164 <__sfputc_r>
 80081b0:	1c43      	adds	r3, r0, #1
 80081b2:	d1f3      	bne.n	800819c <__sfputs_r+0xa>
 80081b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081b8 <_vfiprintf_r>:
 80081b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	460d      	mov	r5, r1
 80081be:	b09d      	sub	sp, #116	; 0x74
 80081c0:	4614      	mov	r4, r2
 80081c2:	4698      	mov	r8, r3
 80081c4:	4606      	mov	r6, r0
 80081c6:	b118      	cbz	r0, 80081d0 <_vfiprintf_r+0x18>
 80081c8:	6a03      	ldr	r3, [r0, #32]
 80081ca:	b90b      	cbnz	r3, 80081d0 <_vfiprintf_r+0x18>
 80081cc:	f7ff fd32 	bl	8007c34 <__sinit>
 80081d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081d2:	07d9      	lsls	r1, r3, #31
 80081d4:	d405      	bmi.n	80081e2 <_vfiprintf_r+0x2a>
 80081d6:	89ab      	ldrh	r3, [r5, #12]
 80081d8:	059a      	lsls	r2, r3, #22
 80081da:	d402      	bmi.n	80081e2 <_vfiprintf_r+0x2a>
 80081dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081de:	f7ff ff65 	bl	80080ac <__retarget_lock_acquire_recursive>
 80081e2:	89ab      	ldrh	r3, [r5, #12]
 80081e4:	071b      	lsls	r3, r3, #28
 80081e6:	d501      	bpl.n	80081ec <_vfiprintf_r+0x34>
 80081e8:	692b      	ldr	r3, [r5, #16]
 80081ea:	b99b      	cbnz	r3, 8008214 <_vfiprintf_r+0x5c>
 80081ec:	4629      	mov	r1, r5
 80081ee:	4630      	mov	r0, r6
 80081f0:	f7ff fe4c 	bl	8007e8c <__swsetup_r>
 80081f4:	b170      	cbz	r0, 8008214 <_vfiprintf_r+0x5c>
 80081f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081f8:	07dc      	lsls	r4, r3, #31
 80081fa:	d504      	bpl.n	8008206 <_vfiprintf_r+0x4e>
 80081fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008200:	b01d      	add	sp, #116	; 0x74
 8008202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008206:	89ab      	ldrh	r3, [r5, #12]
 8008208:	0598      	lsls	r0, r3, #22
 800820a:	d4f7      	bmi.n	80081fc <_vfiprintf_r+0x44>
 800820c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800820e:	f7ff ff4e 	bl	80080ae <__retarget_lock_release_recursive>
 8008212:	e7f3      	b.n	80081fc <_vfiprintf_r+0x44>
 8008214:	2300      	movs	r3, #0
 8008216:	9309      	str	r3, [sp, #36]	; 0x24
 8008218:	2320      	movs	r3, #32
 800821a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800821e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008222:	2330      	movs	r3, #48	; 0x30
 8008224:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80083d8 <_vfiprintf_r+0x220>
 8008228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800822c:	f04f 0901 	mov.w	r9, #1
 8008230:	4623      	mov	r3, r4
 8008232:	469a      	mov	sl, r3
 8008234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008238:	b10a      	cbz	r2, 800823e <_vfiprintf_r+0x86>
 800823a:	2a25      	cmp	r2, #37	; 0x25
 800823c:	d1f9      	bne.n	8008232 <_vfiprintf_r+0x7a>
 800823e:	ebba 0b04 	subs.w	fp, sl, r4
 8008242:	d00b      	beq.n	800825c <_vfiprintf_r+0xa4>
 8008244:	465b      	mov	r3, fp
 8008246:	4622      	mov	r2, r4
 8008248:	4629      	mov	r1, r5
 800824a:	4630      	mov	r0, r6
 800824c:	f7ff ffa1 	bl	8008192 <__sfputs_r>
 8008250:	3001      	adds	r0, #1
 8008252:	f000 80a9 	beq.w	80083a8 <_vfiprintf_r+0x1f0>
 8008256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008258:	445a      	add	r2, fp
 800825a:	9209      	str	r2, [sp, #36]	; 0x24
 800825c:	f89a 3000 	ldrb.w	r3, [sl]
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 80a1 	beq.w	80083a8 <_vfiprintf_r+0x1f0>
 8008266:	2300      	movs	r3, #0
 8008268:	f04f 32ff 	mov.w	r2, #4294967295
 800826c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008270:	f10a 0a01 	add.w	sl, sl, #1
 8008274:	9304      	str	r3, [sp, #16]
 8008276:	9307      	str	r3, [sp, #28]
 8008278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800827c:	931a      	str	r3, [sp, #104]	; 0x68
 800827e:	4654      	mov	r4, sl
 8008280:	2205      	movs	r2, #5
 8008282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008286:	4854      	ldr	r0, [pc, #336]	; (80083d8 <_vfiprintf_r+0x220>)
 8008288:	f7f7 ffa2 	bl	80001d0 <memchr>
 800828c:	9a04      	ldr	r2, [sp, #16]
 800828e:	b9d8      	cbnz	r0, 80082c8 <_vfiprintf_r+0x110>
 8008290:	06d1      	lsls	r1, r2, #27
 8008292:	bf44      	itt	mi
 8008294:	2320      	movmi	r3, #32
 8008296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800829a:	0713      	lsls	r3, r2, #28
 800829c:	bf44      	itt	mi
 800829e:	232b      	movmi	r3, #43	; 0x2b
 80082a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082a4:	f89a 3000 	ldrb.w	r3, [sl]
 80082a8:	2b2a      	cmp	r3, #42	; 0x2a
 80082aa:	d015      	beq.n	80082d8 <_vfiprintf_r+0x120>
 80082ac:	9a07      	ldr	r2, [sp, #28]
 80082ae:	4654      	mov	r4, sl
 80082b0:	2000      	movs	r0, #0
 80082b2:	f04f 0c0a 	mov.w	ip, #10
 80082b6:	4621      	mov	r1, r4
 80082b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082bc:	3b30      	subs	r3, #48	; 0x30
 80082be:	2b09      	cmp	r3, #9
 80082c0:	d94d      	bls.n	800835e <_vfiprintf_r+0x1a6>
 80082c2:	b1b0      	cbz	r0, 80082f2 <_vfiprintf_r+0x13a>
 80082c4:	9207      	str	r2, [sp, #28]
 80082c6:	e014      	b.n	80082f2 <_vfiprintf_r+0x13a>
 80082c8:	eba0 0308 	sub.w	r3, r0, r8
 80082cc:	fa09 f303 	lsl.w	r3, r9, r3
 80082d0:	4313      	orrs	r3, r2
 80082d2:	9304      	str	r3, [sp, #16]
 80082d4:	46a2      	mov	sl, r4
 80082d6:	e7d2      	b.n	800827e <_vfiprintf_r+0xc6>
 80082d8:	9b03      	ldr	r3, [sp, #12]
 80082da:	1d19      	adds	r1, r3, #4
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	9103      	str	r1, [sp, #12]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	bfbb      	ittet	lt
 80082e4:	425b      	neglt	r3, r3
 80082e6:	f042 0202 	orrlt.w	r2, r2, #2
 80082ea:	9307      	strge	r3, [sp, #28]
 80082ec:	9307      	strlt	r3, [sp, #28]
 80082ee:	bfb8      	it	lt
 80082f0:	9204      	strlt	r2, [sp, #16]
 80082f2:	7823      	ldrb	r3, [r4, #0]
 80082f4:	2b2e      	cmp	r3, #46	; 0x2e
 80082f6:	d10c      	bne.n	8008312 <_vfiprintf_r+0x15a>
 80082f8:	7863      	ldrb	r3, [r4, #1]
 80082fa:	2b2a      	cmp	r3, #42	; 0x2a
 80082fc:	d134      	bne.n	8008368 <_vfiprintf_r+0x1b0>
 80082fe:	9b03      	ldr	r3, [sp, #12]
 8008300:	1d1a      	adds	r2, r3, #4
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	9203      	str	r2, [sp, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	bfb8      	it	lt
 800830a:	f04f 33ff 	movlt.w	r3, #4294967295
 800830e:	3402      	adds	r4, #2
 8008310:	9305      	str	r3, [sp, #20]
 8008312:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80083e8 <_vfiprintf_r+0x230>
 8008316:	7821      	ldrb	r1, [r4, #0]
 8008318:	2203      	movs	r2, #3
 800831a:	4650      	mov	r0, sl
 800831c:	f7f7 ff58 	bl	80001d0 <memchr>
 8008320:	b138      	cbz	r0, 8008332 <_vfiprintf_r+0x17a>
 8008322:	9b04      	ldr	r3, [sp, #16]
 8008324:	eba0 000a 	sub.w	r0, r0, sl
 8008328:	2240      	movs	r2, #64	; 0x40
 800832a:	4082      	lsls	r2, r0
 800832c:	4313      	orrs	r3, r2
 800832e:	3401      	adds	r4, #1
 8008330:	9304      	str	r3, [sp, #16]
 8008332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008336:	4829      	ldr	r0, [pc, #164]	; (80083dc <_vfiprintf_r+0x224>)
 8008338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800833c:	2206      	movs	r2, #6
 800833e:	f7f7 ff47 	bl	80001d0 <memchr>
 8008342:	2800      	cmp	r0, #0
 8008344:	d03f      	beq.n	80083c6 <_vfiprintf_r+0x20e>
 8008346:	4b26      	ldr	r3, [pc, #152]	; (80083e0 <_vfiprintf_r+0x228>)
 8008348:	bb1b      	cbnz	r3, 8008392 <_vfiprintf_r+0x1da>
 800834a:	9b03      	ldr	r3, [sp, #12]
 800834c:	3307      	adds	r3, #7
 800834e:	f023 0307 	bic.w	r3, r3, #7
 8008352:	3308      	adds	r3, #8
 8008354:	9303      	str	r3, [sp, #12]
 8008356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008358:	443b      	add	r3, r7
 800835a:	9309      	str	r3, [sp, #36]	; 0x24
 800835c:	e768      	b.n	8008230 <_vfiprintf_r+0x78>
 800835e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008362:	460c      	mov	r4, r1
 8008364:	2001      	movs	r0, #1
 8008366:	e7a6      	b.n	80082b6 <_vfiprintf_r+0xfe>
 8008368:	2300      	movs	r3, #0
 800836a:	3401      	adds	r4, #1
 800836c:	9305      	str	r3, [sp, #20]
 800836e:	4619      	mov	r1, r3
 8008370:	f04f 0c0a 	mov.w	ip, #10
 8008374:	4620      	mov	r0, r4
 8008376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800837a:	3a30      	subs	r2, #48	; 0x30
 800837c:	2a09      	cmp	r2, #9
 800837e:	d903      	bls.n	8008388 <_vfiprintf_r+0x1d0>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d0c6      	beq.n	8008312 <_vfiprintf_r+0x15a>
 8008384:	9105      	str	r1, [sp, #20]
 8008386:	e7c4      	b.n	8008312 <_vfiprintf_r+0x15a>
 8008388:	fb0c 2101 	mla	r1, ip, r1, r2
 800838c:	4604      	mov	r4, r0
 800838e:	2301      	movs	r3, #1
 8008390:	e7f0      	b.n	8008374 <_vfiprintf_r+0x1bc>
 8008392:	ab03      	add	r3, sp, #12
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	462a      	mov	r2, r5
 8008398:	4b12      	ldr	r3, [pc, #72]	; (80083e4 <_vfiprintf_r+0x22c>)
 800839a:	a904      	add	r1, sp, #16
 800839c:	4630      	mov	r0, r6
 800839e:	f3af 8000 	nop.w
 80083a2:	4607      	mov	r7, r0
 80083a4:	1c78      	adds	r0, r7, #1
 80083a6:	d1d6      	bne.n	8008356 <_vfiprintf_r+0x19e>
 80083a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083aa:	07d9      	lsls	r1, r3, #31
 80083ac:	d405      	bmi.n	80083ba <_vfiprintf_r+0x202>
 80083ae:	89ab      	ldrh	r3, [r5, #12]
 80083b0:	059a      	lsls	r2, r3, #22
 80083b2:	d402      	bmi.n	80083ba <_vfiprintf_r+0x202>
 80083b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083b6:	f7ff fe7a 	bl	80080ae <__retarget_lock_release_recursive>
 80083ba:	89ab      	ldrh	r3, [r5, #12]
 80083bc:	065b      	lsls	r3, r3, #25
 80083be:	f53f af1d 	bmi.w	80081fc <_vfiprintf_r+0x44>
 80083c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083c4:	e71c      	b.n	8008200 <_vfiprintf_r+0x48>
 80083c6:	ab03      	add	r3, sp, #12
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	462a      	mov	r2, r5
 80083cc:	4b05      	ldr	r3, [pc, #20]	; (80083e4 <_vfiprintf_r+0x22c>)
 80083ce:	a904      	add	r1, sp, #16
 80083d0:	4630      	mov	r0, r6
 80083d2:	f000 f879 	bl	80084c8 <_printf_i>
 80083d6:	e7e4      	b.n	80083a2 <_vfiprintf_r+0x1ea>
 80083d8:	08008cfc 	.word	0x08008cfc
 80083dc:	08008d06 	.word	0x08008d06
 80083e0:	00000000 	.word	0x00000000
 80083e4:	08008193 	.word	0x08008193
 80083e8:	08008d02 	.word	0x08008d02

080083ec <_printf_common>:
 80083ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	4616      	mov	r6, r2
 80083f2:	4699      	mov	r9, r3
 80083f4:	688a      	ldr	r2, [r1, #8]
 80083f6:	690b      	ldr	r3, [r1, #16]
 80083f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083fc:	4293      	cmp	r3, r2
 80083fe:	bfb8      	it	lt
 8008400:	4613      	movlt	r3, r2
 8008402:	6033      	str	r3, [r6, #0]
 8008404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008408:	4607      	mov	r7, r0
 800840a:	460c      	mov	r4, r1
 800840c:	b10a      	cbz	r2, 8008412 <_printf_common+0x26>
 800840e:	3301      	adds	r3, #1
 8008410:	6033      	str	r3, [r6, #0]
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	0699      	lsls	r1, r3, #26
 8008416:	bf42      	ittt	mi
 8008418:	6833      	ldrmi	r3, [r6, #0]
 800841a:	3302      	addmi	r3, #2
 800841c:	6033      	strmi	r3, [r6, #0]
 800841e:	6825      	ldr	r5, [r4, #0]
 8008420:	f015 0506 	ands.w	r5, r5, #6
 8008424:	d106      	bne.n	8008434 <_printf_common+0x48>
 8008426:	f104 0a19 	add.w	sl, r4, #25
 800842a:	68e3      	ldr	r3, [r4, #12]
 800842c:	6832      	ldr	r2, [r6, #0]
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	42ab      	cmp	r3, r5
 8008432:	dc26      	bgt.n	8008482 <_printf_common+0x96>
 8008434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008438:	1e13      	subs	r3, r2, #0
 800843a:	6822      	ldr	r2, [r4, #0]
 800843c:	bf18      	it	ne
 800843e:	2301      	movne	r3, #1
 8008440:	0692      	lsls	r2, r2, #26
 8008442:	d42b      	bmi.n	800849c <_printf_common+0xb0>
 8008444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008448:	4649      	mov	r1, r9
 800844a:	4638      	mov	r0, r7
 800844c:	47c0      	blx	r8
 800844e:	3001      	adds	r0, #1
 8008450:	d01e      	beq.n	8008490 <_printf_common+0xa4>
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	6922      	ldr	r2, [r4, #16]
 8008456:	f003 0306 	and.w	r3, r3, #6
 800845a:	2b04      	cmp	r3, #4
 800845c:	bf02      	ittt	eq
 800845e:	68e5      	ldreq	r5, [r4, #12]
 8008460:	6833      	ldreq	r3, [r6, #0]
 8008462:	1aed      	subeq	r5, r5, r3
 8008464:	68a3      	ldr	r3, [r4, #8]
 8008466:	bf0c      	ite	eq
 8008468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800846c:	2500      	movne	r5, #0
 800846e:	4293      	cmp	r3, r2
 8008470:	bfc4      	itt	gt
 8008472:	1a9b      	subgt	r3, r3, r2
 8008474:	18ed      	addgt	r5, r5, r3
 8008476:	2600      	movs	r6, #0
 8008478:	341a      	adds	r4, #26
 800847a:	42b5      	cmp	r5, r6
 800847c:	d11a      	bne.n	80084b4 <_printf_common+0xc8>
 800847e:	2000      	movs	r0, #0
 8008480:	e008      	b.n	8008494 <_printf_common+0xa8>
 8008482:	2301      	movs	r3, #1
 8008484:	4652      	mov	r2, sl
 8008486:	4649      	mov	r1, r9
 8008488:	4638      	mov	r0, r7
 800848a:	47c0      	blx	r8
 800848c:	3001      	adds	r0, #1
 800848e:	d103      	bne.n	8008498 <_printf_common+0xac>
 8008490:	f04f 30ff 	mov.w	r0, #4294967295
 8008494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008498:	3501      	adds	r5, #1
 800849a:	e7c6      	b.n	800842a <_printf_common+0x3e>
 800849c:	18e1      	adds	r1, r4, r3
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	2030      	movs	r0, #48	; 0x30
 80084a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084a6:	4422      	add	r2, r4
 80084a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084b0:	3302      	adds	r3, #2
 80084b2:	e7c7      	b.n	8008444 <_printf_common+0x58>
 80084b4:	2301      	movs	r3, #1
 80084b6:	4622      	mov	r2, r4
 80084b8:	4649      	mov	r1, r9
 80084ba:	4638      	mov	r0, r7
 80084bc:	47c0      	blx	r8
 80084be:	3001      	adds	r0, #1
 80084c0:	d0e6      	beq.n	8008490 <_printf_common+0xa4>
 80084c2:	3601      	adds	r6, #1
 80084c4:	e7d9      	b.n	800847a <_printf_common+0x8e>
	...

080084c8 <_printf_i>:
 80084c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084cc:	7e0f      	ldrb	r7, [r1, #24]
 80084ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084d0:	2f78      	cmp	r7, #120	; 0x78
 80084d2:	4691      	mov	r9, r2
 80084d4:	4680      	mov	r8, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	469a      	mov	sl, r3
 80084da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084de:	d807      	bhi.n	80084f0 <_printf_i+0x28>
 80084e0:	2f62      	cmp	r7, #98	; 0x62
 80084e2:	d80a      	bhi.n	80084fa <_printf_i+0x32>
 80084e4:	2f00      	cmp	r7, #0
 80084e6:	f000 80d4 	beq.w	8008692 <_printf_i+0x1ca>
 80084ea:	2f58      	cmp	r7, #88	; 0x58
 80084ec:	f000 80c0 	beq.w	8008670 <_printf_i+0x1a8>
 80084f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084f8:	e03a      	b.n	8008570 <_printf_i+0xa8>
 80084fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084fe:	2b15      	cmp	r3, #21
 8008500:	d8f6      	bhi.n	80084f0 <_printf_i+0x28>
 8008502:	a101      	add	r1, pc, #4	; (adr r1, 8008508 <_printf_i+0x40>)
 8008504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008508:	08008561 	.word	0x08008561
 800850c:	08008575 	.word	0x08008575
 8008510:	080084f1 	.word	0x080084f1
 8008514:	080084f1 	.word	0x080084f1
 8008518:	080084f1 	.word	0x080084f1
 800851c:	080084f1 	.word	0x080084f1
 8008520:	08008575 	.word	0x08008575
 8008524:	080084f1 	.word	0x080084f1
 8008528:	080084f1 	.word	0x080084f1
 800852c:	080084f1 	.word	0x080084f1
 8008530:	080084f1 	.word	0x080084f1
 8008534:	08008679 	.word	0x08008679
 8008538:	080085a1 	.word	0x080085a1
 800853c:	08008633 	.word	0x08008633
 8008540:	080084f1 	.word	0x080084f1
 8008544:	080084f1 	.word	0x080084f1
 8008548:	0800869b 	.word	0x0800869b
 800854c:	080084f1 	.word	0x080084f1
 8008550:	080085a1 	.word	0x080085a1
 8008554:	080084f1 	.word	0x080084f1
 8008558:	080084f1 	.word	0x080084f1
 800855c:	0800863b 	.word	0x0800863b
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	1d1a      	adds	r2, r3, #4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	602a      	str	r2, [r5, #0]
 8008568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800856c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008570:	2301      	movs	r3, #1
 8008572:	e09f      	b.n	80086b4 <_printf_i+0x1ec>
 8008574:	6820      	ldr	r0, [r4, #0]
 8008576:	682b      	ldr	r3, [r5, #0]
 8008578:	0607      	lsls	r7, r0, #24
 800857a:	f103 0104 	add.w	r1, r3, #4
 800857e:	6029      	str	r1, [r5, #0]
 8008580:	d501      	bpl.n	8008586 <_printf_i+0xbe>
 8008582:	681e      	ldr	r6, [r3, #0]
 8008584:	e003      	b.n	800858e <_printf_i+0xc6>
 8008586:	0646      	lsls	r6, r0, #25
 8008588:	d5fb      	bpl.n	8008582 <_printf_i+0xba>
 800858a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800858e:	2e00      	cmp	r6, #0
 8008590:	da03      	bge.n	800859a <_printf_i+0xd2>
 8008592:	232d      	movs	r3, #45	; 0x2d
 8008594:	4276      	negs	r6, r6
 8008596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800859a:	485a      	ldr	r0, [pc, #360]	; (8008704 <_printf_i+0x23c>)
 800859c:	230a      	movs	r3, #10
 800859e:	e012      	b.n	80085c6 <_printf_i+0xfe>
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	6820      	ldr	r0, [r4, #0]
 80085a4:	1d19      	adds	r1, r3, #4
 80085a6:	6029      	str	r1, [r5, #0]
 80085a8:	0605      	lsls	r5, r0, #24
 80085aa:	d501      	bpl.n	80085b0 <_printf_i+0xe8>
 80085ac:	681e      	ldr	r6, [r3, #0]
 80085ae:	e002      	b.n	80085b6 <_printf_i+0xee>
 80085b0:	0641      	lsls	r1, r0, #25
 80085b2:	d5fb      	bpl.n	80085ac <_printf_i+0xe4>
 80085b4:	881e      	ldrh	r6, [r3, #0]
 80085b6:	4853      	ldr	r0, [pc, #332]	; (8008704 <_printf_i+0x23c>)
 80085b8:	2f6f      	cmp	r7, #111	; 0x6f
 80085ba:	bf0c      	ite	eq
 80085bc:	2308      	moveq	r3, #8
 80085be:	230a      	movne	r3, #10
 80085c0:	2100      	movs	r1, #0
 80085c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085c6:	6865      	ldr	r5, [r4, #4]
 80085c8:	60a5      	str	r5, [r4, #8]
 80085ca:	2d00      	cmp	r5, #0
 80085cc:	bfa2      	ittt	ge
 80085ce:	6821      	ldrge	r1, [r4, #0]
 80085d0:	f021 0104 	bicge.w	r1, r1, #4
 80085d4:	6021      	strge	r1, [r4, #0]
 80085d6:	b90e      	cbnz	r6, 80085dc <_printf_i+0x114>
 80085d8:	2d00      	cmp	r5, #0
 80085da:	d04b      	beq.n	8008674 <_printf_i+0x1ac>
 80085dc:	4615      	mov	r5, r2
 80085de:	fbb6 f1f3 	udiv	r1, r6, r3
 80085e2:	fb03 6711 	mls	r7, r3, r1, r6
 80085e6:	5dc7      	ldrb	r7, [r0, r7]
 80085e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085ec:	4637      	mov	r7, r6
 80085ee:	42bb      	cmp	r3, r7
 80085f0:	460e      	mov	r6, r1
 80085f2:	d9f4      	bls.n	80085de <_printf_i+0x116>
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d10b      	bne.n	8008610 <_printf_i+0x148>
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	07de      	lsls	r6, r3, #31
 80085fc:	d508      	bpl.n	8008610 <_printf_i+0x148>
 80085fe:	6923      	ldr	r3, [r4, #16]
 8008600:	6861      	ldr	r1, [r4, #4]
 8008602:	4299      	cmp	r1, r3
 8008604:	bfde      	ittt	le
 8008606:	2330      	movle	r3, #48	; 0x30
 8008608:	f805 3c01 	strble.w	r3, [r5, #-1]
 800860c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008610:	1b52      	subs	r2, r2, r5
 8008612:	6122      	str	r2, [r4, #16]
 8008614:	f8cd a000 	str.w	sl, [sp]
 8008618:	464b      	mov	r3, r9
 800861a:	aa03      	add	r2, sp, #12
 800861c:	4621      	mov	r1, r4
 800861e:	4640      	mov	r0, r8
 8008620:	f7ff fee4 	bl	80083ec <_printf_common>
 8008624:	3001      	adds	r0, #1
 8008626:	d14a      	bne.n	80086be <_printf_i+0x1f6>
 8008628:	f04f 30ff 	mov.w	r0, #4294967295
 800862c:	b004      	add	sp, #16
 800862e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	f043 0320 	orr.w	r3, r3, #32
 8008638:	6023      	str	r3, [r4, #0]
 800863a:	4833      	ldr	r0, [pc, #204]	; (8008708 <_printf_i+0x240>)
 800863c:	2778      	movs	r7, #120	; 0x78
 800863e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	6829      	ldr	r1, [r5, #0]
 8008646:	061f      	lsls	r7, r3, #24
 8008648:	f851 6b04 	ldr.w	r6, [r1], #4
 800864c:	d402      	bmi.n	8008654 <_printf_i+0x18c>
 800864e:	065f      	lsls	r7, r3, #25
 8008650:	bf48      	it	mi
 8008652:	b2b6      	uxthmi	r6, r6
 8008654:	07df      	lsls	r7, r3, #31
 8008656:	bf48      	it	mi
 8008658:	f043 0320 	orrmi.w	r3, r3, #32
 800865c:	6029      	str	r1, [r5, #0]
 800865e:	bf48      	it	mi
 8008660:	6023      	strmi	r3, [r4, #0]
 8008662:	b91e      	cbnz	r6, 800866c <_printf_i+0x1a4>
 8008664:	6823      	ldr	r3, [r4, #0]
 8008666:	f023 0320 	bic.w	r3, r3, #32
 800866a:	6023      	str	r3, [r4, #0]
 800866c:	2310      	movs	r3, #16
 800866e:	e7a7      	b.n	80085c0 <_printf_i+0xf8>
 8008670:	4824      	ldr	r0, [pc, #144]	; (8008704 <_printf_i+0x23c>)
 8008672:	e7e4      	b.n	800863e <_printf_i+0x176>
 8008674:	4615      	mov	r5, r2
 8008676:	e7bd      	b.n	80085f4 <_printf_i+0x12c>
 8008678:	682b      	ldr	r3, [r5, #0]
 800867a:	6826      	ldr	r6, [r4, #0]
 800867c:	6961      	ldr	r1, [r4, #20]
 800867e:	1d18      	adds	r0, r3, #4
 8008680:	6028      	str	r0, [r5, #0]
 8008682:	0635      	lsls	r5, r6, #24
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	d501      	bpl.n	800868c <_printf_i+0x1c4>
 8008688:	6019      	str	r1, [r3, #0]
 800868a:	e002      	b.n	8008692 <_printf_i+0x1ca>
 800868c:	0670      	lsls	r0, r6, #25
 800868e:	d5fb      	bpl.n	8008688 <_printf_i+0x1c0>
 8008690:	8019      	strh	r1, [r3, #0]
 8008692:	2300      	movs	r3, #0
 8008694:	6123      	str	r3, [r4, #16]
 8008696:	4615      	mov	r5, r2
 8008698:	e7bc      	b.n	8008614 <_printf_i+0x14c>
 800869a:	682b      	ldr	r3, [r5, #0]
 800869c:	1d1a      	adds	r2, r3, #4
 800869e:	602a      	str	r2, [r5, #0]
 80086a0:	681d      	ldr	r5, [r3, #0]
 80086a2:	6862      	ldr	r2, [r4, #4]
 80086a4:	2100      	movs	r1, #0
 80086a6:	4628      	mov	r0, r5
 80086a8:	f7f7 fd92 	bl	80001d0 <memchr>
 80086ac:	b108      	cbz	r0, 80086b2 <_printf_i+0x1ea>
 80086ae:	1b40      	subs	r0, r0, r5
 80086b0:	6060      	str	r0, [r4, #4]
 80086b2:	6863      	ldr	r3, [r4, #4]
 80086b4:	6123      	str	r3, [r4, #16]
 80086b6:	2300      	movs	r3, #0
 80086b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086bc:	e7aa      	b.n	8008614 <_printf_i+0x14c>
 80086be:	6923      	ldr	r3, [r4, #16]
 80086c0:	462a      	mov	r2, r5
 80086c2:	4649      	mov	r1, r9
 80086c4:	4640      	mov	r0, r8
 80086c6:	47d0      	blx	sl
 80086c8:	3001      	adds	r0, #1
 80086ca:	d0ad      	beq.n	8008628 <_printf_i+0x160>
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	079b      	lsls	r3, r3, #30
 80086d0:	d413      	bmi.n	80086fa <_printf_i+0x232>
 80086d2:	68e0      	ldr	r0, [r4, #12]
 80086d4:	9b03      	ldr	r3, [sp, #12]
 80086d6:	4298      	cmp	r0, r3
 80086d8:	bfb8      	it	lt
 80086da:	4618      	movlt	r0, r3
 80086dc:	e7a6      	b.n	800862c <_printf_i+0x164>
 80086de:	2301      	movs	r3, #1
 80086e0:	4632      	mov	r2, r6
 80086e2:	4649      	mov	r1, r9
 80086e4:	4640      	mov	r0, r8
 80086e6:	47d0      	blx	sl
 80086e8:	3001      	adds	r0, #1
 80086ea:	d09d      	beq.n	8008628 <_printf_i+0x160>
 80086ec:	3501      	adds	r5, #1
 80086ee:	68e3      	ldr	r3, [r4, #12]
 80086f0:	9903      	ldr	r1, [sp, #12]
 80086f2:	1a5b      	subs	r3, r3, r1
 80086f4:	42ab      	cmp	r3, r5
 80086f6:	dcf2      	bgt.n	80086de <_printf_i+0x216>
 80086f8:	e7eb      	b.n	80086d2 <_printf_i+0x20a>
 80086fa:	2500      	movs	r5, #0
 80086fc:	f104 0619 	add.w	r6, r4, #25
 8008700:	e7f5      	b.n	80086ee <_printf_i+0x226>
 8008702:	bf00      	nop
 8008704:	08008d0d 	.word	0x08008d0d
 8008708:	08008d1e 	.word	0x08008d1e

0800870c <__sflush_r>:
 800870c:	898a      	ldrh	r2, [r1, #12]
 800870e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008712:	4605      	mov	r5, r0
 8008714:	0710      	lsls	r0, r2, #28
 8008716:	460c      	mov	r4, r1
 8008718:	d458      	bmi.n	80087cc <__sflush_r+0xc0>
 800871a:	684b      	ldr	r3, [r1, #4]
 800871c:	2b00      	cmp	r3, #0
 800871e:	dc05      	bgt.n	800872c <__sflush_r+0x20>
 8008720:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008722:	2b00      	cmp	r3, #0
 8008724:	dc02      	bgt.n	800872c <__sflush_r+0x20>
 8008726:	2000      	movs	r0, #0
 8008728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800872c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800872e:	2e00      	cmp	r6, #0
 8008730:	d0f9      	beq.n	8008726 <__sflush_r+0x1a>
 8008732:	2300      	movs	r3, #0
 8008734:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008738:	682f      	ldr	r7, [r5, #0]
 800873a:	6a21      	ldr	r1, [r4, #32]
 800873c:	602b      	str	r3, [r5, #0]
 800873e:	d032      	beq.n	80087a6 <__sflush_r+0x9a>
 8008740:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	075a      	lsls	r2, r3, #29
 8008746:	d505      	bpl.n	8008754 <__sflush_r+0x48>
 8008748:	6863      	ldr	r3, [r4, #4]
 800874a:	1ac0      	subs	r0, r0, r3
 800874c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800874e:	b10b      	cbz	r3, 8008754 <__sflush_r+0x48>
 8008750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008752:	1ac0      	subs	r0, r0, r3
 8008754:	2300      	movs	r3, #0
 8008756:	4602      	mov	r2, r0
 8008758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800875a:	6a21      	ldr	r1, [r4, #32]
 800875c:	4628      	mov	r0, r5
 800875e:	47b0      	blx	r6
 8008760:	1c43      	adds	r3, r0, #1
 8008762:	89a3      	ldrh	r3, [r4, #12]
 8008764:	d106      	bne.n	8008774 <__sflush_r+0x68>
 8008766:	6829      	ldr	r1, [r5, #0]
 8008768:	291d      	cmp	r1, #29
 800876a:	d82b      	bhi.n	80087c4 <__sflush_r+0xb8>
 800876c:	4a29      	ldr	r2, [pc, #164]	; (8008814 <__sflush_r+0x108>)
 800876e:	410a      	asrs	r2, r1
 8008770:	07d6      	lsls	r6, r2, #31
 8008772:	d427      	bmi.n	80087c4 <__sflush_r+0xb8>
 8008774:	2200      	movs	r2, #0
 8008776:	6062      	str	r2, [r4, #4]
 8008778:	04d9      	lsls	r1, r3, #19
 800877a:	6922      	ldr	r2, [r4, #16]
 800877c:	6022      	str	r2, [r4, #0]
 800877e:	d504      	bpl.n	800878a <__sflush_r+0x7e>
 8008780:	1c42      	adds	r2, r0, #1
 8008782:	d101      	bne.n	8008788 <__sflush_r+0x7c>
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	b903      	cbnz	r3, 800878a <__sflush_r+0x7e>
 8008788:	6560      	str	r0, [r4, #84]	; 0x54
 800878a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800878c:	602f      	str	r7, [r5, #0]
 800878e:	2900      	cmp	r1, #0
 8008790:	d0c9      	beq.n	8008726 <__sflush_r+0x1a>
 8008792:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008796:	4299      	cmp	r1, r3
 8008798:	d002      	beq.n	80087a0 <__sflush_r+0x94>
 800879a:	4628      	mov	r0, r5
 800879c:	f7ff fc96 	bl	80080cc <_free_r>
 80087a0:	2000      	movs	r0, #0
 80087a2:	6360      	str	r0, [r4, #52]	; 0x34
 80087a4:	e7c0      	b.n	8008728 <__sflush_r+0x1c>
 80087a6:	2301      	movs	r3, #1
 80087a8:	4628      	mov	r0, r5
 80087aa:	47b0      	blx	r6
 80087ac:	1c41      	adds	r1, r0, #1
 80087ae:	d1c8      	bne.n	8008742 <__sflush_r+0x36>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0c5      	beq.n	8008742 <__sflush_r+0x36>
 80087b6:	2b1d      	cmp	r3, #29
 80087b8:	d001      	beq.n	80087be <__sflush_r+0xb2>
 80087ba:	2b16      	cmp	r3, #22
 80087bc:	d101      	bne.n	80087c2 <__sflush_r+0xb6>
 80087be:	602f      	str	r7, [r5, #0]
 80087c0:	e7b1      	b.n	8008726 <__sflush_r+0x1a>
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087c8:	81a3      	strh	r3, [r4, #12]
 80087ca:	e7ad      	b.n	8008728 <__sflush_r+0x1c>
 80087cc:	690f      	ldr	r7, [r1, #16]
 80087ce:	2f00      	cmp	r7, #0
 80087d0:	d0a9      	beq.n	8008726 <__sflush_r+0x1a>
 80087d2:	0793      	lsls	r3, r2, #30
 80087d4:	680e      	ldr	r6, [r1, #0]
 80087d6:	bf08      	it	eq
 80087d8:	694b      	ldreq	r3, [r1, #20]
 80087da:	600f      	str	r7, [r1, #0]
 80087dc:	bf18      	it	ne
 80087de:	2300      	movne	r3, #0
 80087e0:	eba6 0807 	sub.w	r8, r6, r7
 80087e4:	608b      	str	r3, [r1, #8]
 80087e6:	f1b8 0f00 	cmp.w	r8, #0
 80087ea:	dd9c      	ble.n	8008726 <__sflush_r+0x1a>
 80087ec:	6a21      	ldr	r1, [r4, #32]
 80087ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087f0:	4643      	mov	r3, r8
 80087f2:	463a      	mov	r2, r7
 80087f4:	4628      	mov	r0, r5
 80087f6:	47b0      	blx	r6
 80087f8:	2800      	cmp	r0, #0
 80087fa:	dc06      	bgt.n	800880a <__sflush_r+0xfe>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	f04f 30ff 	mov.w	r0, #4294967295
 8008808:	e78e      	b.n	8008728 <__sflush_r+0x1c>
 800880a:	4407      	add	r7, r0
 800880c:	eba8 0800 	sub.w	r8, r8, r0
 8008810:	e7e9      	b.n	80087e6 <__sflush_r+0xda>
 8008812:	bf00      	nop
 8008814:	dfbffffe 	.word	0xdfbffffe

08008818 <_fflush_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	690b      	ldr	r3, [r1, #16]
 800881c:	4605      	mov	r5, r0
 800881e:	460c      	mov	r4, r1
 8008820:	b913      	cbnz	r3, 8008828 <_fflush_r+0x10>
 8008822:	2500      	movs	r5, #0
 8008824:	4628      	mov	r0, r5
 8008826:	bd38      	pop	{r3, r4, r5, pc}
 8008828:	b118      	cbz	r0, 8008832 <_fflush_r+0x1a>
 800882a:	6a03      	ldr	r3, [r0, #32]
 800882c:	b90b      	cbnz	r3, 8008832 <_fflush_r+0x1a>
 800882e:	f7ff fa01 	bl	8007c34 <__sinit>
 8008832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0f3      	beq.n	8008822 <_fflush_r+0xa>
 800883a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800883c:	07d0      	lsls	r0, r2, #31
 800883e:	d404      	bmi.n	800884a <_fflush_r+0x32>
 8008840:	0599      	lsls	r1, r3, #22
 8008842:	d402      	bmi.n	800884a <_fflush_r+0x32>
 8008844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008846:	f7ff fc31 	bl	80080ac <__retarget_lock_acquire_recursive>
 800884a:	4628      	mov	r0, r5
 800884c:	4621      	mov	r1, r4
 800884e:	f7ff ff5d 	bl	800870c <__sflush_r>
 8008852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008854:	07da      	lsls	r2, r3, #31
 8008856:	4605      	mov	r5, r0
 8008858:	d4e4      	bmi.n	8008824 <_fflush_r+0xc>
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	059b      	lsls	r3, r3, #22
 800885e:	d4e1      	bmi.n	8008824 <_fflush_r+0xc>
 8008860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008862:	f7ff fc24 	bl	80080ae <__retarget_lock_release_recursive>
 8008866:	e7dd      	b.n	8008824 <_fflush_r+0xc>

08008868 <__swhatbuf_r>:
 8008868:	b570      	push	{r4, r5, r6, lr}
 800886a:	460c      	mov	r4, r1
 800886c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008870:	2900      	cmp	r1, #0
 8008872:	b096      	sub	sp, #88	; 0x58
 8008874:	4615      	mov	r5, r2
 8008876:	461e      	mov	r6, r3
 8008878:	da0d      	bge.n	8008896 <__swhatbuf_r+0x2e>
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008880:	f04f 0100 	mov.w	r1, #0
 8008884:	bf0c      	ite	eq
 8008886:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800888a:	2340      	movne	r3, #64	; 0x40
 800888c:	2000      	movs	r0, #0
 800888e:	6031      	str	r1, [r6, #0]
 8008890:	602b      	str	r3, [r5, #0]
 8008892:	b016      	add	sp, #88	; 0x58
 8008894:	bd70      	pop	{r4, r5, r6, pc}
 8008896:	466a      	mov	r2, sp
 8008898:	f000 f87c 	bl	8008994 <_fstat_r>
 800889c:	2800      	cmp	r0, #0
 800889e:	dbec      	blt.n	800887a <__swhatbuf_r+0x12>
 80088a0:	9901      	ldr	r1, [sp, #4]
 80088a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80088a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80088aa:	4259      	negs	r1, r3
 80088ac:	4159      	adcs	r1, r3
 80088ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088b2:	e7eb      	b.n	800888c <__swhatbuf_r+0x24>

080088b4 <__smakebuf_r>:
 80088b4:	898b      	ldrh	r3, [r1, #12]
 80088b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088b8:	079d      	lsls	r5, r3, #30
 80088ba:	4606      	mov	r6, r0
 80088bc:	460c      	mov	r4, r1
 80088be:	d507      	bpl.n	80088d0 <__smakebuf_r+0x1c>
 80088c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088c4:	6023      	str	r3, [r4, #0]
 80088c6:	6123      	str	r3, [r4, #16]
 80088c8:	2301      	movs	r3, #1
 80088ca:	6163      	str	r3, [r4, #20]
 80088cc:	b002      	add	sp, #8
 80088ce:	bd70      	pop	{r4, r5, r6, pc}
 80088d0:	ab01      	add	r3, sp, #4
 80088d2:	466a      	mov	r2, sp
 80088d4:	f7ff ffc8 	bl	8008868 <__swhatbuf_r>
 80088d8:	9900      	ldr	r1, [sp, #0]
 80088da:	4605      	mov	r5, r0
 80088dc:	4630      	mov	r0, r6
 80088de:	f7ff f8a3 	bl	8007a28 <_malloc_r>
 80088e2:	b948      	cbnz	r0, 80088f8 <__smakebuf_r+0x44>
 80088e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e8:	059a      	lsls	r2, r3, #22
 80088ea:	d4ef      	bmi.n	80088cc <__smakebuf_r+0x18>
 80088ec:	f023 0303 	bic.w	r3, r3, #3
 80088f0:	f043 0302 	orr.w	r3, r3, #2
 80088f4:	81a3      	strh	r3, [r4, #12]
 80088f6:	e7e3      	b.n	80088c0 <__smakebuf_r+0xc>
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	6020      	str	r0, [r4, #0]
 80088fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008900:	81a3      	strh	r3, [r4, #12]
 8008902:	9b00      	ldr	r3, [sp, #0]
 8008904:	6163      	str	r3, [r4, #20]
 8008906:	9b01      	ldr	r3, [sp, #4]
 8008908:	6120      	str	r0, [r4, #16]
 800890a:	b15b      	cbz	r3, 8008924 <__smakebuf_r+0x70>
 800890c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008910:	4630      	mov	r0, r6
 8008912:	f000 f851 	bl	80089b8 <_isatty_r>
 8008916:	b128      	cbz	r0, 8008924 <__smakebuf_r+0x70>
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	f023 0303 	bic.w	r3, r3, #3
 800891e:	f043 0301 	orr.w	r3, r3, #1
 8008922:	81a3      	strh	r3, [r4, #12]
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	431d      	orrs	r5, r3
 8008928:	81a5      	strh	r5, [r4, #12]
 800892a:	e7cf      	b.n	80088cc <__smakebuf_r+0x18>

0800892c <_putc_r>:
 800892c:	b570      	push	{r4, r5, r6, lr}
 800892e:	460d      	mov	r5, r1
 8008930:	4614      	mov	r4, r2
 8008932:	4606      	mov	r6, r0
 8008934:	b118      	cbz	r0, 800893e <_putc_r+0x12>
 8008936:	6a03      	ldr	r3, [r0, #32]
 8008938:	b90b      	cbnz	r3, 800893e <_putc_r+0x12>
 800893a:	f7ff f97b 	bl	8007c34 <__sinit>
 800893e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008940:	07d8      	lsls	r0, r3, #31
 8008942:	d405      	bmi.n	8008950 <_putc_r+0x24>
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	0599      	lsls	r1, r3, #22
 8008948:	d402      	bmi.n	8008950 <_putc_r+0x24>
 800894a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800894c:	f7ff fbae 	bl	80080ac <__retarget_lock_acquire_recursive>
 8008950:	68a3      	ldr	r3, [r4, #8]
 8008952:	3b01      	subs	r3, #1
 8008954:	2b00      	cmp	r3, #0
 8008956:	60a3      	str	r3, [r4, #8]
 8008958:	da05      	bge.n	8008966 <_putc_r+0x3a>
 800895a:	69a2      	ldr	r2, [r4, #24]
 800895c:	4293      	cmp	r3, r2
 800895e:	db12      	blt.n	8008986 <_putc_r+0x5a>
 8008960:	b2eb      	uxtb	r3, r5
 8008962:	2b0a      	cmp	r3, #10
 8008964:	d00f      	beq.n	8008986 <_putc_r+0x5a>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	6022      	str	r2, [r4, #0]
 800896c:	701d      	strb	r5, [r3, #0]
 800896e:	b2ed      	uxtb	r5, r5
 8008970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008972:	07da      	lsls	r2, r3, #31
 8008974:	d405      	bmi.n	8008982 <_putc_r+0x56>
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	059b      	lsls	r3, r3, #22
 800897a:	d402      	bmi.n	8008982 <_putc_r+0x56>
 800897c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800897e:	f7ff fb96 	bl	80080ae <__retarget_lock_release_recursive>
 8008982:	4628      	mov	r0, r5
 8008984:	bd70      	pop	{r4, r5, r6, pc}
 8008986:	4629      	mov	r1, r5
 8008988:	4622      	mov	r2, r4
 800898a:	4630      	mov	r0, r6
 800898c:	f7ff fa41 	bl	8007e12 <__swbuf_r>
 8008990:	4605      	mov	r5, r0
 8008992:	e7ed      	b.n	8008970 <_putc_r+0x44>

08008994 <_fstat_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	4d07      	ldr	r5, [pc, #28]	; (80089b4 <_fstat_r+0x20>)
 8008998:	2300      	movs	r3, #0
 800899a:	4604      	mov	r4, r0
 800899c:	4608      	mov	r0, r1
 800899e:	4611      	mov	r1, r2
 80089a0:	602b      	str	r3, [r5, #0]
 80089a2:	f7fb f844 	bl	8003a2e <_fstat>
 80089a6:	1c43      	adds	r3, r0, #1
 80089a8:	d102      	bne.n	80089b0 <_fstat_r+0x1c>
 80089aa:	682b      	ldr	r3, [r5, #0]
 80089ac:	b103      	cbz	r3, 80089b0 <_fstat_r+0x1c>
 80089ae:	6023      	str	r3, [r4, #0]
 80089b0:	bd38      	pop	{r3, r4, r5, pc}
 80089b2:	bf00      	nop
 80089b4:	20000754 	.word	0x20000754

080089b8 <_isatty_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	4d06      	ldr	r5, [pc, #24]	; (80089d4 <_isatty_r+0x1c>)
 80089bc:	2300      	movs	r3, #0
 80089be:	4604      	mov	r4, r0
 80089c0:	4608      	mov	r0, r1
 80089c2:	602b      	str	r3, [r5, #0]
 80089c4:	f7fb f843 	bl	8003a4e <_isatty>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d102      	bne.n	80089d2 <_isatty_r+0x1a>
 80089cc:	682b      	ldr	r3, [r5, #0]
 80089ce:	b103      	cbz	r3, 80089d2 <_isatty_r+0x1a>
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	20000754 	.word	0x20000754

080089d8 <_init>:
 80089d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089da:	bf00      	nop
 80089dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089de:	bc08      	pop	{r3}
 80089e0:	469e      	mov	lr, r3
 80089e2:	4770      	bx	lr

080089e4 <_fini>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	bf00      	nop
 80089e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ea:	bc08      	pop	{r3}
 80089ec:	469e      	mov	lr, r3
 80089ee:	4770      	bx	lr
