
efs-can-servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007120  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080072b0  080072b0  000082b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007514  08007514  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007514  08007514  00008514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800751c  0800751c  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800751c  0800751c  0000851c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007520  08007520  00008520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007524  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  20000068  0800758c  00009068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  0800758c  0000971c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011316  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030df  00000000  00000000  0001a3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0001d490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cdc  00000000  00000000  0001e578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254b4  00000000  00000000  0001f254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161f2  00000000  00000000  00044708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbf3b  00000000  00000000  0005a8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136835  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eac  00000000  00000000  00136878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0013b724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007298 	.word	0x08007298

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007298 	.word	0x08007298

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800062c:	4b17      	ldr	r3, [pc, #92]	@ (800068c <MX_CAN1_Init+0x64>)
 800062e:	4a18      	ldr	r2, [pc, #96]	@ (8000690 <MX_CAN1_Init+0x68>)
 8000630:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000632:	4b16      	ldr	r3, [pc, #88]	@ (800068c <MX_CAN1_Init+0x64>)
 8000634:	220c      	movs	r2, #12
 8000636:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000638:	4b14      	ldr	r3, [pc, #80]	@ (800068c <MX_CAN1_Init+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800063e:	4b13      	ldr	r3, [pc, #76]	@ (800068c <MX_CAN1_Init+0x64>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <MX_CAN1_Init+0x64>)
 8000646:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800064a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800064c:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <MX_CAN1_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000652:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <MX_CAN1_Init+0x64>)
 8000654:	2200      	movs	r2, #0
 8000656:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <MX_CAN1_Init+0x64>)
 800065a:	2200      	movs	r2, #0
 800065c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800065e:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <MX_CAN1_Init+0x64>)
 8000660:	2200      	movs	r2, #0
 8000662:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000664:	4b09      	ldr	r3, [pc, #36]	@ (800068c <MX_CAN1_Init+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800066a:	4b08      	ldr	r3, [pc, #32]	@ (800068c <MX_CAN1_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_CAN1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <MX_CAN1_Init+0x64>)
 8000678:	f003 f922 	bl	80038c0 <HAL_CAN_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000682:	f002 f93c 	bl	80028fe <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000084 	.word	0x20000084
 8000690:	40006400 	.word	0x40006400

08000694 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	@ 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <HAL_CAN_MspInit+0xb4>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d143      	bne.n	800073e <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006b6:	4b25      	ldr	r3, [pc, #148]	@ (800074c <HAL_CAN_MspInit+0xb8>)
 80006b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ba:	4a24      	ldr	r2, [pc, #144]	@ (800074c <HAL_CAN_MspInit+0xb8>)
 80006bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80006c2:	4b22      	ldr	r3, [pc, #136]	@ (800074c <HAL_CAN_MspInit+0xb8>)
 80006c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <HAL_CAN_MspInit+0xb8>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <HAL_CAN_MspInit+0xb8>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006da:	4b1c      	ldr	r3, [pc, #112]	@ (800074c <HAL_CAN_MspInit+0xb8>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f4:	2303      	movs	r3, #3
 80006f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006f8:	2309      	movs	r3, #9
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000706:	f003 fdf1 	bl	80042ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800070a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800071c:	2309      	movs	r3, #9
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800072a:	f003 fddf 	bl	80042ec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	2014      	movs	r0, #20
 8000734:	f003 fda3 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000738:	2014      	movs	r0, #20
 800073a:	f003 fdbc 	bl	80042b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	@ 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40006400 	.word	0x40006400
 800074c:	40021000 	.word	0x40021000

08000750 <canardInit>:
                void* mem_arena,
                size_t mem_arena_size,
                CanardOnTransferReception on_reception,
                CanardShouldAcceptTransfer should_accept,
                void* user_reference)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	603b      	str	r3, [r7, #0]
     * If your application fails here, make sure it's not built in 64-bit mode.
     * Refer to the design documentation for more info.
     */
    CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

    memset(out_ins, 0, sizeof(*out_ins));
 800075e:	222c      	movs	r2, #44	@ 0x2c
 8000760:	2100      	movs	r1, #0
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f005 ffb2 	bl	80066cc <memset>

    out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
    out_ins->on_reception = on_reception;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	609a      	str	r2, [r3, #8]
    out_ins->should_accept = should_accept;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6a3a      	ldr	r2, [r7, #32]
 8000778:	605a      	str	r2, [r3, #4]
    out_ins->rx_states = NULL;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
    out_ins->tx_queue = NULL;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	@ 0x24
    out_ins->user_reference = user_reference;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800078a:	629a      	str	r2, [r3, #40]	@ 0x28
#if CANARD_ENABLE_TAO_OPTION
    out_ins->tao_disabled = false;
#endif
    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	095b      	lsrs	r3, r3, #5
 8000790:	617b      	str	r3, [r7, #20]
    if (pool_capacity > 0xFFFFU)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000798:	d302      	bcc.n	80007a0 <canardInit+0x50>
    {
        pool_capacity = 0xFFFFU;
 800079a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800079e:	617b      	str	r3, [r7, #20]
    }

    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	330c      	adds	r3, #12
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	b292      	uxth	r2, r2
 80007a8:	68b9      	ldr	r1, [r7, #8]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 f950 	bl	8001a50 <initPoolAllocator>
}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <canardGetLocalNodeID>:
        CANARD_ASSERT(false);
    }
}

uint8_t canardGetLocalNodeID(const CanardInstance* ins)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
    return ins->node_id;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781b      	ldrb	r3, [r3, #0]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <canardBroadcast>:
#endif
#if CANARD_ENABLE_CANFD
                        ,bool canfd
#endif
)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08e      	sub	sp, #56	@ 0x38
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	e9c7 2300 	strd	r2, r3, [r7]
    // create transfer object
    CanardTxTransfer transfer_object = {
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	2228      	movs	r2, #40	@ 0x28
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f005 ff71 	bl	80066cc <memset>
 80007ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80007ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80007f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80007f6:	843b      	strh	r3, [r7, #32]
 80007f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80007fc:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000800:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000806:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000808:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800080c:	863b      	strh	r3, [r7, #48]	@ 0x30
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };

    return canardBroadcastObj(ins, &transfer_object);
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	4619      	mov	r1, r3
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f000 f805 	bl	8000824 <canardBroadcastObj>
 800081a:	4603      	mov	r3, r0
}
 800081c:	4618      	mov	r0, r3
 800081e:	3738      	adds	r7, #56	@ 0x38
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <canardBroadcastObj>:

int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d106      	bne.n	8000844 <canardBroadcastObj+0x20>
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	8c1b      	ldrh	r3, [r3, #32]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <canardBroadcastObj+0x20>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800083e:	f06f 0301 	mvn.w	r3, #1
 8000842:	e070      	b.n	8000926 <canardBroadcastObj+0x102>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	7e1b      	ldrb	r3, [r3, #24]
 8000848:	2b1f      	cmp	r3, #31
 800084a:	d902      	bls.n	8000852 <canardBroadcastObj+0x2e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800084c:	f06f 0301 	mvn.w	r3, #1
 8000850:	e069      	b.n	8000926 <canardBroadcastObj+0x102>
    }

    uint32_t can_id = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0xFFFFU;
 8000856:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800085a:	827b      	strh	r3, [r7, #18]

    if (canardGetLocalNodeID(ins) == 0)
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ffab 	bl	80007b8 <canardGetLocalNodeID>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d138      	bne.n	80008da <canardBroadcastObj+0xb6>
    {
        if (transfer_object->payload_len > 7)
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	8c1b      	ldrh	r3, [r3, #32]
 800086c:	2b07      	cmp	r3, #7
 800086e:	d902      	bls.n	8000876 <canardBroadcastObj+0x52>
        {
            return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000870:	f06f 0303 	mvn.w	r3, #3
 8000874:	e057      	b.n	8000926 <canardBroadcastObj+0x102>
        }

        static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

        if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	8a1a      	ldrh	r2, [r3, #16]
 800087a:	4b2d      	ldr	r3, [pc, #180]	@ (8000930 <canardBroadcastObj+0x10c>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	4013      	ands	r3, r2
 8000880:	b29a      	uxth	r2, r3
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	8a1b      	ldrh	r3, [r3, #16]
 8000886:	429a      	cmp	r2, r3
 8000888:	d002      	beq.n	8000890 <canardBroadcastObj+0x6c>
        {
            return -CANARD_ERROR_INVALID_ARGUMENT;
 800088a:	f06f 0301 	mvn.w	r3, #1
 800088e:	e04a      	b.n	8000926 <canardBroadcastObj+0x102>
        }

        // anonymous transfer, random discriminator
        const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	69d9      	ldr	r1, [r3, #28]
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	8c1b      	ldrh	r3, [r3, #32]
 8000898:	461a      	mov	r2, r3
 800089a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800089e:	f001 f8ba 	bl	8001a16 <crcAdd>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 80008aa:	4013      	ands	r3, r2
 80008ac:	823b      	strh	r3, [r7, #16]
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	7e1b      	ldrb	r3, [r3, #24]
 80008b2:	061a      	lsls	r2, r3, #24
 80008b4:	8a3b      	ldrh	r3, [r7, #16]
 80008b6:	025b      	lsls	r3, r3, #9
 80008b8:	431a      	orrs	r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	8a19      	ldrh	r1, [r3, #16]
 80008be:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <canardBroadcastObj+0x10c>)
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	400b      	ands	r3, r1
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	021b      	lsls	r3, r3, #8
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 80008c8:	ea42 0403 	orr.w	r4, r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff73 	bl	80007b8 <canardGetLocalNodeID>
 80008d2:	4603      	mov	r3, r0
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 80008d4:	4323      	orrs	r3, r4
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	e012      	b.n	8000900 <canardBroadcastObj+0xdc>
    }
    else
    {
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	7e1b      	ldrb	r3, [r3, #24]
 80008de:	061a      	lsls	r2, r3, #24
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	8a1b      	ldrh	r3, [r3, #16]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	ea42 0403 	orr.w	r4, r2, r3
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ff64 	bl	80007b8 <canardGetLocalNodeID>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4323      	orrs	r3, r4
 80008f4:	617b      	str	r3, [r7, #20]
        crc = calculateCRC(transfer_object);
 80008f6:	6838      	ldr	r0, [r7, #0]
 80008f8:	f000 f840 	bl	800097c <calculateCRC>
 80008fc:	4603      	mov	r3, r0
 80008fe:	827b      	strh	r3, [r7, #18]
    }

    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000900:	8a7a      	ldrh	r2, [r7, #18]
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	6979      	ldr	r1, [r7, #20]
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f000 fc81 	bl	800120e <enqueueTxFrames>
 800090c:	4603      	mov	r3, r0
 800090e:	81fb      	strh	r3, [r7, #14]

    if (result > 0) {
 8000910:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000914:	2b00      	cmp	r3, #0
 8000916:	dd04      	ble.n	8000922 <canardBroadcastObj+0xfe>
        incrementTransferID(transfer_object->inout_transfer_id);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fc01 	bl	8001124 <incrementTransferID>
    }

    return result;
 8000922:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000926:	4618      	mov	r0, r3
 8000928:	371c      	adds	r7, #28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd90      	pop	{r4, r7, pc}
 800092e:	bf00      	nop
 8000930:	0800749e 	.word	0x0800749e

08000934 <canardBufferFromIdx>:
  CanardBufferBlock and CanartRxState structures to have the same size
  on 32 bit and 64 bit platforms, which allows for easier testing in
  simulator environments
 */
CANARD_INTERNAL CanardBufferBlock *canardBufferFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardBufferBlock *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardBufferBlock *)idx;
 800093e:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <canardBufferToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardBufferToIdx(CanardPoolAllocator* allocator, const CanardBufferBlock *buf)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)buf - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)buf;
 8000956:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <canardRxFromIdx>:

CANARD_INTERNAL CanardRxState *canardRxFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardRxState *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardRxState *)idx;
 800096e:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <calculateCRC>:
    return (canard_buffer_idx_t)rx;
#endif
}

CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0xFFFFU;
 8000984:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000988:	81fb      	strh	r3, [r7, #14]
#if CANARD_ENABLE_CANFD
    if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
        (transfer_object->payload_len > 63 && transfer_object->canfd))
#else
    if (transfer_object->payload_len > 7)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	8c1b      	ldrh	r3, [r3, #32]
 800098e:	2b07      	cmp	r3, #7
 8000990:	d913      	bls.n	80009ba <calculateCRC+0x3e>
#endif
    {
        crc = crcAddSignature(crc, transfer_object->data_type_signature);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000998:	89f9      	ldrh	r1, [r7, #14]
 800099a:	4608      	mov	r0, r1
 800099c:	f001 f80c 	bl	80019b8 <crcAddSignature>
 80009a0:	4603      	mov	r3, r0
 80009a2:	81fb      	strh	r3, [r7, #14]
        crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	69d9      	ldr	r1, [r3, #28]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	8c1b      	ldrh	r3, [r3, #32]
 80009ac:	461a      	mov	r2, r3
 80009ae:	89fb      	ldrh	r3, [r7, #14]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 f830 	bl	8001a16 <crcAdd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	81fb      	strh	r3, [r7, #14]
                crc = crcAddByte(crc, empty);
            }
        }
#endif
    }
    return crc;
 80009ba:	89fb      	ldrh	r3, [r7, #14]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <canardRequestOrRespond>:
#endif
#if CANARD_ENABLE_CANFD
                               ,bool canfd
#endif
)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08e      	sub	sp, #56	@ 0x38
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	e9c7 2300 	strd	r2, r3, [r7]
 80009d0:	460b      	mov	r3, r1
 80009d2:	72fb      	strb	r3, [r7, #11]
    CanardTxTransfer transfer_object = {
        .data_type_signature = data_type_signature,
        .data_type_id = data_type_id,
        .inout_transfer_id = inout_transfer_id,
        .priority = priority,
        .transfer_type = kind == CanardRequest ? CanardTransferTypeRequest : CanardTransferTypeResponse,
 80009d4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80009d8:	2b01      	cmp	r3, #1
 80009da:	bf0c      	ite	eq
 80009dc:	2301      	moveq	r3, #1
 80009de:	2300      	movne	r3, #0
 80009e0:	b2db      	uxtb	r3, r3
    CanardTxTransfer transfer_object = {
 80009e2:	743b      	strb	r3, [r7, #16]
 80009e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80009ec:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	843b      	strh	r3, [r7, #32]
 80009f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80009f8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80009fc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000a00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a04:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000a08:	863b      	strh	r3, [r7, #48]	@ 0x30
#endif
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };
    return canardRequestOrRespondObj(ins, destination_node_id, &transfer_object);
 8000a0a:	f107 0210 	add.w	r2, r7, #16
 8000a0e:	7afb      	ldrb	r3, [r7, #11]
 8000a10:	4619      	mov	r1, r3
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f000 f805 	bl	8000a22 <canardRequestOrRespondObj>
 8000a18:	4603      	mov	r3, r0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3738      	adds	r7, #56	@ 0x38
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <canardRequestOrRespondObj>:

int16_t canardRequestOrRespondObj(CanardInstance* ins, uint8_t destination_node_id, CanardTxTransfer* transfer_object)
{
 8000a22:	b590      	push	{r4, r7, lr}
 8000a24:	b087      	sub	sp, #28
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	60f8      	str	r0, [r7, #12]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	607a      	str	r2, [r7, #4]
 8000a2e:	72fb      	strb	r3, [r7, #11]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	69db      	ldr	r3, [r3, #28]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d106      	bne.n	8000a46 <canardRequestOrRespondObj+0x24>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	8c1b      	ldrh	r3, [r3, #32]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <canardRequestOrRespondObj+0x24>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000a40:	f06f 0301 	mvn.w	r3, #1
 8000a44:	e042      	b.n	8000acc <canardRequestOrRespondObj+0xaa>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	7e1b      	ldrb	r3, [r3, #24]
 8000a4a:	2b1f      	cmp	r3, #31
 8000a4c:	d902      	bls.n	8000a54 <canardRequestOrRespondObj+0x32>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000a4e:	f06f 0301 	mvn.w	r3, #1
 8000a52:	e03b      	b.n	8000acc <canardRequestOrRespondObj+0xaa>
    }
    if (canardGetLocalNodeID(ins) == 0)
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f7ff feaf 	bl	80007b8 <canardGetLocalNodeID>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <canardRequestOrRespondObj+0x44>
    {
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000a60:	f06f 0303 	mvn.w	r3, #3
 8000a64:	e032      	b.n	8000acc <canardRequestOrRespondObj+0xaa>
    }

    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	7e1b      	ldrb	r3, [r3, #24]
 8000a6a:	061a      	lsls	r2, r3, #24
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	8a1b      	ldrh	r3, [r3, #16]
 8000a70:	041b      	lsls	r3, r3, #16
 8000a72:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	03db      	lsls	r3, r3, #15
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000a7a:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8000a7c:	7afb      	ldrb	r3, [r7, #11]
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	ea42 0403 	orr.w	r4, r2, r3
                            (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	f7ff fe97 	bl	80007b8 <canardGetLocalNodeID>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4323      	orrs	r3, r4
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a92:	617b      	str	r3, [r7, #20]

    uint16_t crc = calculateCRC(transfer_object);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ff71 	bl	800097c <calculateCRC>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	827b      	strh	r3, [r7, #18]


    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000a9e:	8a7a      	ldrh	r2, [r7, #18]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6979      	ldr	r1, [r7, #20]
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f000 fbb2 	bl	800120e <enqueueTxFrames>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	823b      	strh	r3, [r7, #16]

    if (result > 0 && transfer_object->transfer_type == CanardTransferTypeRequest)                      // Response Transfer ID must not be altered
 8000aae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	dd08      	ble.n	8000ac8 <canardRequestOrRespondObj+0xa6>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d104      	bne.n	8000ac8 <canardRequestOrRespondObj+0xa6>
    {
        incrementTransferID(transfer_object->inout_transfer_id);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fb2e 	bl	8001124 <incrementTransferID>
    }

    return result;
 8000ac8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	371c      	adds	r7, #28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd90      	pop	{r4, r7, pc}

08000ad4 <canardPeekTxQueue>:

CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
    if (ins->tx_queue == NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d101      	bne.n	8000ae8 <canardPeekTxQueue+0x14>
    {
        return NULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	e002      	b.n	8000aee <canardPeekTxQueue+0x1a>
    }
    return &ins->tx_queue->frame;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aec:	3304      	adds	r3, #4
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <canardPopTxQueue>:

void canardPopTxQueue(CanardInstance* ins)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b084      	sub	sp, #16
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = ins->tx_queue;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b06:	60fb      	str	r3, [r7, #12]
    ins->tx_queue = item->next;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	625a      	str	r2, [r3, #36]	@ 0x24
    freeBlock(&ins->allocator, item);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	330c      	adds	r3, #12
 8000b14:	68f9      	ldr	r1, [r7, #12]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fffa 	bl	8001b10 <freeBlock>
}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <canardCleanupStaleTransfers>:
    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
    return CANARD_OK;
}

void canardCleanupStaleTransfers(CanardInstance* ins, uint64_t current_time_usec)
{
 8000b24:	b5b0      	push	{r4, r5, r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	e9c7 2300 	strd	r2, r3, [r7]
    CanardRxState* prev = ins->rx_states, * state = ins->rx_states;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	6a1b      	ldr	r3, [r3, #32]
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	613b      	str	r3, [r7, #16]

    while (state != NULL)
 8000b3c:	e053      	b.n	8000be6 <canardCleanupStaleTransfers+0xc2>
    {
        if ((current_time_usec - state->timestamp_usec) > TRANSFER_TIMEOUT_USEC)
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000b44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b48:	1a84      	subs	r4, r0, r2
 8000b4a:	eb61 0503 	sbc.w	r5, r1, r3
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <canardCleanupStaleTransfers+0xd4>)
 8000b50:	429c      	cmp	r4, r3
 8000b52:	f175 0300 	sbcs.w	r3, r5, #0
 8000b56:	d33a      	bcc.n	8000bce <canardCleanupStaleTransfers+0xaa>
        {
            if (state == ins->rx_states)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	6a1b      	ldr	r3, [r3, #32]
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d11c      	bne.n	8000b9c <canardCleanupStaleTransfers+0x78>
            {
                releaseStatePayload(ins, state);
 8000b62:	6939      	ldr	r1, [r7, #16]
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f000 fd17 	bl	8001598 <releaseStatePayload>
                ins->rx_states = canardRxFromIdx(&ins->allocator, ins->rx_states->next);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f103 020c 	add.w	r2, r3, #12
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	6a1b      	ldr	r3, [r3, #32]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4619      	mov	r1, r3
 8000b78:	4610      	mov	r0, r2
 8000b7a:	f7ff fef3 	bl	8000964 <canardRxFromIdx>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	621a      	str	r2, [r3, #32]
                freeBlock(&ins->allocator, state);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	330c      	adds	r3, #12
 8000b88:	6939      	ldr	r1, [r7, #16]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 ffc0 	bl	8001b10 <freeBlock>
                state = ins->rx_states;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	6a1b      	ldr	r3, [r3, #32]
 8000b94:	613b      	str	r3, [r7, #16]
                prev = state;
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	e024      	b.n	8000be6 <canardCleanupStaleTransfers+0xc2>
            }
            else
            {
                releaseStatePayload(ins, state);
 8000b9c:	6939      	ldr	r1, [r7, #16]
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f000 fcfa 	bl	8001598 <releaseStatePayload>
                prev->next = state->next;
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	601a      	str	r2, [r3, #0]
                freeBlock(&ins->allocator, state);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	330c      	adds	r3, #12
 8000bb0:	6939      	ldr	r1, [r7, #16]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 ffac 	bl	8001b10 <freeBlock>
                state = canardRxFromIdx(&ins->allocator, prev->next);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f103 020c 	add.w	r2, r3, #12
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	f7ff fecd 	bl	8000964 <canardRxFromIdx>
 8000bca:	6138      	str	r0, [r7, #16]
 8000bcc:	e00b      	b.n	8000be6 <canardCleanupStaleTransfers+0xc2>
            }
        }
        else
        {
            prev = state;
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	617b      	str	r3, [r7, #20]
            state = canardRxFromIdx(&ins->allocator, state->next);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f103 020c 	add.w	r2, r3, #12
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4610      	mov	r0, r2
 8000be0:	f7ff fec0 	bl	8000964 <canardRxFromIdx>
 8000be4:	6138      	str	r0, [r7, #16]
    while (state != NULL)
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1a8      	bne.n	8000b3e <canardCleanupStaleTransfers+0x1a>
            prev_item = item;
            item = item->next;
        }
    }
#endif
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	001e8481 	.word	0x001e8481

08000bfc <canardDecodeScalar>:
int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                           uint32_t bit_offset,
                           uint8_t bit_length,
                           bool value_is_signed,
                           void* out_value)
{
 8000bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c00:	b08d      	sub	sp, #52	@ 0x34
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	61f8      	str	r0, [r7, #28]
 8000c06:	61b9      	str	r1, [r7, #24]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	75fb      	strb	r3, [r7, #23]
 8000c10:	4613      	mov	r3, r2
 8000c12:	75bb      	strb	r3, [r7, #22]
    if (transfer == NULL || out_value == NULL)
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d002      	beq.n	8000c20 <canardDecodeScalar+0x24>
 8000c1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <canardDecodeScalar+0x2a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000c20:	f06f 0301 	mvn.w	r3, #1
 8000c24:	e16e      	b.n	8000f04 <canardDecodeScalar+0x308>
    }

    if (bit_length < 1 || bit_length > 64)
 8000c26:	7dfb      	ldrb	r3, [r7, #23]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <canardDecodeScalar+0x36>
 8000c2c:	7dfb      	ldrb	r3, [r7, #23]
 8000c2e:	2b40      	cmp	r3, #64	@ 0x40
 8000c30:	d902      	bls.n	8000c38 <canardDecodeScalar+0x3c>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000c32:	f06f 0301 	mvn.w	r3, #1
 8000c36:	e165      	b.n	8000f04 <canardDecodeScalar+0x308>
    }

    if (bit_length == 1 && value_is_signed)
 8000c38:	7dfb      	ldrb	r3, [r7, #23]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d105      	bne.n	8000c4a <canardDecodeScalar+0x4e>
 8000c3e:	7dbb      	ldrb	r3, [r7, #22]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <canardDecodeScalar+0x4e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000c44:	f06f 0301 	mvn.w	r3, #1
 8000c48:	e15c      	b.n	8000f04 <canardDecodeScalar+0x308>
        uint64_t u64;
        int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));   // This is important
 8000c4a:	f107 0320 	add.w	r3, r7, #32
 8000c4e:	2208      	movs	r2, #8
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f005 fd3a 	bl	80066cc <memset>

    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 8000c58:	f107 0320 	add.w	r3, r7, #32
 8000c5c:	7dfa      	ldrb	r2, [r7, #23]
 8000c5e:	69b9      	ldr	r1, [r7, #24]
 8000c60:	69f8      	ldr	r0, [r7, #28]
 8000c62:	f000 fd44 	bl	80016ee <descatterTransferPayload>
 8000c66:	4603      	mov	r3, r0
 8000c68:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (result <= 0)
 8000c6a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	dc02      	bgt.n	8000c78 <canardDecodeScalar+0x7c>
    {
        return result;
 8000c72:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8000c76:	e145      	b.n	8000f04 <canardDecodeScalar+0x308>
     * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
     * Extra most significant bits will be filled with zeroes, which is fine.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8000c78:	7dfb      	ldrb	r3, [r7, #23]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d018      	beq.n	8000cb6 <canardDecodeScalar+0xba>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 8000c84:	7dfb      	ldrb	r3, [r7, #23]
 8000c86:	08db      	lsrs	r3, r3, #3
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	3320      	adds	r3, #32
 8000c8c:	f107 0210 	add.w	r2, r7, #16
 8000c90:	4413      	add	r3, r2
 8000c92:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000c96:	461a      	mov	r2, r3
 8000c98:	7dfb      	ldrb	r3, [r7, #23]
 8000c9a:	425b      	negs	r3, r3
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	411a      	asrs	r2, r3
 8000ca2:	7dfb      	ldrb	r3, [r7, #23]
 8000ca4:	08db      	lsrs	r3, r3, #3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	3320      	adds	r3, #32
 8000cac:	f107 0110 	add.w	r1, r7, #16
 8000cb0:	440b      	add	r3, r1
 8000cb2:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
     */
    uint8_t std_byte_length = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 8000cbc:	7dfb      	ldrb	r3, [r7, #23]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d103      	bne.n	8000cca <canardDecodeScalar+0xce>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000cc8:	e01e      	b.n	8000d08 <canardDecodeScalar+0x10c>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 8000cca:	7dfb      	ldrb	r3, [r7, #23]
 8000ccc:	2b08      	cmp	r3, #8
 8000cce:	d803      	bhi.n	8000cd8 <canardDecodeScalar+0xdc>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000cd6:	e017      	b.n	8000d08 <canardDecodeScalar+0x10c>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 8000cd8:	7dfb      	ldrb	r3, [r7, #23]
 8000cda:	2b10      	cmp	r3, #16
 8000cdc:	d803      	bhi.n	8000ce6 <canardDecodeScalar+0xea>
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ce4:	e010      	b.n	8000d08 <canardDecodeScalar+0x10c>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 8000ce6:	7dfb      	ldrb	r3, [r7, #23]
 8000ce8:	2b20      	cmp	r3, #32
 8000cea:	d803      	bhi.n	8000cf4 <canardDecodeScalar+0xf8>
 8000cec:	2304      	movs	r3, #4
 8000cee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000cf2:	e009      	b.n	8000d08 <canardDecodeScalar+0x10c>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 8000cf4:	7dfb      	ldrb	r3, [r7, #23]
 8000cf6:	2b40      	cmp	r3, #64	@ 0x40
 8000cf8:	d803      	bhi.n	8000d02 <canardDecodeScalar+0x106>
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000d00:	e002      	b.n	8000d08 <canardDecodeScalar+0x10c>
    else
    {
        CANARD_ASSERT(false);
        return -CANARD_ERROR_INTERNAL;
 8000d02:	f06f 0308 	mvn.w	r3, #8
 8000d06:	e0fd      	b.n	8000f04 <canardDecodeScalar+0x308>
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

    /*
     * Flipping the byte order if needed.
     */
    if (isBigEndian())
 8000d08:	f000 fde6 	bl	80018d8 <isBigEndian>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d007      	beq.n	8000d22 <canardDecodeScalar+0x126>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 8000d12:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000d16:	f107 0320 	add.w	r3, r7, #32
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fdec 	bl	80018fa <swapByteOrder>

    /*
     * Extending the sign bit if needed. I miss templates.
     * Note that we operate on unsigned values in order to avoid undefined behaviors.
     */
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 8000d22:	7dbb      	ldrb	r3, [r7, #22]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f000 809b 	beq.w	8000e60 <canardDecodeScalar+0x264>
 8000d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d2e:	00da      	lsls	r2, r3, #3
 8000d30:	7dfb      	ldrb	r3, [r7, #23]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	f000 8094 	beq.w	8000e60 <canardDecodeScalar+0x264>
    {
        if (bit_length <= 8)
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
 8000d3a:	2b08      	cmp	r3, #8
 8000d3c:	d819      	bhi.n	8000d72 <canardDecodeScalar+0x176>
        {
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 8000d3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d42:	461a      	mov	r2, r3
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 8085 	beq.w	8000e60 <canardDecodeScalar+0x264>
            {
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 8000d56:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d5a:	7dfb      	ldrb	r3, [r7, #23]
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	425b      	negs	r3, r3
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	f887 3020 	strb.w	r3, [r7, #32]
 8000d70:	e076      	b.n	8000e60 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 16)
 8000d72:	7dfb      	ldrb	r3, [r7, #23]
 8000d74:	2b10      	cmp	r3, #16
 8000d76:	d815      	bhi.n	8000da4 <canardDecodeScalar+0x1a8>
        {
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 8000d78:	8c3b      	ldrh	r3, [r7, #32]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	fa22 f303 	lsr.w	r3, r2, r3
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d069      	beq.n	8000e60 <canardDecodeScalar+0x264>
            {
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 8000d8c:	8c3a      	ldrh	r2, [r7, #32]
 8000d8e:	7dfb      	ldrb	r3, [r7, #23]
 8000d90:	2101      	movs	r1, #1
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	425b      	negs	r3, r3
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	843b      	strh	r3, [r7, #32]
 8000da2:	e05d      	b.n	8000e60 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 32)
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	2b20      	cmp	r3, #32
 8000da8:	d811      	bhi.n	8000dce <canardDecodeScalar+0x1d2>
        {
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 8000daa:	6a3a      	ldr	r2, [r7, #32]
 8000dac:	7dfb      	ldrb	r3, [r7, #23]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	fa22 f303 	lsr.w	r3, r2, r3
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d051      	beq.n	8000e60 <canardDecodeScalar+0x264>
            {
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 8000dbc:	6a3a      	ldr	r2, [r7, #32]
 8000dbe:	7dfb      	ldrb	r3, [r7, #23]
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	623b      	str	r3, [r7, #32]
 8000dcc:	e048      	b.n	8000e60 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length < 64)   // Strictly less, this is not a typo
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
 8000dd0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dd2:	d842      	bhi.n	8000e5a <canardDecodeScalar+0x25e>
        {
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 8000dd4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000dd8:	7df9      	ldrb	r1, [r7, #23]
 8000dda:	1e48      	subs	r0, r1, #1
 8000ddc:	f1c0 0620 	rsb	r6, r0, #32
 8000de0:	f1a0 0120 	sub.w	r1, r0, #32
 8000de4:	fa22 f400 	lsr.w	r4, r2, r0
 8000de8:	fa03 f606 	lsl.w	r6, r3, r6
 8000dec:	4334      	orrs	r4, r6
 8000dee:	fa23 f101 	lsr.w	r1, r3, r1
 8000df2:	430c      	orrs	r4, r1
 8000df4:	fa23 f500 	lsr.w	r5, r3, r0
 8000df8:	f004 0301 	and.w	r3, r4, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000e06:	460b      	mov	r3, r1
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	d029      	beq.n	8000e60 <canardDecodeScalar+0x264>
            {
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 8000e0c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000e10:	7df9      	ldrb	r1, [r7, #23]
 8000e12:	f04f 0201 	mov.w	r2, #1
 8000e16:	f04f 0300 	mov.w	r3, #0
 8000e1a:	f1a1 0620 	sub.w	r6, r1, #32
 8000e1e:	f1c1 0020 	rsb	r0, r1, #32
 8000e22:	fa03 f901 	lsl.w	r9, r3, r1
 8000e26:	fa02 f606 	lsl.w	r6, r2, r6
 8000e2a:	ea49 0906 	orr.w	r9, r9, r6
 8000e2e:	fa22 f000 	lsr.w	r0, r2, r0
 8000e32:	ea49 0900 	orr.w	r9, r9, r0
 8000e36:	fa02 f801 	lsl.w	r8, r2, r1
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f1d8 0a00 	rsbs	sl, r8, #0
 8000e40:	eb63 0b09 	sbc.w	fp, r3, r9
 8000e44:	ea44 030a 	orr.w	r3, r4, sl
 8000e48:	603b      	str	r3, [r7, #0]
 8000e4a:	ea45 030b 	orr.w	r3, r5, fp
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000e54:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8000e58:	e002      	b.n	8000e60 <canardDecodeScalar+0x264>
            }
        }
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8000e5a:	f06f 0308 	mvn.w	r3, #8
 8000e5e:	e051      	b.n	8000f04 <canardDecodeScalar+0x308>
    }

    /*
     * Copying the result out.
     */
    if (value_is_signed)
 8000e60:	7dbb      	ldrb	r3, [r7, #22]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d022      	beq.n	8000eac <canardDecodeScalar+0x2b0>
    {
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 8000e66:	7dfb      	ldrb	r3, [r7, #23]
 8000e68:	2b08      	cmp	r3, #8
 8000e6a:	d804      	bhi.n	8000e76 <canardDecodeScalar+0x27a>
 8000e6c:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8000e70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e72:	701a      	strb	r2, [r3, #0]
 8000e74:	e044      	b.n	8000f00 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 8000e76:	7dfb      	ldrb	r3, [r7, #23]
 8000e78:	2b10      	cmp	r3, #16
 8000e7a:	d804      	bhi.n	8000e86 <canardDecodeScalar+0x28a>
 8000e7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000e80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e82:	801a      	strh	r2, [r3, #0]
 8000e84:	e03c      	b.n	8000f00 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 8000e86:	7dfb      	ldrb	r3, [r7, #23]
 8000e88:	2b20      	cmp	r3, #32
 8000e8a:	d803      	bhi.n	8000e94 <canardDecodeScalar+0x298>
 8000e8c:	6a3a      	ldr	r2, [r7, #32]
 8000e8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e035      	b.n	8000f00 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 8000e94:	7dfb      	ldrb	r3, [r7, #23]
 8000e96:	2b40      	cmp	r3, #64	@ 0x40
 8000e98:	d805      	bhi.n	8000ea6 <canardDecodeScalar+0x2aa>
 8000e9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e9e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8000ea0:	e9c1 2300 	strd	r2, r3, [r1]
 8000ea4:	e02c      	b.n	8000f00 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8000ea6:	f06f 0308 	mvn.w	r3, #8
 8000eaa:	e02b      	b.n	8000f04 <canardDecodeScalar+0x308>
        }
    }
    else
    {
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d104      	bne.n	8000ebc <canardDecodeScalar+0x2c0>
 8000eb2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000eb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000eb8:	701a      	strb	r2, [r3, #0]
 8000eba:	e021      	b.n	8000f00 <canardDecodeScalar+0x304>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
 8000ebe:	2b08      	cmp	r3, #8
 8000ec0:	d804      	bhi.n	8000ecc <canardDecodeScalar+0x2d0>
 8000ec2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ec6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ec8:	701a      	strb	r2, [r3, #0]
 8000eca:	e019      	b.n	8000f00 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
 8000ece:	2b10      	cmp	r3, #16
 8000ed0:	d803      	bhi.n	8000eda <canardDecodeScalar+0x2de>
 8000ed2:	8c3a      	ldrh	r2, [r7, #32]
 8000ed4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ed6:	801a      	strh	r2, [r3, #0]
 8000ed8:	e012      	b.n	8000f00 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
 8000edc:	2b20      	cmp	r3, #32
 8000ede:	d803      	bhi.n	8000ee8 <canardDecodeScalar+0x2ec>
 8000ee0:	6a3a      	ldr	r2, [r7, #32]
 8000ee2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	e00b      	b.n	8000f00 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 8000ee8:	7dfb      	ldrb	r3, [r7, #23]
 8000eea:	2b40      	cmp	r3, #64	@ 0x40
 8000eec:	d805      	bhi.n	8000efa <canardDecodeScalar+0x2fe>
 8000eee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ef2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8000ef4:	e9c1 2300 	strd	r2, r3, [r1]
 8000ef8:	e002      	b.n	8000f00 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8000efa:	f06f 0308 	mvn.w	r3, #8
 8000efe:	e001      	b.n	8000f04 <canardDecodeScalar+0x308>
        }
    }

    CANARD_ASSERT(result <= bit_length);
    CANARD_ASSERT(result > 0);
    return result;
 8000f00:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3734      	adds	r7, #52	@ 0x34
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000f0e <canardEncodeScalar>:

void canardEncodeScalar(void* destination,
                        uint32_t bit_offset,
                        uint8_t bit_length,
                        const void* value)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b08a      	sub	sp, #40	@ 0x28
 8000f12:	af02      	add	r7, sp, #8
 8000f14:	60f8      	str	r0, [r7, #12]
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	71fb      	strb	r3, [r7, #7]
     * Maybe not the best solution, but it simplifies the API.
     */
    CANARD_ASSERT(destination != NULL);
    CANARD_ASSERT(value != NULL);

    if (bit_length > 64)
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b40      	cmp	r3, #64	@ 0x40
 8000f22:	d901      	bls.n	8000f28 <canardEncodeScalar+0x1a>
    {
        CANARD_ASSERT(false);
        bit_length = 64;
 8000f24:	2340      	movs	r3, #64	@ 0x40
 8000f26:	71fb      	strb	r3, [r7, #7]
    }

    if (bit_length < 1)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <canardEncodeScalar+0x24>
    {
        CANARD_ASSERT(false);
        bit_length = 1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	71fb      	strb	r3, [r7, #7]
        uint32_t u32;
        uint64_t u64;
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	2208      	movs	r2, #8
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f005 fbc6 	bl	80066cc <memset>

    uint8_t std_byte_length = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	77fb      	strb	r3, [r7, #31]

    // Extra most significant bits can be safely ignored here.
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d105      	bne.n	8000f56 <canardEncodeScalar+0x48>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	77fb      	strb	r3, [r7, #31]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	743b      	strb	r3, [r7, #16]
 8000f54:	e024      	b.n	8000fa0 <canardEncodeScalar+0x92>
    else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	d805      	bhi.n	8000f68 <canardEncodeScalar+0x5a>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	77fb      	strb	r3, [r7, #31]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	743b      	strb	r3, [r7, #16]
 8000f66:	e01b      	b.n	8000fa0 <canardEncodeScalar+0x92>
    else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b10      	cmp	r3, #16
 8000f6c:	d805      	bhi.n	8000f7a <canardEncodeScalar+0x6c>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	77fb      	strb	r3, [r7, #31]
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	823b      	strh	r3, [r7, #16]
 8000f78:	e012      	b.n	8000fa0 <canardEncodeScalar+0x92>
    else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b20      	cmp	r3, #32
 8000f7e:	d805      	bhi.n	8000f8c <canardEncodeScalar+0x7e>
 8000f80:	2304      	movs	r3, #4
 8000f82:	77fb      	strb	r3, [r7, #31]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	e009      	b.n	8000fa0 <canardEncodeScalar+0x92>
    else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b40      	cmp	r3, #64	@ 0x40
 8000f90:	d806      	bhi.n	8000fa0 <canardEncodeScalar+0x92>
 8000f92:	2308      	movs	r3, #8
 8000f94:	77fb      	strb	r3, [r7, #31]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
            storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
        }
    }
#endif

    if (isBigEndian())
 8000fa0:	f000 fc9a 	bl	80018d8 <isBigEndian>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <canardEncodeScalar+0xaa>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 8000faa:	7ffa      	ldrb	r2, [r7, #31]
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fca1 	bl	80018fa <swapByteOrder>
     * Extra least significant bits will be filled with zeroes, which is fine.
     * Extra most significant bits will be discarded here.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d014      	beq.n	8000fee <canardEncodeScalar+0xe0>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	08db      	lsrs	r3, r3, #3
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	3320      	adds	r3, #32
 8000fcc:	443b      	add	r3, r7
 8000fce:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	425b      	negs	r3, r3
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	08db      	lsrs	r3, r3, #3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	3320      	adds	r3, #32
 8000fe8:	443b      	add	r3, r7
 8000fea:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Now, the storage contains properly serialized scalar. Copying it out.
     */
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 8000fee:	79fa      	ldrb	r2, [r7, #7]
 8000ff0:	f107 0010 	add.w	r0, r7, #16
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	f000 fb00 	bl	8001600 <copyBitArray>
}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <canardConvertNativeFloatToFloat16>:
{
    return ins->allocator.statistics;
}

uint16_t canardConvertNativeFloatToFloat16(float value)
{
 8001008:	b480      	push	{r7}
 800100a:	b08b      	sub	sp, #44	@ 0x2c
 800100c:	af00      	add	r7, sp, #0
 800100e:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        uint32_t u;
        float f;
    };

    const union FP32 f32inf = { 255UL << 23U };
 8001012:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8001016:	617b      	str	r3, [r7, #20]
    const union FP32 f16inf = { 31UL << 23U };
 8001018:	f04f 6378 	mov.w	r3, #260046848	@ 0xf800000
 800101c:	613b      	str	r3, [r7, #16]
    const union FP32 magic = { 15UL << 23U };
 800101e:	f04f 63f0 	mov.w	r3, #125829120	@ 0x7800000
 8001022:	60fb      	str	r3, [r7, #12]
    const uint32_t sign_mask = 0x80000000UL;
 8001024:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001028:	623b      	str	r3, [r7, #32]
    const uint32_t round_mask = 0xFFFFF000UL;
 800102a:	4b21      	ldr	r3, [pc, #132]	@ (80010b0 <canardConvertNativeFloatToFloat16+0xa8>)
 800102c:	61fb      	str	r3, [r7, #28]

    union FP32 in;
    in.f = value;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60bb      	str	r3, [r7, #8]
    uint32_t sign = in.u & sign_mask;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	6a3a      	ldr	r2, [r7, #32]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
    in.u ^= sign;
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	4053      	eors	r3, r2
 8001040:	60bb      	str	r3, [r7, #8]

    uint16_t out = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (in.u >= f32inf.u)
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	429a      	cmp	r2, r3
 800104c:	d30a      	bcc.n	8001064 <canardConvertNativeFloatToFloat16+0x5c>
    {
        out = (in.u > f32inf.u) ? (uint16_t)0x7FFFU : (uint16_t)0x7C00U;
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	429a      	cmp	r2, r3
 8001054:	d902      	bls.n	800105c <canardConvertNativeFloatToFloat16+0x54>
 8001056:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800105a:	e001      	b.n	8001060 <canardConvertNativeFloatToFloat16+0x58>
 800105c:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 8001060:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001062:	e018      	b.n	8001096 <canardConvertNativeFloatToFloat16+0x8e>
    }
    else
    {
        in.u &= round_mask;
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
        in.f *= magic.f;
 800106c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001070:	edd7 7a03 	vldr	s15, [r7, #12]
 8001074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001078:	edc7 7a02 	vstr	s15, [r7, #8]
        in.u -= round_mask;
 800107c:	68ba      	ldr	r2, [r7, #8]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	60bb      	str	r3, [r7, #8]
        if (in.u > f16inf.u)
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	429a      	cmp	r2, r3
 800108a:	d901      	bls.n	8001090 <canardConvertNativeFloatToFloat16+0x88>
        {
            in.u = f16inf.u;
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	60bb      	str	r3, [r7, #8]
        }
        out = (uint16_t)(in.u >> 13U);
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	0b5b      	lsrs	r3, r3, #13
 8001094:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    out |= (uint16_t)(sign >> 16U);
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	0c1b      	lsrs	r3, r3, #16
 800109a:	b29a      	uxth	r2, r3
 800109c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800109e:	4313      	orrs	r3, r2
 80010a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    return out;
 80010a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	372c      	adds	r7, #44	@ 0x2c
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	fffff000 	.word	0xfffff000

080010b4 <canardConvertFloat16ToNativeFloat>:

float canardConvertFloat16ToNativeFloat(uint16_t value)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	80fb      	strh	r3, [r7, #6]
    {
        uint32_t u;
        float f;
    };

    const union FP32 magic = { (254UL - 15UL) << 23U };
 80010be:	f04f 43ef 	mov.w	r3, #2004877312	@ 0x77800000
 80010c2:	617b      	str	r3, [r7, #20]
    const union FP32 was_inf_nan = { (127UL + 16UL) << 23U };
 80010c4:	f04f 438f 	mov.w	r3, #1199570944	@ 0x47800000
 80010c8:	613b      	str	r3, [r7, #16]
    union FP32 out;

    out.u = (value & 0x7FFFU) << 13U;
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	035a      	lsls	r2, r3, #13
 80010ce:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <canardConvertFloat16ToNativeFloat+0x6c>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
    out.f *= magic.f;
 80010d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80010d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80010dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e0:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.f >= was_inf_nan.f)
 80010e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80010e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f4:	db03      	blt.n	80010fe <canardConvertFloat16ToNativeFloat+0x4a>
    {
        out.u |= 255UL << 23U;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f043 43ff 	orr.w	r3, r3, #2139095040	@ 0x7f800000
 80010fc:	60fb      	str	r3, [r7, #12]
    }
    out.u |= (value & 0x8000UL) << 16U;
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	041b      	lsls	r3, r3, #16
 8001104:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001108:	4313      	orrs	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]

    return out.f;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	ee07 3a90 	vmov	s15, r3
}
 8001112:	eeb0 0a67 	vmov.f32	s0, s15
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	0fffe000 	.word	0x0fffe000

08001124 <incrementTransferID>:
    }
    return d;
}

CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(transfer_id != NULL);

    (*transfer_id)++;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	b2da      	uxtb	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	701a      	strb	r2, [r3, #0]
    if (*transfer_id >= 32)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b1f      	cmp	r3, #31
 800113e:	d902      	bls.n	8001146 <incrementTransferID+0x22>
    {
        *transfer_id = 0;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
    }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <dlcToDataLength>:

CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	80fb      	strh	r3, [r7, #6]
    /*
    Data Length Code      9  10  11  12  13  14  15
    Number of data bytes 12  16  20  24  32  48  64
    */
    if (dlc <= 8) {
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	2b08      	cmp	r3, #8
 8001160:	d801      	bhi.n	8001166 <dlcToDataLength+0x14>
        return dlc;
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	e01e      	b.n	80011a4 <dlcToDataLength+0x52>
    } else if (dlc == 9) {
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	2b09      	cmp	r3, #9
 800116a:	d101      	bne.n	8001170 <dlcToDataLength+0x1e>
        return 12;
 800116c:	230c      	movs	r3, #12
 800116e:	e019      	b.n	80011a4 <dlcToDataLength+0x52>
    } else if (dlc == 10) {
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	2b0a      	cmp	r3, #10
 8001174:	d101      	bne.n	800117a <dlcToDataLength+0x28>
        return 16;
 8001176:	2310      	movs	r3, #16
 8001178:	e014      	b.n	80011a4 <dlcToDataLength+0x52>
    } else if (dlc == 11) {
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	2b0b      	cmp	r3, #11
 800117e:	d101      	bne.n	8001184 <dlcToDataLength+0x32>
        return 20;
 8001180:	2314      	movs	r3, #20
 8001182:	e00f      	b.n	80011a4 <dlcToDataLength+0x52>
    } else if (dlc == 12) {
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	2b0c      	cmp	r3, #12
 8001188:	d101      	bne.n	800118e <dlcToDataLength+0x3c>
        return 24;
 800118a:	2318      	movs	r3, #24
 800118c:	e00a      	b.n	80011a4 <dlcToDataLength+0x52>
    } else if (dlc == 13) {
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	2b0d      	cmp	r3, #13
 8001192:	d101      	bne.n	8001198 <dlcToDataLength+0x46>
        return 32;
 8001194:	2320      	movs	r3, #32
 8001196:	e005      	b.n	80011a4 <dlcToDataLength+0x52>
    } else if (dlc == 14) {
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	2b0e      	cmp	r3, #14
 800119c:	d101      	bne.n	80011a2 <dlcToDataLength+0x50>
        return 48;
 800119e:	2330      	movs	r3, #48	@ 0x30
 80011a0:	e000      	b.n	80011a4 <dlcToDataLength+0x52>
    }
    return 64;
 80011a2:	2340      	movs	r3, #64	@ 0x40
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <dataLengthToDlc>:

CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
    if (data_length <= 8) {
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d801      	bhi.n	80011c4 <dataLengthToDlc+0x14>
        return data_length;
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	e01e      	b.n	8001202 <dataLengthToDlc+0x52>
    } else if (data_length <= 12) {
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	2b0c      	cmp	r3, #12
 80011c8:	d801      	bhi.n	80011ce <dataLengthToDlc+0x1e>
        return 9;
 80011ca:	2309      	movs	r3, #9
 80011cc:	e019      	b.n	8001202 <dataLengthToDlc+0x52>
    } else if (data_length <= 16) {
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	2b10      	cmp	r3, #16
 80011d2:	d801      	bhi.n	80011d8 <dataLengthToDlc+0x28>
        return 10;
 80011d4:	230a      	movs	r3, #10
 80011d6:	e014      	b.n	8001202 <dataLengthToDlc+0x52>
    } else if (data_length <= 20) {
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	2b14      	cmp	r3, #20
 80011dc:	d801      	bhi.n	80011e2 <dataLengthToDlc+0x32>
        return 11;
 80011de:	230b      	movs	r3, #11
 80011e0:	e00f      	b.n	8001202 <dataLengthToDlc+0x52>
    } else if (data_length <= 24) {
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	2b18      	cmp	r3, #24
 80011e6:	d801      	bhi.n	80011ec <dataLengthToDlc+0x3c>
        return 12;
 80011e8:	230c      	movs	r3, #12
 80011ea:	e00a      	b.n	8001202 <dataLengthToDlc+0x52>
    } else if (data_length <= 32) {
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	2b20      	cmp	r3, #32
 80011f0:	d801      	bhi.n	80011f6 <dataLengthToDlc+0x46>
        return 13;
 80011f2:	230d      	movs	r3, #13
 80011f4:	e005      	b.n	8001202 <dataLengthToDlc+0x52>
    } else if (data_length <= 48) {
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	2b30      	cmp	r3, #48	@ 0x30
 80011fa:	d801      	bhi.n	8001200 <dataLengthToDlc+0x50>
        return 14;
 80011fc:	230e      	movs	r3, #14
 80011fe:	e000      	b.n	8001202 <dataLengthToDlc+0x52>
    }
    return 15;
 8001200:	230f      	movs	r3, #15
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <enqueueTxFrames>:
CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                        uint32_t can_id,
                                        uint16_t crc,
                                        CanardTxTransfer* transfer
)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b08a      	sub	sp, #40	@ 0x28
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4613      	mov	r3, r2
 800121c:	80fb      	strh	r3, [r7, #6]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

    if (transfer->inout_transfer_id == NULL)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d102      	bne.n	800122c <enqueueTxFrames+0x1e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001226:	f06f 0301 	mvn.w	r3, #1
 800122a:	e0f9      	b.n	8001420 <enqueueTxFrames+0x212>
    }

    if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	8c1b      	ldrh	r3, [r3, #32]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d006      	beq.n	8001242 <enqueueTxFrames+0x34>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <enqueueTxFrames+0x34>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800123c:	f06f 0301 	mvn.w	r3, #1
 8001240:	e0ee      	b.n	8001420 <enqueueTxFrames+0x212>
    }

    int16_t result = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	84fb      	strh	r3, [r7, #38]	@ 0x26
#if CANARD_ENABLE_CANFD
    uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
#else
    uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 8001246:	2308      	movs	r3, #8
 8001248:	77fb      	strb	r3, [r7, #31]
#endif
    if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	8c1a      	ldrh	r2, [r3, #32]
 800124e:	7ffb      	ldrb	r3, [r7, #31]
 8001250:	b29b      	uxth	r3, r3
 8001252:	429a      	cmp	r2, r3
 8001254:	d24b      	bcs.n	80012ee <enqueueTxFrames+0xe0>
    {
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	330c      	adds	r3, #12
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f929 	bl	80014b2 <createTxItem>
 8001260:	6178      	str	r0, [r7, #20]
        if (queue_item == NULL)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <enqueueTxFrames+0x60>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8001268:	f06f 0302 	mvn.w	r3, #2
 800126c:	e0d8      	b.n	8001420 <enqueueTxFrames+0x212>
        }

        memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f103 0008 	add.w	r0, r3, #8
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	69d9      	ldr	r1, [r3, #28]
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	8c1b      	ldrh	r3, [r3, #32]
 800127c:	461a      	mov	r2, r3
 800127e:	f005 fac0 	bl	8006802 <memcpy>

        transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	8c1b      	ldrh	r3, [r3, #32]
 8001286:	3301      	adds	r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff90 	bl	80011b0 <dataLengthToDlc>
 8001290:	4603      	mov	r3, r0
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff5d 	bl	8001152 <dlcToDataLength>
 8001298:	4603      	mov	r3, r0
 800129a:	3b01      	subs	r3, #1
 800129c:	b29a      	uxth	r2, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	841a      	strh	r2, [r3, #32]
        queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	8c1b      	ldrh	r3, [r3, #32]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	3301      	adds	r3, #1
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	741a      	strb	r2, [r3, #16]
        queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	8c12      	ldrh	r2, [r2, #32]
 80012c0:	4611      	mov	r1, r2
 80012c2:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	440b      	add	r3, r1
 80012cc:	721a      	strb	r2, [r3, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	605a      	str	r2, [r3, #4]
        queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
        queue_item->frame.canfd = transfer->canfd;
#endif
        pushTxQueue(ins, queue_item);
 80012d8:	6979      	ldr	r1, [r7, #20]
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 f8a4 	bl	8001428 <pushTxQueue>
        result++;
 80012e0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	3301      	adds	r3, #1
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80012ec:	e096      	b.n	800141c <enqueueTxFrames+0x20e>
    }
    else                                                                    // Multi frame transfer
    {
        uint16_t data_index = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
        uint8_t toggle = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint8_t sot_eot = 0x80;
 80012f8:	2380      	movs	r3, #128	@ 0x80
 80012fa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        CanardTxQueueItem* queue_item = NULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]

        while (transfer->payload_len - data_index != 0)
 8001302:	e085      	b.n	8001410 <enqueueTxFrames+0x202>
        {
            queue_item = createTxItem(&ins->allocator);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	330c      	adds	r3, #12
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f8d2 	bl	80014b2 <createTxItem>
 800130e:	61b8      	str	r0, [r7, #24]
            if (queue_item == NULL)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d102      	bne.n	800131c <enqueueTxFrames+0x10e>
            {
                CANARD_ASSERT(false);
                return -CANARD_ERROR_OUT_OF_MEMORY;          // TODO: Purge all frames enqueued so far
 8001316:	f06f 0302 	mvn.w	r3, #2
 800131a:	e081      	b.n	8001420 <enqueueTxFrames+0x212>
            }

            uint16_t i = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	843b      	strh	r3, [r7, #32]
            if (data_index == 0)
 8001320:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10c      	bne.n	8001340 <enqueueTxFrames+0x132>
            {
                // add crc
                queue_item->frame.data[0] = (uint8_t) (crc);
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	721a      	strb	r2, [r3, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	b29b      	uxth	r3, r3
 8001334:	b2da      	uxtb	r2, r3
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	725a      	strb	r2, [r3, #9]
                i = 2;
 800133a:	2302      	movs	r3, #2
 800133c:	843b      	strh	r3, [r7, #32]
 800133e:	e012      	b.n	8001366 <enqueueTxFrames+0x158>
            }
            else
            {
                i = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	843b      	strh	r3, [r7, #32]
            }

            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8001344:	e00f      	b.n	8001366 <enqueueTxFrames+0x158>
            {
                queue_item->frame.data[i] = transfer->payload[data_index];
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	69da      	ldr	r2, [r3, #28]
 800134a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800134c:	441a      	add	r2, r3
 800134e:	8c3b      	ldrh	r3, [r7, #32]
 8001350:	7811      	ldrb	r1, [r2, #0]
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4413      	add	r3, r2
 8001356:	460a      	mov	r2, r1
 8001358:	721a      	strb	r2, [r3, #8]
            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 800135a:	8c3b      	ldrh	r3, [r7, #32]
 800135c:	3301      	adds	r3, #1
 800135e:	843b      	strh	r3, [r7, #32]
 8001360:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001362:	3301      	adds	r3, #1
 8001364:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001366:	8c3a      	ldrh	r2, [r7, #32]
 8001368:	7ffb      	ldrb	r3, [r7, #31]
 800136a:	3b01      	subs	r3, #1
 800136c:	429a      	cmp	r2, r3
 800136e:	da04      	bge.n	800137a <enqueueTxFrames+0x16c>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	8c1b      	ldrh	r3, [r3, #32]
 8001374:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001376:	429a      	cmp	r2, r3
 8001378:	d3e5      	bcc.n	8001346 <enqueueTxFrames+0x138>
            }
            // tail byte
            sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	8c1b      	ldrh	r3, [r3, #32]
 800137e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001380:	429a      	cmp	r2, r3
 8001382:	d002      	beq.n	800138a <enqueueTxFrames+0x17c>
 8001384:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001388:	e000      	b.n	800138c <enqueueTxFrames+0x17e>
 800138a:	2340      	movs	r3, #64	@ 0x40
 800138c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            
            i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 8001390:	8c3b      	ldrh	r3, [r7, #32]
 8001392:	3301      	adds	r3, #1
 8001394:	b29b      	uxth	r3, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff0a 	bl	80011b0 <dataLengthToDlc>
 800139c:	4603      	mov	r3, r0
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fed7 	bl	8001152 <dlcToDataLength>
 80013a4:	4603      	mov	r3, r0
 80013a6:	3b01      	subs	r3, #1
 80013a8:	843b      	strh	r3, [r7, #32]
            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 80013aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013ae:	015b      	lsls	r3, r3, #5
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b2d9      	uxtb	r1, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	8c3b      	ldrh	r3, [r7, #32]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	b2d1      	uxtb	r1, r2
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4413      	add	r3, r2
 80013d0:	460a      	mov	r2, r1
 80013d2:	721a      	strb	r2, [r3, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	605a      	str	r2, [r3, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 80013de:	8c3b      	ldrh	r3, [r7, #32]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	3301      	adds	r3, #1
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	741a      	strb	r2, [r3, #16]
            queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
            queue_item->frame.canfd = transfer->canfd;
#endif
            pushTxQueue(ins, queue_item);
 80013ea:	69b9      	ldr	r1, [r7, #24]
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 f81b 	bl	8001428 <pushTxQueue>

            result++;
 80013f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	3301      	adds	r3, #1
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
            toggle ^= 1;
 80013fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001402:	f083 0301 	eor.w	r3, r3, #1
 8001406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            sot_eot = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        while (transfer->payload_len - data_index != 0)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	8c1b      	ldrh	r3, [r3, #32]
 8001414:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001416:	429a      	cmp	r2, r3
 8001418:	f47f af74 	bne.w	8001304 <enqueueTxFrames+0xf6>
        }
    }

    return result;
 800141c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8001420:	4618      	mov	r0, r3
 8001422:	3728      	adds	r7, #40	@ 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <pushTxQueue>:

/**
 * Puts frame on on the TX queue. Higher priority placed first
 */
CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

    if (ins->tx_queue == NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <pushTxQueue+0x1a>
    {
        ins->tx_queue = item;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	625a      	str	r2, [r3, #36]	@ 0x24
        return;
 8001440:	e034      	b.n	80014ac <pushTxQueue+0x84>
    }

    CanardTxQueueItem* queue = ins->tx_queue;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001446:	60fb      	str	r3, [r7, #12]
    CanardTxQueueItem* previous = ins->tx_queue;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144c:	60bb      	str	r3, [r7, #8]

    while (queue != NULL)
 800144e:	e02a      	b.n	80014a6 <pushTxQueue+0x7e>
    {
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f000 f840 	bl	80014e0 <isPriorityHigher>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d012      	beq.n	800148c <pushTxQueue+0x64>
        {
            if (queue == ins->tx_queue)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	429a      	cmp	r2, r3
 800146e:	d106      	bne.n	800147e <pushTxQueue+0x56>
            {
                item->next = queue;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	601a      	str	r2, [r3, #0]
                ins->tx_queue = item;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	625a      	str	r2, [r3, #36]	@ 0x24
            else
            {
                previous->next = item;
                item->next = queue;
            }
            return;
 800147c:	e016      	b.n	80014ac <pushTxQueue+0x84>
                previous->next = item;
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	601a      	str	r2, [r3, #0]
                item->next = queue;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	601a      	str	r2, [r3, #0]
            return;
 800148a:	e00f      	b.n	80014ac <pushTxQueue+0x84>
        }
        else
        {
            if (queue->next == NULL)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d103      	bne.n	800149c <pushTxQueue+0x74>
            {
                queue->next = item;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	601a      	str	r2, [r3, #0]
                return;
 800149a:	e007      	b.n	80014ac <pushTxQueue+0x84>
            }
            else
            {
                previous = queue;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	60bb      	str	r3, [r7, #8]
                queue = queue->next;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
    while (queue != NULL)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1d1      	bne.n	8001450 <pushTxQueue+0x28>
            }
        }
    }
}
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <createTxItem>:

/**
 * Creates new tx queue item from allocator
 */
CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b084      	sub	sp, #16
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 faff 	bl	8001abe <allocateBlock>
 80014c0:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <createTxItem+0x1a>
    {
        return NULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	e005      	b.n	80014d8 <createTxItem+0x26>
    }
    memset(item, 0, sizeof(*item));
 80014cc:	2214      	movs	r2, #20
 80014ce:	2100      	movs	r1, #0
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f005 f8fb 	bl	80066cc <memset>
    return item;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <isPriorityHigher>:

/**
 * Returns true if priority of rhs is higher than id
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	@ 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
    const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80014f0:	61fb      	str	r3, [r7, #28]
    const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80014f8:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	0fdb      	lsrs	r3, r3, #31
 80014fe:	75fb      	strb	r3, [r7, #23]
    const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	0fdb      	lsrs	r3, r3, #31
 8001504:	75bb      	strb	r3, [r7, #22]
    if (ext != rhs_ext)
 8001506:	7dfa      	ldrb	r2, [r7, #23]
 8001508:	7dbb      	ldrb	r3, [r7, #22]
 800150a:	429a      	cmp	r2, r3
 800150c:	d01d      	beq.n	800154a <isPriorityHigher+0x6a>
    {
        uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 800150e:	7dfb      	ldrb	r3, [r7, #23]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <isPriorityHigher+0x3a>
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	0c9b      	lsrs	r3, r3, #18
 8001518:	e000      	b.n	800151c <isPriorityHigher+0x3c>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	613b      	str	r3, [r7, #16]
        uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 800151e:	7dbb      	ldrb	r3, [r7, #22]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <isPriorityHigher+0x4a>
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	0c9b      	lsrs	r3, r3, #18
 8001528:	e000      	b.n	800152c <isPriorityHigher+0x4c>
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	60fb      	str	r3, [r7, #12]
        if (arb11 != rhs_arb11)
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	429a      	cmp	r2, r3
 8001534:	d007      	beq.n	8001546 <isPriorityHigher+0x66>
        {
            return arb11 < rhs_arb11;
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	429a      	cmp	r2, r3
 800153c:	bf34      	ite	cc
 800153e:	2301      	movcc	r3, #1
 8001540:	2300      	movcs	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	e022      	b.n	800158c <isPriorityHigher+0xac>
        }
        else
        {
            return rhs_ext;
 8001546:	7dbb      	ldrb	r3, [r7, #22]
 8001548:	e020      	b.n	800158c <isPriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf14      	ite	ne
 8001554:	2301      	movne	r3, #1
 8001556:	2300      	moveq	r3, #0
 8001558:	757b      	strb	r3, [r7, #21]
    const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf14      	ite	ne
 8001564:	2301      	movne	r3, #1
 8001566:	2300      	moveq	r3, #0
 8001568:	753b      	strb	r3, [r7, #20]
    if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	429a      	cmp	r2, r3
 8001570:	d105      	bne.n	800157e <isPriorityHigher+0x9e>
 8001572:	7d7a      	ldrb	r2, [r7, #21]
 8001574:	7d3b      	ldrb	r3, [r7, #20]
 8001576:	429a      	cmp	r2, r3
 8001578:	d001      	beq.n	800157e <isPriorityHigher+0x9e>
    {
        return rhs_rtr;
 800157a:	7d3b      	ldrb	r3, [r7, #20]
 800157c:	e006      	b.n	800158c <isPriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_id < rhs_clean_id;
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	429a      	cmp	r2, r3
 8001584:	bf34      	ite	cc
 8001586:	2301      	movcc	r3, #1
 8001588:	2300      	movcs	r3, #0
 800158a:	b2db      	uxtb	r3, r3
}
 800158c:	4618      	mov	r0, r3
 800158e:	3724      	adds	r7, #36	@ 0x24
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <releaseStatePayload>:

    return state;
}

CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 80015a2:	e01b      	b.n	80015dc <releaseStatePayload+0x44>
    {
        CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rxstate->buffer_blocks);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f103 020c 	add.w	r2, r3, #12
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	4619      	mov	r1, r3
 80015b0:	4610      	mov	r0, r2
 80015b2:	f7ff f9bf 	bl	8000934 <canardBufferFromIdx>
 80015b6:	60f8      	str	r0, [r7, #12]
        CanardBufferBlock* const temp = block->next;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60bb      	str	r3, [r7, #8]
        freeBlock(&ins->allocator, block);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	330c      	adds	r3, #12
 80015c2:	68f9      	ldr	r1, [r7, #12]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 faa3 	bl	8001b10 <freeBlock>
        rxstate->buffer_blocks = canardBufferToIdx(&ins->allocator, temp);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	330c      	adds	r3, #12
 80015ce:	68b9      	ldr	r1, [r7, #8]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff f9bb 	bl	800094c <canardBufferToIdx>
 80015d6:	4602      	mov	r2, r0
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	605a      	str	r2, [r3, #4]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1df      	bne.n	80015a4 <releaseStatePayload+0xc>
    }
    rxstate->payload_len = 0;
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	8ad3      	ldrh	r3, [r2, #22]
 80015e8:	f36f 0309 	bfc	r3, #0, #10
 80015ec:	82d3      	strh	r3, [r2, #22]
    return CANARD_OK;
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 0300 	mov.w	r3, #0
}
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <copyBitArray>:
/**
 * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
 */
void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                        uint8_t* dst, uint32_t dst_offset)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	@ 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(src_len > 0U);

    // Normalizing inputs
    src += src_offset / 8U;
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	4413      	add	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]
    dst += dst_offset / 8U;
 8001618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800161a:	08db      	lsrs	r3, r3, #3
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	4413      	add	r3, r2
 8001620:	603b      	str	r3, [r7, #0]

    src_offset %= 8U;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	60bb      	str	r3, [r7, #8]
    dst_offset %= 8U;
 800162a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	62bb      	str	r3, [r7, #40]	@ 0x28

    const size_t last_bit = src_offset + src_len;
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	61fb      	str	r3, [r7, #28]
    while (last_bit - src_offset)
 800163a:	e04d      	b.n	80016d8 <copyBitArray+0xd8>
    {
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	76fb      	strb	r3, [r7, #27]
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8001646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	76bb      	strb	r3, [r7, #26]

        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 8001650:	7eba      	ldrb	r2, [r7, #26]
 8001652:	7efb      	ldrb	r3, [r7, #27]
 8001654:	4293      	cmp	r3, r2
 8001656:	bf38      	it	cc
 8001658:	4613      	movcc	r3, r2
 800165a:	767b      	strb	r3, [r7, #25]
        const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 800165c:	7e7b      	ldrb	r3, [r7, #25]
 800165e:	f1c3 0208 	rsb	r2, r3, #8
 8001662:	69f9      	ldr	r1, [r7, #28]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	1acb      	subs	r3, r1, r3
 8001668:	4293      	cmp	r3, r2
 800166a:	bf28      	it	cs
 800166c:	4613      	movcs	r3, r2
 800166e:	617b      	str	r3, [r7, #20]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
#else
        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 8001670:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa22 f303 	lsr.w	r3, r2, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	7ebb      	ldrb	r3, [r7, #26]
 8001680:	fa42 f303 	asr.w	r3, r2, r3
 8001684:	74fb      	strb	r3, [r7, #19]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	08db      	lsrs	r3, r3, #3
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	4413      	add	r3, r2
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	7efb      	ldrb	r3, [r7, #27]
 8001694:	409a      	lsls	r2, r3
 8001696:	7ebb      	ldrb	r3, [r7, #26]
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
 800169c:	74bb      	strb	r3, [r7, #18]

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 800169e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a0:	08db      	lsrs	r3, r3, #3
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	4413      	add	r3, r2
 80016a6:	781a      	ldrb	r2, [r3, #0]
 80016a8:	7cfb      	ldrb	r3, [r7, #19]
 80016aa:	43db      	mvns	r3, r3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4013      	ands	r3, r2
 80016b0:	b2d9      	uxtb	r1, r3
 80016b2:	7cba      	ldrb	r2, [r7, #18]
 80016b4:	7cfb      	ldrb	r3, [r7, #19]
 80016b6:	4013      	ands	r3, r2
 80016b8:	b2da      	uxtb	r2, r3
        dst[dst_offset / 8U] =
 80016ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016bc:	08db      	lsrs	r3, r3, #3
 80016be:	6838      	ldr	r0, [r7, #0]
 80016c0:	4403      	add	r3, r0
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 80016c2:	430a      	orrs	r2, r1
 80016c4:	b2d2      	uxtb	r2, r2
        dst[dst_offset / 8U] =
 80016c6:	701a      	strb	r2, [r3, #0]
#endif

        src_offset += copy_bits;
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	4413      	add	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 80016d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	4413      	add	r3, r2
 80016d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (last_bit - src_offset)
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d1ad      	bne.n	800163c <copyBitArray+0x3c>
    }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3724      	adds	r7, #36	@ 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <descatterTransferPayload>:

CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                 uint32_t bit_offset,
                                                 uint8_t bit_length,
                                                 void* output)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b090      	sub	sp, #64	@ 0x40
 80016f2:	af02      	add	r7, sp, #8
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	4613      	mov	r3, r2
 80016fc:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(transfer != 0);

    if (bit_offset >= transfer->payload_len * 8)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8a9b      	ldrh	r3, [r3, #20]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	461a      	mov	r2, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	4293      	cmp	r3, r2
 800170a:	d301      	bcc.n	8001710 <descatterTransferPayload+0x22>
    {
        return 0;       // Out of range, reading zero bits
 800170c:	2300      	movs	r3, #0
 800170e:	e0df      	b.n	80018d0 <descatterTransferPayload+0x1e2>
    }

    if (bit_offset + bit_length > transfer->payload_len * 8)
 8001710:	79fa      	ldrb	r2, [r7, #7]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	4413      	add	r3, r2
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	8a92      	ldrh	r2, [r2, #20]
 800171a:	00d2      	lsls	r2, r2, #3
 800171c:	4293      	cmp	r3, r2
 800171e:	d908      	bls.n	8001732 <descatterTransferPayload+0x44>
    {
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8a9b      	ldrh	r3, [r3, #20]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	b2da      	uxtb	r2, r3
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	71fb      	strb	r3, [r7, #7]
    }

    CANARD_ASSERT(bit_length > 0);

    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d104      	bne.n	8001744 <descatterTransferPayload+0x56>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80b9 	beq.w	80018b6 <descatterTransferPayload+0x1c8>
        /*
         * This part is hideously complicated and probably should be redesigned.
         * The objective here is to copy the requested number of bits from scattered storage into the temporary
         * local storage. We go through great pains to ensure that all corner cases are handled correctly.
         */
        uint32_t input_bit_offset = bit_offset;
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t output_bit_offset = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        uint8_t remaining_bit_length = bit_length;
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        // Reading head
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 8001754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001756:	2b27      	cmp	r3, #39	@ 0x27
 8001758:	d82d      	bhi.n	80017b6 <descatterTransferPayload+0xc8>
        {
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 800175a:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800175e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001760:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8001764:	429a      	cmp	r2, r3
 8001766:	d305      	bcc.n	8001774 <descatterTransferPayload+0x86>
 8001768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800176a:	b2db      	uxtb	r3, r3
 800176c:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8001770:	b2db      	uxtb	r3, r3
 8001772:	e001      	b.n	8001778 <descatterTransferPayload+0x8a>
 8001774:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001778:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6898      	ldr	r0, [r3, #8]
 8001780:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001784:	2300      	movs	r3, #0
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800178c:	f7ff ff38 	bl	8001600 <copyBitArray>

            input_bit_offset += amount;
 8001790:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001794:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001796:	4413      	add	r3, r2
 8001798:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + amount);
 800179a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800179e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017a2:	4413      	add	r3, r2
 80017a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 80017a8:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80017ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        // Reading middle
        uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8a9b      	ldrh	r3, [r3, #20]
 80017ba:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80017be:	3b05      	subs	r3, #5
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 80017c4:	2328      	movs	r3, #40	@ 0x28
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
        const CanardBufferBlock* block = transfer->payload_middle;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24

        while ((block != NULL) && (remaining_bit_length > 0))
 80017ce:	e044      	b.n	800185a <descatterTransferPayload+0x16c>
        {
            CANARD_ASSERT(remaining_bits > 0);
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 80017d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d2:	2be0      	cmp	r3, #224	@ 0xe0
 80017d4:	bf28      	it	cs
 80017d6:	23e0      	movcs	r3, #224	@ 0xe0
 80017d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017da:	4413      	add	r3, r2
 80017dc:	61fb      	str	r3, [r7, #28]
                                                                         remaining_bits);

            // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
            if (block_end_bit_offset > input_bit_offset)
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d92e      	bls.n	8001844 <descatterTransferPayload+0x156>
            {
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 80017e6:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80017ea:	69f9      	ldr	r1, [r7, #28]
 80017ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ee:	1acb      	subs	r3, r1, r3
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d306      	bcc.n	8001802 <descatterTransferPayload+0x114>
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	e001      	b.n	8001806 <descatterTransferPayload+0x118>
 8001802:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001806:	76fb      	strb	r3, [r7, #27]

                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 8001808:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800180a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	617b      	str	r3, [r7, #20]

                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 8001810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001812:	1d18      	adds	r0, r3, #4
 8001814:	7efa      	ldrb	r2, [r7, #27]
 8001816:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	6979      	ldr	r1, [r7, #20]
 8001820:	f7ff feee 	bl	8001600 <copyBitArray>

                input_bit_offset += amount;
 8001824:	7efb      	ldrb	r3, [r7, #27]
 8001826:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001828:	4413      	add	r3, r2
 800182a:	637b      	str	r3, [r7, #52]	@ 0x34
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 800182c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001830:	7efb      	ldrb	r3, [r7, #27]
 8001832:	4413      	add	r3, r2
 8001834:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8001838:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800183c:	7efb      	ldrb	r3, [r7, #27]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            }

            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 8001844:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800184c:	4413      	add	r3, r2
 800184e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            block_bit_offset = block_end_bit_offset;
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
            block = block->next;
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
        while ((block != NULL) && (remaining_bit_length > 0))
 800185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <descatterTransferPayload+0x17a>
 8001860:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1b3      	bne.n	80017d0 <descatterTransferPayload+0xe2>
        }

        CANARD_ASSERT(remaining_bit_length <= remaining_bits);

        // Reading tail
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d02c      	beq.n	80018ca <descatterTransferPayload+0x1dc>
 8001870:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001874:	2b00      	cmp	r3, #0
 8001876:	d028      	beq.n	80018ca <descatterTransferPayload+0x1dc>
        {
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
            const uint32_t offset = input_bit_offset - block_bit_offset;
 8001878:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800187a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	613b      	str	r3, [r7, #16]

            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6918      	ldr	r0, [r3, #16]
 8001884:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8001888:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	6939      	ldr	r1, [r7, #16]
 8001892:	f7ff feb5 	bl	8001600 <copyBitArray>
                         output_bit_offset);

            input_bit_offset += remaining_bit_length;
 8001896:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800189a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800189c:	4413      	add	r3, r2
 800189e:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 80018a0:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80018a4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80018a8:	4413      	add	r3, r2
 80018aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    {
 80018b4:	e009      	b.n	80018ca <descatterTransferPayload+0x1dc>
        CANARD_ASSERT(output_bit_offset <= 64);
        CANARD_ASSERT(remaining_bit_length == 0);
    }
    else                                                                    // Single frame
    {
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6898      	ldr	r0, [r3, #8]
 80018ba:	79fa      	ldrb	r2, [r7, #7]
 80018bc:	2300      	movs	r3, #0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	f7ff fe9c 	bl	8001600 <copyBitArray>
 80018c8:	e000      	b.n	80018cc <descatterTransferPayload+0x1de>
    {
 80018ca:	bf00      	nop
    }

    return bit_length;
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	b21b      	sxth	r3, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3738      	adds	r7, #56	@ 0x38
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <isBigEndian>:

CANARD_INTERNAL bool isBigEndian(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
#else
        uint16_t a;
        uint8_t b[2];
#endif
    } u;
    u.a = 1;
 80018de:	2301      	movs	r3, #1
 80018e0:	80bb      	strh	r3, [r7, #4]
    return u.b[1] == 1;                             // Some don't...
 80018e2:	797b      	ldrb	r3, [r7, #5]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	bf0c      	ite	eq
 80018e8:	2301      	moveq	r3, #1
 80018ea:	2300      	movne	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
#endif
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <swapByteOrder>:

CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b087      	sub	sp, #28
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(data != NULL);

    uint8_t* const bytes = (uint8_t*) data;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	60fb      	str	r3, [r7, #12]

    size_t fwd = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
    size_t rev = size - 1;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	3b01      	subs	r3, #1
 8001910:	613b      	str	r3, [r7, #16]

    while (fwd < rev)
 8001912:	e017      	b.n	8001944 <swapByteOrder+0x4a>
    {
        const uint8_t x = bytes[fwd];
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	4413      	add	r3, r2
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	72fb      	strb	r3, [r7, #11]
        bytes[fwd] = bytes[rev];
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	441a      	add	r2, r3
 8001924:	68f9      	ldr	r1, [r7, #12]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	440b      	add	r3, r1
 800192a:	7812      	ldrb	r2, [r2, #0]
 800192c:	701a      	strb	r2, [r3, #0]
        bytes[rev] = x;
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4413      	add	r3, r2
 8001934:	7afa      	ldrb	r2, [r7, #11]
 8001936:	701a      	strb	r2, [r3, #0]
        fwd++;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3301      	adds	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
        rev--;
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	3b01      	subs	r3, #1
 8001942:	613b      	str	r3, [r7, #16]
    while (fwd < rev)
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d3e3      	bcc.n	8001914 <swapByteOrder+0x1a>
    }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	371c      	adds	r7, #28
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <crcAddByte>:

/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
 800195a:	b480      	push	{r7}
 800195c:	b085      	sub	sp, #20
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	460a      	mov	r2, r1
 8001964:	80fb      	strh	r3, [r7, #6]
 8001966:	4613      	mov	r3, r2
 8001968:	717b      	strb	r3, [r7, #5]
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 800196a:	797b      	ldrb	r3, [r7, #5]
 800196c:	b29b      	uxth	r3, r3
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	b29a      	uxth	r2, r3
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	4053      	eors	r3, r2
 8001976:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
 800197c:	e012      	b.n	80019a4 <crcAddByte+0x4a>
    {
        if (crc_val & 0x8000U)
 800197e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001982:	2b00      	cmp	r3, #0
 8001984:	da08      	bge.n	8001998 <crcAddByte+0x3e>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8001990:	f083 0301 	eor.w	r3, r3, #1
 8001994:	80fb      	strh	r3, [r7, #6]
 8001996:	e002      	b.n	800199e <crcAddByte+0x44>
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	3301      	adds	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	2b07      	cmp	r3, #7
 80019a8:	d9e9      	bls.n	800197e <crcAddByte+0x24>
        }
    }
    return crc_val;
 80019aa:	88fb      	ldrh	r3, [r7, #6]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 80019b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4601      	mov	r1, r0
 80019c0:	e9c7 2300 	strd	r2, r3, [r7]
 80019c4:	460b      	mov	r3, r1
 80019c6:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 80019c8:	2300      	movs	r3, #0
 80019ca:	82fb      	strh	r3, [r7, #22]
 80019cc:	e01b      	b.n	8001a06 <crcAddSignature+0x4e>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 80019ce:	8af9      	ldrh	r1, [r7, #22]
 80019d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019d4:	f1c1 0620 	rsb	r6, r1, #32
 80019d8:	f1a1 0020 	sub.w	r0, r1, #32
 80019dc:	fa22 f401 	lsr.w	r4, r2, r1
 80019e0:	fa03 f606 	lsl.w	r6, r3, r6
 80019e4:	4334      	orrs	r4, r6
 80019e6:	fa23 f000 	lsr.w	r0, r3, r0
 80019ea:	4304      	orrs	r4, r0
 80019ec:	fa23 f501 	lsr.w	r5, r3, r1
 80019f0:	b2e2      	uxtb	r2, r4
 80019f2:	89fb      	ldrh	r3, [r7, #14]
 80019f4:	4611      	mov	r1, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ffaf 	bl	800195a <crcAddByte>
 80019fc:	4603      	mov	r3, r0
 80019fe:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8001a00:	8afb      	ldrh	r3, [r7, #22]
 8001a02:	3308      	adds	r3, #8
 8001a04:	82fb      	strh	r3, [r7, #22]
 8001a06:	8afb      	ldrh	r3, [r7, #22]
 8001a08:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a0a:	d9e0      	bls.n	80019ce <crcAddSignature+0x16>
    }
    return crc_val;
 8001a0c:	89fb      	ldrh	r3, [r7, #14]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	371c      	adds	r7, #28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a16 <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8001a24:	e00a      	b.n	8001a3c <crcAdd+0x26>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	60ba      	str	r2, [r7, #8]
 8001a2c:	781a      	ldrb	r2, [r3, #0]
 8001a2e:	89fb      	ldrh	r3, [r7, #14]
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff91 	bl	800195a <crcAddByte>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	1e5a      	subs	r2, r3, #1
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1ef      	bne.n	8001a26 <crcAdd+0x10>
    }
    return crc_val;
 8001a46:	89fb      	ldrh	r3, [r7, #14]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       void* buf,
                                       uint16_t buf_len)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	80fb      	strh	r3, [r7, #6]
    size_t current_index = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
    CanardPoolAllocatorBlock *abuf = buf;
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	617b      	str	r3, [r7, #20]
    allocator->arena = buf;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	611a      	str	r2, [r3, #16]
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3304      	adds	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
    while (current_index < buf_len)
 8001a72:	e00b      	b.n	8001a8c <initPoolAllocator+0x3c>
    {
        *current_block = &abuf[current_index];
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	015b      	lsls	r3, r3, #5
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	441a      	add	r2, r3
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	601a      	str	r2, [r3, #0]
        current_block = &((*current_block)->next);
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	61bb      	str	r3, [r7, #24]
        current_index++;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	61fb      	str	r3, [r7, #28]
    while (current_index < buf_len)
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d3ef      	bcc.n	8001a74 <initPoolAllocator+0x24>
    }
    *current_block = NULL;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]

    allocator->statistics.capacity_blocks = buf_len;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	88fa      	ldrh	r2, [r7, #6]
 8001a9e:	811a      	strh	r2, [r3, #8]
    allocator->statistics.current_usage_blocks = 0;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	815a      	strh	r2, [r3, #10]
    allocator->statistics.peak_usage_blocks = 0;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	819a      	strh	r2, [r3, #12]
    // user should initialize semaphore after the canardInit
    // or at first call of canard_allocate_sem_take
    allocator->semaphore = NULL;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	3724      	adds	r7, #36	@ 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <allocateBlock+0x14>
    {
#if CANARD_ALLOCATE_SEM
        canard_allocate_sem_give(allocator);
#endif
        return NULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e018      	b.n	8001b04 <allocateBlock+0x46>
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	60fb      	str	r3, [r7, #12]
    allocator->free_list = allocator->free_list->next;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	605a      	str	r2, [r3, #4]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	895b      	ldrh	r3, [r3, #10]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	815a      	strh	r2, [r3, #10]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	899a      	ldrh	r2, [r3, #12]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	895b      	ldrh	r3, [r3, #10]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d203      	bcs.n	8001b02 <allocateBlock+0x44>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	895a      	ldrh	r2, [r3, #10]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	819a      	strh	r2, [r3, #12]
    }
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
    return result;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]

    block->next = allocator->free_list;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	601a      	str	r2, [r3, #0]
    allocator->free_list = block;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	605a      	str	r2, [r3, #4]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
    allocator->statistics.current_usage_blocks--;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	895b      	ldrh	r3, [r3, #10]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	815a      	strh	r2, [r3, #10]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <canardSTM32Transmit>:
 *         the configuration information for the specified FDCAN.
 * @param  tx_frame pointer to a CanardCANFrame structure that contains the CAN message to
 * 		transmit.
 * @retval ret == 1: OK, ret < 0: CANARD_ERROR, ret == 0: Check hcan->ErrorCode
 */
int16_t canardSTM32Transmit(CAN_HandleTypeDef *hcan, const CanardCANFrame* const tx_frame) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	@ 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
	if (tx_frame == NULL) {
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <canardSTM32Transmit+0x16>
		return -CANARD_ERROR_INVALID_ARGUMENT;
 8001b54:	f06f 0301 	mvn.w	r3, #1
 8001b58:	e042      	b.n	8001be0 <canardSTM32Transmit+0x9c>
	}

	if (tx_frame->id & CANARD_CAN_FRAME_ERR) {
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <canardSTM32Transmit+0x28>
		return -CANARD_ERROR_INVALID_ARGUMENT; // unsupported frame format
 8001b66:	f06f 0301 	mvn.w	r3, #1
 8001b6a:	e039      	b.n	8001be0 <canardSTM32Transmit+0x9c>

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8];

	// Process canard id to STM FDCAN header format
	if (tx_frame->id & CANARD_CAN_FRAME_EFF) {
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	da07      	bge.n	8001b84 <canardSTM32Transmit+0x40>
		TxHeader.IDE = CAN_ID_EXT;
 8001b74:	2304      	movs	r3, #4
 8001b76:	61bb      	str	r3, [r7, #24]
		TxHeader.ExtId = tx_frame->id & CANARD_CAN_EXT_ID_MASK;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	e006      	b.n	8001b92 <canardSTM32Transmit+0x4e>
	} else {
		TxHeader.IDE = CAN_ID_STD;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
		TxHeader.StdId = tx_frame->id & CANARD_CAN_STD_ID_MASK;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b90:	613b      	str	r3, [r7, #16]
	}

	TxHeader.DLC = tx_frame->data_len;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	7b1b      	ldrb	r3, [r3, #12]
 8001b96:	623b      	str	r3, [r7, #32]

	if (tx_frame->id & CANARD_CAN_FRAME_RTR) {
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <canardSTM32Transmit+0x66>
		TxHeader.RTR = CAN_RTR_REMOTE;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	61fb      	str	r3, [r7, #28]
 8001ba8:	e001      	b.n	8001bae <canardSTM32Transmit+0x6a>
	} else {
		TxHeader.RTR = CAN_RTR_DATA;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
	}

	TxHeader.TransmitGlobalTime = DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	memcpy(TxData, tx_frame->data, TxHeader.DLC);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	1d19      	adds	r1, r3, #4
 8001bb8:	6a3a      	ldr	r2, [r7, #32]
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f004 fe1f 	bl	8006802 <memcpy>

	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &canMailbox) == HAL_OK) {
 8001bc4:	f107 0208 	add.w	r2, r7, #8
 8001bc8:	f107 0110 	add.w	r1, r7, #16
 8001bcc:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <canardSTM32Transmit+0xa4>)
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f001 ff71 	bl	8003ab6 <HAL_CAN_AddTxMessage>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <canardSTM32Transmit+0x9a>
//		printf("Successfully sent message with id: %lu \n", TxHeader.StdId);
		return 1;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <canardSTM32Transmit+0x9c>
	}

//	printf("Failed at adding message with id: %lu to Tx Fifo", TxHeader.StdId);
	// This might be for many reasons including the Tx Fifo being full, the error can be read from hcan->ErrorCode
	return 0;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3728      	adds	r7, #40	@ 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200000ac 	.word	0x200000ac

08001bec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <MX_GPIO_Init+0x44>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8001c30 <MX_GPIO_Init+0x44>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <MX_GPIO_Init+0x44>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <MX_GPIO_Init+0x44>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0e:	4a08      	ldr	r2, [pc, #32]	@ (8001c30 <MX_GPIO_Init+0x44>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <MX_GPIO_Init+0x44>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]

}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000

08001c34 <getUniqueID>:


/*
  get a 16 byte unique ID for this node, this should be based on the CPU unique ID or other unique ID
 */
void getUniqueID(uint8_t id[16]){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	uint32_t HALUniqueIDs[3];
// Make Unique ID out of the 96-bit STM32 UID and fill the rest with 0s
	memset(id, 0, 16);
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	2100      	movs	r1, #0
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f004 fd43 	bl	80066cc <memset>
	HALUniqueIDs[0] = HAL_GetUIDw0();
 8001c46:	f001 fe17 	bl	8003878 <HAL_GetUIDw0>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	60fb      	str	r3, [r7, #12]
	HALUniqueIDs[1] = HAL_GetUIDw1();
 8001c4e:	f001 fe1f 	bl	8003890 <HAL_GetUIDw1>
 8001c52:	4603      	mov	r3, r0
 8001c54:	613b      	str	r3, [r7, #16]
	HALUniqueIDs[2] = HAL_GetUIDw2();
 8001c56:	f001 fe27 	bl	80038a8 <HAL_GetUIDw2>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	617b      	str	r3, [r7, #20]
	memcpy(id, HALUniqueIDs, 12);
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	220c      	movs	r2, #12
 8001c64:	4619      	mov	r1, r3
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f004 fdcb 	bl	8006802 <memcpy>
}
 8001c6c:	bf00      	nop
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <setServoPWM>:

// Might have to change the code if the handler (&htim) changes based on # of servos were controlling
void setServoPWM(uint8_t ServoNum){
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
	switch (ServoNum) {
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	f200 8083 	bhi.w	8001d8c <setServoPWM+0x118>
 8001c86:	a201      	add	r2, pc, #4	@ (adr r2, 8001c8c <setServoPWM+0x18>)
 8001c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8c:	08001c9d 	.word	0x08001c9d
 8001c90:	08001cd9 	.word	0x08001cd9
 8001c94:	08001d15 	.word	0x08001d15
 8001c98:	08001d51 	.word	0x08001d51
	case 0:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, servos[0].position * (PULSE_RANGE/2) + (PULSE_RANGE*1.5));
 8001c9c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d9c <setServoPWM+0x128>)
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001da0 <setServoPWM+0x12c>
 8001ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001caa:	ee17 0a90 	vmov	r0, s15
 8001cae:	f7fe fc43 	bl	8000538 <__aeabi_f2d>
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8001da4 <setServoPWM+0x130>)
 8001cb8:	f7fe fae0 	bl	800027c <__adddf3>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4939      	ldr	r1, [pc, #228]	@ (8001da8 <setServoPWM+0x134>)
 8001cc2:	680c      	ldr	r4, [r1, #0]
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe fc8e 	bl	80005e8 <__aeabi_d2uiz>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	6363      	str	r3, [r4, #52]	@ 0x34
		printf("SERVO 0 PWM SET");
 8001cd0:	4836      	ldr	r0, [pc, #216]	@ (8001dac <setServoPWM+0x138>)
 8001cd2:	f004 fbab 	bl	800642c <iprintf>
		break;
 8001cd6:	e05d      	b.n	8001d94 <setServoPWM+0x120>
	case 1:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, servos[1].position * (PULSE_RANGE/2) + (PULSE_RANGE*1.5));
 8001cd8:	4b30      	ldr	r3, [pc, #192]	@ (8001d9c <setServoPWM+0x128>)
 8001cda:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cde:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001da0 <setServoPWM+0x12c>
 8001ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce6:	ee17 0a90 	vmov	r0, s15
 8001cea:	f7fe fc25 	bl	8000538 <__aeabi_f2d>
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8001da4 <setServoPWM+0x130>)
 8001cf4:	f7fe fac2 	bl	800027c <__adddf3>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	492a      	ldr	r1, [pc, #168]	@ (8001da8 <setServoPWM+0x134>)
 8001cfe:	680c      	ldr	r4, [r1, #0]
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe fc70 	bl	80005e8 <__aeabi_d2uiz>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	63a3      	str	r3, [r4, #56]	@ 0x38
		printf("SERVO 1 PWM SET");
 8001d0c:	4828      	ldr	r0, [pc, #160]	@ (8001db0 <setServoPWM+0x13c>)
 8001d0e:	f004 fb8d 	bl	800642c <iprintf>
		break;
 8001d12:	e03f      	b.n	8001d94 <setServoPWM+0x120>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, servos[2].position * (PULSE_RANGE/2) + (PULSE_RANGE*1.5));
 8001d14:	4b21      	ldr	r3, [pc, #132]	@ (8001d9c <setServoPWM+0x128>)
 8001d16:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d1a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001da0 <setServoPWM+0x12c>
 8001d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d22:	ee17 0a90 	vmov	r0, s15
 8001d26:	f7fe fc07 	bl	8000538 <__aeabi_f2d>
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001da4 <setServoPWM+0x130>)
 8001d30:	f7fe faa4 	bl	800027c <__adddf3>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	491e      	ldr	r1, [pc, #120]	@ (8001db4 <setServoPWM+0x140>)
 8001d3a:	680c      	ldr	r4, [r1, #0]
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7fe fc52 	bl	80005e8 <__aeabi_d2uiz>
 8001d44:	4603      	mov	r3, r0
 8001d46:	6363      	str	r3, [r4, #52]	@ 0x34
		printf("SERVO 2 PWM SET");
 8001d48:	481b      	ldr	r0, [pc, #108]	@ (8001db8 <setServoPWM+0x144>)
 8001d4a:	f004 fb6f 	bl	800642c <iprintf>
		break;
 8001d4e:	e021      	b.n	8001d94 <setServoPWM+0x120>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, servos[3].position * (PULSE_RANGE/2) + (PULSE_RANGE*1.5));
 8001d50:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <setServoPWM+0x128>)
 8001d52:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001d56:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001da0 <setServoPWM+0x12c>
 8001d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d5e:	ee17 0a90 	vmov	r0, s15
 8001d62:	f7fe fbe9 	bl	8000538 <__aeabi_f2d>
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <setServoPWM+0x130>)
 8001d6c:	f7fe fa86 	bl	800027c <__adddf3>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	490f      	ldr	r1, [pc, #60]	@ (8001db4 <setServoPWM+0x140>)
 8001d76:	680c      	ldr	r4, [r1, #0]
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f7fe fc34 	bl	80005e8 <__aeabi_d2uiz>
 8001d80:	4603      	mov	r3, r0
 8001d82:	63a3      	str	r3, [r4, #56]	@ 0x38
		printf("SERVO 3 PWM SET");
 8001d84:	480d      	ldr	r0, [pc, #52]	@ (8001dbc <setServoPWM+0x148>)
 8001d86:	f004 fb51 	bl	800642c <iprintf>
		break;
 8001d8a:	e003      	b.n	8001d94 <setServoPWM+0x120>
	default:
		printf("INVALID SERVO ID, NOTHING SET");
 8001d8c:	480c      	ldr	r0, [pc, #48]	@ (8001dc0 <setServoPWM+0x14c>)
 8001d8e:	f004 fb4d 	bl	800642c <iprintf>
		break;
 8001d92:	bf00      	nop
	}
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd90      	pop	{r4, r7, pc}
 8001d9c:	200004e0 	.word	0x200004e0
 8001da0:	44c80000 	.word	0x44c80000
 8001da4:	40b2c000 	.word	0x40b2c000
 8001da8:	20000534 	.word	0x20000534
 8001dac:	080072b0 	.word	0x080072b0
 8001db0:	080072c0 	.word	0x080072c0
 8001db4:	20000580 	.word	0x20000580
 8001db8:	080072d0 	.word	0x080072d0
 8001dbc:	080072e0 	.word	0x080072e0
 8001dc0:	080072f0 	.word	0x080072f0
 8001dc4:	00000000 	.word	0x00000000

08001dc8 <handle_GetNodeInfo>:

/*
  handle a GetNodeInfo request
*/
static void handle_GetNodeInfo(CanardInstance *ins, CanardRxTransfer *transfer)
{
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	f5ad 7d4b 	sub.w	sp, sp, #812	@ 0x32c
 8001dce:	af06      	add	r7, sp, #24
 8001dd0:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001dd4:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8001dd8:	6018      	str	r0, [r3, #0]
 8001dda:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001dde:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001de2:	6019      	str	r1, [r3, #0]
    printf("GetNodeInfo request from %d\n", transfer->source_node_id);
 8001de4:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001de8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	7edb      	ldrb	r3, [r3, #27]
 8001df0:	4619      	mov	r1, r3
 8001df2:	484f      	ldr	r0, [pc, #316]	@ (8001f30 <handle_GetNodeInfo+0x168>)
 8001df4:	f004 fb1a 	bl	800642c <iprintf>

    uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];
    struct uavcan_protocol_GetNodeInfoResponse pkt;

    memset(&pkt, 0, sizeof(pkt));
 8001df8:	f107 0308 	add.w	r3, r7, #8
 8001dfc:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f004 fc62 	bl	80066cc <memset>

    node_status.uptime_sec = HAL_GetTick() / 1000ULL;
 8001e08:	f001 fd2a 	bl	8003860 <HAL_GetTick>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4a49      	ldr	r2, [pc, #292]	@ (8001f34 <handle_GetNodeInfo+0x16c>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	099b      	lsrs	r3, r3, #6
 8001e16:	4a48      	ldr	r2, [pc, #288]	@ (8001f38 <handle_GetNodeInfo+0x170>)
 8001e18:	6013      	str	r3, [r2, #0]
    pkt.status = node_status;
 8001e1a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001e1e:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8001e22:	4a45      	ldr	r2, [pc, #276]	@ (8001f38 <handle_GetNodeInfo+0x170>)
 8001e24:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e26:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // fill in your major and minor firmware version
    pkt.software_version.major = 1;
 8001e2a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001e2e:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8001e32:	2201      	movs	r2, #1
 8001e34:	741a      	strb	r2, [r3, #16]
    pkt.software_version.minor = 2;
 8001e36:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001e3a:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8001e3e:	2202      	movs	r2, #2
 8001e40:	745a      	strb	r2, [r3, #17]
    pkt.software_version.optional_field_flags = 0;
 8001e42:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001e46:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	749a      	strb	r2, [r3, #18]
    pkt.software_version.vcs_commit = 0; // should put git hash in here
 8001e4e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001e52:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8001e56:	2200      	movs	r2, #0
 8001e58:	615a      	str	r2, [r3, #20]

    // should fill in hardware version
    pkt.hardware_version.major = 2;
 8001e5a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001e5e:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 2020 	strb.w	r2, [r3, #32]
    pkt.hardware_version.minor = 3;
 8001e68:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001e6c:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8001e70:	2203      	movs	r2, #3
 8001e72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    getUniqueID(pkt.hardware_version.unique_id);
 8001e76:	f107 0308 	add.w	r3, r7, #8
 8001e7a:	3322      	adds	r3, #34	@ 0x22
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fed9 	bl	8001c34 <getUniqueID>

    strncpy((char*)pkt.name.data, "ServoNode", sizeof(pkt.name.data));
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	f203 1333 	addw	r3, r3, #307	@ 0x133
 8001e8a:	2250      	movs	r2, #80	@ 0x50
 8001e8c:	492b      	ldr	r1, [pc, #172]	@ (8001f3c <handle_GetNodeInfo+0x174>)
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f004 fc24 	bl	80066dc <strncpy>
    pkt.name.len = strnlen((char*)pkt.name.data, sizeof(pkt.name.data));
 8001e94:	f107 0308 	add.w	r3, r7, #8
 8001e98:	f203 1333 	addw	r3, r3, #307	@ 0x133
 8001e9c:	2150      	movs	r1, #80	@ 0x50
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f004 fc2f 	bl	8006702 <strnlen>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001eac:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8001eb0:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132

    uint16_t total_size = uavcan_protocol_GetNodeInfoResponse_encode(&pkt, buffer);
 8001eb4:	f507 72ca 	add.w	r2, r7, #404	@ 0x194
 8001eb8:	f107 0308 	add.w	r3, r7, #8
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 fb68 	bl	8003594 <uavcan_protocol_GetNodeInfoResponse_encode>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f8a7 330e 	strh.w	r3, [r7, #782]	@ 0x30e

    canardRequestOrRespond(ins,
 8001eca:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001ece:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	7edc      	ldrb	r4, [r3, #27]
 8001ed6:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8001eda:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	3319      	adds	r3, #25
 8001ee2:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 8001ee6:	f5a2 7244 	sub.w	r2, r2, #784	@ 0x310
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	7e92      	ldrb	r2, [r2, #26]
 8001eee:	f507 7144 	add.w	r1, r7, #784	@ 0x310
 8001ef2:	f5a1 7043 	sub.w	r0, r1, #780	@ 0x30c
 8001ef6:	f8b7 130e 	ldrh.w	r1, [r7, #782]	@ 0x30e
 8001efa:	9105      	str	r1, [sp, #20]
 8001efc:	f507 71ca 	add.w	r1, r7, #404	@ 0x194
 8001f00:	9104      	str	r1, [sp, #16]
 8001f02:	2100      	movs	r1, #0
 8001f04:	9103      	str	r1, [sp, #12]
 8001f06:	9202      	str	r2, [sp, #8]
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	a306      	add	r3, pc, #24	@ (adr r3, 8001f28 <handle_GetNodeInfo+0x160>)
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	4621      	mov	r1, r4
 8001f16:	6800      	ldr	r0, [r0, #0]
 8001f18:	f7fe fd54 	bl	80009c4 <canardRequestOrRespond>
                           &transfer->transfer_id,
                           transfer->priority,
                           CanardResponse,
                           &buffer[0],
                           total_size);
}
 8001f1c:	bf00      	nop
 8001f1e:	f507 7745 	add.w	r7, r7, #788	@ 0x314
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd90      	pop	{r4, r7, pc}
 8001f26:	bf00      	nop
 8001f28:	21c46a9e 	.word	0x21c46a9e
 8001f2c:	ee468a81 	.word	0xee468a81
 8001f30:	08007310 	.word	0x08007310
 8001f34:	10624dd3 	.word	0x10624dd3
 8001f38:	20000520 	.word	0x20000520
 8001f3c:	08007330 	.word	0x08007330

08001f40 <handle_NodeStatus>:
	rx_frame.iface_id = 0;

	canardHandleRxFrame(&canard, &rx_frame, timestamp);
}

void handle_NodeStatus(CanardInstance *ins, CanardRxTransfer *transfer) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
	struct uavcan_protocol_NodeStatus nodeStatus;

	if (uavcan_protocol_NodeStatus_decode(transfer, &nodeStatus)) {
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	4619      	mov	r1, r3
 8001f50:	6838      	ldr	r0, [r7, #0]
 8001f52:	f001 fbf9 	bl	8003748 <uavcan_protocol_NodeStatus_decode>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d15d      	bne.n	8002018 <handle_NodeStatus+0xd8>
		return;
	}

	printf("Node health: %ud Node Mode: %ud\n", nodeStatus.health, nodeStatus.mode);
 8001f5c:	7c3b      	ldrb	r3, [r7, #16]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	7c7b      	ldrb	r3, [r7, #17]
 8001f62:	461a      	mov	r2, r3
 8001f64:	482e      	ldr	r0, [pc, #184]	@ (8002020 <handle_NodeStatus+0xe0>)
 8001f66:	f004 fa61 	bl	800642c <iprintf>

	printf("Node Health ");
 8001f6a:	482e      	ldr	r0, [pc, #184]	@ (8002024 <handle_NodeStatus+0xe4>)
 8001f6c:	f004 fa5e 	bl	800642c <iprintf>

	switch (nodeStatus.health) {
 8001f70:	7c3b      	ldrb	r3, [r7, #16]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d81a      	bhi.n	8001fac <handle_NodeStatus+0x6c>
 8001f76:	a201      	add	r2, pc, #4	@ (adr r2, 8001f7c <handle_NodeStatus+0x3c>)
 8001f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7c:	08001f8d 	.word	0x08001f8d
 8001f80:	08001f95 	.word	0x08001f95
 8001f84:	08001f9d 	.word	0x08001f9d
 8001f88:	08001fa5 	.word	0x08001fa5
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK:
		printf("OK\n");
 8001f8c:	4826      	ldr	r0, [pc, #152]	@ (8002028 <handle_NodeStatus+0xe8>)
 8001f8e:	f004 fabd 	bl	800650c <puts>
		break;
 8001f92:	e00f      	b.n	8001fb4 <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_WARNING:
		printf("WARNING\n");
 8001f94:	4825      	ldr	r0, [pc, #148]	@ (800202c <handle_NodeStatus+0xec>)
 8001f96:	f004 fab9 	bl	800650c <puts>
		break;
 8001f9a:	e00b      	b.n	8001fb4 <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_ERROR:
		printf("ERROR\n");
 8001f9c:	4824      	ldr	r0, [pc, #144]	@ (8002030 <handle_NodeStatus+0xf0>)
 8001f9e:	f004 fab5 	bl	800650c <puts>
		break;
 8001fa2:	e007      	b.n	8001fb4 <handle_NodeStatus+0x74>
	case UAVCAN_PROTOCOL_NODESTATUS_HEALTH_CRITICAL:
		printf("CRITICAL\n");
 8001fa4:	4823      	ldr	r0, [pc, #140]	@ (8002034 <handle_NodeStatus+0xf4>)
 8001fa6:	f004 fab1 	bl	800650c <puts>
		break;
 8001faa:	e003      	b.n	8001fb4 <handle_NodeStatus+0x74>
	default:
		printf("UNKNOWN?\n");
 8001fac:	4822      	ldr	r0, [pc, #136]	@ (8002038 <handle_NodeStatus+0xf8>)
 8001fae:	f004 faad 	bl	800650c <puts>
		break;
 8001fb2:	bf00      	nop
	}

	printf("Node Mode ");
 8001fb4:	4821      	ldr	r0, [pc, #132]	@ (800203c <handle_NodeStatus+0xfc>)
 8001fb6:	f004 fa39 	bl	800642c <iprintf>

	switch(nodeStatus.mode) {
 8001fba:	7c7b      	ldrb	r3, [r7, #17]
 8001fbc:	2b07      	cmp	r3, #7
 8001fbe:	d827      	bhi.n	8002010 <handle_NodeStatus+0xd0>
 8001fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc8 <handle_NodeStatus+0x88>)
 8001fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc6:	bf00      	nop
 8001fc8:	08001fe9 	.word	0x08001fe9
 8001fcc:	08001ff1 	.word	0x08001ff1
 8001fd0:	08001ff9 	.word	0x08001ff9
 8001fd4:	08002001 	.word	0x08002001
 8001fd8:	08002011 	.word	0x08002011
 8001fdc:	08002011 	.word	0x08002011
 8001fe0:	08002011 	.word	0x08002011
 8001fe4:	08002009 	.word	0x08002009
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL:
		printf("OPERATIONAL\n");
 8001fe8:	4815      	ldr	r0, [pc, #84]	@ (8002040 <handle_NodeStatus+0x100>)
 8001fea:	f004 fa8f 	bl	800650c <puts>
		break;
 8001fee:	e014      	b.n	800201a <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_INITIALIZATION:
		printf("INITIALIZATION\n");
 8001ff0:	4814      	ldr	r0, [pc, #80]	@ (8002044 <handle_NodeStatus+0x104>)
 8001ff2:	f004 fa8b 	bl	800650c <puts>
		break;
 8001ff6:	e010      	b.n	800201a <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_MAINTENANCE:
		printf("MAINTENANCE\n");
 8001ff8:	4813      	ldr	r0, [pc, #76]	@ (8002048 <handle_NodeStatus+0x108>)
 8001ffa:	f004 fa87 	bl	800650c <puts>
		break;
 8001ffe:	e00c      	b.n	800201a <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_SOFTWARE_UPDATE:
		printf("SOFTWARE UPDATE\n");
 8002000:	4812      	ldr	r0, [pc, #72]	@ (800204c <handle_NodeStatus+0x10c>)
 8002002:	f004 fa83 	bl	800650c <puts>
		break;
 8002006:	e008      	b.n	800201a <handle_NodeStatus+0xda>
	case UAVCAN_PROTOCOL_NODESTATUS_MODE_OFFLINE:
		printf("OFFLINE\n");
 8002008:	4811      	ldr	r0, [pc, #68]	@ (8002050 <handle_NodeStatus+0x110>)
 800200a:	f004 fa7f 	bl	800650c <puts>
		break;
 800200e:	e004      	b.n	800201a <handle_NodeStatus+0xda>
	default:
		printf("UNKNOWN?\n");
 8002010:	4809      	ldr	r0, [pc, #36]	@ (8002038 <handle_NodeStatus+0xf8>)
 8002012:	f004 fa7b 	bl	800650c <puts>
		break;
 8002016:	e000      	b.n	800201a <handle_NodeStatus+0xda>
		return;
 8002018:	bf00      	nop
	}
}
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	0800736c 	.word	0x0800736c
 8002024:	08007390 	.word	0x08007390
 8002028:	080073a0 	.word	0x080073a0
 800202c:	080073a4 	.word	0x080073a4
 8002030:	080073ac 	.word	0x080073ac
 8002034:	080073b4 	.word	0x080073b4
 8002038:	080073c0 	.word	0x080073c0
 800203c:	080073cc 	.word	0x080073cc
 8002040:	080073d8 	.word	0x080073d8
 8002044:	080073e4 	.word	0x080073e4
 8002048:	080073f4 	.word	0x080073f4
 800204c:	08007400 	.word	0x08007400
 8002050:	08007410 	.word	0x08007410

08002054 <handle_NotifyState>:

void handle_NotifyState(CanardInstance *ins, CanardRxTransfer *transfer) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b0c8      	sub	sp, #288	@ 0x120
 8002058:	af00      	add	r7, sp, #0
 800205a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800205e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002062:	6018      	str	r0, [r3, #0]
 8002064:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002068:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800206c:	6019      	str	r1, [r3, #0]
	struct ardupilot_indication_NotifyState notifyState;

	if (ardupilot_indication_NotifyState_decode(transfer, &notifyState)) {
 800206e:	f107 0208 	add.w	r2, r7, #8
 8002072:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002076:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800207a:	4611      	mov	r1, r2
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	f000 ffa4 	bl	8002fca <ardupilot_indication_NotifyState_decode>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d136      	bne.n	80020f6 <handle_NotifyState+0xa2>
		return;
	}

	printf("Vehicle State: %llu ", notifyState.vehicle_state);
 8002088:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800208c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002090:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	@ 0x108
 8002094:	481a      	ldr	r0, [pc, #104]	@ (8002100 <handle_NotifyState+0xac>)
 8002096:	f004 f9c9 	bl	800642c <iprintf>

	if (notifyState.aux_data.len > 0) {
 800209a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800209e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020a2:	785b      	ldrb	r3, [r3, #1]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d022      	beq.n	80020ee <handle_NotifyState+0x9a>
		printf("Aux Data: 0x");
 80020a8:	4816      	ldr	r0, [pc, #88]	@ (8002104 <handle_NotifyState+0xb0>)
 80020aa:	f004 f9bf 	bl	800642c <iprintf>

		for (int i = 0; i < notifyState.aux_data.len; i++) {
 80020ae:	2300      	movs	r3, #0
 80020b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80020b4:	e011      	b.n	80020da <handle_NotifyState+0x86>
			printf("%02x", notifyState.aux_data.data[i]);
 80020b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80020ba:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 80020be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80020c2:	4413      	add	r3, r2
 80020c4:	3302      	adds	r3, #2
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	480f      	ldr	r0, [pc, #60]	@ (8002108 <handle_NotifyState+0xb4>)
 80020cc:	f004 f9ae 	bl	800642c <iprintf>
		for (int i = 0; i < notifyState.aux_data.len; i++) {
 80020d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80020d4:	3301      	adds	r3, #1
 80020d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80020da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80020de:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80020e2:	785b      	ldrb	r3, [r3, #1]
 80020e4:	461a      	mov	r2, r3
 80020e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80020ea:	4293      	cmp	r3, r2
 80020ec:	dbe3      	blt.n	80020b6 <handle_NotifyState+0x62>
		}
	}

	printf("\n");
 80020ee:	200a      	movs	r0, #10
 80020f0:	f004 f9ae 	bl	8006450 <putchar>
 80020f4:	e000      	b.n	80020f8 <handle_NotifyState+0xa4>
		return;
 80020f6:	bf00      	nop

}
 80020f8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	08007418 	.word	0x08007418
 8002104:	08007430 	.word	0x08007430
 8002108:	08007364 	.word	0x08007364

0800210c <handle_ArrayCommand>:
/*
 * handle a servo ArrayCommand request
 */
static void handle_ArrayCommand(CanardInstance *ins, CanardRxTransfer *transfer)
{
 800210c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002110:	b0a6      	sub	sp, #152	@ 0x98
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
    struct uavcan_equipment_actuator_ArrayCommand cmd;
    if (uavcan_equipment_actuator_ArrayCommand_decode(transfer, &cmd)) { //return true if decode is invalid
 8002118:	f107 030c 	add.w	r3, r7, #12
 800211c:	4619      	mov	r1, r3
 800211e:	6838      	ldr	r0, [r7, #0]
 8002120:	f001 f822 	bl	8003168 <uavcan_equipment_actuator_ArrayCommand_decode>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 80a5 	bne.w	8002276 <handle_ArrayCommand+0x16a>
        return;
    }
    uint64_t tnow = HAL_GetTick() * 1000ULL;
 800212c:	f001 fb98 	bl	8003860 <HAL_GetTick>
 8002130:	4603      	mov	r3, r0
 8002132:	2200      	movs	r2, #0
 8002134:	469a      	mov	sl, r3
 8002136:	4693      	mov	fp, r2
 8002138:	4652      	mov	r2, sl
 800213a:	465b      	mov	r3, fp
 800213c:	f04f 0000 	mov.w	r0, #0
 8002140:	f04f 0100 	mov.w	r1, #0
 8002144:	0159      	lsls	r1, r3, #5
 8002146:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800214a:	0150      	lsls	r0, r2, #5
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	ebb2 040a 	subs.w	r4, r2, sl
 8002154:	eb63 050b 	sbc.w	r5, r3, fp
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	00ab      	lsls	r3, r5, #2
 8002162:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002166:	00a2      	lsls	r2, r4, #2
 8002168:	4614      	mov	r4, r2
 800216a:	461d      	mov	r5, r3
 800216c:	eb14 080a 	adds.w	r8, r4, sl
 8002170:	eb45 090b 	adc.w	r9, r5, fp
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002180:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002184:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002188:	4690      	mov	r8, r2
 800218a:	4699      	mov	r9, r3
 800218c:	e9c7 8922 	strd	r8, r9, [r7, #136]	@ 0x88
    for (uint8_t i=0; i < cmd.commands.len; i++) {
 8002190:	2300      	movs	r3, #0
 8002192:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8002196:	e068      	b.n	800226a <handle_ArrayCommand+0x15e>
        if (cmd.commands.data[i].actuator_id >= NUM_SERVOS) {
 8002198:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	3398      	adds	r3, #152	@ 0x98
 80021a0:	443b      	add	r3, r7
 80021a2:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d859      	bhi.n	800225e <handle_ArrayCommand+0x152>
            // not for us
            continue;
        }
        switch (cmd.commands.data[i].command_type) {
 80021aa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	3398      	adds	r3, #152	@ 0x98
 80021b2:	443b      	add	r3, r7
 80021b4:	f813 3c87 	ldrb.w	r3, [r3, #-135]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <handle_ArrayCommand+0xb6>
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d014      	beq.n	80021ea <handle_ArrayCommand+0xde>
 80021c0:	e03c      	b.n	800223c <handle_ArrayCommand+0x130>
        case UAVCAN_EQUIPMENT_ACTUATOR_COMMAND_COMMAND_TYPE_UNITLESS:
            servos[cmd.commands.data[i].actuator_id].position = cmd.commands.data[i].command_value;
 80021c2:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80021c6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	3398      	adds	r3, #152	@ 0x98
 80021ce:	443b      	add	r3, r7
 80021d0:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 80021d4:	4618      	mov	r0, r3
 80021d6:	00d3      	lsls	r3, r2, #3
 80021d8:	3398      	adds	r3, #152	@ 0x98
 80021da:	443b      	add	r3, r7
 80021dc:	3b84      	subs	r3, #132	@ 0x84
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4927      	ldr	r1, [pc, #156]	@ (8002280 <handle_ArrayCommand+0x174>)
 80021e2:	0103      	lsls	r3, r0, #4
 80021e4:	440b      	add	r3, r1
 80021e6:	601a      	str	r2, [r3, #0]
            break;
 80021e8:	e028      	b.n	800223c <handle_ArrayCommand+0x130>
        case UAVCAN_EQUIPMENT_ACTUATOR_COMMAND_COMMAND_TYPE_PWM:
            // map PWM to -1 to 1, assuming 1500 trim. If the servo has natural PWM
            // support then we should use it directly instead
            servos[cmd.commands.data[i].actuator_id].position = (cmd.commands.data[i].command_value-PWM_TRIM)/PWM_SCALE_FACTOR;
 80021ea:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	3398      	adds	r3, #152	@ 0x98
 80021f2:	443b      	add	r3, r7
 80021f4:	3b84      	subs	r3, #132	@ 0x84
 80021f6:	ed93 7a00 	vldr	s14, [r3]
 80021fa:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8002284 <handle_ArrayCommand+0x178>
 80021fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002202:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002206:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002288 <handle_ArrayCommand+0x17c>
 800220a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	3398      	adds	r3, #152	@ 0x98
 8002212:	443b      	add	r3, r7
 8002214:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8002218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800221c:	4a18      	ldr	r2, [pc, #96]	@ (8002280 <handle_ArrayCommand+0x174>)
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	4413      	add	r3, r2
 8002222:	edc3 7a00 	vstr	s15, [r3]
            //set the PWM signal duty cycle
            setServoPWM(cmd.commands.data[i].actuator_id);
 8002226:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	3398      	adds	r3, #152	@ 0x98
 800222e:	443b      	add	r3, r7
 8002230:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fd1d 	bl	8001c74 <setServoPWM>
            break;
 800223a:	bf00      	nop
        }
        servos[cmd.commands.data[i].actuator_id].last_update_us = tnow;
 800223c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	3398      	adds	r3, #152	@ 0x98
 8002244:	443b      	add	r3, r7
 8002246:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 800224a:	4a0d      	ldr	r2, [pc, #52]	@ (8002280 <handle_ArrayCommand+0x174>)
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	4413      	add	r3, r2
 8002250:	f103 0108 	add.w	r1, r3, #8
 8002254:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002258:	e9c1 2300 	strd	r2, r3, [r1]
 800225c:	e000      	b.n	8002260 <handle_ArrayCommand+0x154>
            continue;
 800225e:	bf00      	nop
    for (uint8_t i=0; i < cmd.commands.len; i++) {
 8002260:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002264:	3301      	adds	r3, #1
 8002266:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800226a:	7b3b      	ldrb	r3, [r7, #12]
 800226c:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8002270:	429a      	cmp	r2, r3
 8002272:	d391      	bcc.n	8002198 <handle_ArrayCommand+0x8c>
 8002274:	e000      	b.n	8002278 <handle_ArrayCommand+0x16c>
        return;
 8002276:	bf00      	nop

        //call a function to run the servos with the data set in this function
    }
}
 8002278:	3798      	adds	r7, #152	@ 0x98
 800227a:	46bd      	mov	sp, r7
 800227c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002280:	200004e0 	.word	0x200004e0
 8002284:	000005dc 	.word	0x000005dc
 8002288:	43fa0000 	.word	0x43fa0000

0800228c <onTransferReceived>:


void onTransferReceived(CanardInstance *ins, CanardRxTransfer *transfer) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
	// switch on data type ID to pass to the right handler function
	printf("Transfer type: %du, Transfer ID: %du \n", transfer->transfer_type, transfer->data_type_id);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	7e1b      	ldrb	r3, [r3, #24]
 800229a:	4619      	mov	r1, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	8adb      	ldrh	r3, [r3, #22]
 80022a0:	461a      	mov	r2, r3
 80022a2:	482a      	ldr	r0, [pc, #168]	@ (800234c <onTransferReceived+0xc0>)
 80022a4:	f004 f8c2 	bl	800642c <iprintf>
	printf("0x");
 80022a8:	4829      	ldr	r0, [pc, #164]	@ (8002350 <onTransferReceived+0xc4>)
 80022aa:	f004 f8bf 	bl	800642c <iprintf>
		for (int i = 0; i < transfer->payload_len; i++) {
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	e00b      	b.n	80022cc <onTransferReceived+0x40>
			printf("%02x", transfer->payload_head[i]);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	4619      	mov	r1, r3
 80022c0:	4824      	ldr	r0, [pc, #144]	@ (8002354 <onTransferReceived+0xc8>)
 80022c2:	f004 f8b3 	bl	800642c <iprintf>
		for (int i = 0; i < transfer->payload_len; i++) {
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3301      	adds	r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	8a9b      	ldrh	r3, [r3, #20]
 80022d0:	461a      	mov	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4293      	cmp	r3, r2
 80022d6:	dbed      	blt.n	80022b4 <onTransferReceived+0x28>
		}

		printf("\n");
 80022d8:	200a      	movs	r0, #10
 80022da:	f004 f8b9 	bl	8006450 <putchar>
		if (transfer->transfer_type == CanardTransferTypeBroadcast) {
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	7e1b      	ldrb	r3, [r3, #24]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d121      	bne.n	800232a <onTransferReceived+0x9e>
			// check if we want to handle a specific broadcast message
			switch (transfer->data_type_id) {
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	8adb      	ldrh	r3, [r3, #22]
 80022ea:	f644 6227 	movw	r2, #20007	@ 0x4e27
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d011      	beq.n	8002316 <onTransferReceived+0x8a>
 80022f2:	f644 6227 	movw	r2, #20007	@ 0x4e27
 80022f6:	4293      	cmp	r3, r2
 80022f8:	dc17      	bgt.n	800232a <onTransferReceived+0x9e>
 80022fa:	f240 1255 	movw	r2, #341	@ 0x155
 80022fe:	4293      	cmp	r3, r2
 8002300:	d004      	beq.n	800230c <onTransferReceived+0x80>
 8002302:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 8002306:	4293      	cmp	r3, r2
 8002308:	d00a      	beq.n	8002320 <onTransferReceived+0x94>
 800230a:	e00e      	b.n	800232a <onTransferReceived+0x9e>
			case UAVCAN_PROTOCOL_NODESTATUS_ID: {
				handle_NodeStatus(ins, transfer);
 800230c:	6839      	ldr	r1, [r7, #0]
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fe16 	bl	8001f40 <handle_NodeStatus>
				break;
 8002314:	e009      	b.n	800232a <onTransferReceived+0x9e>
			}
			case ARDUPILOT_INDICATION_NOTIFYSTATE_ID: {
				handle_NotifyState(ins, transfer);
 8002316:	6839      	ldr	r1, [r7, #0]
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff fe9b 	bl	8002054 <handle_NotifyState>
				break;
 800231e:	e004      	b.n	800232a <onTransferReceived+0x9e>
			}
			case UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_ID:{
				handle_ArrayCommand(ins, transfer);
 8002320:	6839      	ldr	r1, [r7, #0]
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fef2 	bl	800210c <handle_ArrayCommand>
				break;
 8002328:	bf00      	nop
			}
			}
		}
		if (transfer->transfer_type == CanardTransferTypeRequest){
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	7e1b      	ldrb	r3, [r3, #24]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d108      	bne.n	8002344 <onTransferReceived+0xb8>
			switch (transfer->data_type_id){
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	8adb      	ldrh	r3, [r3, #22]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d104      	bne.n	8002344 <onTransferReceived+0xb8>
			case UAVCAN_PROTOCOL_GETNODEINFO_ID:{
				handle_GetNodeInfo(ins, transfer);
 800233a:	6839      	ldr	r1, [r7, #0]
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff fd43 	bl	8001dc8 <handle_GetNodeInfo>
				break;
 8002342:	bf00      	nop
			}
			}
		}
}
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	08007440 	.word	0x08007440
 8002350:	08007360 	.word	0x08007360
 8002354:	08007364 	.word	0x08007364

08002358 <shouldAcceptTransfer>:
bool shouldAcceptTransfer(const CanardInstance *ins,
                                 uint64_t *out_data_type_signature,
                                 uint16_t data_type_id,
                                 CanardTransferType transfer_type,
                                 uint8_t source_node_id)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	4611      	mov	r1, r2
 8002364:	461a      	mov	r2, r3
 8002366:	460b      	mov	r3, r1
 8002368:	80fb      	strh	r3, [r7, #6]
 800236a:	4613      	mov	r3, r2
 800236c:	717b      	strb	r3, [r7, #5]
	if (transfer_type == CanardTransferTypeRequest) {
 800236e:	797b      	ldrb	r3, [r7, #5]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d17f      	bne.n	8002474 <shouldAcceptTransfer+0x11c>
	// check if we want to handle a specific service request
	switch (data_type_id) {
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	3b01      	subs	r3, #1
 8002378:	2b27      	cmp	r3, #39	@ 0x27
 800237a:	d87b      	bhi.n	8002474 <shouldAcceptTransfer+0x11c>
 800237c:	a201      	add	r2, pc, #4	@ (adr r2, 8002384 <shouldAcceptTransfer+0x2c>)
 800237e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002382:	bf00      	nop
 8002384:	08002425 	.word	0x08002425
 8002388:	08002475 	.word	0x08002475
 800238c:	08002475 	.word	0x08002475
 8002390:	08002475 	.word	0x08002475
 8002394:	08002455 	.word	0x08002455
 8002398:	08002475 	.word	0x08002475
 800239c:	08002475 	.word	0x08002475
 80023a0:	08002475 	.word	0x08002475
 80023a4:	08002475 	.word	0x08002475
 80023a8:	08002445 	.word	0x08002445
 80023ac:	08002435 	.word	0x08002435
 80023b0:	08002475 	.word	0x08002475
 80023b4:	08002475 	.word	0x08002475
 80023b8:	08002475 	.word	0x08002475
 80023bc:	08002475 	.word	0x08002475
 80023c0:	08002475 	.word	0x08002475
 80023c4:	08002475 	.word	0x08002475
 80023c8:	08002475 	.word	0x08002475
 80023cc:	08002475 	.word	0x08002475
 80023d0:	08002475 	.word	0x08002475
 80023d4:	08002475 	.word	0x08002475
 80023d8:	08002475 	.word	0x08002475
 80023dc:	08002475 	.word	0x08002475
 80023e0:	08002475 	.word	0x08002475
 80023e4:	08002475 	.word	0x08002475
 80023e8:	08002475 	.word	0x08002475
 80023ec:	08002475 	.word	0x08002475
 80023f0:	08002475 	.word	0x08002475
 80023f4:	08002475 	.word	0x08002475
 80023f8:	08002475 	.word	0x08002475
 80023fc:	08002475 	.word	0x08002475
 8002400:	08002475 	.word	0x08002475
 8002404:	08002475 	.word	0x08002475
 8002408:	08002475 	.word	0x08002475
 800240c:	08002475 	.word	0x08002475
 8002410:	08002475 	.word	0x08002475
 8002414:	08002475 	.word	0x08002475
 8002418:	08002475 	.word	0x08002475
 800241c:	08002475 	.word	0x08002475
 8002420:	08002465 	.word	0x08002465
	case UAVCAN_PROTOCOL_GETNODEINFO_ID: {
		*out_data_type_signature = UAVCAN_PROTOCOL_GETNODEINFO_REQUEST_SIGNATURE;
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	a334      	add	r3, pc, #208	@ (adr r3, 80024f8 <shouldAcceptTransfer+0x1a0>)
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 8002430:	2301      	movs	r3, #1
 8002432:	e05a      	b.n	80024ea <shouldAcceptTransfer+0x192>
	}
	case UAVCAN_PROTOCOL_PARAM_GETSET_ID: {
		*out_data_type_signature = UAVCAN_PROTOCOL_PARAM_GETSET_SIGNATURE;
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	a332      	add	r3, pc, #200	@ (adr r3, 8002500 <shouldAcceptTransfer+0x1a8>)
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 8002440:	2301      	movs	r3, #1
 8002442:	e052      	b.n	80024ea <shouldAcceptTransfer+0x192>
	}
	case UAVCAN_PROTOCOL_PARAM_EXECUTEOPCODE_ID: {
		*out_data_type_signature = UAVCAN_PROTOCOL_PARAM_EXECUTEOPCODE_SIGNATURE;
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	a330      	add	r3, pc, #192	@ (adr r3, 8002508 <shouldAcceptTransfer+0x1b0>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 8002450:	2301      	movs	r3, #1
 8002452:	e04a      	b.n	80024ea <shouldAcceptTransfer+0x192>
	}
	case UAVCAN_PROTOCOL_RESTARTNODE_ID: {
		*out_data_type_signature = UAVCAN_PROTOCOL_RESTARTNODE_SIGNATURE;
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	a32e      	add	r3, pc, #184	@ (adr r3, 8002510 <shouldAcceptTransfer+0x1b8>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 8002460:	2301      	movs	r3, #1
 8002462:	e042      	b.n	80024ea <shouldAcceptTransfer+0x192>
	}
	case UAVCAN_PROTOCOL_FILE_BEGINFIRMWAREUPDATE_ID:
		*out_data_type_signature = UAVCAN_PROTOCOL_FILE_BEGINFIRMWAREUPDATE_SIGNATURE;
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	a32c      	add	r3, pc, #176	@ (adr r3, 8002518 <shouldAcceptTransfer+0x1c0>)
 8002468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 8002470:	2301      	movs	r3, #1
 8002472:	e03a      	b.n	80024ea <shouldAcceptTransfer+0x192>
	}
	}
	if (transfer_type == CanardTransferTypeResponse) {
 8002474:	797b      	ldrb	r3, [r7, #5]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10a      	bne.n	8002490 <shouldAcceptTransfer+0x138>
		// check if we want to handle a specific service request
		switch (data_type_id) {
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	2b30      	cmp	r3, #48	@ 0x30
 800247e:	d107      	bne.n	8002490 <shouldAcceptTransfer+0x138>
		case UAVCAN_PROTOCOL_FILE_READ_ID:
			*out_data_type_signature = UAVCAN_PROTOCOL_FILE_READ_SIGNATURE;
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	a327      	add	r3, pc, #156	@ (adr r3, 8002520 <shouldAcceptTransfer+0x1c8>)
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 800248c:	2301      	movs	r3, #1
 800248e:	e02c      	b.n	80024ea <shouldAcceptTransfer+0x192>
		}
	}
	if (transfer_type == CanardTransferTypeBroadcast) {
 8002490:	797b      	ldrb	r3, [r7, #5]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d128      	bne.n	80024e8 <shouldAcceptTransfer+0x190>
		// see if we want to handle a specific broadcast packet
		switch (data_type_id) {
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	f644 6227 	movw	r2, #20007	@ 0x4e27
 800249c:	4293      	cmp	r3, r2
 800249e:	d01b      	beq.n	80024d8 <shouldAcceptTransfer+0x180>
 80024a0:	f644 6227 	movw	r2, #20007	@ 0x4e27
 80024a4:	4293      	cmp	r3, r2
 80024a6:	dc1f      	bgt.n	80024e8 <shouldAcceptTransfer+0x190>
 80024a8:	f240 1255 	movw	r2, #341	@ 0x155
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00b      	beq.n	80024c8 <shouldAcceptTransfer+0x170>
 80024b0:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d117      	bne.n	80024e8 <shouldAcceptTransfer+0x190>
		case UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_ID: {
			*out_data_type_signature = UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_SIGNATURE; //Change this
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	a31b      	add	r3, pc, #108	@ (adr r3, 8002528 <shouldAcceptTransfer+0x1d0>)
 80024bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c0:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e010      	b.n	80024ea <shouldAcceptTransfer+0x192>
		}
		case UAVCAN_PROTOCOL_NODESTATUS_ID: {
			*out_data_type_signature = UAVCAN_PROTOCOL_NODESTATUS_SIGNATURE;
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	a319      	add	r3, pc, #100	@ (adr r3, 8002530 <shouldAcceptTransfer+0x1d8>)
 80024cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d0:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e008      	b.n	80024ea <shouldAcceptTransfer+0x192>
		}
		case ARDUPILOT_INDICATION_NOTIFYSTATE_ID: {
			*out_data_type_signature = ARDUPILOT_INDICATION_NOTIFYSTATE_SIGNATURE;
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	a317      	add	r3, pc, #92	@ (adr r3, 8002538 <shouldAcceptTransfer+0x1e0>)
 80024dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e0:	e9c1 2300 	strd	r2, r3, [r1]
			return true;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <shouldAcceptTransfer+0x192>
		}
		}
	}
	// we don't want any other messages
	return false;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	21c46a9e 	.word	0x21c46a9e
 80024fc:	ee468a81 	.word	0xee468a81
 8002500:	39d1a4d5 	.word	0x39d1a4d5
 8002504:	a7b622f9 	.word	0xa7b622f9
 8002508:	eb69d2cd 	.word	0xeb69d2cd
 800250c:	3b131ac5 	.word	0x3b131ac5
 8002510:	4a3017f0 	.word	0x4a3017f0
 8002514:	569e0539 	.word	0x569e0539
 8002518:	72724126 	.word	0x72724126
 800251c:	b7d725df 	.word	0xb7d725df
 8002520:	9f33f678 	.word	0x9f33f678
 8002524:	8dcdca93 	.word	0x8dcdca93
 8002528:	38ec3af3 	.word	0x38ec3af3
 800252c:	d8a74862 	.word	0xd8a74862
 8002530:	c1a7c6f1 	.word	0xc1a7c6f1
 8002534:	0f0868d0 	.word	0x0f0868d0
 8002538:	1651fdec 	.word	0x1651fdec
 800253c:	631f2a9c 	.word	0x631f2a9c

08002540 <send_NodeStatus>:
/*
  send the 1Hz NodeStatus message. This is what allows a node to show
  up in the DroneCAN GUI tool and in the flight controller logs
 */
static void send_NodeStatus(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b0e6      	sub	sp, #408	@ 0x198
 8002544:	af06      	add	r7, sp, #24
    uint8_t buffer[UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE];

    node_status.uptime_sec = HAL_GetTick() / 1000ULL;
 8002546:	f001 f98b 	bl	8003860 <HAL_GetTick>
 800254a:	4603      	mov	r3, r0
 800254c:	4a1a      	ldr	r2, [pc, #104]	@ (80025b8 <send_NodeStatus+0x78>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	099b      	lsrs	r3, r3, #6
 8002554:	4a19      	ldr	r2, [pc, #100]	@ (80025bc <send_NodeStatus+0x7c>)
 8002556:	6013      	str	r3, [r2, #0]
    node_status.health = UAVCAN_PROTOCOL_NODESTATUS_HEALTH_OK;
 8002558:	4b18      	ldr	r3, [pc, #96]	@ (80025bc <send_NodeStatus+0x7c>)
 800255a:	2200      	movs	r2, #0
 800255c:	711a      	strb	r2, [r3, #4]
    node_status.mode = UAVCAN_PROTOCOL_NODESTATUS_MODE_OPERATIONAL;
 800255e:	4b17      	ldr	r3, [pc, #92]	@ (80025bc <send_NodeStatus+0x7c>)
 8002560:	2200      	movs	r2, #0
 8002562:	715a      	strb	r2, [r3, #5]
    node_status.sub_mode = 0;
 8002564:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <send_NodeStatus+0x7c>)
 8002566:	2200      	movs	r2, #0
 8002568:	719a      	strb	r2, [r3, #6]
    // put whatever you like in here for display in GUI
    node_status.vendor_specific_status_code = 1234;
 800256a:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <send_NodeStatus+0x7c>)
 800256c:	f240 42d2 	movw	r2, #1234	@ 0x4d2
 8002570:	811a      	strh	r2, [r3, #8]


    uint32_t len = uavcan_protocol_NodeStatus_encode(&node_status, buffer);
 8002572:	463b      	mov	r3, r7
 8002574:	4619      	mov	r1, r3
 8002576:	4811      	ldr	r0, [pc, #68]	@ (80025bc <send_NodeStatus+0x7c>)
 8002578:	f001 f8cc 	bl	8003714 <uavcan_protocol_NodeStatus_encode>
 800257c:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    // we need a static variable for the transfer ID. This is
    // incremeneted on each transfer, allowing for detection of packet
    // loss
    static uint8_t transfer_id;

    canardBroadcast(&canard,
 8002580:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8002584:	b29b      	uxth	r3, r3
 8002586:	9304      	str	r3, [sp, #16]
 8002588:	463b      	mov	r3, r7
 800258a:	9303      	str	r3, [sp, #12]
 800258c:	2318      	movs	r3, #24
 800258e:	9302      	str	r3, [sp, #8]
 8002590:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <send_NodeStatus+0x80>)
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	f240 1355 	movw	r3, #341	@ 0x155
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	a305      	add	r3, pc, #20	@ (adr r3, 80025b0 <send_NodeStatus+0x70>)
 800259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a0:	4808      	ldr	r0, [pc, #32]	@ (80025c4 <send_NodeStatus+0x84>)
 80025a2:	f7fe f915 	bl	80007d0 <canardBroadcast>
                    UAVCAN_PROTOCOL_NODESTATUS_ID,
                    &transfer_id,
                    CANARD_TRANSFER_PRIORITY_LOW,
                    buffer,
                    len);
}
 80025a6:	bf00      	nop
 80025a8:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	c1a7c6f1 	.word	0xc1a7c6f1
 80025b4:	0f0868d0 	.word	0x0f0868d0
 80025b8:	10624dd3 	.word	0x10624dd3
 80025bc:	20000520 	.word	0x20000520
 80025c0:	2000052c 	.word	0x2000052c
 80025c4:	200000b0 	.word	0x200000b0

080025c8 <processCanardTxQueue>:


void processCanardTxQueue(CAN_HandleTypeDef *hcan) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	// Transmitting

	for (const CanardCANFrame *tx_frame ; (tx_frame = canardPeekTxQueue(&canard)) != NULL;) {
 80025d0:	e01a      	b.n	8002608 <processCanardTxQueue+0x40>
		const int16_t tx_res = canardSTM32Transmit(hcan, tx_frame);
 80025d2:	68f9      	ldr	r1, [r7, #12]
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff fab5 	bl	8001b44 <canardSTM32Transmit>
 80025da:	4603      	mov	r3, r0
 80025dc:	817b      	strh	r3, [r7, #10]

		if (tx_res < 0) {
 80025de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	da06      	bge.n	80025f4 <processCanardTxQueue+0x2c>
			printf("Transmit error %d\n", tx_res);
 80025e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025ea:	4619      	mov	r1, r3
 80025ec:	480c      	ldr	r0, [pc, #48]	@ (8002620 <processCanardTxQueue+0x58>)
 80025ee:	f003 ff1d 	bl	800642c <iprintf>
 80025f2:	e006      	b.n	8002602 <processCanardTxQueue+0x3a>
		} else if (tx_res > 0) {
 80025f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	dd02      	ble.n	8002602 <processCanardTxQueue+0x3a>
			printf("Successfully transmitted message\n");
 80025fc:	4809      	ldr	r0, [pc, #36]	@ (8002624 <processCanardTxQueue+0x5c>)
 80025fe:	f003 ff85 	bl	800650c <puts>
		}

		// Pop canardTxQueue either way
		canardPopTxQueue(&canard);
 8002602:	4809      	ldr	r0, [pc, #36]	@ (8002628 <processCanardTxQueue+0x60>)
 8002604:	f7fe fa79 	bl	8000afa <canardPopTxQueue>
	for (const CanardCANFrame *tx_frame ; (tx_frame = canardPeekTxQueue(&canard)) != NULL;) {
 8002608:	4807      	ldr	r0, [pc, #28]	@ (8002628 <processCanardTxQueue+0x60>)
 800260a:	f7fe fa63 	bl	8000ad4 <canardPeekTxQueue>
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1dd      	bne.n	80025d2 <processCanardTxQueue+0xa>
	}
}
 8002616:	bf00      	nop
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	08007468 	.word	0x08007468
 8002624:	0800747c 	.word	0x0800747c
 8002628:	200000b0 	.word	0x200000b0

0800262c <process1HzTasks>:

/*
  This function is called at 1 Hz rate from the main loop.
*/
static void process1HzTasks(uint64_t timestamp_usec)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	e9c7 0100 	strd	r0, r1, [r7]
    /*
      Purge transfers that are no longer transmitted. This can free up some memory
    */
    canardCleanupStaleTransfers(&canard, timestamp_usec);
 8002636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800263a:	4804      	ldr	r0, [pc, #16]	@ (800264c <process1HzTasks+0x20>)
 800263c:	f7fe fa72 	bl	8000b24 <canardCleanupStaleTransfers>

    /*
      Transmit the node status message
    */
    send_NodeStatus();
 8002640:	f7ff ff7e 	bl	8002540 <send_NodeStatus>
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	200000b0 	.word	0x200000b0

08002650 <send_ServoStatus>:

/*
  send servo status at 50Hz
*/
static void send_ServoStatus(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b090      	sub	sp, #64	@ 0x40
 8002654:	af06      	add	r7, sp, #24
    // send a separate status packet for each servo
    for (uint8_t i=0; i<NUM_SERVOS; i++) {
 8002656:	2300      	movs	r3, #0
 8002658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800265c:	e040      	b.n	80026e0 <send_ServoStatus+0x90>
        struct uavcan_equipment_actuator_Status pkt;
        memset(&pkt, 0, sizeof(pkt));
 800265e:	f107 030c 	add.w	r3, r7, #12
 8002662:	2214      	movs	r2, #20
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f004 f830 	bl	80066cc <memset>
        uint8_t buffer[UAVCAN_EQUIPMENT_ACTUATOR_STATUS_MAX_SIZE];

        // make up some synthetic status data
        pkt.actuator_id = i;
 800266c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002670:	733b      	strb	r3, [r7, #12]
        pkt.position = servos[i].position;
 8002672:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002676:	4a22      	ldr	r2, [pc, #136]	@ (8002700 <send_ServoStatus+0xb0>)
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	4413      	add	r3, r2
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	613b      	str	r3, [r7, #16]
        pkt.force = 3.5 * servos[i].position;
 8002680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002684:	4a1e      	ldr	r2, [pc, #120]	@ (8002700 <send_ServoStatus+0xb0>)
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	4413      	add	r3, r2
 800268a:	edd3 7a00 	vldr	s15, [r3]
 800268e:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8002692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002696:	edc7 7a05 	vstr	s15, [r7, #20]
        pkt.speed = 0.12; // m/s or rad/s
 800269a:	4b1a      	ldr	r3, [pc, #104]	@ (8002704 <send_ServoStatus+0xb4>)
 800269c:	61bb      	str	r3, [r7, #24]
        pkt.power_rating_pct = 17;
 800269e:	2311      	movs	r3, #17
 80026a0:	773b      	strb	r3, [r7, #28]

        uint32_t len = uavcan_equipment_actuator_Status_encode(&pkt, buffer);
 80026a2:	1d3a      	adds	r2, r7, #4
 80026a4:	f107 030c 	add.w	r3, r7, #12
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fdef 	bl	800328e <uavcan_equipment_actuator_Status_encode>
 80026b0:	6238      	str	r0, [r7, #32]
        // we need a static variable for the transfer ID. This is
        // incremeneted on each transfer, allowing for detection of packet
        // loss
        static uint8_t transfer_id;

        canardBroadcast(&canard,
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	9304      	str	r3, [sp, #16]
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	9303      	str	r3, [sp, #12]
 80026bc:	2318      	movs	r3, #24
 80026be:	9302      	str	r3, [sp, #8]
 80026c0:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <send_ServoStatus+0xb8>)
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	f240 33f3 	movw	r3, #1011	@ 0x3f3
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	a30b      	add	r3, pc, #44	@ (adr r3, 80026f8 <send_ServoStatus+0xa8>)
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	480e      	ldr	r0, [pc, #56]	@ (800270c <send_ServoStatus+0xbc>)
 80026d2:	f7fe f87d 	bl	80007d0 <canardBroadcast>
    for (uint8_t i=0; i<NUM_SERVOS; i++) {
 80026d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026da:	3301      	adds	r3, #1
 80026dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80026e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d9ba      	bls.n	800265e <send_ServoStatus+0xe>
                        &transfer_id,
                        CANARD_TRANSFER_PRIORITY_LOW,
                        buffer,
                        len);
    }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3728      	adds	r7, #40	@ 0x28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	f3af 8000 	nop.w
 80026f8:	faf1ea04 	.word	0xfaf1ea04
 80026fc:	5e9bba44 	.word	0x5e9bba44
 8002700:	200004e0 	.word	0x200004e0
 8002704:	3df5c28f 	.word	0x3df5c28f
 8002708:	2000052d 	.word	0x2000052d
 800270c:	200000b0 	.word	0x200000b0

08002710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002714:	b08c      	sub	sp, #48	@ 0x30
 8002716:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002718:	f001 f83a 	bl	8003790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800271c:	f000 f8a0 	bl	8002860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002720:	f7ff fa64 	bl	8001bec <MX_GPIO_Init>
  MX_CAN1_Init();
 8002724:	f7fd ff80 	bl	8000628 <MX_CAN1_Init>
  MX_TIM1_Init();
 8002728:	f000 fa04 	bl	8002b34 <MX_TIM1_Init>
  MX_TIM2_Init();
 800272c:	f000 faba 	bl	8002ca4 <MX_TIM2_Init>
	HAL_CAN_Start(&hcan1);
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
   */

	// configuring the pwm wave for servo module
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PULSE_RANGE*1.5);
 8002730:	4b44      	ldr	r3, [pc, #272]	@ (8002844 <main+0x134>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8002738:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PULSE_RANGE*1.5);
 800273a:	4b42      	ldr	r3, [pc, #264]	@ (8002844 <main+0x134>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8002742:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, PULSE_RANGE*1.5);
 8002744:	4b40      	ldr	r3, [pc, #256]	@ (8002848 <main+0x138>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 800274c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PULSE_RANGE*1.5);
 800274e:	4b3e      	ldr	r3, [pc, #248]	@ (8002848 <main+0x138>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8002756:	639a      	str	r2, [r3, #56]	@ 0x38

	// should be deleted if testing the can functionality with other board
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1)!= HAL_OK){
 8002758:	2100      	movs	r1, #0
 800275a:	483a      	ldr	r0, [pc, #232]	@ (8002844 <main+0x134>)
 800275c:	f002 fe5c 	bl	8005418 <HAL_TIM_PWM_Start>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <main+0x5a>
		Error_Handler();
 8002766:	f000 f8ca 	bl	80028fe <Error_Handler>
	}
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2)!= HAL_OK){
 800276a:	2104      	movs	r1, #4
 800276c:	4835      	ldr	r0, [pc, #212]	@ (8002844 <main+0x134>)
 800276e:	f002 fe53 	bl	8005418 <HAL_TIM_PWM_Start>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <main+0x6c>
		Error_Handler();
 8002778:	f000 f8c1 	bl	80028fe <Error_Handler>
	}
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1)!= HAL_OK){
 800277c:	2100      	movs	r1, #0
 800277e:	4832      	ldr	r0, [pc, #200]	@ (8002848 <main+0x138>)
 8002780:	f002 fe4a 	bl	8005418 <HAL_TIM_PWM_Start>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <main+0x7e>
		Error_Handler();
 800278a:	f000 f8b8 	bl	80028fe <Error_Handler>
	}
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2)!= HAL_OK){
 800278e:	2104      	movs	r1, #4
 8002790:	482d      	ldr	r0, [pc, #180]	@ (8002848 <main+0x138>)
 8002792:	f002 fe41 	bl	8005418 <HAL_TIM_PWM_Start>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <main+0x90>
		Error_Handler();
 800279c:	f000 f8af 	bl	80028fe <Error_Handler>
	}

	canardInit(&canard,
 80027a0:	2300      	movs	r3, #0
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	4b29      	ldr	r3, [pc, #164]	@ (800284c <main+0x13c>)
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	4b29      	ldr	r3, [pc, #164]	@ (8002850 <main+0x140>)
 80027aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027ae:	4929      	ldr	r1, [pc, #164]	@ (8002854 <main+0x144>)
 80027b0:	4829      	ldr	r0, [pc, #164]	@ (8002858 <main+0x148>)
 80027b2:	f7fd ffcd 	bl	8000750 <canardInit>
				  sizeof(memory_pool),
				  onTransferReceived,
				  shouldAcceptTransfer,
				  NULL);

	uint64_t next_1hz_service_at = HAL_GetTick();
 80027b6:	f001 f853 	bl	8003860 <HAL_GetTick>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2200      	movs	r2, #0
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	60fa      	str	r2, [r7, #12]
 80027c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint64_t next_50hz_service_at = HAL_GetTick();
 80027ca:	f001 f849 	bl	8003860 <HAL_GetTick>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2200      	movs	r2, #0
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027da:	e9c7 2306 	strd	r2, r3, [r7, #24]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  processCanardTxQueue(&hcan1);
 80027de:	481f      	ldr	r0, [pc, #124]	@ (800285c <main+0x14c>)
 80027e0:	f7ff fef2 	bl	80025c8 <processCanardTxQueue>
	  const uint64_t ts = HAL_GetTick();
 80027e4:	f001 f83c 	bl	8003860 <HAL_GetTick>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2200      	movs	r2, #0
 80027ec:	469a      	mov	sl, r3
 80027ee:	4693      	mov	fp, r2
 80027f0:	e9c7 ab04 	strd	sl, fp, [r7, #16]

	  if (ts >= next_1hz_service_at){
 80027f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027fc:	4290      	cmp	r0, r2
 80027fe:	eb71 0303 	sbcs.w	r3, r1, r3
 8002802:	d30b      	bcc.n	800281c <main+0x10c>
		  next_1hz_service_at += 1000ULL;
 8002804:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002808:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 800280c:	f143 0500 	adc.w	r5, r3, #0
 8002810:	e9c7 4508 	strd	r4, r5, [r7, #32]
		  process1HzTasks(ts);
 8002814:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002818:	f7ff ff08 	bl	800262c <process1HzTasks>
	  }
	  if (ts >= next_50hz_service_at){
 800281c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002824:	4290      	cmp	r0, r2
 8002826:	eb71 0303 	sbcs.w	r3, r1, r3
 800282a:	d3d8      	bcc.n	80027de <main+0xce>
		  next_50hz_service_at += 1000ULL/50U;
 800282c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002830:	f112 0814 	adds.w	r8, r2, #20
 8002834:	f143 0900 	adc.w	r9, r3, #0
 8002838:	e9c7 8906 	strd	r8, r9, [r7, #24]
		  send_ServoStatus();
 800283c:	f7ff ff08 	bl	8002650 <send_ServoStatus>
  {
 8002840:	e7cd      	b.n	80027de <main+0xce>
 8002842:	bf00      	nop
 8002844:	20000534 	.word	0x20000534
 8002848:	20000580 	.word	0x20000580
 800284c:	08002359 	.word	0x08002359
 8002850:	0800228d 	.word	0x0800228d
 8002854:	200000dc 	.word	0x200000dc
 8002858:	200000b0 	.word	0x200000b0
 800285c:	20000084 	.word	0x20000084

08002860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b096      	sub	sp, #88	@ 0x58
 8002864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	2244      	movs	r2, #68	@ 0x44
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f003 ff2c 	bl	80066cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002874:	463b      	mov	r3, r7
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	60da      	str	r2, [r3, #12]
 8002880:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002882:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002886:	f001 feb9 	bl	80045fc <HAL_PWREx_ControlVoltageScaling>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002890:	f000 f835 	bl	80028fe <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002894:	2301      	movs	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002898:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800289c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800289e:	2302      	movs	r3, #2
 80028a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028a2:	2303      	movs	r3, #3
 80028a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 12;
 80028aa:	230c      	movs	r3, #12
 80028ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80028ae:	2307      	movs	r3, #7
 80028b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80028b2:	2302      	movs	r3, #2
 80028b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028b6:	2302      	movs	r3, #2
 80028b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 fef2 	bl	80046a8 <HAL_RCC_OscConfig>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80028ca:	f000 f818 	bl	80028fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ce:	230f      	movs	r3, #15
 80028d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028d2:	2303      	movs	r3, #3
 80028d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028e2:	463b      	mov	r3, r7
 80028e4:	2102      	movs	r1, #2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f002 faf2 	bl	8004ed0 <HAL_RCC_ClockConfig>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80028f2:	f000 f804 	bl	80028fe <Error_Handler>
  }
}
 80028f6:	bf00      	nop
 80028f8:	3758      	adds	r7, #88	@ 0x58
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002902:	b672      	cpsid	i
}
 8002904:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002906:	bf00      	nop
 8002908:	e7fd      	b.n	8002906 <Error_Handler+0x8>
	...

0800290c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002912:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <HAL_MspInit+0x44>)
 8002914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002916:	4a0e      	ldr	r2, [pc, #56]	@ (8002950 <HAL_MspInit+0x44>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6613      	str	r3, [r2, #96]	@ 0x60
 800291e:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <HAL_MspInit+0x44>)
 8002920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_MspInit+0x44>)
 800292c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292e:	4a08      	ldr	r2, [pc, #32]	@ (8002950 <HAL_MspInit+0x44>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002934:	6593      	str	r3, [r2, #88]	@ 0x58
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_MspInit+0x44>)
 8002938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000

08002954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <NMI_Handler+0x4>

0800295c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <HardFault_Handler+0x4>

08002964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002968:	bf00      	nop
 800296a:	e7fd      	b.n	8002968 <MemManage_Handler+0x4>

0800296c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <BusFault_Handler+0x4>

08002974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <UsageFault_Handler+0x4>

0800297c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029aa:	f000 ff45 	bl	8003838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80029b8:	4802      	ldr	r0, [pc, #8]	@ (80029c4 <CAN1_RX0_IRQHandler+0x10>)
 80029ba:	f001 f94c 	bl	8003c56 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000084 	.word	0x20000084

080029c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	e00a      	b.n	80029f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029da:	f3af 8000 	nop.w
 80029de:	4601      	mov	r1, r0
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	60ba      	str	r2, [r7, #8]
 80029e6:	b2ca      	uxtb	r2, r1
 80029e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3301      	adds	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	dbf0      	blt.n	80029da <_read+0x12>
  }

  return len;
 80029f8:	687b      	ldr	r3, [r7, #4]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	e009      	b.n	8002a28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	60ba      	str	r2, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3301      	adds	r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	dbf1      	blt.n	8002a14 <_write+0x12>
  }
  return len;
 8002a30:	687b      	ldr	r3, [r7, #4]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_close>:

int _close(int file)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a62:	605a      	str	r2, [r3, #4]
  return 0;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <_isatty>:

int _isatty(int file)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a7a:	2301      	movs	r3, #1
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aac:	4a14      	ldr	r2, [pc, #80]	@ (8002b00 <_sbrk+0x5c>)
 8002aae:	4b15      	ldr	r3, [pc, #84]	@ (8002b04 <_sbrk+0x60>)
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab8:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <_sbrk+0x64>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <_sbrk+0x64>)
 8002ac2:	4a12      	ldr	r2, [pc, #72]	@ (8002b0c <_sbrk+0x68>)
 8002ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ac6:	4b10      	ldr	r3, [pc, #64]	@ (8002b08 <_sbrk+0x64>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d207      	bcs.n	8002ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad4:	f003 fe68 	bl	80067a8 <__errno>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	220c      	movs	r2, #12
 8002adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	e009      	b.n	8002af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae4:	4b08      	ldr	r3, [pc, #32]	@ (8002b08 <_sbrk+0x64>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aea:	4b07      	ldr	r3, [pc, #28]	@ (8002b08 <_sbrk+0x64>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	4a05      	ldr	r2, [pc, #20]	@ (8002b08 <_sbrk+0x64>)
 8002af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20010000 	.word	0x20010000
 8002b04:	00000400 	.word	0x00000400
 8002b08:	20000530 	.word	0x20000530
 8002b0c:	20000720 	.word	0x20000720

08002b10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b14:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <SystemInit+0x20>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1a:	4a05      	ldr	r2, [pc, #20]	@ (8002b30 <SystemInit+0x20>)
 8002b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b09a      	sub	sp, #104	@ 0x68
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b3a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b48:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	611a      	str	r2, [r3, #16]
 8002b64:	615a      	str	r2, [r3, #20]
 8002b66:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b68:	1d3b      	adds	r3, r7, #4
 8002b6a:	222c      	movs	r2, #44	@ 0x2c
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 fdac 	bl	80066cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b74:	4b49      	ldr	r3, [pc, #292]	@ (8002c9c <MX_TIM1_Init+0x168>)
 8002b76:	4a4a      	ldr	r2, [pc, #296]	@ (8002ca0 <MX_TIM1_Init+0x16c>)
 8002b78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14;
 8002b7a:	4b48      	ldr	r3, [pc, #288]	@ (8002c9c <MX_TIM1_Init+0x168>)
 8002b7c:	220e      	movs	r2, #14
 8002b7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b80:	4b46      	ldr	r3, [pc, #280]	@ (8002c9c <MX_TIM1_Init+0x168>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000;
 8002b86:	4b45      	ldr	r3, [pc, #276]	@ (8002c9c <MX_TIM1_Init+0x168>)
 8002b88:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 8002b8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8e:	4b43      	ldr	r3, [pc, #268]	@ (8002c9c <MX_TIM1_Init+0x168>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b94:	4b41      	ldr	r3, [pc, #260]	@ (8002c9c <MX_TIM1_Init+0x168>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b9a:	4b40      	ldr	r3, [pc, #256]	@ (8002c9c <MX_TIM1_Init+0x168>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ba0:	483e      	ldr	r0, [pc, #248]	@ (8002c9c <MX_TIM1_Init+0x168>)
 8002ba2:	f002 fb81 	bl	80052a8 <HAL_TIM_Base_Init>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002bac:	f7ff fea7 	bl	80028fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bb4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002bb6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4837      	ldr	r0, [pc, #220]	@ (8002c9c <MX_TIM1_Init+0x168>)
 8002bbe:	f002 fe1d 	bl	80057fc <HAL_TIM_ConfigClockSource>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002bc8:	f7ff fe99 	bl	80028fe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bcc:	4833      	ldr	r0, [pc, #204]	@ (8002c9c <MX_TIM1_Init+0x168>)
 8002bce:	f002 fbc2 	bl	8005356 <HAL_TIM_PWM_Init>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002bd8:	f7ff fe91 	bl	80028fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002be0:	2300      	movs	r3, #0
 8002be2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be4:	2300      	movs	r3, #0
 8002be6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002be8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002bec:	4619      	mov	r1, r3
 8002bee:	482b      	ldr	r0, [pc, #172]	@ (8002c9c <MX_TIM1_Init+0x168>)
 8002bf0:	f003 fa7c 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002bfa:	f7ff fe80 	bl	80028fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bfe:	2360      	movs	r3, #96	@ 0x60
 8002c00:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c06:	2300      	movs	r3, #0
 8002c08:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c16:	2300      	movs	r3, #0
 8002c18:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c1a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c1e:	2200      	movs	r2, #0
 8002c20:	4619      	mov	r1, r3
 8002c22:	481e      	ldr	r0, [pc, #120]	@ (8002c9c <MX_TIM1_Init+0x168>)
 8002c24:	f002 fcd6 	bl	80055d4 <HAL_TIM_PWM_ConfigChannel>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002c2e:	f7ff fe66 	bl	80028fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c36:	2204      	movs	r2, #4
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4818      	ldr	r0, [pc, #96]	@ (8002c9c <MX_TIM1_Init+0x168>)
 8002c3c:	f002 fcca 	bl	80055d4 <HAL_TIM_PWM_ConfigChannel>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002c46:	f7ff fe5a 	bl	80028fe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c70:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4807      	ldr	r0, [pc, #28]	@ (8002c9c <MX_TIM1_Init+0x168>)
 8002c80:	f003 fa9a 	bl	80061b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8002c8a:	f7ff fe38 	bl	80028fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c8e:	4803      	ldr	r0, [pc, #12]	@ (8002c9c <MX_TIM1_Init+0x168>)
 8002c90:	f000 f8bc 	bl	8002e0c <HAL_TIM_MspPostInit>

}
 8002c94:	bf00      	nop
 8002c96:	3768      	adds	r7, #104	@ 0x68
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000534 	.word	0x20000534
 8002ca0:	40012c00 	.word	0x40012c00

08002ca4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08e      	sub	sp, #56	@ 0x38
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002caa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cc4:	463b      	mov	r3, r7
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	609a      	str	r2, [r3, #8]
 8002cce:	60da      	str	r2, [r3, #12]
 8002cd0:	611a      	str	r2, [r3, #16]
 8002cd2:	615a      	str	r2, [r3, #20]
 8002cd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cd6:	4b33      	ldr	r3, [pc, #204]	@ (8002da4 <MX_TIM2_Init+0x100>)
 8002cd8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 8002cde:	4b31      	ldr	r3, [pc, #196]	@ (8002da4 <MX_TIM2_Init+0x100>)
 8002ce0:	220e      	movs	r2, #14
 8002ce2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8002da4 <MX_TIM2_Init+0x100>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000;
 8002cea:	4b2e      	ldr	r3, [pc, #184]	@ (8002da4 <MX_TIM2_Init+0x100>)
 8002cec:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 8002cf0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8002da4 <MX_TIM2_Init+0x100>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8002da4 <MX_TIM2_Init+0x100>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cfe:	4829      	ldr	r0, [pc, #164]	@ (8002da4 <MX_TIM2_Init+0x100>)
 8002d00:	f002 fad2 	bl	80052a8 <HAL_TIM_Base_Init>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002d0a:	f7ff fdf8 	bl	80028fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4822      	ldr	r0, [pc, #136]	@ (8002da4 <MX_TIM2_Init+0x100>)
 8002d1c:	f002 fd6e 	bl	80057fc <HAL_TIM_ConfigClockSource>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002d26:	f7ff fdea 	bl	80028fe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d2a:	481e      	ldr	r0, [pc, #120]	@ (8002da4 <MX_TIM2_Init+0x100>)
 8002d2c:	f002 fb13 	bl	8005356 <HAL_TIM_PWM_Init>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002d36:	f7ff fde2 	bl	80028fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d42:	f107 031c 	add.w	r3, r7, #28
 8002d46:	4619      	mov	r1, r3
 8002d48:	4816      	ldr	r0, [pc, #88]	@ (8002da4 <MX_TIM2_Init+0x100>)
 8002d4a:	f003 f9cf 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002d54:	f7ff fdd3 	bl	80028fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d58:	2360      	movs	r3, #96	@ 0x60
 8002d5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d68:	463b      	mov	r3, r7
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	480d      	ldr	r0, [pc, #52]	@ (8002da4 <MX_TIM2_Init+0x100>)
 8002d70:	f002 fc30 	bl	80055d4 <HAL_TIM_PWM_ConfigChannel>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002d7a:	f7ff fdc0 	bl	80028fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d7e:	463b      	mov	r3, r7
 8002d80:	2204      	movs	r2, #4
 8002d82:	4619      	mov	r1, r3
 8002d84:	4807      	ldr	r0, [pc, #28]	@ (8002da4 <MX_TIM2_Init+0x100>)
 8002d86:	f002 fc25 	bl	80055d4 <HAL_TIM_PWM_ConfigChannel>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002d90:	f7ff fdb5 	bl	80028fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d94:	4803      	ldr	r0, [pc, #12]	@ (8002da4 <MX_TIM2_Init+0x100>)
 8002d96:	f000 f839 	bl	8002e0c <HAL_TIM_MspPostInit>

}
 8002d9a:	bf00      	nop
 8002d9c:	3738      	adds	r7, #56	@ 0x38
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000580 	.word	0x20000580

08002da8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a13      	ldr	r2, [pc, #76]	@ (8002e04 <HAL_TIM_Base_MspInit+0x5c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d10c      	bne.n	8002dd4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002dba:	4b13      	ldr	r3, [pc, #76]	@ (8002e08 <HAL_TIM_Base_MspInit+0x60>)
 8002dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dbe:	4a12      	ldr	r2, [pc, #72]	@ (8002e08 <HAL_TIM_Base_MspInit+0x60>)
 8002dc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002dc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dc6:	4b10      	ldr	r3, [pc, #64]	@ (8002e08 <HAL_TIM_Base_MspInit+0x60>)
 8002dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002dd2:	e010      	b.n	8002df6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ddc:	d10b      	bne.n	8002df6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dde:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <HAL_TIM_Base_MspInit+0x60>)
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de2:	4a09      	ldr	r2, [pc, #36]	@ (8002e08 <HAL_TIM_Base_MspInit+0x60>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dea:	4b07      	ldr	r3, [pc, #28]	@ (8002e08 <HAL_TIM_Base_MspInit+0x60>)
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
}
 8002df6:	bf00      	nop
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40012c00 	.word	0x40012c00
 8002e08:	40021000 	.word	0x40021000

08002e0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	@ 0x28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 0314 	add.w	r3, r7, #20
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a24      	ldr	r2, [pc, #144]	@ (8002ebc <HAL_TIM_MspPostInit+0xb0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d11e      	bne.n	8002e6c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2e:	4b24      	ldr	r3, [pc, #144]	@ (8002ec0 <HAL_TIM_MspPostInit+0xb4>)
 8002e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e32:	4a23      	ldr	r2, [pc, #140]	@ (8002ec0 <HAL_TIM_MspPostInit+0xb4>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e3a:	4b21      	ldr	r3, [pc, #132]	@ (8002ec0 <HAL_TIM_MspPostInit+0xb4>)
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e54:	2300      	movs	r3, #0
 8002e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4619      	mov	r1, r3
 8002e62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e66:	f001 fa41 	bl	80042ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002e6a:	e022      	b.n	8002eb2 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e74:	d11d      	bne.n	8002eb2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e76:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <HAL_TIM_MspPostInit+0xb4>)
 8002e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7a:	4a11      	ldr	r2, [pc, #68]	@ (8002ec0 <HAL_TIM_MspPostInit+0xb4>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e82:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec0 <HAL_TIM_MspPostInit+0xb4>)
 8002e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002e8e:	f248 0302 	movw	r3, #32770	@ 0x8002
 8002e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002eae:	f001 fa1d 	bl	80042ec <HAL_GPIO_Init>
}
 8002eb2:	bf00      	nop
 8002eb4:	3728      	adds	r7, #40	@ 0x28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40012c00 	.word	0x40012c00
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ec4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002efc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ec8:	f7ff fe22 	bl	8002b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ecc:	480c      	ldr	r0, [pc, #48]	@ (8002f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ece:	490d      	ldr	r1, [pc, #52]	@ (8002f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f08 <LoopForever+0xe>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed4:	e002      	b.n	8002edc <LoopCopyDataInit>

08002ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eda:	3304      	adds	r3, #4

08002edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee0:	d3f9      	bcc.n	8002ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8002f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8002f10 <LoopForever+0x16>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee8:	e001      	b.n	8002eee <LoopFillZerobss>

08002eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eec:	3204      	adds	r2, #4

08002eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef0:	d3fb      	bcc.n	8002eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ef2:	f003 fc5f 	bl	80067b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ef6:	f7ff fc0b 	bl	8002710 <main>

08002efa <LoopForever>:

LoopForever:
    b LoopForever
 8002efa:	e7fe      	b.n	8002efa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002efc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f04:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002f08:	08007524 	.word	0x08007524
  ldr r2, =_sbss
 8002f0c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002f10:	2000071c 	.word	0x2000071c

08002f14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f14:	e7fe      	b.n	8002f14 <ADC1_IRQHandler>

08002f16 <_ardupilot_indication_NotifyState_decode>:
}

/*
 decode ardupilot_indication_NotifyState, return true on failure, false on success
*/
bool _ardupilot_indication_NotifyState_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct ardupilot_indication_NotifyState* msg, bool tao) {
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b088      	sub	sp, #32
 8002f1a:	af02      	add	r7, sp, #8
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data_type);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6819      	ldr	r1, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	2208      	movs	r2, #8
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f7fd fe63 	bl	8000bfc <canardDecodeScalar>

    *bit_ofs += 8;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f103 0208 	add.w	r2, r3, #8
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data.len);
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	6819      	ldr	r1, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	2208      	movs	r2, #8
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7fd fe53 	bl	8000bfc <canardDecodeScalar>
    *bit_ofs += 8;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f103 0208 	add.w	r2, r3, #8
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	601a      	str	r2, [r3, #0]
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->aux_data.len > 255) {
        return true; /* invalid value */
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->aux_data.len; i++) {
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e014      	b.n	8002f92 <_ardupilot_indication_NotifyState_decode+0x7c>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->aux_data.data[i]);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	6819      	ldr	r1, [r3, #0]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	4413      	add	r3, r2
 8002f72:	3302      	adds	r3, #2
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2300      	movs	r3, #0
 8002f78:	2208      	movs	r2, #8
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7fd fe3e 	bl	8000bfc <canardDecodeScalar>

        *bit_ofs += 8;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f103 0208 	add.w	r2, r3, #8
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->aux_data.len; i++) {
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	785b      	ldrb	r3, [r3, #1]
 8002f96:	461a      	mov	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d3e4      	bcc.n	8002f68 <_ardupilot_indication_NotifyState_decode+0x52>





    canardDecodeScalar(transfer, *bit_ofs, 64, false, &msg->vehicle_state);
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	6819      	ldr	r1, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	2300      	movs	r3, #0
 8002fac:	2240      	movs	r2, #64	@ 0x40
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f7fd fe24 	bl	8000bfc <canardDecodeScalar>

    *bit_ofs += 64;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8002fc0:	2300      	movs	r3, #0

}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <ardupilot_indication_NotifyState_decode>:
}

/*
  return true if the decode is invalid
 */
bool ardupilot_indication_NotifyState_decode(const CanardRxTransfer* transfer, struct ardupilot_indication_NotifyState* msg) {
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > ARDUPILOT_INDICATION_NOTIFYSTATE_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60bb      	str	r3, [r7, #8]
    if (_ardupilot_indication_NotifyState_decode(transfer, &bit_ofs, msg,
 8002fd8:	f107 0108 	add.w	r1, r7, #8
 8002fdc:	2301      	movs	r3, #1
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ff98 	bl	8002f16 <_ardupilot_indication_NotifyState_decode>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <ardupilot_indication_NotifyState_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8002fec:	2301      	movs	r3, #1
 8002fee:	e00c      	b.n	800300a <ardupilot_indication_NotifyState_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	3307      	adds	r3, #7
 8002ff4:	08db      	lsrs	r3, r3, #3
 8002ff6:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	8a9b      	ldrh	r3, [r3, #20]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4293      	cmp	r3, r2
 8003002:	bf14      	ite	ne
 8003004:	2301      	movne	r3, #1
 8003006:	2300      	moveq	r3, #0
 8003008:	b2db      	uxtb	r3, r3
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <_uavcan_equipment_actuator_Command_decode>:
}

/*
 decode uavcan_equipment_actuator_Command, return true on failure, false on success
*/
bool _uavcan_equipment_actuator_Command_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_Command* msg, bool tao) {
 8003012:	b580      	push	{r7, lr}
 8003014:	b088      	sub	sp, #32
 8003016:	af02      	add	r7, sp, #8
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->actuator_id);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	6819      	ldr	r1, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2300      	movs	r3, #0
 800302a:	2208      	movs	r2, #8
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7fd fde5 	bl	8000bfc <canardDecodeScalar>

    *bit_ofs += 8;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f103 0208 	add.w	r2, r3, #8
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->command_type);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	6819      	ldr	r1, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3301      	adds	r3, #1
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	2300      	movs	r3, #0
 800304a:	2208      	movs	r2, #8
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7fd fdd5 	bl	8000bfc <canardDecodeScalar>

    *bit_ofs += 8;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f103 0208 	add.w	r2, r3, #8
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	601a      	str	r2, [r3, #0]



    {
        uint16_t float16_val;
        canardDecodeScalar(transfer, *bit_ofs, 16, true, &float16_val);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	f107 0316 	add.w	r3, r7, #22
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	2301      	movs	r3, #1
 800306a:	2210      	movs	r2, #16
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7fd fdc5 	bl	8000bfc <canardDecodeScalar>
        msg->command_value = canardConvertFloat16ToNativeFloat(float16_val);
 8003072:	8afb      	ldrh	r3, [r7, #22]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe f81d 	bl	80010b4 <canardConvertFloat16ToNativeFloat>
 800307a:	eef0 7a40 	vmov.f32	s15, s0
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	edc3 7a01 	vstr	s15, [r3, #4]
    }

    *bit_ofs += 16;
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f103 0210 	add.w	r2, r3, #16
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8003090:	2300      	movs	r3, #0

}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <_uavcan_equipment_actuator_ArrayCommand_decode>:
}

/*
 decode uavcan_equipment_actuator_ArrayCommand, return true on failure, false on success
*/
bool _uavcan_equipment_actuator_ArrayCommand_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_ArrayCommand* msg, bool tao) {
 800309a:	b580      	push	{r7, lr}
 800309c:	b088      	sub	sp, #32
 800309e:	af02      	add	r7, sp, #8
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	70fb      	strb	r3, [r7, #3]





    if (!tao) {
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	f083 0301 	eor.w	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00d      	beq.n	80030d0 <_uavcan_equipment_actuator_ArrayCommand_decode+0x36>


        canardDecodeScalar(transfer, *bit_ofs, 4, false, &msg->commands.len);
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	6819      	ldr	r1, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	2300      	movs	r3, #0
 80030be:	2204      	movs	r2, #4
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f7fd fd9b 	bl	8000bfc <canardDecodeScalar>
        *bit_ofs += 4;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	1d1a      	adds	r2, r3, #4
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	601a      	str	r2, [r3, #0]





    if (tao) {
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d022      	beq.n	800311c <_uavcan_equipment_actuator_ArrayCommand_decode+0x82>

        msg->commands.len = 0;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]
        while ((transfer->payload_len*8) > *bit_ofs) {
 80030dc:	e015      	b.n	800310a <_uavcan_equipment_actuator_ArrayCommand_decode+0x70>

            if (_uavcan_equipment_actuator_Command_decode(transfer, bit_ofs, &msg->commands.data[msg->commands.len], false)) {return true;}
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4413      	add	r3, r2
 80030e8:	1d1a      	adds	r2, r3, #4
 80030ea:	2300      	movs	r3, #0
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f7ff ff8f 	bl	8003012 <_uavcan_equipment_actuator_Command_decode>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <_uavcan_equipment_actuator_ArrayCommand_decode+0x64>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e030      	b.n	8003160 <_uavcan_equipment_actuator_ArrayCommand_decode+0xc6>
            msg->commands.len++;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	3301      	adds	r3, #1
 8003104:	b2da      	uxtb	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	701a      	strb	r2, [r3, #0]
        while ((transfer->payload_len*8) > *bit_ofs) {
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8a9b      	ldrh	r3, [r3, #20]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	461a      	mov	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d8e1      	bhi.n	80030de <_uavcan_equipment_actuator_ArrayCommand_decode+0x44>
 800311a:	e020      	b.n	800315e <_uavcan_equipment_actuator_ArrayCommand_decode+0xc4>



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
        if (msg->commands.len > 15) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b0f      	cmp	r3, #15
 8003122:	d901      	bls.n	8003128 <_uavcan_equipment_actuator_ArrayCommand_decode+0x8e>
            return true; /* invalid value */
 8003124:	2301      	movs	r3, #1
 8003126:	e01b      	b.n	8003160 <_uavcan_equipment_actuator_ArrayCommand_decode+0xc6>
        }
#pragma GCC diagnostic pop
        for (size_t i=0; i < msg->commands.len; i++) {
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	e011      	b.n	8003152 <_uavcan_equipment_actuator_ArrayCommand_decode+0xb8>



            if (_uavcan_equipment_actuator_Command_decode(transfer, bit_ofs, &msg->commands.data[i], false)) {return true;}
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	1d1a      	adds	r2, r3, #4
 8003138:	2300      	movs	r3, #0
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7ff ff68 	bl	8003012 <_uavcan_equipment_actuator_Command_decode>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <_uavcan_equipment_actuator_ArrayCommand_decode+0xb2>
 8003148:	2301      	movs	r3, #1
 800314a:	e009      	b.n	8003160 <_uavcan_equipment_actuator_ArrayCommand_decode+0xc6>
        for (size_t i=0; i < msg->commands.len; i++) {
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3301      	adds	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	4293      	cmp	r3, r2
 800315c:	d3e7      	bcc.n	800312e <_uavcan_equipment_actuator_ArrayCommand_decode+0x94>





    return false; /* success */
 800315e:	2300      	movs	r3, #0

}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <uavcan_equipment_actuator_ArrayCommand_decode>:
}

/*
  return true if the decode is invalid
 */
bool uavcan_equipment_actuator_ArrayCommand_decode(const CanardRxTransfer* transfer, struct uavcan_equipment_actuator_ArrayCommand* msg) {
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
    if (_uavcan_equipment_actuator_ArrayCommand_decode(transfer, &bit_ofs, msg,
 8003176:	f107 0108 	add.w	r1, r7, #8
 800317a:	2301      	movs	r3, #1
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ff8b 	bl	800309a <_uavcan_equipment_actuator_ArrayCommand_decode>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <uavcan_equipment_actuator_ArrayCommand_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 800318a:	2301      	movs	r3, #1
 800318c:	e00c      	b.n	80031a8 <uavcan_equipment_actuator_ArrayCommand_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	3307      	adds	r3, #7
 8003192:	08db      	lsrs	r3, r3, #3
 8003194:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	8a9b      	ldrh	r3, [r3, #20]
 800319a:	461a      	mov	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4293      	cmp	r3, r2
 80031a0:	bf14      	ite	ne
 80031a2:	2301      	movne	r3, #1
 80031a4:	2300      	moveq	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <_uavcan_equipment_actuator_Status_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_equipment_actuator_Status_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_Status* msg, bool tao);
static inline bool _uavcan_equipment_actuator_Status_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_Status* msg, bool tao);
void _uavcan_equipment_actuator_Status_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_equipment_actuator_Status* msg, bool tao) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->actuator_id);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	6819      	ldr	r1, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2208      	movs	r2, #8
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f7fd fea1 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 8;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f103 0208 	add.w	r2, r3, #8
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	601a      	str	r2, [r3, #0]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->position);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	edd3 7a01 	vldr	s15, [r3, #4]
 80031de:	eeb0 0a67 	vmov.f32	s0, s15
 80031e2:	f7fd ff11 	bl	8001008 <canardConvertNativeFloatToFloat16>
 80031e6:	4603      	mov	r3, r0
 80031e8:	82fb      	strh	r3, [r7, #22]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	6819      	ldr	r1, [r3, #0]
 80031ee:	f107 0316 	add.w	r3, r7, #22
 80031f2:	2210      	movs	r2, #16
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f7fd fe8a 	bl	8000f0e <canardEncodeScalar>
    }

    *bit_ofs += 16;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f103 0210 	add.w	r2, r3, #16
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	601a      	str	r2, [r3, #0]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->force);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	edd3 7a02 	vldr	s15, [r3, #8]
 800320c:	eeb0 0a67 	vmov.f32	s0, s15
 8003210:	f7fd fefa 	bl	8001008 <canardConvertNativeFloatToFloat16>
 8003214:	4603      	mov	r3, r0
 8003216:	82bb      	strh	r3, [r7, #20]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	6819      	ldr	r1, [r3, #0]
 800321c:	f107 0314 	add.w	r3, r7, #20
 8003220:	2210      	movs	r2, #16
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7fd fe73 	bl	8000f0e <canardEncodeScalar>
    }

    *bit_ofs += 16;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f103 0210 	add.w	r2, r3, #16
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	601a      	str	r2, [r3, #0]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->speed);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	edd3 7a03 	vldr	s15, [r3, #12]
 800323a:	eeb0 0a67 	vmov.f32	s0, s15
 800323e:	f7fd fee3 	bl	8001008 <canardConvertNativeFloatToFloat16>
 8003242:	4603      	mov	r3, r0
 8003244:	827b      	strh	r3, [r7, #18]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	6819      	ldr	r1, [r3, #0]
 800324a:	f107 0312 	add.w	r3, r7, #18
 800324e:	2210      	movs	r2, #16
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7fd fe5c 	bl	8000f0e <canardEncodeScalar>
    }

    *bit_ofs += 16;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f103 0210 	add.w	r2, r3, #16
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	601a      	str	r2, [r3, #0]





    *bit_ofs += 1;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 7, &msg->power_rating_pct);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	6819      	ldr	r1, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3310      	adds	r3, #16
 8003274:	2207      	movs	r2, #7
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f7fd fe49 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 7;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	1dda      	adds	r2, r3, #7
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	601a      	str	r2, [r3, #0]





}
 8003286:	bf00      	nop
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <uavcan_equipment_actuator_Status_encode>:

uint32_t uavcan_equipment_actuator_Status_encode(struct uavcan_equipment_actuator_Status* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_EQUIPMENT_ACTUATOR_STATUS_MAX_SIZE);
 800329c:	2208      	movs	r2, #8
 800329e:	2100      	movs	r1, #0
 80032a0:	6838      	ldr	r0, [r7, #0]
 80032a2:	f003 fa13 	bl	80066cc <memset>
    _uavcan_equipment_actuator_Status_encode(buffer, &bit_ofs, msg, 
 80032a6:	f107 010c 	add.w	r1, r7, #12
 80032aa:	2301      	movs	r3, #1
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6838      	ldr	r0, [r7, #0]
 80032b0:	f7ff ff7e 	bl	80031b0 <_uavcan_equipment_actuator_Status_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3307      	adds	r3, #7
 80032b8:	08db      	lsrs	r3, r3, #3
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <_uavcan_protocol_HardwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_HardwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao);
void _uavcan_protocol_HardwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_HardwareVersion* msg, bool tao) {
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b088      	sub	sp, #32
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2208      	movs	r2, #8
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f7fd fe18 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 8;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f103 0208 	add.w	r2, r3, #8
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	6819      	ldr	r1, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3301      	adds	r3, #1
 80032f2:	2208      	movs	r2, #8
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f7fd fe0a 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 8;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f103 0208 	add.w	r2, r3, #8
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	601a      	str	r2, [r3, #0]





    for (size_t i=0; i < 16; i++) {
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	e012      	b.n	8003332 <_uavcan_protocol_HardwareVersion_encode+0x70>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->unique_id[i]);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	6819      	ldr	r1, [r3, #0]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	4413      	add	r3, r2
 8003316:	3302      	adds	r3, #2
 8003318:	2208      	movs	r2, #8
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f7fd fdf7 	bl	8000f0e <canardEncodeScalar>

        *bit_ofs += 8;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f103 0208 	add.w	r2, r3, #8
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < 16; i++) {
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	3301      	adds	r3, #1
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	2b0f      	cmp	r3, #15
 8003336:	d9e9      	bls.n	800330c <_uavcan_protocol_HardwareVersion_encode+0x4a>





    if (!tao) {
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	f083 0301 	eor.w	r3, r3, #1
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00d      	beq.n	8003360 <_uavcan_protocol_HardwareVersion_encode+0x9e>


        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.len);
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	6819      	ldr	r1, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3312      	adds	r3, #18
 800334c:	2208      	movs	r2, #8
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f7fd fddd 	bl	8000f0e <canardEncodeScalar>
        *bit_ofs += 8;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f103 0208 	add.w	r2, r3, #8
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t certificate_of_authenticity_len = msg->certificate_of_authenticity.len > 255 ? 255 : msg->certificate_of_authenticity.len;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7c9b      	ldrb	r3, [r3, #18]
 8003364:	617b      	str	r3, [r7, #20]
#pragma GCC diagnostic pop
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	e013      	b.n	8003394 <_uavcan_protocol_HardwareVersion_encode+0xd2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->certificate_of_authenticity.data[i]);
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	6819      	ldr	r1, [r3, #0]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	3310      	adds	r3, #16
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	4413      	add	r3, r2
 8003378:	3303      	adds	r3, #3
 800337a:	2208      	movs	r2, #8
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7fd fdc6 	bl	8000f0e <canardEncodeScalar>

        *bit_ofs += 8;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f103 0208 	add.w	r2, r3, #8
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < certificate_of_authenticity_len; i++) {
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	3301      	adds	r3, #1
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	429a      	cmp	r2, r3
 800339a:	d3e7      	bcc.n	800336c <_uavcan_protocol_HardwareVersion_encode+0xaa>





}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	6819      	ldr	r1, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f7fd fda6 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 32;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f103 0220 	add.w	r2, r3, #32
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	6819      	ldr	r1, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	2202      	movs	r2, #2
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7fd fd98 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 2;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	1c9a      	adds	r2, r3, #2
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	6819      	ldr	r1, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3305      	adds	r3, #5
 80033f0:	2203      	movs	r2, #3
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7fd fd8b 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 3;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	1cda      	adds	r2, r3, #3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	6819      	ldr	r1, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3306      	adds	r3, #6
 800340a:	2203      	movs	r2, #3
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7fd fd7e 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 3;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	1cda      	adds	r2, r3, #3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	6819      	ldr	r1, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3308      	adds	r3, #8
 8003424:	2210      	movs	r2, #16
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f7fd fd71 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 16;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f103 0210 	add.w	r2, r3, #16
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	601a      	str	r2, [r3, #0]





}
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <_uavcan_protocol_SoftwareVersion_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
static inline bool _uavcan_protocol_SoftwareVersion_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao);
void _uavcan_protocol_SoftwareVersion_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_SoftwareVersion* msg, bool tao) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->major);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	6819      	ldr	r1, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2208      	movs	r2, #8
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7fd fd59 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 8;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f103 0208 	add.w	r2, r3, #8
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->minor);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3301      	adds	r3, #1
 8003470:	2208      	movs	r2, #8
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f7fd fd4b 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 8;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f103 0208 	add.w	r2, r3, #8
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->optional_field_flags);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6819      	ldr	r1, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3302      	adds	r3, #2
 800348c:	2208      	movs	r2, #8
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f7fd fd3d 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 8;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f103 0208 	add.w	r2, r3, #8
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->vcs_commit);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	6819      	ldr	r1, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	2220      	movs	r2, #32
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f7fd fd2f 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 32;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f103 0220 	add.w	r2, r3, #32
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 64, &msg->image_crc);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	6819      	ldr	r1, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3308      	adds	r3, #8
 80034c4:	2240      	movs	r2, #64	@ 0x40
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7fd fd21 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 64;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	601a      	str	r2, [r3, #0]





}
 80034d8:	bf00      	nop
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <_uavcan_protocol_GetNodeInfoResponse_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
static inline bool _uavcan_protocol_GetNodeInfoResponse_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao);
void _uavcan_protocol_GetNodeInfoResponse_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_GetNodeInfoResponse* msg, bool tao) {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	70fb      	strb	r3, [r7, #3]





    _uavcan_protocol_NodeStatus_encode(buffer, bit_ofs, &msg->status, false);
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	2300      	movs	r3, #0
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff ff56 	bl	80033a6 <_uavcan_protocol_NodeStatus_encode>





    _uavcan_protocol_SoftwareVersion_encode(buffer, bit_ofs, &msg->software_version, false);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f103 0210 	add.w	r2, r3, #16
 8003500:	2300      	movs	r3, #0
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff ff9b 	bl	8003440 <_uavcan_protocol_SoftwareVersion_encode>





    _uavcan_protocol_HardwareVersion_encode(buffer, bit_ofs, &msg->hardware_version, false);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f103 0220 	add.w	r2, r3, #32
 8003510:	2300      	movs	r3, #0
 8003512:	68b9      	ldr	r1, [r7, #8]
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f7ff fed4 	bl	80032c2 <_uavcan_protocol_HardwareVersion_encode>





    if (!tao) {
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	f083 0301 	eor.w	r3, r3, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00d      	beq.n	8003542 <_uavcan_protocol_GetNodeInfoResponse_encode+0x62>


        canardEncodeScalar(buffer, *bit_ofs, 7, &msg->name.len);
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	6819      	ldr	r1, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8003530:	2207      	movs	r2, #7
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7fd fceb 	bl	8000f0e <canardEncodeScalar>
        *bit_ofs += 7;
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	1dda      	adds	r2, r3, #7
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	601a      	str	r2, [r3, #0]

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const size_t name_len = msg->name.len > 80 ? 80 : msg->name.len;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8003548:	2b50      	cmp	r3, #80	@ 0x50
 800354a:	bf28      	it	cs
 800354c:	2350      	movcs	r3, #80	@ 0x50
 800354e:	b2db      	uxtb	r3, r3
 8003550:	613b      	str	r3, [r7, #16]
#pragma GCC diagnostic pop
    for (size_t i=0; i < name_len; i++) {
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	e014      	b.n	8003582 <_uavcan_protocol_GetNodeInfoResponse_encode+0xa2>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->name.data[i]);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	6819      	ldr	r1, [r3, #0]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	3303      	adds	r3, #3
 8003568:	2208      	movs	r2, #8
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f7fd fccf 	bl	8000f0e <canardEncodeScalar>

        *bit_ofs += 8;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f103 0208 	add.w	r2, r3, #8
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < name_len; i++) {
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	3301      	adds	r3, #1
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	429a      	cmp	r2, r3
 8003588:	d3e6      	bcc.n	8003558 <_uavcan_protocol_GetNodeInfoResponse_encode+0x78>





}
 800358a:	bf00      	nop
 800358c:	bf00      	nop
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <uavcan_protocol_GetNodeInfoResponse_encode>:

uint32_t uavcan_protocol_GetNodeInfoResponse_encode(struct uavcan_protocol_GetNodeInfoResponse* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_GETNODEINFO_RESPONSE_MAX_SIZE);
 80035a2:	f240 1279 	movw	r2, #377	@ 0x179
 80035a6:	2100      	movs	r1, #0
 80035a8:	6838      	ldr	r0, [r7, #0]
 80035aa:	f003 f88f 	bl	80066cc <memset>
    _uavcan_protocol_GetNodeInfoResponse_encode(buffer, &bit_ofs, msg, 
 80035ae:	f107 010c 	add.w	r1, r7, #12
 80035b2:	2301      	movs	r3, #1
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6838      	ldr	r0, [r7, #0]
 80035b8:	f7ff ff92 	bl	80034e0 <_uavcan_protocol_GetNodeInfoResponse_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3307      	adds	r3, #7
 80035c0:	08db      	lsrs	r3, r3, #3
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <_uavcan_protocol_NodeStatus_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
static inline bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao);
void _uavcan_protocol_NodeStatus_encode(uint8_t* buffer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	6819      	ldr	r1, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7fd fc94 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 32;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f103 0220 	add.w	r2, r3, #32
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6819      	ldr	r1, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3304      	adds	r3, #4
 80035fa:	2202      	movs	r2, #2
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7fd fc86 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 2;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	1c9a      	adds	r2, r3, #2
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	6819      	ldr	r1, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3305      	adds	r3, #5
 8003614:	2203      	movs	r2, #3
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f7fd fc79 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 3;
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	1cda      	adds	r2, r3, #3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	6819      	ldr	r1, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3306      	adds	r3, #6
 800362e:	2203      	movs	r2, #3
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f7fd fc6c 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 3;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	1cda      	adds	r2, r3, #3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3308      	adds	r3, #8
 8003648:	2210      	movs	r2, #16
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f7fd fc5f 	bl	8000f0e <canardEncodeScalar>

    *bit_ofs += 16;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f103 0210 	add.w	r2, r3, #16
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	601a      	str	r2, [r3, #0]





}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <_uavcan_protocol_NodeStatus_decode>:

/*
 decode uavcan_protocol_NodeStatus, return true on failure, false on success
*/
bool _uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct uavcan_protocol_NodeStatus* msg, bool tao) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	70fb      	strb	r3, [r7, #3]





    canardDecodeScalar(transfer, *bit_ofs, 32, false, &msg->uptime_sec);
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	2300      	movs	r3, #0
 800367c:	2220      	movs	r2, #32
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f7fd fabc 	bl	8000bfc <canardDecodeScalar>

    *bit_ofs += 32;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f103 0220 	add.w	r2, r3, #32
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 2, false, &msg->health);
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	6819      	ldr	r1, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3304      	adds	r3, #4
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	2300      	movs	r3, #0
 800369c:	2202      	movs	r2, #2
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7fd faac 	bl	8000bfc <canardDecodeScalar>

    *bit_ofs += 2;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	1c9a      	adds	r2, r3, #2
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->mode);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6819      	ldr	r1, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3305      	adds	r3, #5
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	2300      	movs	r3, #0
 80036ba:	2203      	movs	r2, #3
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7fd fa9d 	bl	8000bfc <canardDecodeScalar>

    *bit_ofs += 3;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	1cda      	adds	r2, r3, #3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 3, false, &msg->sub_mode);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6819      	ldr	r1, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3306      	adds	r3, #6
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2300      	movs	r3, #0
 80036d8:	2203      	movs	r2, #3
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7fd fa8e 	bl	8000bfc <canardDecodeScalar>

    *bit_ofs += 3;
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	1cda      	adds	r2, r3, #3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->vendor_specific_status_code);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6819      	ldr	r1, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3308      	adds	r3, #8
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	2300      	movs	r3, #0
 80036f6:	2210      	movs	r2, #16
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7fd fa7f 	bl	8000bfc <canardDecodeScalar>

    *bit_ofs += 16;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f103 0210 	add.w	r2, r3, #16
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	601a      	str	r2, [r3, #0]





    return false; /* success */
 800370a:	2300      	movs	r3, #0

}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <uavcan_protocol_NodeStatus_encode>:

uint32_t uavcan_protocol_NodeStatus_encode(struct uavcan_protocol_NodeStatus* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE);
 8003722:	2207      	movs	r2, #7
 8003724:	2100      	movs	r1, #0
 8003726:	6838      	ldr	r0, [r7, #0]
 8003728:	f002 ffd0 	bl	80066cc <memset>
    _uavcan_protocol_NodeStatus_encode(buffer, &bit_ofs, msg, 
 800372c:	f107 010c 	add.w	r1, r7, #12
 8003730:	2301      	movs	r3, #1
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6838      	ldr	r0, [r7, #0]
 8003736:	f7ff ff48 	bl	80035ca <_uavcan_protocol_NodeStatus_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3307      	adds	r3, #7
 800373e:	08db      	lsrs	r3, r3, #3
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <uavcan_protocol_NodeStatus_decode>:

/*
  return true if the decode is invalid
 */
bool uavcan_protocol_NodeStatus_decode(const CanardRxTransfer* transfer, struct uavcan_protocol_NodeStatus* msg) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > UAVCAN_PROTOCOL_NODESTATUS_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	60bb      	str	r3, [r7, #8]
    if (_uavcan_protocol_NodeStatus_decode(transfer, &bit_ofs, msg,
 8003756:	f107 0108 	add.w	r1, r7, #8
 800375a:	2301      	movs	r3, #1
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff ff80 	bl	8003664 <_uavcan_protocol_NodeStatus_decode>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <uavcan_protocol_NodeStatus_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 800376a:	2301      	movs	r3, #1
 800376c:	e00c      	b.n	8003788 <uavcan_protocol_NodeStatus_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	3307      	adds	r3, #7
 8003772:	08db      	lsrs	r3, r3, #3
 8003774:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8a9b      	ldrh	r3, [r3, #20]
 800377a:	461a      	mov	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4293      	cmp	r3, r2
 8003780:	bf14      	ite	ne
 8003782:	2301      	movne	r3, #1
 8003784:	2300      	moveq	r3, #0
 8003786:	b2db      	uxtb	r3, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800379a:	2003      	movs	r0, #3
 800379c:	f000 fd64 	bl	8004268 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037a0:	200f      	movs	r0, #15
 80037a2:	f000 f80d 	bl	80037c0 <HAL_InitTick>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	71fb      	strb	r3, [r7, #7]
 80037b0:	e001      	b.n	80037b6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037b2:	f7ff f8ab 	bl	800290c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037b6:	79fb      	ldrb	r3, [r7, #7]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80037cc:	4b17      	ldr	r3, [pc, #92]	@ (800382c <HAL_InitTick+0x6c>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d023      	beq.n	800381c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80037d4:	4b16      	ldr	r3, [pc, #88]	@ (8003830 <HAL_InitTick+0x70>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b14      	ldr	r3, [pc, #80]	@ (800382c <HAL_InitTick+0x6c>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	4619      	mov	r1, r3
 80037de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fd71 	bl	80042d2 <HAL_SYSTICK_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10f      	bne.n	8003816 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b0f      	cmp	r3, #15
 80037fa:	d809      	bhi.n	8003810 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037fc:	2200      	movs	r2, #0
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	f000 fd3b 	bl	800427e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003808:	4a0a      	ldr	r2, [pc, #40]	@ (8003834 <HAL_InitTick+0x74>)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e007      	b.n	8003820 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
 8003814:	e004      	b.n	8003820 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	e001      	b.n	8003820 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000008 	.word	0x20000008
 8003830:	20000000 	.word	0x20000000
 8003834:	20000004 	.word	0x20000004

08003838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800383c:	4b06      	ldr	r3, [pc, #24]	@ (8003858 <HAL_IncTick+0x20>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	4b06      	ldr	r3, [pc, #24]	@ (800385c <HAL_IncTick+0x24>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4413      	add	r3, r2
 8003848:	4a04      	ldr	r2, [pc, #16]	@ (800385c <HAL_IncTick+0x24>)
 800384a:	6013      	str	r3, [r2, #0]
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	20000008 	.word	0x20000008
 800385c:	200005cc 	.word	0x200005cc

08003860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return uwTick;
 8003864:	4b03      	ldr	r3, [pc, #12]	@ (8003874 <HAL_GetTick+0x14>)
 8003866:	681b      	ldr	r3, [r3, #0]
}
 8003868:	4618      	mov	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	200005cc 	.word	0x200005cc

08003878 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800387c:	4b03      	ldr	r3, [pc, #12]	@ (800388c <HAL_GetUIDw0+0x14>)
 800387e:	681b      	ldr	r3, [r3, #0]
}
 8003880:	4618      	mov	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	1fff7590 	.word	0x1fff7590

08003890 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003894:	4b03      	ldr	r3, [pc, #12]	@ (80038a4 <HAL_GetUIDw1+0x14>)
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	1fff7594 	.word	0x1fff7594

080038a8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80038ac:	4b03      	ldr	r3, [pc, #12]	@ (80038bc <HAL_GetUIDw2+0x14>)
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	1fff7598 	.word	0x1fff7598

080038c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e0ed      	b.n	8003aae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d102      	bne.n	80038e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fc fed8 	bl	8000694 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038f4:	f7ff ffb4 	bl	8003860 <HAL_GetTick>
 80038f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80038fa:	e012      	b.n	8003922 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038fc:	f7ff ffb0 	bl	8003860 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b0a      	cmp	r3, #10
 8003908:	d90b      	bls.n	8003922 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2205      	movs	r2, #5
 800391a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e0c5      	b.n	8003aae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0e5      	beq.n	80038fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0202 	bic.w	r2, r2, #2
 800393e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003940:	f7ff ff8e 	bl	8003860 <HAL_GetTick>
 8003944:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003946:	e012      	b.n	800396e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003948:	f7ff ff8a 	bl	8003860 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b0a      	cmp	r3, #10
 8003954:	d90b      	bls.n	800396e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2205      	movs	r2, #5
 8003966:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e09f      	b.n	8003aae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e5      	bne.n	8003948 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	7e1b      	ldrb	r3, [r3, #24]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d108      	bne.n	8003996 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e007      	b.n	80039a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	7e5b      	ldrb	r3, [r3, #25]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d108      	bne.n	80039c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e007      	b.n	80039d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	7e9b      	ldrb	r3, [r3, #26]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d108      	bne.n	80039ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0220 	orr.w	r2, r2, #32
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e007      	b.n	80039fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0220 	bic.w	r2, r2, #32
 80039f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	7edb      	ldrb	r3, [r3, #27]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d108      	bne.n	8003a14 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0210 	bic.w	r2, r2, #16
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e007      	b.n	8003a24 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0210 	orr.w	r2, r2, #16
 8003a22:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	7f1b      	ldrb	r3, [r3, #28]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d108      	bne.n	8003a3e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0208 	orr.w	r2, r2, #8
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	e007      	b.n	8003a4e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0208 	bic.w	r2, r2, #8
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	7f5b      	ldrb	r3, [r3, #29]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d108      	bne.n	8003a68 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0204 	orr.w	r2, r2, #4
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e007      	b.n	8003a78 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0204 	bic.w	r2, r2, #4
 8003a76:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	ea42 0103 	orr.w	r1, r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	1e5a      	subs	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b089      	sub	sp, #36	@ 0x24
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aca:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ad4:	7ffb      	ldrb	r3, [r7, #31]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d003      	beq.n	8003ae2 <HAL_CAN_AddTxMessage+0x2c>
 8003ada:	7ffb      	ldrb	r3, [r7, #31]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	f040 80ad 	bne.w	8003c3c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d105      	bne.n	8003b02 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 8095 	beq.w	8003c2c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	0e1b      	lsrs	r3, r3, #24
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	409a      	lsls	r2, r3
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10d      	bne.n	8003b3a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b28:	68f9      	ldr	r1, [r7, #12]
 8003b2a:	6809      	ldr	r1, [r1, #0]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	3318      	adds	r3, #24
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	440b      	add	r3, r1
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	e00f      	b.n	8003b5a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b44:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b4a:	68f9      	ldr	r1, [r7, #12]
 8003b4c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003b4e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	3318      	adds	r3, #24
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	440b      	add	r3, r1
 8003b58:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6819      	ldr	r1, [r3, #0]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	3318      	adds	r3, #24
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	440b      	add	r3, r1
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	7d1b      	ldrb	r3, [r3, #20]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d111      	bne.n	8003b9a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	3318      	adds	r3, #24
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	4413      	add	r3, r2
 8003b82:	3304      	adds	r3, #4
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	6811      	ldr	r1, [r2, #0]
 8003b8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	3318      	adds	r3, #24
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	440b      	add	r3, r1
 8003b96:	3304      	adds	r3, #4
 8003b98:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3307      	adds	r3, #7
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	061a      	lsls	r2, r3, #24
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3306      	adds	r3, #6
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	041b      	lsls	r3, r3, #16
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3305      	adds	r3, #5
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	3204      	adds	r2, #4
 8003bba:	7812      	ldrb	r2, [r2, #0]
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	6811      	ldr	r1, [r2, #0]
 8003bc2:	ea43 0200 	orr.w	r2, r3, r0
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	440b      	add	r3, r1
 8003bcc:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003bd0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3303      	adds	r3, #3
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	061a      	lsls	r2, r3, #24
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3302      	adds	r3, #2
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	041b      	lsls	r3, r3, #16
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3301      	adds	r3, #1
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	021b      	lsls	r3, r3, #8
 8003bec:	4313      	orrs	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	7812      	ldrb	r2, [r2, #0]
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	6811      	ldr	r1, [r2, #0]
 8003bf8:	ea43 0200 	orr.w	r2, r3, r0
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	440b      	add	r3, r1
 8003c02:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003c06:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	3318      	adds	r3, #24
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	4413      	add	r3, r2
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	6811      	ldr	r1, [r2, #0]
 8003c1a:	f043 0201 	orr.w	r2, r3, #1
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	3318      	adds	r3, #24
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	440b      	add	r3, r1
 8003c26:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	e00e      	b.n	8003c4a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e006      	b.n	8003c4a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
  }
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3724      	adds	r7, #36	@ 0x24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b08a      	sub	sp, #40	@ 0x28
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d07c      	beq.n	8003d96 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d023      	beq.n	8003cee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2201      	movs	r2, #1
 8003cac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f983 	bl	8003fc4 <HAL_CAN_TxMailbox0CompleteCallback>
 8003cbe:	e016      	b.n	8003cee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd2:	e00c      	b.n	8003cee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d004      	beq.n	8003ce8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce6:	e002      	b.n	8003cee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f989 	bl	8004000 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d024      	beq.n	8003d42 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f963 	bl	8003fd8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003d12:	e016      	b.n	8003d42 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d004      	beq.n	8003d28 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d26:	e00c      	b.n	8003d42 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d004      	beq.n	8003d3c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d3a:	e002      	b.n	8003d42 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f969 	bl	8004014 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d024      	beq.n	8003d96 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003d54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f943 	bl	8003fec <HAL_CAN_TxMailbox2CompleteCallback>
 8003d66:	e016      	b.n	8003d96 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d004      	beq.n	8003d7c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d7a:	e00c      	b.n	8003d96 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d004      	beq.n	8003d90 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d8e:	e002      	b.n	8003d96 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f949 	bl	8004028 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00c      	beq.n	8003dba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f003 0310 	and.w	r3, r3, #16
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003db0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2210      	movs	r2, #16
 8003db8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00b      	beq.n	8003ddc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d006      	beq.n	8003ddc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f93a 	bl	8004050 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f921 	bl	800403c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00c      	beq.n	8003e1e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d007      	beq.n	8003e1e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2210      	movs	r2, #16
 8003e1c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00b      	beq.n	8003e40 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d006      	beq.n	8003e40 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2208      	movs	r2, #8
 8003e38:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f91c 	bl	8004078 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d009      	beq.n	8003e5e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f903 	bl	8004064 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00b      	beq.n	8003e80 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d006      	beq.n	8003e80 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2210      	movs	r2, #16
 8003e78:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f906 	bl	800408c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d006      	beq.n	8003ea2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2208      	movs	r2, #8
 8003e9a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f8ff 	bl	80040a0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d07b      	beq.n	8003fa4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d072      	beq.n	8003f9c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	f043 0302 	orr.w	r3, r3, #2
 8003eec:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	f043 0304 	orr.w	r3, r3, #4
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d043      	beq.n	8003f9c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d03e      	beq.n	8003f9c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f24:	2b60      	cmp	r3, #96	@ 0x60
 8003f26:	d02b      	beq.n	8003f80 <HAL_CAN_IRQHandler+0x32a>
 8003f28:	2b60      	cmp	r3, #96	@ 0x60
 8003f2a:	d82e      	bhi.n	8003f8a <HAL_CAN_IRQHandler+0x334>
 8003f2c:	2b50      	cmp	r3, #80	@ 0x50
 8003f2e:	d022      	beq.n	8003f76 <HAL_CAN_IRQHandler+0x320>
 8003f30:	2b50      	cmp	r3, #80	@ 0x50
 8003f32:	d82a      	bhi.n	8003f8a <HAL_CAN_IRQHandler+0x334>
 8003f34:	2b40      	cmp	r3, #64	@ 0x40
 8003f36:	d019      	beq.n	8003f6c <HAL_CAN_IRQHandler+0x316>
 8003f38:	2b40      	cmp	r3, #64	@ 0x40
 8003f3a:	d826      	bhi.n	8003f8a <HAL_CAN_IRQHandler+0x334>
 8003f3c:	2b30      	cmp	r3, #48	@ 0x30
 8003f3e:	d010      	beq.n	8003f62 <HAL_CAN_IRQHandler+0x30c>
 8003f40:	2b30      	cmp	r3, #48	@ 0x30
 8003f42:	d822      	bhi.n	8003f8a <HAL_CAN_IRQHandler+0x334>
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d002      	beq.n	8003f4e <HAL_CAN_IRQHandler+0x2f8>
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d005      	beq.n	8003f58 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003f4c:	e01d      	b.n	8003f8a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	f043 0308 	orr.w	r3, r3, #8
 8003f54:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f56:	e019      	b.n	8003f8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	f043 0310 	orr.w	r3, r3, #16
 8003f5e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f60:	e014      	b.n	8003f8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	f043 0320 	orr.w	r3, r3, #32
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f6a:	e00f      	b.n	8003f8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f72:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f74:	e00a      	b.n	8003f8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f7e:	e005      	b.n	8003f8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f88:	e000      	b.n	8003f8c <HAL_CAN_IRQHandler+0x336>
            break;
 8003f8a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003f9a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f87c 	bl	80040b4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	3728      	adds	r7, #40	@ 0x28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d8:	4b0c      	ldr	r3, [pc, #48]	@ (800410c <__NVIC_SetPriorityGrouping+0x44>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040e4:	4013      	ands	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040fa:	4a04      	ldr	r2, [pc, #16]	@ (800410c <__NVIC_SetPriorityGrouping+0x44>)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	60d3      	str	r3, [r2, #12]
}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004114:	4b04      	ldr	r3, [pc, #16]	@ (8004128 <__NVIC_GetPriorityGrouping+0x18>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	0a1b      	lsrs	r3, r3, #8
 800411a:	f003 0307 	and.w	r3, r3, #7
}
 800411e:	4618      	mov	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413a:	2b00      	cmp	r3, #0
 800413c:	db0b      	blt.n	8004156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	f003 021f 	and.w	r2, r3, #31
 8004144:	4907      	ldr	r1, [pc, #28]	@ (8004164 <__NVIC_EnableIRQ+0x38>)
 8004146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2001      	movs	r0, #1
 800414e:	fa00 f202 	lsl.w	r2, r0, r2
 8004152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	e000e100 	.word	0xe000e100

08004168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004178:	2b00      	cmp	r3, #0
 800417a:	db0a      	blt.n	8004192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	b2da      	uxtb	r2, r3
 8004180:	490c      	ldr	r1, [pc, #48]	@ (80041b4 <__NVIC_SetPriority+0x4c>)
 8004182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004186:	0112      	lsls	r2, r2, #4
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	440b      	add	r3, r1
 800418c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004190:	e00a      	b.n	80041a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4908      	ldr	r1, [pc, #32]	@ (80041b8 <__NVIC_SetPriority+0x50>)
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	3b04      	subs	r3, #4
 80041a0:	0112      	lsls	r2, r2, #4
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	440b      	add	r3, r1
 80041a6:	761a      	strb	r2, [r3, #24]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	e000e100 	.word	0xe000e100
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041bc:	b480      	push	{r7}
 80041be:	b089      	sub	sp, #36	@ 0x24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f1c3 0307 	rsb	r3, r3, #7
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	bf28      	it	cs
 80041da:	2304      	movcs	r3, #4
 80041dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3304      	adds	r3, #4
 80041e2:	2b06      	cmp	r3, #6
 80041e4:	d902      	bls.n	80041ec <NVIC_EncodePriority+0x30>
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3b03      	subs	r3, #3
 80041ea:	e000      	b.n	80041ee <NVIC_EncodePriority+0x32>
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f0:	f04f 32ff 	mov.w	r2, #4294967295
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43da      	mvns	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	401a      	ands	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004204:	f04f 31ff 	mov.w	r1, #4294967295
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fa01 f303 	lsl.w	r3, r1, r3
 800420e:	43d9      	mvns	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004214:	4313      	orrs	r3, r2
         );
}
 8004216:	4618      	mov	r0, r3
 8004218:	3724      	adds	r7, #36	@ 0x24
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3b01      	subs	r3, #1
 8004230:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004234:	d301      	bcc.n	800423a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004236:	2301      	movs	r3, #1
 8004238:	e00f      	b.n	800425a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800423a:	4a0a      	ldr	r2, [pc, #40]	@ (8004264 <SysTick_Config+0x40>)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3b01      	subs	r3, #1
 8004240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004242:	210f      	movs	r1, #15
 8004244:	f04f 30ff 	mov.w	r0, #4294967295
 8004248:	f7ff ff8e 	bl	8004168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800424c:	4b05      	ldr	r3, [pc, #20]	@ (8004264 <SysTick_Config+0x40>)
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004252:	4b04      	ldr	r3, [pc, #16]	@ (8004264 <SysTick_Config+0x40>)
 8004254:	2207      	movs	r2, #7
 8004256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	e000e010 	.word	0xe000e010

08004268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff29 	bl	80040c8 <__NVIC_SetPriorityGrouping>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b086      	sub	sp, #24
 8004282:	af00      	add	r7, sp, #0
 8004284:	4603      	mov	r3, r0
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
 800428a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004290:	f7ff ff3e 	bl	8004110 <__NVIC_GetPriorityGrouping>
 8004294:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	6978      	ldr	r0, [r7, #20]
 800429c:	f7ff ff8e 	bl	80041bc <NVIC_EncodePriority>
 80042a0:	4602      	mov	r2, r0
 80042a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff ff5d 	bl	8004168 <__NVIC_SetPriority>
}
 80042ae:	bf00      	nop
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	4603      	mov	r3, r0
 80042be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff ff31 	bl	800412c <__NVIC_EnableIRQ>
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff ffa2 	bl	8004224 <SysTick_Config>
 80042e0:	4603      	mov	r3, r0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042fa:	e154      	b.n	80045a6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	2101      	movs	r1, #1
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	fa01 f303 	lsl.w	r3, r1, r3
 8004308:	4013      	ands	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 8146 	beq.w	80045a0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 0303 	and.w	r3, r3, #3
 800431c:	2b01      	cmp	r3, #1
 800431e:	d005      	beq.n	800432c <HAL_GPIO_Init+0x40>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f003 0303 	and.w	r3, r3, #3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d130      	bne.n	800438e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	2203      	movs	r2, #3
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4013      	ands	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004362:	2201      	movs	r2, #1
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4013      	ands	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	091b      	lsrs	r3, r3, #4
 8004378:	f003 0201 	and.w	r2, r3, #1
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	2b03      	cmp	r3, #3
 8004398:	d017      	beq.n	80043ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	2203      	movs	r2, #3
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43db      	mvns	r3, r3
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4013      	ands	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d123      	bne.n	800441e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	08da      	lsrs	r2, r3, #3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3208      	adds	r2, #8
 80043de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	220f      	movs	r2, #15
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	43db      	mvns	r3, r3
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4013      	ands	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	08da      	lsrs	r2, r3, #3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3208      	adds	r2, #8
 8004418:	6939      	ldr	r1, [r7, #16]
 800441a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	2203      	movs	r2, #3
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43db      	mvns	r3, r3
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4013      	ands	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 0203 	and.w	r2, r3, #3
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80a0 	beq.w	80045a0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004460:	4b58      	ldr	r3, [pc, #352]	@ (80045c4 <HAL_GPIO_Init+0x2d8>)
 8004462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004464:	4a57      	ldr	r2, [pc, #348]	@ (80045c4 <HAL_GPIO_Init+0x2d8>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	6613      	str	r3, [r2, #96]	@ 0x60
 800446c:	4b55      	ldr	r3, [pc, #340]	@ (80045c4 <HAL_GPIO_Init+0x2d8>)
 800446e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004478:	4a53      	ldr	r2, [pc, #332]	@ (80045c8 <HAL_GPIO_Init+0x2dc>)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	089b      	lsrs	r3, r3, #2
 800447e:	3302      	adds	r3, #2
 8004480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004484:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	220f      	movs	r2, #15
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4013      	ands	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044a2:	d019      	beq.n	80044d8 <HAL_GPIO_Init+0x1ec>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a49      	ldr	r2, [pc, #292]	@ (80045cc <HAL_GPIO_Init+0x2e0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d013      	beq.n	80044d4 <HAL_GPIO_Init+0x1e8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a48      	ldr	r2, [pc, #288]	@ (80045d0 <HAL_GPIO_Init+0x2e4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00d      	beq.n	80044d0 <HAL_GPIO_Init+0x1e4>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a47      	ldr	r2, [pc, #284]	@ (80045d4 <HAL_GPIO_Init+0x2e8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d007      	beq.n	80044cc <HAL_GPIO_Init+0x1e0>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a46      	ldr	r2, [pc, #280]	@ (80045d8 <HAL_GPIO_Init+0x2ec>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d101      	bne.n	80044c8 <HAL_GPIO_Init+0x1dc>
 80044c4:	2304      	movs	r3, #4
 80044c6:	e008      	b.n	80044da <HAL_GPIO_Init+0x1ee>
 80044c8:	2307      	movs	r3, #7
 80044ca:	e006      	b.n	80044da <HAL_GPIO_Init+0x1ee>
 80044cc:	2303      	movs	r3, #3
 80044ce:	e004      	b.n	80044da <HAL_GPIO_Init+0x1ee>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e002      	b.n	80044da <HAL_GPIO_Init+0x1ee>
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <HAL_GPIO_Init+0x1ee>
 80044d8:	2300      	movs	r3, #0
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	f002 0203 	and.w	r2, r2, #3
 80044e0:	0092      	lsls	r2, r2, #2
 80044e2:	4093      	lsls	r3, r2
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044ea:	4937      	ldr	r1, [pc, #220]	@ (80045c8 <HAL_GPIO_Init+0x2dc>)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	3302      	adds	r3, #2
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044f8:	4b38      	ldr	r3, [pc, #224]	@ (80045dc <HAL_GPIO_Init+0x2f0>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	43db      	mvns	r3, r3
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4013      	ands	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800451c:	4a2f      	ldr	r2, [pc, #188]	@ (80045dc <HAL_GPIO_Init+0x2f0>)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004522:	4b2e      	ldr	r3, [pc, #184]	@ (80045dc <HAL_GPIO_Init+0x2f0>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	43db      	mvns	r3, r3
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4013      	ands	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004546:	4a25      	ldr	r2, [pc, #148]	@ (80045dc <HAL_GPIO_Init+0x2f0>)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800454c:	4b23      	ldr	r3, [pc, #140]	@ (80045dc <HAL_GPIO_Init+0x2f0>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	43db      	mvns	r3, r3
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4013      	ands	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004570:	4a1a      	ldr	r2, [pc, #104]	@ (80045dc <HAL_GPIO_Init+0x2f0>)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004576:	4b19      	ldr	r3, [pc, #100]	@ (80045dc <HAL_GPIO_Init+0x2f0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	43db      	mvns	r3, r3
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4013      	ands	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800459a:	4a10      	ldr	r2, [pc, #64]	@ (80045dc <HAL_GPIO_Init+0x2f0>)
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	3301      	adds	r3, #1
 80045a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f47f aea3 	bne.w	80042fc <HAL_GPIO_Init+0x10>
  }
}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40010000 	.word	0x40010000
 80045cc:	48000400 	.word	0x48000400
 80045d0:	48000800 	.word	0x48000800
 80045d4:	48000c00 	.word	0x48000c00
 80045d8:	48001000 	.word	0x48001000
 80045dc:	40010400 	.word	0x40010400

080045e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80045e4:	4b04      	ldr	r3, [pc, #16]	@ (80045f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40007000 	.word	0x40007000

080045fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800460a:	d130      	bne.n	800466e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800460c:	4b23      	ldr	r3, [pc, #140]	@ (800469c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004618:	d038      	beq.n	800468c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800461a:	4b20      	ldr	r3, [pc, #128]	@ (800469c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004622:	4a1e      	ldr	r2, [pc, #120]	@ (800469c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004624:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004628:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800462a:	4b1d      	ldr	r3, [pc, #116]	@ (80046a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2232      	movs	r2, #50	@ 0x32
 8004630:	fb02 f303 	mul.w	r3, r2, r3
 8004634:	4a1b      	ldr	r2, [pc, #108]	@ (80046a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004636:	fba2 2303 	umull	r2, r3, r2, r3
 800463a:	0c9b      	lsrs	r3, r3, #18
 800463c:	3301      	adds	r3, #1
 800463e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004640:	e002      	b.n	8004648 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	3b01      	subs	r3, #1
 8004646:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004648:	4b14      	ldr	r3, [pc, #80]	@ (800469c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004654:	d102      	bne.n	800465c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1f2      	bne.n	8004642 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800465c:	4b0f      	ldr	r3, [pc, #60]	@ (800469c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004668:	d110      	bne.n	800468c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e00f      	b.n	800468e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800466e:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800467a:	d007      	beq.n	800468c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800467c:	4b07      	ldr	r3, [pc, #28]	@ (800469c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004684:	4a05      	ldr	r2, [pc, #20]	@ (800469c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004686:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800468a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40007000 	.word	0x40007000
 80046a0:	20000000 	.word	0x20000000
 80046a4:	431bde83 	.word	0x431bde83

080046a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d102      	bne.n	80046bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f000 bc02 	b.w	8004ec0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046bc:	4b96      	ldr	r3, [pc, #600]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 030c 	and.w	r3, r3, #12
 80046c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046c6:	4b94      	ldr	r3, [pc, #592]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80e4 	beq.w	80048a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <HAL_RCC_OscConfig+0x4c>
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b0c      	cmp	r3, #12
 80046e8:	f040 808b 	bne.w	8004802 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	f040 8087 	bne.w	8004802 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046f4:	4b88      	ldr	r3, [pc, #544]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_RCC_OscConfig+0x64>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e3d9      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1a      	ldr	r2, [r3, #32]
 8004710:	4b81      	ldr	r3, [pc, #516]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <HAL_RCC_OscConfig+0x7e>
 800471c:	4b7e      	ldr	r3, [pc, #504]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004724:	e005      	b.n	8004732 <HAL_RCC_OscConfig+0x8a>
 8004726:	4b7c      	ldr	r3, [pc, #496]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004728:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800472c:	091b      	lsrs	r3, r3, #4
 800472e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004732:	4293      	cmp	r3, r2
 8004734:	d223      	bcs.n	800477e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fd54 	bl	80051e8 <RCC_SetFlashLatencyFromMSIRange>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e3ba      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800474a:	4b73      	ldr	r3, [pc, #460]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a72      	ldr	r2, [pc, #456]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004750:	f043 0308 	orr.w	r3, r3, #8
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b70      	ldr	r3, [pc, #448]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	496d      	ldr	r1, [pc, #436]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004764:	4313      	orrs	r3, r2
 8004766:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004768:	4b6b      	ldr	r3, [pc, #428]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	4968      	ldr	r1, [pc, #416]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]
 800477c:	e025      	b.n	80047ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800477e:	4b66      	ldr	r3, [pc, #408]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a65      	ldr	r2, [pc, #404]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004784:	f043 0308 	orr.w	r3, r3, #8
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	4b63      	ldr	r3, [pc, #396]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	4960      	ldr	r1, [pc, #384]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004798:	4313      	orrs	r3, r2
 800479a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800479c:	4b5e      	ldr	r3, [pc, #376]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	021b      	lsls	r3, r3, #8
 80047aa:	495b      	ldr	r1, [pc, #364]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fd14 	bl	80051e8 <RCC_SetFlashLatencyFromMSIRange>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e37a      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047ca:	f000 fc81 	bl	80050d0 <HAL_RCC_GetSysClockFreq>
 80047ce:	4602      	mov	r2, r0
 80047d0:	4b51      	ldr	r3, [pc, #324]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	091b      	lsrs	r3, r3, #4
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	4950      	ldr	r1, [pc, #320]	@ (800491c <HAL_RCC_OscConfig+0x274>)
 80047dc:	5ccb      	ldrb	r3, [r1, r3]
 80047de:	f003 031f 	and.w	r3, r3, #31
 80047e2:	fa22 f303 	lsr.w	r3, r2, r3
 80047e6:	4a4e      	ldr	r2, [pc, #312]	@ (8004920 <HAL_RCC_OscConfig+0x278>)
 80047e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80047ea:	4b4e      	ldr	r3, [pc, #312]	@ (8004924 <HAL_RCC_OscConfig+0x27c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe ffe6 	bl	80037c0 <HAL_InitTick>
 80047f4:	4603      	mov	r3, r0
 80047f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d052      	beq.n	80048a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
 8004800:	e35e      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d032      	beq.n	8004870 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800480a:	4b43      	ldr	r3, [pc, #268]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a42      	ldr	r2, [pc, #264]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004816:	f7ff f823 	bl	8003860 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800481e:	f7ff f81f 	bl	8003860 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e347      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004830:	4b39      	ldr	r3, [pc, #228]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0f0      	beq.n	800481e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800483c:	4b36      	ldr	r3, [pc, #216]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a35      	ldr	r2, [pc, #212]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004842:	f043 0308 	orr.w	r3, r3, #8
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	4b33      	ldr	r3, [pc, #204]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	4930      	ldr	r1, [pc, #192]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800485a:	4b2f      	ldr	r3, [pc, #188]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	492b      	ldr	r1, [pc, #172]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 800486a:	4313      	orrs	r3, r2
 800486c:	604b      	str	r3, [r1, #4]
 800486e:	e01a      	b.n	80048a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004870:	4b29      	ldr	r3, [pc, #164]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a28      	ldr	r2, [pc, #160]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800487c:	f7fe fff0 	bl	8003860 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004884:	f7fe ffec 	bl	8003860 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e314      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004896:	4b20      	ldr	r3, [pc, #128]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0x1dc>
 80048a2:	e000      	b.n	80048a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d073      	beq.n	800499a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d005      	beq.n	80048c4 <HAL_RCC_OscConfig+0x21c>
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2b0c      	cmp	r3, #12
 80048bc:	d10e      	bne.n	80048dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d10b      	bne.n	80048dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c4:	4b14      	ldr	r3, [pc, #80]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d063      	beq.n	8004998 <HAL_RCC_OscConfig+0x2f0>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d15f      	bne.n	8004998 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e2f1      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048e4:	d106      	bne.n	80048f4 <HAL_RCC_OscConfig+0x24c>
 80048e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a0b      	ldr	r2, [pc, #44]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 80048ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e025      	b.n	8004940 <HAL_RCC_OscConfig+0x298>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048fc:	d114      	bne.n	8004928 <HAL_RCC_OscConfig+0x280>
 80048fe:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a05      	ldr	r2, [pc, #20]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	4b03      	ldr	r3, [pc, #12]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a02      	ldr	r2, [pc, #8]	@ (8004918 <HAL_RCC_OscConfig+0x270>)
 8004910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	e013      	b.n	8004940 <HAL_RCC_OscConfig+0x298>
 8004918:	40021000 	.word	0x40021000
 800491c:	080074a0 	.word	0x080074a0
 8004920:	20000000 	.word	0x20000000
 8004924:	20000004 	.word	0x20000004
 8004928:	4ba0      	ldr	r3, [pc, #640]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a9f      	ldr	r2, [pc, #636]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 800492e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	4b9d      	ldr	r3, [pc, #628]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a9c      	ldr	r2, [pc, #624]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 800493a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800493e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d013      	beq.n	8004970 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fe ff8a 	bl	8003860 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004950:	f7fe ff86 	bl	8003860 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b64      	cmp	r3, #100	@ 0x64
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e2ae      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004962:	4b92      	ldr	r3, [pc, #584]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCC_OscConfig+0x2a8>
 800496e:	e014      	b.n	800499a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fe ff76 	bl	8003860 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004978:	f7fe ff72 	bl	8003860 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b64      	cmp	r3, #100	@ 0x64
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e29a      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800498a:	4b88      	ldr	r3, [pc, #544]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCC_OscConfig+0x2d0>
 8004996:	e000      	b.n	800499a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d060      	beq.n	8004a68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_OscConfig+0x310>
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	2b0c      	cmp	r3, #12
 80049b0:	d119      	bne.n	80049e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d116      	bne.n	80049e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049b8:	4b7c      	ldr	r3, [pc, #496]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_OscConfig+0x328>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e277      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d0:	4b76      	ldr	r3, [pc, #472]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	061b      	lsls	r3, r3, #24
 80049de:	4973      	ldr	r1, [pc, #460]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049e4:	e040      	b.n	8004a68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d023      	beq.n	8004a36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049ee:	4b6f      	ldr	r3, [pc, #444]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a6e      	ldr	r2, [pc, #440]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 80049f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fa:	f7fe ff31 	bl	8003860 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a02:	f7fe ff2d 	bl	8003860 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e255      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a14:	4b65      	ldr	r3, [pc, #404]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a20:	4b62      	ldr	r3, [pc, #392]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	061b      	lsls	r3, r3, #24
 8004a2e:	495f      	ldr	r1, [pc, #380]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	604b      	str	r3, [r1, #4]
 8004a34:	e018      	b.n	8004a68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a36:	4b5d      	ldr	r3, [pc, #372]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a5c      	ldr	r2, [pc, #368]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a42:	f7fe ff0d 	bl	8003860 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a4a:	f7fe ff09 	bl	8003860 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e231      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a5c:	4b53      	ldr	r3, [pc, #332]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f0      	bne.n	8004a4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0308 	and.w	r3, r3, #8
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d03c      	beq.n	8004aee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01c      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a82:	4a4a      	ldr	r2, [pc, #296]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8c:	f7fe fee8 	bl	8003860 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a94:	f7fe fee4 	bl	8003860 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e20c      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004aa6:	4b41      	ldr	r3, [pc, #260]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0ef      	beq.n	8004a94 <HAL_RCC_OscConfig+0x3ec>
 8004ab4:	e01b      	b.n	8004aee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004abc:	4a3b      	ldr	r2, [pc, #236]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004abe:	f023 0301 	bic.w	r3, r3, #1
 8004ac2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac6:	f7fe fecb 	bl	8003860 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ace:	f7fe fec7 	bl	8003860 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e1ef      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ae0:	4b32      	ldr	r3, [pc, #200]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1ef      	bne.n	8004ace <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 80a6 	beq.w	8004c48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004afc:	2300      	movs	r3, #0
 8004afe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b00:	4b2a      	ldr	r3, [pc, #168]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10d      	bne.n	8004b28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b0c:	4b27      	ldr	r3, [pc, #156]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b10:	4a26      	ldr	r2, [pc, #152]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b16:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b18:	4b24      	ldr	r3, [pc, #144]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b24:	2301      	movs	r3, #1
 8004b26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b28:	4b21      	ldr	r3, [pc, #132]	@ (8004bb0 <HAL_RCC_OscConfig+0x508>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d118      	bne.n	8004b66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b34:	4b1e      	ldr	r3, [pc, #120]	@ (8004bb0 <HAL_RCC_OscConfig+0x508>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb0 <HAL_RCC_OscConfig+0x508>)
 8004b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b40:	f7fe fe8e 	bl	8003860 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b48:	f7fe fe8a 	bl	8003860 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e1b2      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b5a:	4b15      	ldr	r3, [pc, #84]	@ (8004bb0 <HAL_RCC_OscConfig+0x508>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d108      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4d8>
 8004b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b74:	4a0d      	ldr	r2, [pc, #52]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b7e:	e029      	b.n	8004bd4 <HAL_RCC_OscConfig+0x52c>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b05      	cmp	r3, #5
 8004b86:	d115      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x50c>
 8004b88:	4b08      	ldr	r3, [pc, #32]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b8e:	4a07      	ldr	r2, [pc, #28]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004b90:	f043 0304 	orr.w	r3, r3, #4
 8004b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b98:	4b04      	ldr	r3, [pc, #16]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9e:	4a03      	ldr	r2, [pc, #12]	@ (8004bac <HAL_RCC_OscConfig+0x504>)
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ba8:	e014      	b.n	8004bd4 <HAL_RCC_OscConfig+0x52c>
 8004baa:	bf00      	nop
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	40007000 	.word	0x40007000
 8004bb4:	4b9a      	ldr	r3, [pc, #616]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bba:	4a99      	ldr	r2, [pc, #612]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bc4:	4b96      	ldr	r3, [pc, #600]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bca:	4a95      	ldr	r2, [pc, #596]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004bcc:	f023 0304 	bic.w	r3, r3, #4
 8004bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d016      	beq.n	8004c0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bdc:	f7fe fe40 	bl	8003860 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be4:	f7fe fe3c 	bl	8003860 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e162      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bfa:	4b89      	ldr	r3, [pc, #548]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0ed      	beq.n	8004be4 <HAL_RCC_OscConfig+0x53c>
 8004c08:	e015      	b.n	8004c36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0a:	f7fe fe29 	bl	8003860 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c10:	e00a      	b.n	8004c28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c12:	f7fe fe25 	bl	8003860 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e14b      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c28:	4b7d      	ldr	r3, [pc, #500]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1ed      	bne.n	8004c12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c36:	7ffb      	ldrb	r3, [r7, #31]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d105      	bne.n	8004c48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3c:	4b78      	ldr	r3, [pc, #480]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c40:	4a77      	ldr	r2, [pc, #476]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d03c      	beq.n	8004cce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01c      	beq.n	8004c96 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c5c:	4b70      	ldr	r3, [pc, #448]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c62:	4a6f      	ldr	r2, [pc, #444]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fe fdf8 	bl	8003860 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c74:	f7fe fdf4 	bl	8003860 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e11c      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c86:	4b66      	ldr	r3, [pc, #408]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0ef      	beq.n	8004c74 <HAL_RCC_OscConfig+0x5cc>
 8004c94:	e01b      	b.n	8004cce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c96:	4b62      	ldr	r3, [pc, #392]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c9c:	4a60      	ldr	r2, [pc, #384]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004c9e:	f023 0301 	bic.w	r3, r3, #1
 8004ca2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca6:	f7fe fddb 	bl	8003860 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cae:	f7fe fdd7 	bl	8003860 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e0ff      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cc0:	4b57      	ldr	r3, [pc, #348]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1ef      	bne.n	8004cae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80f3 	beq.w	8004ebe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	f040 80c9 	bne.w	8004e74 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f003 0203 	and.w	r2, r3, #3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d12c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d00:	3b01      	subs	r3, #1
 8004d02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d123      	bne.n	8004d50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d11b      	bne.n	8004d50 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d113      	bne.n	8004d50 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d32:	085b      	lsrs	r3, r3, #1
 8004d34:	3b01      	subs	r3, #1
 8004d36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d109      	bne.n	8004d50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	085b      	lsrs	r3, r3, #1
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d06b      	beq.n	8004e28 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	2b0c      	cmp	r3, #12
 8004d54:	d062      	beq.n	8004e1c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d56:	4b32      	ldr	r3, [pc, #200]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e0ac      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d66:	4b2e      	ldr	r3, [pc, #184]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a2d      	ldr	r2, [pc, #180]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004d6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d72:	f7fe fd75 	bl	8003860 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7a:	f7fe fd71 	bl	8003860 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e099      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d8c:	4b24      	ldr	r3, [pc, #144]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1f0      	bne.n	8004d7a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d98:	4b21      	ldr	r3, [pc, #132]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	4b21      	ldr	r3, [pc, #132]	@ (8004e24 <HAL_RCC_OscConfig+0x77c>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004da8:	3a01      	subs	r2, #1
 8004daa:	0112      	lsls	r2, r2, #4
 8004dac:	4311      	orrs	r1, r2
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004db2:	0212      	lsls	r2, r2, #8
 8004db4:	4311      	orrs	r1, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004dba:	0852      	lsrs	r2, r2, #1
 8004dbc:	3a01      	subs	r2, #1
 8004dbe:	0552      	lsls	r2, r2, #21
 8004dc0:	4311      	orrs	r1, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004dc6:	0852      	lsrs	r2, r2, #1
 8004dc8:	3a01      	subs	r2, #1
 8004dca:	0652      	lsls	r2, r2, #25
 8004dcc:	4311      	orrs	r1, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004dd2:	06d2      	lsls	r2, r2, #27
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	4912      	ldr	r1, [pc, #72]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ddc:	4b10      	ldr	r3, [pc, #64]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a0f      	ldr	r2, [pc, #60]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004de2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004de6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004de8:	4b0d      	ldr	r3, [pc, #52]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	4a0c      	ldr	r2, [pc, #48]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004dee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004df2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004df4:	f7fe fd34 	bl	8003860 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfc:	f7fe fd30 	bl	8003860 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e058      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e0e:	4b04      	ldr	r3, [pc, #16]	@ (8004e20 <HAL_RCC_OscConfig+0x778>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e1a:	e050      	b.n	8004ebe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e04f      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
 8004e20:	40021000 	.word	0x40021000
 8004e24:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e28:	4b27      	ldr	r3, [pc, #156]	@ (8004ec8 <HAL_RCC_OscConfig+0x820>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d144      	bne.n	8004ebe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e34:	4b24      	ldr	r3, [pc, #144]	@ (8004ec8 <HAL_RCC_OscConfig+0x820>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a23      	ldr	r2, [pc, #140]	@ (8004ec8 <HAL_RCC_OscConfig+0x820>)
 8004e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e40:	4b21      	ldr	r3, [pc, #132]	@ (8004ec8 <HAL_RCC_OscConfig+0x820>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4a20      	ldr	r2, [pc, #128]	@ (8004ec8 <HAL_RCC_OscConfig+0x820>)
 8004e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e4c:	f7fe fd08 	bl	8003860 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e54:	f7fe fd04 	bl	8003860 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e02c      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e66:	4b18      	ldr	r3, [pc, #96]	@ (8004ec8 <HAL_RCC_OscConfig+0x820>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x7ac>
 8004e72:	e024      	b.n	8004ebe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	2b0c      	cmp	r3, #12
 8004e78:	d01f      	beq.n	8004eba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7a:	4b13      	ldr	r3, [pc, #76]	@ (8004ec8 <HAL_RCC_OscConfig+0x820>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a12      	ldr	r2, [pc, #72]	@ (8004ec8 <HAL_RCC_OscConfig+0x820>)
 8004e80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e86:	f7fe fceb 	bl	8003860 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8e:	f7fe fce7 	bl	8003860 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e00f      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea0:	4b09      	ldr	r3, [pc, #36]	@ (8004ec8 <HAL_RCC_OscConfig+0x820>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f0      	bne.n	8004e8e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004eac:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <HAL_RCC_OscConfig+0x820>)
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	4905      	ldr	r1, [pc, #20]	@ (8004ec8 <HAL_RCC_OscConfig+0x820>)
 8004eb2:	4b06      	ldr	r3, [pc, #24]	@ (8004ecc <HAL_RCC_OscConfig+0x824>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	60cb      	str	r3, [r1, #12]
 8004eb8:	e001      	b.n	8004ebe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3720      	adds	r7, #32
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	feeefffc 	.word	0xfeeefffc

08004ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0e7      	b.n	80050b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee4:	4b75      	ldr	r3, [pc, #468]	@ (80050bc <HAL_RCC_ClockConfig+0x1ec>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d910      	bls.n	8004f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef2:	4b72      	ldr	r3, [pc, #456]	@ (80050bc <HAL_RCC_ClockConfig+0x1ec>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f023 0207 	bic.w	r2, r3, #7
 8004efa:	4970      	ldr	r1, [pc, #448]	@ (80050bc <HAL_RCC_ClockConfig+0x1ec>)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f02:	4b6e      	ldr	r3, [pc, #440]	@ (80050bc <HAL_RCC_ClockConfig+0x1ec>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0cf      	b.n	80050b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d010      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	4b66      	ldr	r3, [pc, #408]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d908      	bls.n	8004f42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f30:	4b63      	ldr	r3, [pc, #396]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	4960      	ldr	r1, [pc, #384]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d04c      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d107      	bne.n	8004f66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f56:	4b5a      	ldr	r3, [pc, #360]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d121      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e0a6      	b.n	80050b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f6e:	4b54      	ldr	r3, [pc, #336]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d115      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e09a      	b.n	80050b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d107      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f86:	4b4e      	ldr	r3, [pc, #312]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e08e      	b.n	80050b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f96:	4b4a      	ldr	r3, [pc, #296]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e086      	b.n	80050b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fa6:	4b46      	ldr	r3, [pc, #280]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f023 0203 	bic.w	r2, r3, #3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	4943      	ldr	r1, [pc, #268]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb8:	f7fe fc52 	bl	8003860 <HAL_GetTick>
 8004fbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc0:	f7fe fc4e 	bl	8003860 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e06e      	b.n	80050b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 020c 	and.w	r2, r3, #12
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d1eb      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d010      	beq.n	8005016 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	4b31      	ldr	r3, [pc, #196]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005000:	429a      	cmp	r2, r3
 8005002:	d208      	bcs.n	8005016 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005004:	4b2e      	ldr	r3, [pc, #184]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	492b      	ldr	r1, [pc, #172]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005016:	4b29      	ldr	r3, [pc, #164]	@ (80050bc <HAL_RCC_ClockConfig+0x1ec>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d210      	bcs.n	8005046 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005024:	4b25      	ldr	r3, [pc, #148]	@ (80050bc <HAL_RCC_ClockConfig+0x1ec>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f023 0207 	bic.w	r2, r3, #7
 800502c:	4923      	ldr	r1, [pc, #140]	@ (80050bc <HAL_RCC_ClockConfig+0x1ec>)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	4313      	orrs	r3, r2
 8005032:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005034:	4b21      	ldr	r3, [pc, #132]	@ (80050bc <HAL_RCC_ClockConfig+0x1ec>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d001      	beq.n	8005046 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e036      	b.n	80050b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	d008      	beq.n	8005064 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005052:	4b1b      	ldr	r3, [pc, #108]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	4918      	ldr	r1, [pc, #96]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8005060:	4313      	orrs	r3, r2
 8005062:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b00      	cmp	r3, #0
 800506e:	d009      	beq.n	8005084 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005070:	4b13      	ldr	r3, [pc, #76]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	4910      	ldr	r1, [pc, #64]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 8005080:	4313      	orrs	r3, r2
 8005082:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005084:	f000 f824 	bl	80050d0 <HAL_RCC_GetSysClockFreq>
 8005088:	4602      	mov	r2, r0
 800508a:	4b0d      	ldr	r3, [pc, #52]	@ (80050c0 <HAL_RCC_ClockConfig+0x1f0>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	091b      	lsrs	r3, r3, #4
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	490b      	ldr	r1, [pc, #44]	@ (80050c4 <HAL_RCC_ClockConfig+0x1f4>)
 8005096:	5ccb      	ldrb	r3, [r1, r3]
 8005098:	f003 031f 	and.w	r3, r3, #31
 800509c:	fa22 f303 	lsr.w	r3, r2, r3
 80050a0:	4a09      	ldr	r2, [pc, #36]	@ (80050c8 <HAL_RCC_ClockConfig+0x1f8>)
 80050a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050a4:	4b09      	ldr	r3, [pc, #36]	@ (80050cc <HAL_RCC_ClockConfig+0x1fc>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fe fb89 	bl	80037c0 <HAL_InitTick>
 80050ae:	4603      	mov	r3, r0
 80050b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80050b2:	7afb      	ldrb	r3, [r7, #11]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40022000 	.word	0x40022000
 80050c0:	40021000 	.word	0x40021000
 80050c4:	080074a0 	.word	0x080074a0
 80050c8:	20000000 	.word	0x20000000
 80050cc:	20000004 	.word	0x20000004

080050d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b089      	sub	sp, #36	@ 0x24
 80050d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
 80050da:	2300      	movs	r3, #0
 80050dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050de:	4b3e      	ldr	r3, [pc, #248]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 030c 	and.w	r3, r3, #12
 80050e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050e8:	4b3b      	ldr	r3, [pc, #236]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <HAL_RCC_GetSysClockFreq+0x34>
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2b0c      	cmp	r3, #12
 80050fc:	d121      	bne.n	8005142 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d11e      	bne.n	8005142 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005104:	4b34      	ldr	r3, [pc, #208]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0308 	and.w	r3, r3, #8
 800510c:	2b00      	cmp	r3, #0
 800510e:	d107      	bne.n	8005120 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005110:	4b31      	ldr	r3, [pc, #196]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005112:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	f003 030f 	and.w	r3, r3, #15
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	e005      	b.n	800512c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005120:	4b2d      	ldr	r3, [pc, #180]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	091b      	lsrs	r3, r3, #4
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800512c:	4a2b      	ldr	r2, [pc, #172]	@ (80051dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005134:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10d      	bne.n	8005158 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005140:	e00a      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b04      	cmp	r3, #4
 8005146:	d102      	bne.n	800514e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005148:	4b25      	ldr	r3, [pc, #148]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800514a:	61bb      	str	r3, [r7, #24]
 800514c:	e004      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b08      	cmp	r3, #8
 8005152:	d101      	bne.n	8005158 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005154:	4b23      	ldr	r3, [pc, #140]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005156:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	2b0c      	cmp	r3, #12
 800515c:	d134      	bne.n	80051c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800515e:	4b1e      	ldr	r3, [pc, #120]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b02      	cmp	r3, #2
 800516c:	d003      	beq.n	8005176 <HAL_RCC_GetSysClockFreq+0xa6>
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b03      	cmp	r3, #3
 8005172:	d003      	beq.n	800517c <HAL_RCC_GetSysClockFreq+0xac>
 8005174:	e005      	b.n	8005182 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005176:	4b1a      	ldr	r3, [pc, #104]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005178:	617b      	str	r3, [r7, #20]
      break;
 800517a:	e005      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800517c:	4b19      	ldr	r3, [pc, #100]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800517e:	617b      	str	r3, [r7, #20]
      break;
 8005180:	e002      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	617b      	str	r3, [r7, #20]
      break;
 8005186:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005188:	4b13      	ldr	r3, [pc, #76]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	3301      	adds	r3, #1
 8005194:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005196:	4b10      	ldr	r3, [pc, #64]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	0a1b      	lsrs	r3, r3, #8
 800519c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	fb03 f202 	mul.w	r2, r3, r2
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051ae:	4b0a      	ldr	r3, [pc, #40]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	0e5b      	lsrs	r3, r3, #25
 80051b4:	f003 0303 	and.w	r3, r3, #3
 80051b8:	3301      	adds	r3, #1
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80051c8:	69bb      	ldr	r3, [r7, #24]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3724      	adds	r7, #36	@ 0x24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40021000 	.word	0x40021000
 80051dc:	080074b0 	.word	0x080074b0
 80051e0:	00f42400 	.word	0x00f42400
 80051e4:	007a1200 	.word	0x007a1200

080051e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051f0:	2300      	movs	r3, #0
 80051f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051f4:	4b2a      	ldr	r3, [pc, #168]	@ (80052a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005200:	f7ff f9ee 	bl	80045e0 <HAL_PWREx_GetVoltageRange>
 8005204:	6178      	str	r0, [r7, #20]
 8005206:	e014      	b.n	8005232 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005208:	4b25      	ldr	r3, [pc, #148]	@ (80052a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800520a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520c:	4a24      	ldr	r2, [pc, #144]	@ (80052a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800520e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005212:	6593      	str	r3, [r2, #88]	@ 0x58
 8005214:	4b22      	ldr	r3, [pc, #136]	@ (80052a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005220:	f7ff f9de 	bl	80045e0 <HAL_PWREx_GetVoltageRange>
 8005224:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005226:	4b1e      	ldr	r3, [pc, #120]	@ (80052a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800522a:	4a1d      	ldr	r2, [pc, #116]	@ (80052a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800522c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005230:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005238:	d10b      	bne.n	8005252 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b80      	cmp	r3, #128	@ 0x80
 800523e:	d919      	bls.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2ba0      	cmp	r3, #160	@ 0xa0
 8005244:	d902      	bls.n	800524c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005246:	2302      	movs	r3, #2
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	e013      	b.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800524c:	2301      	movs	r3, #1
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	e010      	b.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b80      	cmp	r3, #128	@ 0x80
 8005256:	d902      	bls.n	800525e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005258:	2303      	movs	r3, #3
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	e00a      	b.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b80      	cmp	r3, #128	@ 0x80
 8005262:	d102      	bne.n	800526a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005264:	2302      	movs	r3, #2
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	e004      	b.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b70      	cmp	r3, #112	@ 0x70
 800526e:	d101      	bne.n	8005274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005270:	2301      	movs	r3, #1
 8005272:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005274:	4b0b      	ldr	r3, [pc, #44]	@ (80052a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f023 0207 	bic.w	r2, r3, #7
 800527c:	4909      	ldr	r1, [pc, #36]	@ (80052a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005284:	4b07      	ldr	r3, [pc, #28]	@ (80052a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	429a      	cmp	r2, r3
 8005290:	d001      	beq.n	8005296 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40021000 	.word	0x40021000
 80052a4:	40022000 	.word	0x40022000

080052a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e049      	b.n	800534e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fd fd6a 	bl	8002da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4619      	mov	r1, r3
 80052e6:	4610      	mov	r0, r2
 80052e8:	f000 fb52 	bl	8005990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e049      	b.n	80053fc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d106      	bne.n	8005382 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f841 	bl	8005404 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2202      	movs	r2, #2
 8005386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3304      	adds	r3, #4
 8005392:	4619      	mov	r1, r3
 8005394:	4610      	mov	r0, r2
 8005396:	f000 fafb 	bl	8005990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d109      	bne.n	800543c <HAL_TIM_PWM_Start+0x24>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	bf14      	ite	ne
 8005434:	2301      	movne	r3, #1
 8005436:	2300      	moveq	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	e03c      	b.n	80054b6 <HAL_TIM_PWM_Start+0x9e>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	2b04      	cmp	r3, #4
 8005440:	d109      	bne.n	8005456 <HAL_TIM_PWM_Start+0x3e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b01      	cmp	r3, #1
 800544c:	bf14      	ite	ne
 800544e:	2301      	movne	r3, #1
 8005450:	2300      	moveq	r3, #0
 8005452:	b2db      	uxtb	r3, r3
 8005454:	e02f      	b.n	80054b6 <HAL_TIM_PWM_Start+0x9e>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b08      	cmp	r3, #8
 800545a:	d109      	bne.n	8005470 <HAL_TIM_PWM_Start+0x58>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b01      	cmp	r3, #1
 8005466:	bf14      	ite	ne
 8005468:	2301      	movne	r3, #1
 800546a:	2300      	moveq	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	e022      	b.n	80054b6 <HAL_TIM_PWM_Start+0x9e>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2b0c      	cmp	r3, #12
 8005474:	d109      	bne.n	800548a <HAL_TIM_PWM_Start+0x72>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b01      	cmp	r3, #1
 8005480:	bf14      	ite	ne
 8005482:	2301      	movne	r3, #1
 8005484:	2300      	moveq	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	e015      	b.n	80054b6 <HAL_TIM_PWM_Start+0x9e>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b10      	cmp	r3, #16
 800548e:	d109      	bne.n	80054a4 <HAL_TIM_PWM_Start+0x8c>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	bf14      	ite	ne
 800549c:	2301      	movne	r3, #1
 800549e:	2300      	moveq	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	e008      	b.n	80054b6 <HAL_TIM_PWM_Start+0x9e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	bf14      	ite	ne
 80054b0:	2301      	movne	r3, #1
 80054b2:	2300      	moveq	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e07e      	b.n	80055bc <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d104      	bne.n	80054ce <HAL_TIM_PWM_Start+0xb6>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054cc:	e023      	b.n	8005516 <HAL_TIM_PWM_Start+0xfe>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d104      	bne.n	80054de <HAL_TIM_PWM_Start+0xc6>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054dc:	e01b      	b.n	8005516 <HAL_TIM_PWM_Start+0xfe>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d104      	bne.n	80054ee <HAL_TIM_PWM_Start+0xd6>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054ec:	e013      	b.n	8005516 <HAL_TIM_PWM_Start+0xfe>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b0c      	cmp	r3, #12
 80054f2:	d104      	bne.n	80054fe <HAL_TIM_PWM_Start+0xe6>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054fc:	e00b      	b.n	8005516 <HAL_TIM_PWM_Start+0xfe>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b10      	cmp	r3, #16
 8005502:	d104      	bne.n	800550e <HAL_TIM_PWM_Start+0xf6>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800550c:	e003      	b.n	8005516 <HAL_TIM_PWM_Start+0xfe>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2202      	movs	r2, #2
 8005512:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2201      	movs	r2, #1
 800551c:	6839      	ldr	r1, [r7, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f000 fdbe 	bl	80060a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a26      	ldr	r2, [pc, #152]	@ (80055c4 <HAL_TIM_PWM_Start+0x1ac>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d009      	beq.n	8005542 <HAL_TIM_PWM_Start+0x12a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a25      	ldr	r2, [pc, #148]	@ (80055c8 <HAL_TIM_PWM_Start+0x1b0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_TIM_PWM_Start+0x12a>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a23      	ldr	r2, [pc, #140]	@ (80055cc <HAL_TIM_PWM_Start+0x1b4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d101      	bne.n	8005546 <HAL_TIM_PWM_Start+0x12e>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <HAL_TIM_PWM_Start+0x130>
 8005546:	2300      	movs	r3, #0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800555a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a18      	ldr	r2, [pc, #96]	@ (80055c4 <HAL_TIM_PWM_Start+0x1ac>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d009      	beq.n	800557a <HAL_TIM_PWM_Start+0x162>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800556e:	d004      	beq.n	800557a <HAL_TIM_PWM_Start+0x162>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a14      	ldr	r2, [pc, #80]	@ (80055c8 <HAL_TIM_PWM_Start+0x1b0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d115      	bne.n	80055a6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	4b13      	ldr	r3, [pc, #76]	@ (80055d0 <HAL_TIM_PWM_Start+0x1b8>)
 8005582:	4013      	ands	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2b06      	cmp	r3, #6
 800558a:	d015      	beq.n	80055b8 <HAL_TIM_PWM_Start+0x1a0>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005592:	d011      	beq.n	80055b8 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a4:	e008      	b.n	80055b8 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f042 0201 	orr.w	r2, r2, #1
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	e000      	b.n	80055ba <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40012c00 	.word	0x40012c00
 80055c8:	40014000 	.word	0x40014000
 80055cc:	40014400 	.word	0x40014400
 80055d0:	00010007 	.word	0x00010007

080055d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e0ff      	b.n	80057f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b14      	cmp	r3, #20
 80055fe:	f200 80f0 	bhi.w	80057e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005602:	a201      	add	r2, pc, #4	@ (adr r2, 8005608 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005608:	0800565d 	.word	0x0800565d
 800560c:	080057e3 	.word	0x080057e3
 8005610:	080057e3 	.word	0x080057e3
 8005614:	080057e3 	.word	0x080057e3
 8005618:	0800569d 	.word	0x0800569d
 800561c:	080057e3 	.word	0x080057e3
 8005620:	080057e3 	.word	0x080057e3
 8005624:	080057e3 	.word	0x080057e3
 8005628:	080056df 	.word	0x080056df
 800562c:	080057e3 	.word	0x080057e3
 8005630:	080057e3 	.word	0x080057e3
 8005634:	080057e3 	.word	0x080057e3
 8005638:	0800571f 	.word	0x0800571f
 800563c:	080057e3 	.word	0x080057e3
 8005640:	080057e3 	.word	0x080057e3
 8005644:	080057e3 	.word	0x080057e3
 8005648:	08005761 	.word	0x08005761
 800564c:	080057e3 	.word	0x080057e3
 8005650:	080057e3 	.word	0x080057e3
 8005654:	080057e3 	.word	0x080057e3
 8005658:	080057a1 	.word	0x080057a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fa04 	bl	8005a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0208 	orr.w	r2, r2, #8
 8005676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0204 	bic.w	r2, r2, #4
 8005686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6999      	ldr	r1, [r3, #24]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	619a      	str	r2, [r3, #24]
      break;
 800569a:	e0a5      	b.n	80057e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fa60 	bl	8005b68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6999      	ldr	r1, [r3, #24]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	021a      	lsls	r2, r3, #8
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	619a      	str	r2, [r3, #24]
      break;
 80056dc:	e084      	b.n	80057e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fab9 	bl	8005c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0208 	orr.w	r2, r2, #8
 80056f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0204 	bic.w	r2, r2, #4
 8005708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69d9      	ldr	r1, [r3, #28]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	61da      	str	r2, [r3, #28]
      break;
 800571c:	e064      	b.n	80057e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fb11 	bl	8005d4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69d9      	ldr	r1, [r3, #28]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	021a      	lsls	r2, r3, #8
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	61da      	str	r2, [r3, #28]
      break;
 800575e:	e043      	b.n	80057e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fb4e 	bl	8005e08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0208 	orr.w	r2, r2, #8
 800577a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0204 	bic.w	r2, r2, #4
 800578a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	691a      	ldr	r2, [r3, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800579e:	e023      	b.n	80057e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fb86 	bl	8005eb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	021a      	lsls	r2, r3, #8
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80057e0:	e002      	b.n	80057e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	75fb      	strb	r3, [r7, #23]
      break;
 80057e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop

080057fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_TIM_ConfigClockSource+0x1c>
 8005814:	2302      	movs	r3, #2
 8005816:	e0b6      	b.n	8005986 <HAL_TIM_ConfigClockSource+0x18a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005836:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800583a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005842:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005854:	d03e      	beq.n	80058d4 <HAL_TIM_ConfigClockSource+0xd8>
 8005856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800585a:	f200 8087 	bhi.w	800596c <HAL_TIM_ConfigClockSource+0x170>
 800585e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005862:	f000 8086 	beq.w	8005972 <HAL_TIM_ConfigClockSource+0x176>
 8005866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800586a:	d87f      	bhi.n	800596c <HAL_TIM_ConfigClockSource+0x170>
 800586c:	2b70      	cmp	r3, #112	@ 0x70
 800586e:	d01a      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0xaa>
 8005870:	2b70      	cmp	r3, #112	@ 0x70
 8005872:	d87b      	bhi.n	800596c <HAL_TIM_ConfigClockSource+0x170>
 8005874:	2b60      	cmp	r3, #96	@ 0x60
 8005876:	d050      	beq.n	800591a <HAL_TIM_ConfigClockSource+0x11e>
 8005878:	2b60      	cmp	r3, #96	@ 0x60
 800587a:	d877      	bhi.n	800596c <HAL_TIM_ConfigClockSource+0x170>
 800587c:	2b50      	cmp	r3, #80	@ 0x50
 800587e:	d03c      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0xfe>
 8005880:	2b50      	cmp	r3, #80	@ 0x50
 8005882:	d873      	bhi.n	800596c <HAL_TIM_ConfigClockSource+0x170>
 8005884:	2b40      	cmp	r3, #64	@ 0x40
 8005886:	d058      	beq.n	800593a <HAL_TIM_ConfigClockSource+0x13e>
 8005888:	2b40      	cmp	r3, #64	@ 0x40
 800588a:	d86f      	bhi.n	800596c <HAL_TIM_ConfigClockSource+0x170>
 800588c:	2b30      	cmp	r3, #48	@ 0x30
 800588e:	d064      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x15e>
 8005890:	2b30      	cmp	r3, #48	@ 0x30
 8005892:	d86b      	bhi.n	800596c <HAL_TIM_ConfigClockSource+0x170>
 8005894:	2b20      	cmp	r3, #32
 8005896:	d060      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x15e>
 8005898:	2b20      	cmp	r3, #32
 800589a:	d867      	bhi.n	800596c <HAL_TIM_ConfigClockSource+0x170>
 800589c:	2b00      	cmp	r3, #0
 800589e:	d05c      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x15e>
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d05a      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x15e>
 80058a4:	e062      	b.n	800596c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058b6:	f000 fbd3 	bl	8006060 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80058c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	609a      	str	r2, [r3, #8]
      break;
 80058d2:	e04f      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058e4:	f000 fbbc 	bl	8006060 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058f6:	609a      	str	r2, [r3, #8]
      break;
 80058f8:	e03c      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005906:	461a      	mov	r2, r3
 8005908:	f000 fb30 	bl	8005f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2150      	movs	r1, #80	@ 0x50
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fb89 	bl	800602a <TIM_ITRx_SetConfig>
      break;
 8005918:	e02c      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005926:	461a      	mov	r2, r3
 8005928:	f000 fb4f 	bl	8005fca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2160      	movs	r1, #96	@ 0x60
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fb79 	bl	800602a <TIM_ITRx_SetConfig>
      break;
 8005938:	e01c      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005946:	461a      	mov	r2, r3
 8005948:	f000 fb10 	bl	8005f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2140      	movs	r1, #64	@ 0x40
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fb69 	bl	800602a <TIM_ITRx_SetConfig>
      break;
 8005958:	e00c      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4619      	mov	r1, r3
 8005964:	4610      	mov	r0, r2
 8005966:	f000 fb60 	bl	800602a <TIM_ITRx_SetConfig>
      break;
 800596a:	e003      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	73fb      	strb	r3, [r7, #15]
      break;
 8005970:	e000      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005972:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005984:	7bfb      	ldrb	r3, [r7, #15]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a30      	ldr	r2, [pc, #192]	@ (8005a64 <TIM_Base_SetConfig+0xd4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d003      	beq.n	80059b0 <TIM_Base_SetConfig+0x20>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ae:	d108      	bne.n	80059c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a27      	ldr	r2, [pc, #156]	@ (8005a64 <TIM_Base_SetConfig+0xd4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00b      	beq.n	80059e2 <TIM_Base_SetConfig+0x52>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059d0:	d007      	beq.n	80059e2 <TIM_Base_SetConfig+0x52>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a24      	ldr	r2, [pc, #144]	@ (8005a68 <TIM_Base_SetConfig+0xd8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_Base_SetConfig+0x52>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a23      	ldr	r2, [pc, #140]	@ (8005a6c <TIM_Base_SetConfig+0xdc>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d108      	bne.n	80059f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a12      	ldr	r2, [pc, #72]	@ (8005a64 <TIM_Base_SetConfig+0xd4>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_Base_SetConfig+0xa0>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a11      	ldr	r2, [pc, #68]	@ (8005a68 <TIM_Base_SetConfig+0xd8>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_Base_SetConfig+0xa0>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a10      	ldr	r2, [pc, #64]	@ (8005a6c <TIM_Base_SetConfig+0xdc>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d103      	bne.n	8005a38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d105      	bne.n	8005a56 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f023 0201 	bic.w	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	611a      	str	r2, [r3, #16]
  }
}
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40014000 	.word	0x40014000
 8005a6c:	40014400 	.word	0x40014400

08005a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	f023 0201 	bic.w	r2, r3, #1
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f023 0302 	bic.w	r3, r3, #2
 8005abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a24      	ldr	r2, [pc, #144]	@ (8005b5c <TIM_OC1_SetConfig+0xec>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d007      	beq.n	8005ae0 <TIM_OC1_SetConfig+0x70>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a23      	ldr	r2, [pc, #140]	@ (8005b60 <TIM_OC1_SetConfig+0xf0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_OC1_SetConfig+0x70>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a22      	ldr	r2, [pc, #136]	@ (8005b64 <TIM_OC1_SetConfig+0xf4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d10c      	bne.n	8005afa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f023 0308 	bic.w	r3, r3, #8
 8005ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f023 0304 	bic.w	r3, r3, #4
 8005af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a17      	ldr	r2, [pc, #92]	@ (8005b5c <TIM_OC1_SetConfig+0xec>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d007      	beq.n	8005b12 <TIM_OC1_SetConfig+0xa2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a16      	ldr	r2, [pc, #88]	@ (8005b60 <TIM_OC1_SetConfig+0xf0>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d003      	beq.n	8005b12 <TIM_OC1_SetConfig+0xa2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a15      	ldr	r2, [pc, #84]	@ (8005b64 <TIM_OC1_SetConfig+0xf4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d111      	bne.n	8005b36 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	621a      	str	r2, [r3, #32]
}
 8005b50:	bf00      	nop
 8005b52:	371c      	adds	r7, #28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	40012c00 	.word	0x40012c00
 8005b60:	40014000 	.word	0x40014000
 8005b64:	40014400 	.word	0x40014400

08005b68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	f023 0210 	bic.w	r2, r3, #16
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	021b      	lsls	r3, r3, #8
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f023 0320 	bic.w	r3, r3, #32
 8005bb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a22      	ldr	r2, [pc, #136]	@ (8005c50 <TIM_OC2_SetConfig+0xe8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d10d      	bne.n	8005be8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005be6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a19      	ldr	r2, [pc, #100]	@ (8005c50 <TIM_OC2_SetConfig+0xe8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d007      	beq.n	8005c00 <TIM_OC2_SetConfig+0x98>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a18      	ldr	r2, [pc, #96]	@ (8005c54 <TIM_OC2_SetConfig+0xec>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_OC2_SetConfig+0x98>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a17      	ldr	r2, [pc, #92]	@ (8005c58 <TIM_OC2_SetConfig+0xf0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d113      	bne.n	8005c28 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	621a      	str	r2, [r3, #32]
}
 8005c42:	bf00      	nop
 8005c44:	371c      	adds	r7, #28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40014400 	.word	0x40014400

08005c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	021b      	lsls	r3, r3, #8
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a21      	ldr	r2, [pc, #132]	@ (8005d40 <TIM_OC3_SetConfig+0xe4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d10d      	bne.n	8005cda <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a18      	ldr	r2, [pc, #96]	@ (8005d40 <TIM_OC3_SetConfig+0xe4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d007      	beq.n	8005cf2 <TIM_OC3_SetConfig+0x96>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a17      	ldr	r2, [pc, #92]	@ (8005d44 <TIM_OC3_SetConfig+0xe8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <TIM_OC3_SetConfig+0x96>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a16      	ldr	r2, [pc, #88]	@ (8005d48 <TIM_OC3_SetConfig+0xec>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d113      	bne.n	8005d1a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	621a      	str	r2, [r3, #32]
}
 8005d34:	bf00      	nop
 8005d36:	371c      	adds	r7, #28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	40012c00 	.word	0x40012c00
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40014400 	.word	0x40014400

08005d4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	031b      	lsls	r3, r3, #12
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a14      	ldr	r2, [pc, #80]	@ (8005dfc <TIM_OC4_SetConfig+0xb0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d007      	beq.n	8005dc0 <TIM_OC4_SetConfig+0x74>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a13      	ldr	r2, [pc, #76]	@ (8005e00 <TIM_OC4_SetConfig+0xb4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_OC4_SetConfig+0x74>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a12      	ldr	r2, [pc, #72]	@ (8005e04 <TIM_OC4_SetConfig+0xb8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d109      	bne.n	8005dd4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	019b      	lsls	r3, r3, #6
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	621a      	str	r2, [r3, #32]
}
 8005dee:	bf00      	nop
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40012c00 	.word	0x40012c00
 8005e00:	40014000 	.word	0x40014000
 8005e04:	40014400 	.word	0x40014400

08005e08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005e4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	041b      	lsls	r3, r3, #16
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a13      	ldr	r2, [pc, #76]	@ (8005eac <TIM_OC5_SetConfig+0xa4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d007      	beq.n	8005e72 <TIM_OC5_SetConfig+0x6a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a12      	ldr	r2, [pc, #72]	@ (8005eb0 <TIM_OC5_SetConfig+0xa8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d003      	beq.n	8005e72 <TIM_OC5_SetConfig+0x6a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a11      	ldr	r2, [pc, #68]	@ (8005eb4 <TIM_OC5_SetConfig+0xac>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d109      	bne.n	8005e86 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	621a      	str	r2, [r3, #32]
}
 8005ea0:	bf00      	nop
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	40012c00 	.word	0x40012c00
 8005eb0:	40014000 	.word	0x40014000
 8005eb4:	40014400 	.word	0x40014400

08005eb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	051b      	lsls	r3, r3, #20
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a14      	ldr	r2, [pc, #80]	@ (8005f60 <TIM_OC6_SetConfig+0xa8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d007      	beq.n	8005f24 <TIM_OC6_SetConfig+0x6c>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a13      	ldr	r2, [pc, #76]	@ (8005f64 <TIM_OC6_SetConfig+0xac>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d003      	beq.n	8005f24 <TIM_OC6_SetConfig+0x6c>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a12      	ldr	r2, [pc, #72]	@ (8005f68 <TIM_OC6_SetConfig+0xb0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d109      	bne.n	8005f38 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	029b      	lsls	r3, r3, #10
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	40012c00 	.word	0x40012c00
 8005f64:	40014000 	.word	0x40014000
 8005f68:	40014400 	.word	0x40014400

08005f6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f023 0201 	bic.w	r2, r3, #1
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f023 030a 	bic.w	r3, r3, #10
 8005fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	621a      	str	r2, [r3, #32]
}
 8005fbe:	bf00      	nop
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b087      	sub	sp, #28
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	f023 0210 	bic.w	r2, r3, #16
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	031b      	lsls	r3, r3, #12
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006006:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	621a      	str	r2, [r3, #32]
}
 800601e:	bf00      	nop
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800602a:	b480      	push	{r7}
 800602c:	b085      	sub	sp, #20
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	f043 0307 	orr.w	r3, r3, #7
 800604c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	609a      	str	r2, [r3, #8]
}
 8006054:	bf00      	nop
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800607a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	021a      	lsls	r2, r3, #8
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	431a      	orrs	r2, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4313      	orrs	r3, r2
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	4313      	orrs	r3, r2
 800608c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	609a      	str	r2, [r3, #8]
}
 8006094:	bf00      	nop
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	2201      	movs	r2, #1
 80060b4:	fa02 f303 	lsl.w	r3, r2, r3
 80060b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a1a      	ldr	r2, [r3, #32]
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	43db      	mvns	r3, r3
 80060c2:	401a      	ands	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a1a      	ldr	r2, [r3, #32]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f003 031f 	and.w	r3, r3, #31
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	fa01 f303 	lsl.w	r3, r1, r3
 80060d8:	431a      	orrs	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	621a      	str	r2, [r3, #32]
}
 80060de:	bf00      	nop
 80060e0:	371c      	adds	r7, #28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006100:	2302      	movs	r3, #2
 8006102:	e04f      	b.n	80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a21      	ldr	r2, [pc, #132]	@ (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d108      	bne.n	8006140 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006134:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006146:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a14      	ldr	r2, [pc, #80]	@ (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d009      	beq.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800616c:	d004      	beq.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a10      	ldr	r2, [pc, #64]	@ (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d10c      	bne.n	8006192 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800617e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	4313      	orrs	r3, r2
 8006188:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	40012c00 	.word	0x40012c00
 80061b4:	40014000 	.word	0x40014000

080061b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e060      	b.n	8006296 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	041b      	lsls	r3, r3, #16
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a14      	ldr	r2, [pc, #80]	@ (80062a4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d115      	bne.n	8006284 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006262:	051b      	lsls	r3, r3, #20
 8006264:	4313      	orrs	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	4313      	orrs	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40012c00 	.word	0x40012c00

080062a8 <std>:
 80062a8:	2300      	movs	r3, #0
 80062aa:	b510      	push	{r4, lr}
 80062ac:	4604      	mov	r4, r0
 80062ae:	e9c0 3300 	strd	r3, r3, [r0]
 80062b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062b6:	6083      	str	r3, [r0, #8]
 80062b8:	8181      	strh	r1, [r0, #12]
 80062ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80062bc:	81c2      	strh	r2, [r0, #14]
 80062be:	6183      	str	r3, [r0, #24]
 80062c0:	4619      	mov	r1, r3
 80062c2:	2208      	movs	r2, #8
 80062c4:	305c      	adds	r0, #92	@ 0x5c
 80062c6:	f000 fa01 	bl	80066cc <memset>
 80062ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006300 <std+0x58>)
 80062cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80062ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006304 <std+0x5c>)
 80062d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006308 <std+0x60>)
 80062d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062d6:	4b0d      	ldr	r3, [pc, #52]	@ (800630c <std+0x64>)
 80062d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80062da:	4b0d      	ldr	r3, [pc, #52]	@ (8006310 <std+0x68>)
 80062dc:	6224      	str	r4, [r4, #32]
 80062de:	429c      	cmp	r4, r3
 80062e0:	d006      	beq.n	80062f0 <std+0x48>
 80062e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80062e6:	4294      	cmp	r4, r2
 80062e8:	d002      	beq.n	80062f0 <std+0x48>
 80062ea:	33d0      	adds	r3, #208	@ 0xd0
 80062ec:	429c      	cmp	r4, r3
 80062ee:	d105      	bne.n	80062fc <std+0x54>
 80062f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80062f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f8:	f000 ba80 	b.w	80067fc <__retarget_lock_init_recursive>
 80062fc:	bd10      	pop	{r4, pc}
 80062fe:	bf00      	nop
 8006300:	0800651d 	.word	0x0800651d
 8006304:	0800653f 	.word	0x0800653f
 8006308:	08006577 	.word	0x08006577
 800630c:	0800659b 	.word	0x0800659b
 8006310:	200005d0 	.word	0x200005d0

08006314 <stdio_exit_handler>:
 8006314:	4a02      	ldr	r2, [pc, #8]	@ (8006320 <stdio_exit_handler+0xc>)
 8006316:	4903      	ldr	r1, [pc, #12]	@ (8006324 <stdio_exit_handler+0x10>)
 8006318:	4803      	ldr	r0, [pc, #12]	@ (8006328 <stdio_exit_handler+0x14>)
 800631a:	f000 b869 	b.w	80063f0 <_fwalk_sglue>
 800631e:	bf00      	nop
 8006320:	2000000c 	.word	0x2000000c
 8006324:	080070b9 	.word	0x080070b9
 8006328:	2000001c 	.word	0x2000001c

0800632c <cleanup_stdio>:
 800632c:	6841      	ldr	r1, [r0, #4]
 800632e:	4b0c      	ldr	r3, [pc, #48]	@ (8006360 <cleanup_stdio+0x34>)
 8006330:	4299      	cmp	r1, r3
 8006332:	b510      	push	{r4, lr}
 8006334:	4604      	mov	r4, r0
 8006336:	d001      	beq.n	800633c <cleanup_stdio+0x10>
 8006338:	f000 febe 	bl	80070b8 <_fflush_r>
 800633c:	68a1      	ldr	r1, [r4, #8]
 800633e:	4b09      	ldr	r3, [pc, #36]	@ (8006364 <cleanup_stdio+0x38>)
 8006340:	4299      	cmp	r1, r3
 8006342:	d002      	beq.n	800634a <cleanup_stdio+0x1e>
 8006344:	4620      	mov	r0, r4
 8006346:	f000 feb7 	bl	80070b8 <_fflush_r>
 800634a:	68e1      	ldr	r1, [r4, #12]
 800634c:	4b06      	ldr	r3, [pc, #24]	@ (8006368 <cleanup_stdio+0x3c>)
 800634e:	4299      	cmp	r1, r3
 8006350:	d004      	beq.n	800635c <cleanup_stdio+0x30>
 8006352:	4620      	mov	r0, r4
 8006354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006358:	f000 beae 	b.w	80070b8 <_fflush_r>
 800635c:	bd10      	pop	{r4, pc}
 800635e:	bf00      	nop
 8006360:	200005d0 	.word	0x200005d0
 8006364:	20000638 	.word	0x20000638
 8006368:	200006a0 	.word	0x200006a0

0800636c <global_stdio_init.part.0>:
 800636c:	b510      	push	{r4, lr}
 800636e:	4b0b      	ldr	r3, [pc, #44]	@ (800639c <global_stdio_init.part.0+0x30>)
 8006370:	4c0b      	ldr	r4, [pc, #44]	@ (80063a0 <global_stdio_init.part.0+0x34>)
 8006372:	4a0c      	ldr	r2, [pc, #48]	@ (80063a4 <global_stdio_init.part.0+0x38>)
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	4620      	mov	r0, r4
 8006378:	2200      	movs	r2, #0
 800637a:	2104      	movs	r1, #4
 800637c:	f7ff ff94 	bl	80062a8 <std>
 8006380:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006384:	2201      	movs	r2, #1
 8006386:	2109      	movs	r1, #9
 8006388:	f7ff ff8e 	bl	80062a8 <std>
 800638c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006390:	2202      	movs	r2, #2
 8006392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006396:	2112      	movs	r1, #18
 8006398:	f7ff bf86 	b.w	80062a8 <std>
 800639c:	20000708 	.word	0x20000708
 80063a0:	200005d0 	.word	0x200005d0
 80063a4:	08006315 	.word	0x08006315

080063a8 <__sfp_lock_acquire>:
 80063a8:	4801      	ldr	r0, [pc, #4]	@ (80063b0 <__sfp_lock_acquire+0x8>)
 80063aa:	f000 ba28 	b.w	80067fe <__retarget_lock_acquire_recursive>
 80063ae:	bf00      	nop
 80063b0:	20000711 	.word	0x20000711

080063b4 <__sfp_lock_release>:
 80063b4:	4801      	ldr	r0, [pc, #4]	@ (80063bc <__sfp_lock_release+0x8>)
 80063b6:	f000 ba23 	b.w	8006800 <__retarget_lock_release_recursive>
 80063ba:	bf00      	nop
 80063bc:	20000711 	.word	0x20000711

080063c0 <__sinit>:
 80063c0:	b510      	push	{r4, lr}
 80063c2:	4604      	mov	r4, r0
 80063c4:	f7ff fff0 	bl	80063a8 <__sfp_lock_acquire>
 80063c8:	6a23      	ldr	r3, [r4, #32]
 80063ca:	b11b      	cbz	r3, 80063d4 <__sinit+0x14>
 80063cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d0:	f7ff bff0 	b.w	80063b4 <__sfp_lock_release>
 80063d4:	4b04      	ldr	r3, [pc, #16]	@ (80063e8 <__sinit+0x28>)
 80063d6:	6223      	str	r3, [r4, #32]
 80063d8:	4b04      	ldr	r3, [pc, #16]	@ (80063ec <__sinit+0x2c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1f5      	bne.n	80063cc <__sinit+0xc>
 80063e0:	f7ff ffc4 	bl	800636c <global_stdio_init.part.0>
 80063e4:	e7f2      	b.n	80063cc <__sinit+0xc>
 80063e6:	bf00      	nop
 80063e8:	0800632d 	.word	0x0800632d
 80063ec:	20000708 	.word	0x20000708

080063f0 <_fwalk_sglue>:
 80063f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063f4:	4607      	mov	r7, r0
 80063f6:	4688      	mov	r8, r1
 80063f8:	4614      	mov	r4, r2
 80063fa:	2600      	movs	r6, #0
 80063fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006400:	f1b9 0901 	subs.w	r9, r9, #1
 8006404:	d505      	bpl.n	8006412 <_fwalk_sglue+0x22>
 8006406:	6824      	ldr	r4, [r4, #0]
 8006408:	2c00      	cmp	r4, #0
 800640a:	d1f7      	bne.n	80063fc <_fwalk_sglue+0xc>
 800640c:	4630      	mov	r0, r6
 800640e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006412:	89ab      	ldrh	r3, [r5, #12]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d907      	bls.n	8006428 <_fwalk_sglue+0x38>
 8006418:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800641c:	3301      	adds	r3, #1
 800641e:	d003      	beq.n	8006428 <_fwalk_sglue+0x38>
 8006420:	4629      	mov	r1, r5
 8006422:	4638      	mov	r0, r7
 8006424:	47c0      	blx	r8
 8006426:	4306      	orrs	r6, r0
 8006428:	3568      	adds	r5, #104	@ 0x68
 800642a:	e7e9      	b.n	8006400 <_fwalk_sglue+0x10>

0800642c <iprintf>:
 800642c:	b40f      	push	{r0, r1, r2, r3}
 800642e:	b507      	push	{r0, r1, r2, lr}
 8006430:	4906      	ldr	r1, [pc, #24]	@ (800644c <iprintf+0x20>)
 8006432:	ab04      	add	r3, sp, #16
 8006434:	6808      	ldr	r0, [r1, #0]
 8006436:	f853 2b04 	ldr.w	r2, [r3], #4
 800643a:	6881      	ldr	r1, [r0, #8]
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	f000 fb11 	bl	8006a64 <_vfiprintf_r>
 8006442:	b003      	add	sp, #12
 8006444:	f85d eb04 	ldr.w	lr, [sp], #4
 8006448:	b004      	add	sp, #16
 800644a:	4770      	bx	lr
 800644c:	20000018 	.word	0x20000018

08006450 <putchar>:
 8006450:	4b02      	ldr	r3, [pc, #8]	@ (800645c <putchar+0xc>)
 8006452:	4601      	mov	r1, r0
 8006454:	6818      	ldr	r0, [r3, #0]
 8006456:	6882      	ldr	r2, [r0, #8]
 8006458:	f000 beb8 	b.w	80071cc <_putc_r>
 800645c:	20000018 	.word	0x20000018

08006460 <_puts_r>:
 8006460:	6a03      	ldr	r3, [r0, #32]
 8006462:	b570      	push	{r4, r5, r6, lr}
 8006464:	6884      	ldr	r4, [r0, #8]
 8006466:	4605      	mov	r5, r0
 8006468:	460e      	mov	r6, r1
 800646a:	b90b      	cbnz	r3, 8006470 <_puts_r+0x10>
 800646c:	f7ff ffa8 	bl	80063c0 <__sinit>
 8006470:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006472:	07db      	lsls	r3, r3, #31
 8006474:	d405      	bmi.n	8006482 <_puts_r+0x22>
 8006476:	89a3      	ldrh	r3, [r4, #12]
 8006478:	0598      	lsls	r0, r3, #22
 800647a:	d402      	bmi.n	8006482 <_puts_r+0x22>
 800647c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800647e:	f000 f9be 	bl	80067fe <__retarget_lock_acquire_recursive>
 8006482:	89a3      	ldrh	r3, [r4, #12]
 8006484:	0719      	lsls	r1, r3, #28
 8006486:	d502      	bpl.n	800648e <_puts_r+0x2e>
 8006488:	6923      	ldr	r3, [r4, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d135      	bne.n	80064fa <_puts_r+0x9a>
 800648e:	4621      	mov	r1, r4
 8006490:	4628      	mov	r0, r5
 8006492:	f000 f8c5 	bl	8006620 <__swsetup_r>
 8006496:	b380      	cbz	r0, 80064fa <_puts_r+0x9a>
 8006498:	f04f 35ff 	mov.w	r5, #4294967295
 800649c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800649e:	07da      	lsls	r2, r3, #31
 80064a0:	d405      	bmi.n	80064ae <_puts_r+0x4e>
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	059b      	lsls	r3, r3, #22
 80064a6:	d402      	bmi.n	80064ae <_puts_r+0x4e>
 80064a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064aa:	f000 f9a9 	bl	8006800 <__retarget_lock_release_recursive>
 80064ae:	4628      	mov	r0, r5
 80064b0:	bd70      	pop	{r4, r5, r6, pc}
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	da04      	bge.n	80064c0 <_puts_r+0x60>
 80064b6:	69a2      	ldr	r2, [r4, #24]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	dc17      	bgt.n	80064ec <_puts_r+0x8c>
 80064bc:	290a      	cmp	r1, #10
 80064be:	d015      	beq.n	80064ec <_puts_r+0x8c>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	6022      	str	r2, [r4, #0]
 80064c6:	7019      	strb	r1, [r3, #0]
 80064c8:	68a3      	ldr	r3, [r4, #8]
 80064ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80064ce:	3b01      	subs	r3, #1
 80064d0:	60a3      	str	r3, [r4, #8]
 80064d2:	2900      	cmp	r1, #0
 80064d4:	d1ed      	bne.n	80064b2 <_puts_r+0x52>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	da11      	bge.n	80064fe <_puts_r+0x9e>
 80064da:	4622      	mov	r2, r4
 80064dc:	210a      	movs	r1, #10
 80064de:	4628      	mov	r0, r5
 80064e0:	f000 f85f 	bl	80065a2 <__swbuf_r>
 80064e4:	3001      	adds	r0, #1
 80064e6:	d0d7      	beq.n	8006498 <_puts_r+0x38>
 80064e8:	250a      	movs	r5, #10
 80064ea:	e7d7      	b.n	800649c <_puts_r+0x3c>
 80064ec:	4622      	mov	r2, r4
 80064ee:	4628      	mov	r0, r5
 80064f0:	f000 f857 	bl	80065a2 <__swbuf_r>
 80064f4:	3001      	adds	r0, #1
 80064f6:	d1e7      	bne.n	80064c8 <_puts_r+0x68>
 80064f8:	e7ce      	b.n	8006498 <_puts_r+0x38>
 80064fa:	3e01      	subs	r6, #1
 80064fc:	e7e4      	b.n	80064c8 <_puts_r+0x68>
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	6022      	str	r2, [r4, #0]
 8006504:	220a      	movs	r2, #10
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	e7ee      	b.n	80064e8 <_puts_r+0x88>
	...

0800650c <puts>:
 800650c:	4b02      	ldr	r3, [pc, #8]	@ (8006518 <puts+0xc>)
 800650e:	4601      	mov	r1, r0
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	f7ff bfa5 	b.w	8006460 <_puts_r>
 8006516:	bf00      	nop
 8006518:	20000018 	.word	0x20000018

0800651c <__sread>:
 800651c:	b510      	push	{r4, lr}
 800651e:	460c      	mov	r4, r1
 8006520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006524:	f000 f91c 	bl	8006760 <_read_r>
 8006528:	2800      	cmp	r0, #0
 800652a:	bfab      	itete	ge
 800652c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800652e:	89a3      	ldrhlt	r3, [r4, #12]
 8006530:	181b      	addge	r3, r3, r0
 8006532:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006536:	bfac      	ite	ge
 8006538:	6563      	strge	r3, [r4, #84]	@ 0x54
 800653a:	81a3      	strhlt	r3, [r4, #12]
 800653c:	bd10      	pop	{r4, pc}

0800653e <__swrite>:
 800653e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006542:	461f      	mov	r7, r3
 8006544:	898b      	ldrh	r3, [r1, #12]
 8006546:	05db      	lsls	r3, r3, #23
 8006548:	4605      	mov	r5, r0
 800654a:	460c      	mov	r4, r1
 800654c:	4616      	mov	r6, r2
 800654e:	d505      	bpl.n	800655c <__swrite+0x1e>
 8006550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006554:	2302      	movs	r3, #2
 8006556:	2200      	movs	r2, #0
 8006558:	f000 f8f0 	bl	800673c <_lseek_r>
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006562:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006566:	81a3      	strh	r3, [r4, #12]
 8006568:	4632      	mov	r2, r6
 800656a:	463b      	mov	r3, r7
 800656c:	4628      	mov	r0, r5
 800656e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006572:	f000 b907 	b.w	8006784 <_write_r>

08006576 <__sseek>:
 8006576:	b510      	push	{r4, lr}
 8006578:	460c      	mov	r4, r1
 800657a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800657e:	f000 f8dd 	bl	800673c <_lseek_r>
 8006582:	1c43      	adds	r3, r0, #1
 8006584:	89a3      	ldrh	r3, [r4, #12]
 8006586:	bf15      	itete	ne
 8006588:	6560      	strne	r0, [r4, #84]	@ 0x54
 800658a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800658e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006592:	81a3      	strheq	r3, [r4, #12]
 8006594:	bf18      	it	ne
 8006596:	81a3      	strhne	r3, [r4, #12]
 8006598:	bd10      	pop	{r4, pc}

0800659a <__sclose>:
 800659a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800659e:	f000 b8bd 	b.w	800671c <_close_r>

080065a2 <__swbuf_r>:
 80065a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a4:	460e      	mov	r6, r1
 80065a6:	4614      	mov	r4, r2
 80065a8:	4605      	mov	r5, r0
 80065aa:	b118      	cbz	r0, 80065b4 <__swbuf_r+0x12>
 80065ac:	6a03      	ldr	r3, [r0, #32]
 80065ae:	b90b      	cbnz	r3, 80065b4 <__swbuf_r+0x12>
 80065b0:	f7ff ff06 	bl	80063c0 <__sinit>
 80065b4:	69a3      	ldr	r3, [r4, #24]
 80065b6:	60a3      	str	r3, [r4, #8]
 80065b8:	89a3      	ldrh	r3, [r4, #12]
 80065ba:	071a      	lsls	r2, r3, #28
 80065bc:	d501      	bpl.n	80065c2 <__swbuf_r+0x20>
 80065be:	6923      	ldr	r3, [r4, #16]
 80065c0:	b943      	cbnz	r3, 80065d4 <__swbuf_r+0x32>
 80065c2:	4621      	mov	r1, r4
 80065c4:	4628      	mov	r0, r5
 80065c6:	f000 f82b 	bl	8006620 <__swsetup_r>
 80065ca:	b118      	cbz	r0, 80065d4 <__swbuf_r+0x32>
 80065cc:	f04f 37ff 	mov.w	r7, #4294967295
 80065d0:	4638      	mov	r0, r7
 80065d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	6922      	ldr	r2, [r4, #16]
 80065d8:	1a98      	subs	r0, r3, r2
 80065da:	6963      	ldr	r3, [r4, #20]
 80065dc:	b2f6      	uxtb	r6, r6
 80065de:	4283      	cmp	r3, r0
 80065e0:	4637      	mov	r7, r6
 80065e2:	dc05      	bgt.n	80065f0 <__swbuf_r+0x4e>
 80065e4:	4621      	mov	r1, r4
 80065e6:	4628      	mov	r0, r5
 80065e8:	f000 fd66 	bl	80070b8 <_fflush_r>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d1ed      	bne.n	80065cc <__swbuf_r+0x2a>
 80065f0:	68a3      	ldr	r3, [r4, #8]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	60a3      	str	r3, [r4, #8]
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	6022      	str	r2, [r4, #0]
 80065fc:	701e      	strb	r6, [r3, #0]
 80065fe:	6962      	ldr	r2, [r4, #20]
 8006600:	1c43      	adds	r3, r0, #1
 8006602:	429a      	cmp	r2, r3
 8006604:	d004      	beq.n	8006610 <__swbuf_r+0x6e>
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	07db      	lsls	r3, r3, #31
 800660a:	d5e1      	bpl.n	80065d0 <__swbuf_r+0x2e>
 800660c:	2e0a      	cmp	r6, #10
 800660e:	d1df      	bne.n	80065d0 <__swbuf_r+0x2e>
 8006610:	4621      	mov	r1, r4
 8006612:	4628      	mov	r0, r5
 8006614:	f000 fd50 	bl	80070b8 <_fflush_r>
 8006618:	2800      	cmp	r0, #0
 800661a:	d0d9      	beq.n	80065d0 <__swbuf_r+0x2e>
 800661c:	e7d6      	b.n	80065cc <__swbuf_r+0x2a>
	...

08006620 <__swsetup_r>:
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	4b29      	ldr	r3, [pc, #164]	@ (80066c8 <__swsetup_r+0xa8>)
 8006624:	4605      	mov	r5, r0
 8006626:	6818      	ldr	r0, [r3, #0]
 8006628:	460c      	mov	r4, r1
 800662a:	b118      	cbz	r0, 8006634 <__swsetup_r+0x14>
 800662c:	6a03      	ldr	r3, [r0, #32]
 800662e:	b90b      	cbnz	r3, 8006634 <__swsetup_r+0x14>
 8006630:	f7ff fec6 	bl	80063c0 <__sinit>
 8006634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006638:	0719      	lsls	r1, r3, #28
 800663a:	d422      	bmi.n	8006682 <__swsetup_r+0x62>
 800663c:	06da      	lsls	r2, r3, #27
 800663e:	d407      	bmi.n	8006650 <__swsetup_r+0x30>
 8006640:	2209      	movs	r2, #9
 8006642:	602a      	str	r2, [r5, #0]
 8006644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006648:	81a3      	strh	r3, [r4, #12]
 800664a:	f04f 30ff 	mov.w	r0, #4294967295
 800664e:	e033      	b.n	80066b8 <__swsetup_r+0x98>
 8006650:	0758      	lsls	r0, r3, #29
 8006652:	d512      	bpl.n	800667a <__swsetup_r+0x5a>
 8006654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006656:	b141      	cbz	r1, 800666a <__swsetup_r+0x4a>
 8006658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800665c:	4299      	cmp	r1, r3
 800665e:	d002      	beq.n	8006666 <__swsetup_r+0x46>
 8006660:	4628      	mov	r0, r5
 8006662:	f000 f8dd 	bl	8006820 <_free_r>
 8006666:	2300      	movs	r3, #0
 8006668:	6363      	str	r3, [r4, #52]	@ 0x34
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006670:	81a3      	strh	r3, [r4, #12]
 8006672:	2300      	movs	r3, #0
 8006674:	6063      	str	r3, [r4, #4]
 8006676:	6923      	ldr	r3, [r4, #16]
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f043 0308 	orr.w	r3, r3, #8
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	6923      	ldr	r3, [r4, #16]
 8006684:	b94b      	cbnz	r3, 800669a <__swsetup_r+0x7a>
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800668c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006690:	d003      	beq.n	800669a <__swsetup_r+0x7a>
 8006692:	4621      	mov	r1, r4
 8006694:	4628      	mov	r0, r5
 8006696:	f000 fd5d 	bl	8007154 <__smakebuf_r>
 800669a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800669e:	f013 0201 	ands.w	r2, r3, #1
 80066a2:	d00a      	beq.n	80066ba <__swsetup_r+0x9a>
 80066a4:	2200      	movs	r2, #0
 80066a6:	60a2      	str	r2, [r4, #8]
 80066a8:	6962      	ldr	r2, [r4, #20]
 80066aa:	4252      	negs	r2, r2
 80066ac:	61a2      	str	r2, [r4, #24]
 80066ae:	6922      	ldr	r2, [r4, #16]
 80066b0:	b942      	cbnz	r2, 80066c4 <__swsetup_r+0xa4>
 80066b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80066b6:	d1c5      	bne.n	8006644 <__swsetup_r+0x24>
 80066b8:	bd38      	pop	{r3, r4, r5, pc}
 80066ba:	0799      	lsls	r1, r3, #30
 80066bc:	bf58      	it	pl
 80066be:	6962      	ldrpl	r2, [r4, #20]
 80066c0:	60a2      	str	r2, [r4, #8]
 80066c2:	e7f4      	b.n	80066ae <__swsetup_r+0x8e>
 80066c4:	2000      	movs	r0, #0
 80066c6:	e7f7      	b.n	80066b8 <__swsetup_r+0x98>
 80066c8:	20000018 	.word	0x20000018

080066cc <memset>:
 80066cc:	4402      	add	r2, r0
 80066ce:	4603      	mov	r3, r0
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d100      	bne.n	80066d6 <memset+0xa>
 80066d4:	4770      	bx	lr
 80066d6:	f803 1b01 	strb.w	r1, [r3], #1
 80066da:	e7f9      	b.n	80066d0 <memset+0x4>

080066dc <strncpy>:
 80066dc:	b510      	push	{r4, lr}
 80066de:	3901      	subs	r1, #1
 80066e0:	4603      	mov	r3, r0
 80066e2:	b132      	cbz	r2, 80066f2 <strncpy+0x16>
 80066e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80066e8:	f803 4b01 	strb.w	r4, [r3], #1
 80066ec:	3a01      	subs	r2, #1
 80066ee:	2c00      	cmp	r4, #0
 80066f0:	d1f7      	bne.n	80066e2 <strncpy+0x6>
 80066f2:	441a      	add	r2, r3
 80066f4:	2100      	movs	r1, #0
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d100      	bne.n	80066fc <strncpy+0x20>
 80066fa:	bd10      	pop	{r4, pc}
 80066fc:	f803 1b01 	strb.w	r1, [r3], #1
 8006700:	e7f9      	b.n	80066f6 <strncpy+0x1a>

08006702 <strnlen>:
 8006702:	b510      	push	{r4, lr}
 8006704:	4602      	mov	r2, r0
 8006706:	4401      	add	r1, r0
 8006708:	428a      	cmp	r2, r1
 800670a:	4613      	mov	r3, r2
 800670c:	d003      	beq.n	8006716 <strnlen+0x14>
 800670e:	781c      	ldrb	r4, [r3, #0]
 8006710:	3201      	adds	r2, #1
 8006712:	2c00      	cmp	r4, #0
 8006714:	d1f8      	bne.n	8006708 <strnlen+0x6>
 8006716:	1a18      	subs	r0, r3, r0
 8006718:	bd10      	pop	{r4, pc}
	...

0800671c <_close_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4d06      	ldr	r5, [pc, #24]	@ (8006738 <_close_r+0x1c>)
 8006720:	2300      	movs	r3, #0
 8006722:	4604      	mov	r4, r0
 8006724:	4608      	mov	r0, r1
 8006726:	602b      	str	r3, [r5, #0]
 8006728:	f7fc f987 	bl	8002a3a <_close>
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d102      	bne.n	8006736 <_close_r+0x1a>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	b103      	cbz	r3, 8006736 <_close_r+0x1a>
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	bd38      	pop	{r3, r4, r5, pc}
 8006738:	2000070c 	.word	0x2000070c

0800673c <_lseek_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	4d07      	ldr	r5, [pc, #28]	@ (800675c <_lseek_r+0x20>)
 8006740:	4604      	mov	r4, r0
 8006742:	4608      	mov	r0, r1
 8006744:	4611      	mov	r1, r2
 8006746:	2200      	movs	r2, #0
 8006748:	602a      	str	r2, [r5, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	f7fc f99c 	bl	8002a88 <_lseek>
 8006750:	1c43      	adds	r3, r0, #1
 8006752:	d102      	bne.n	800675a <_lseek_r+0x1e>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	b103      	cbz	r3, 800675a <_lseek_r+0x1e>
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	bd38      	pop	{r3, r4, r5, pc}
 800675c:	2000070c 	.word	0x2000070c

08006760 <_read_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4d07      	ldr	r5, [pc, #28]	@ (8006780 <_read_r+0x20>)
 8006764:	4604      	mov	r4, r0
 8006766:	4608      	mov	r0, r1
 8006768:	4611      	mov	r1, r2
 800676a:	2200      	movs	r2, #0
 800676c:	602a      	str	r2, [r5, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	f7fc f92a 	bl	80029c8 <_read>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d102      	bne.n	800677e <_read_r+0x1e>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	b103      	cbz	r3, 800677e <_read_r+0x1e>
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	bd38      	pop	{r3, r4, r5, pc}
 8006780:	2000070c 	.word	0x2000070c

08006784 <_write_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	4d07      	ldr	r5, [pc, #28]	@ (80067a4 <_write_r+0x20>)
 8006788:	4604      	mov	r4, r0
 800678a:	4608      	mov	r0, r1
 800678c:	4611      	mov	r1, r2
 800678e:	2200      	movs	r2, #0
 8006790:	602a      	str	r2, [r5, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	f7fc f935 	bl	8002a02 <_write>
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	d102      	bne.n	80067a2 <_write_r+0x1e>
 800679c:	682b      	ldr	r3, [r5, #0]
 800679e:	b103      	cbz	r3, 80067a2 <_write_r+0x1e>
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	2000070c 	.word	0x2000070c

080067a8 <__errno>:
 80067a8:	4b01      	ldr	r3, [pc, #4]	@ (80067b0 <__errno+0x8>)
 80067aa:	6818      	ldr	r0, [r3, #0]
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20000018 	.word	0x20000018

080067b4 <__libc_init_array>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	4d0d      	ldr	r5, [pc, #52]	@ (80067ec <__libc_init_array+0x38>)
 80067b8:	4c0d      	ldr	r4, [pc, #52]	@ (80067f0 <__libc_init_array+0x3c>)
 80067ba:	1b64      	subs	r4, r4, r5
 80067bc:	10a4      	asrs	r4, r4, #2
 80067be:	2600      	movs	r6, #0
 80067c0:	42a6      	cmp	r6, r4
 80067c2:	d109      	bne.n	80067d8 <__libc_init_array+0x24>
 80067c4:	4d0b      	ldr	r5, [pc, #44]	@ (80067f4 <__libc_init_array+0x40>)
 80067c6:	4c0c      	ldr	r4, [pc, #48]	@ (80067f8 <__libc_init_array+0x44>)
 80067c8:	f000 fd66 	bl	8007298 <_init>
 80067cc:	1b64      	subs	r4, r4, r5
 80067ce:	10a4      	asrs	r4, r4, #2
 80067d0:	2600      	movs	r6, #0
 80067d2:	42a6      	cmp	r6, r4
 80067d4:	d105      	bne.n	80067e2 <__libc_init_array+0x2e>
 80067d6:	bd70      	pop	{r4, r5, r6, pc}
 80067d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067dc:	4798      	blx	r3
 80067de:	3601      	adds	r6, #1
 80067e0:	e7ee      	b.n	80067c0 <__libc_init_array+0xc>
 80067e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e6:	4798      	blx	r3
 80067e8:	3601      	adds	r6, #1
 80067ea:	e7f2      	b.n	80067d2 <__libc_init_array+0x1e>
 80067ec:	0800751c 	.word	0x0800751c
 80067f0:	0800751c 	.word	0x0800751c
 80067f4:	0800751c 	.word	0x0800751c
 80067f8:	08007520 	.word	0x08007520

080067fc <__retarget_lock_init_recursive>:
 80067fc:	4770      	bx	lr

080067fe <__retarget_lock_acquire_recursive>:
 80067fe:	4770      	bx	lr

08006800 <__retarget_lock_release_recursive>:
 8006800:	4770      	bx	lr

08006802 <memcpy>:
 8006802:	440a      	add	r2, r1
 8006804:	4291      	cmp	r1, r2
 8006806:	f100 33ff 	add.w	r3, r0, #4294967295
 800680a:	d100      	bne.n	800680e <memcpy+0xc>
 800680c:	4770      	bx	lr
 800680e:	b510      	push	{r4, lr}
 8006810:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006818:	4291      	cmp	r1, r2
 800681a:	d1f9      	bne.n	8006810 <memcpy+0xe>
 800681c:	bd10      	pop	{r4, pc}
	...

08006820 <_free_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4605      	mov	r5, r0
 8006824:	2900      	cmp	r1, #0
 8006826:	d041      	beq.n	80068ac <_free_r+0x8c>
 8006828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800682c:	1f0c      	subs	r4, r1, #4
 800682e:	2b00      	cmp	r3, #0
 8006830:	bfb8      	it	lt
 8006832:	18e4      	addlt	r4, r4, r3
 8006834:	f000 f8e0 	bl	80069f8 <__malloc_lock>
 8006838:	4a1d      	ldr	r2, [pc, #116]	@ (80068b0 <_free_r+0x90>)
 800683a:	6813      	ldr	r3, [r2, #0]
 800683c:	b933      	cbnz	r3, 800684c <_free_r+0x2c>
 800683e:	6063      	str	r3, [r4, #4]
 8006840:	6014      	str	r4, [r2, #0]
 8006842:	4628      	mov	r0, r5
 8006844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006848:	f000 b8dc 	b.w	8006a04 <__malloc_unlock>
 800684c:	42a3      	cmp	r3, r4
 800684e:	d908      	bls.n	8006862 <_free_r+0x42>
 8006850:	6820      	ldr	r0, [r4, #0]
 8006852:	1821      	adds	r1, r4, r0
 8006854:	428b      	cmp	r3, r1
 8006856:	bf01      	itttt	eq
 8006858:	6819      	ldreq	r1, [r3, #0]
 800685a:	685b      	ldreq	r3, [r3, #4]
 800685c:	1809      	addeq	r1, r1, r0
 800685e:	6021      	streq	r1, [r4, #0]
 8006860:	e7ed      	b.n	800683e <_free_r+0x1e>
 8006862:	461a      	mov	r2, r3
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	b10b      	cbz	r3, 800686c <_free_r+0x4c>
 8006868:	42a3      	cmp	r3, r4
 800686a:	d9fa      	bls.n	8006862 <_free_r+0x42>
 800686c:	6811      	ldr	r1, [r2, #0]
 800686e:	1850      	adds	r0, r2, r1
 8006870:	42a0      	cmp	r0, r4
 8006872:	d10b      	bne.n	800688c <_free_r+0x6c>
 8006874:	6820      	ldr	r0, [r4, #0]
 8006876:	4401      	add	r1, r0
 8006878:	1850      	adds	r0, r2, r1
 800687a:	4283      	cmp	r3, r0
 800687c:	6011      	str	r1, [r2, #0]
 800687e:	d1e0      	bne.n	8006842 <_free_r+0x22>
 8006880:	6818      	ldr	r0, [r3, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	6053      	str	r3, [r2, #4]
 8006886:	4408      	add	r0, r1
 8006888:	6010      	str	r0, [r2, #0]
 800688a:	e7da      	b.n	8006842 <_free_r+0x22>
 800688c:	d902      	bls.n	8006894 <_free_r+0x74>
 800688e:	230c      	movs	r3, #12
 8006890:	602b      	str	r3, [r5, #0]
 8006892:	e7d6      	b.n	8006842 <_free_r+0x22>
 8006894:	6820      	ldr	r0, [r4, #0]
 8006896:	1821      	adds	r1, r4, r0
 8006898:	428b      	cmp	r3, r1
 800689a:	bf04      	itt	eq
 800689c:	6819      	ldreq	r1, [r3, #0]
 800689e:	685b      	ldreq	r3, [r3, #4]
 80068a0:	6063      	str	r3, [r4, #4]
 80068a2:	bf04      	itt	eq
 80068a4:	1809      	addeq	r1, r1, r0
 80068a6:	6021      	streq	r1, [r4, #0]
 80068a8:	6054      	str	r4, [r2, #4]
 80068aa:	e7ca      	b.n	8006842 <_free_r+0x22>
 80068ac:	bd38      	pop	{r3, r4, r5, pc}
 80068ae:	bf00      	nop
 80068b0:	20000718 	.word	0x20000718

080068b4 <sbrk_aligned>:
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	4e0f      	ldr	r6, [pc, #60]	@ (80068f4 <sbrk_aligned+0x40>)
 80068b8:	460c      	mov	r4, r1
 80068ba:	6831      	ldr	r1, [r6, #0]
 80068bc:	4605      	mov	r5, r0
 80068be:	b911      	cbnz	r1, 80068c6 <sbrk_aligned+0x12>
 80068c0:	f000 fcda 	bl	8007278 <_sbrk_r>
 80068c4:	6030      	str	r0, [r6, #0]
 80068c6:	4621      	mov	r1, r4
 80068c8:	4628      	mov	r0, r5
 80068ca:	f000 fcd5 	bl	8007278 <_sbrk_r>
 80068ce:	1c43      	adds	r3, r0, #1
 80068d0:	d103      	bne.n	80068da <sbrk_aligned+0x26>
 80068d2:	f04f 34ff 	mov.w	r4, #4294967295
 80068d6:	4620      	mov	r0, r4
 80068d8:	bd70      	pop	{r4, r5, r6, pc}
 80068da:	1cc4      	adds	r4, r0, #3
 80068dc:	f024 0403 	bic.w	r4, r4, #3
 80068e0:	42a0      	cmp	r0, r4
 80068e2:	d0f8      	beq.n	80068d6 <sbrk_aligned+0x22>
 80068e4:	1a21      	subs	r1, r4, r0
 80068e6:	4628      	mov	r0, r5
 80068e8:	f000 fcc6 	bl	8007278 <_sbrk_r>
 80068ec:	3001      	adds	r0, #1
 80068ee:	d1f2      	bne.n	80068d6 <sbrk_aligned+0x22>
 80068f0:	e7ef      	b.n	80068d2 <sbrk_aligned+0x1e>
 80068f2:	bf00      	nop
 80068f4:	20000714 	.word	0x20000714

080068f8 <_malloc_r>:
 80068f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068fc:	1ccd      	adds	r5, r1, #3
 80068fe:	f025 0503 	bic.w	r5, r5, #3
 8006902:	3508      	adds	r5, #8
 8006904:	2d0c      	cmp	r5, #12
 8006906:	bf38      	it	cc
 8006908:	250c      	movcc	r5, #12
 800690a:	2d00      	cmp	r5, #0
 800690c:	4606      	mov	r6, r0
 800690e:	db01      	blt.n	8006914 <_malloc_r+0x1c>
 8006910:	42a9      	cmp	r1, r5
 8006912:	d904      	bls.n	800691e <_malloc_r+0x26>
 8006914:	230c      	movs	r3, #12
 8006916:	6033      	str	r3, [r6, #0]
 8006918:	2000      	movs	r0, #0
 800691a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800691e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069f4 <_malloc_r+0xfc>
 8006922:	f000 f869 	bl	80069f8 <__malloc_lock>
 8006926:	f8d8 3000 	ldr.w	r3, [r8]
 800692a:	461c      	mov	r4, r3
 800692c:	bb44      	cbnz	r4, 8006980 <_malloc_r+0x88>
 800692e:	4629      	mov	r1, r5
 8006930:	4630      	mov	r0, r6
 8006932:	f7ff ffbf 	bl	80068b4 <sbrk_aligned>
 8006936:	1c43      	adds	r3, r0, #1
 8006938:	4604      	mov	r4, r0
 800693a:	d158      	bne.n	80069ee <_malloc_r+0xf6>
 800693c:	f8d8 4000 	ldr.w	r4, [r8]
 8006940:	4627      	mov	r7, r4
 8006942:	2f00      	cmp	r7, #0
 8006944:	d143      	bne.n	80069ce <_malloc_r+0xd6>
 8006946:	2c00      	cmp	r4, #0
 8006948:	d04b      	beq.n	80069e2 <_malloc_r+0xea>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	4639      	mov	r1, r7
 800694e:	4630      	mov	r0, r6
 8006950:	eb04 0903 	add.w	r9, r4, r3
 8006954:	f000 fc90 	bl	8007278 <_sbrk_r>
 8006958:	4581      	cmp	r9, r0
 800695a:	d142      	bne.n	80069e2 <_malloc_r+0xea>
 800695c:	6821      	ldr	r1, [r4, #0]
 800695e:	1a6d      	subs	r5, r5, r1
 8006960:	4629      	mov	r1, r5
 8006962:	4630      	mov	r0, r6
 8006964:	f7ff ffa6 	bl	80068b4 <sbrk_aligned>
 8006968:	3001      	adds	r0, #1
 800696a:	d03a      	beq.n	80069e2 <_malloc_r+0xea>
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	442b      	add	r3, r5
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	f8d8 3000 	ldr.w	r3, [r8]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	bb62      	cbnz	r2, 80069d4 <_malloc_r+0xdc>
 800697a:	f8c8 7000 	str.w	r7, [r8]
 800697e:	e00f      	b.n	80069a0 <_malloc_r+0xa8>
 8006980:	6822      	ldr	r2, [r4, #0]
 8006982:	1b52      	subs	r2, r2, r5
 8006984:	d420      	bmi.n	80069c8 <_malloc_r+0xd0>
 8006986:	2a0b      	cmp	r2, #11
 8006988:	d917      	bls.n	80069ba <_malloc_r+0xc2>
 800698a:	1961      	adds	r1, r4, r5
 800698c:	42a3      	cmp	r3, r4
 800698e:	6025      	str	r5, [r4, #0]
 8006990:	bf18      	it	ne
 8006992:	6059      	strne	r1, [r3, #4]
 8006994:	6863      	ldr	r3, [r4, #4]
 8006996:	bf08      	it	eq
 8006998:	f8c8 1000 	streq.w	r1, [r8]
 800699c:	5162      	str	r2, [r4, r5]
 800699e:	604b      	str	r3, [r1, #4]
 80069a0:	4630      	mov	r0, r6
 80069a2:	f000 f82f 	bl	8006a04 <__malloc_unlock>
 80069a6:	f104 000b 	add.w	r0, r4, #11
 80069aa:	1d23      	adds	r3, r4, #4
 80069ac:	f020 0007 	bic.w	r0, r0, #7
 80069b0:	1ac2      	subs	r2, r0, r3
 80069b2:	bf1c      	itt	ne
 80069b4:	1a1b      	subne	r3, r3, r0
 80069b6:	50a3      	strne	r3, [r4, r2]
 80069b8:	e7af      	b.n	800691a <_malloc_r+0x22>
 80069ba:	6862      	ldr	r2, [r4, #4]
 80069bc:	42a3      	cmp	r3, r4
 80069be:	bf0c      	ite	eq
 80069c0:	f8c8 2000 	streq.w	r2, [r8]
 80069c4:	605a      	strne	r2, [r3, #4]
 80069c6:	e7eb      	b.n	80069a0 <_malloc_r+0xa8>
 80069c8:	4623      	mov	r3, r4
 80069ca:	6864      	ldr	r4, [r4, #4]
 80069cc:	e7ae      	b.n	800692c <_malloc_r+0x34>
 80069ce:	463c      	mov	r4, r7
 80069d0:	687f      	ldr	r7, [r7, #4]
 80069d2:	e7b6      	b.n	8006942 <_malloc_r+0x4a>
 80069d4:	461a      	mov	r2, r3
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	42a3      	cmp	r3, r4
 80069da:	d1fb      	bne.n	80069d4 <_malloc_r+0xdc>
 80069dc:	2300      	movs	r3, #0
 80069de:	6053      	str	r3, [r2, #4]
 80069e0:	e7de      	b.n	80069a0 <_malloc_r+0xa8>
 80069e2:	230c      	movs	r3, #12
 80069e4:	6033      	str	r3, [r6, #0]
 80069e6:	4630      	mov	r0, r6
 80069e8:	f000 f80c 	bl	8006a04 <__malloc_unlock>
 80069ec:	e794      	b.n	8006918 <_malloc_r+0x20>
 80069ee:	6005      	str	r5, [r0, #0]
 80069f0:	e7d6      	b.n	80069a0 <_malloc_r+0xa8>
 80069f2:	bf00      	nop
 80069f4:	20000718 	.word	0x20000718

080069f8 <__malloc_lock>:
 80069f8:	4801      	ldr	r0, [pc, #4]	@ (8006a00 <__malloc_lock+0x8>)
 80069fa:	f7ff bf00 	b.w	80067fe <__retarget_lock_acquire_recursive>
 80069fe:	bf00      	nop
 8006a00:	20000710 	.word	0x20000710

08006a04 <__malloc_unlock>:
 8006a04:	4801      	ldr	r0, [pc, #4]	@ (8006a0c <__malloc_unlock+0x8>)
 8006a06:	f7ff befb 	b.w	8006800 <__retarget_lock_release_recursive>
 8006a0a:	bf00      	nop
 8006a0c:	20000710 	.word	0x20000710

08006a10 <__sfputc_r>:
 8006a10:	6893      	ldr	r3, [r2, #8]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	b410      	push	{r4}
 8006a18:	6093      	str	r3, [r2, #8]
 8006a1a:	da08      	bge.n	8006a2e <__sfputc_r+0x1e>
 8006a1c:	6994      	ldr	r4, [r2, #24]
 8006a1e:	42a3      	cmp	r3, r4
 8006a20:	db01      	blt.n	8006a26 <__sfputc_r+0x16>
 8006a22:	290a      	cmp	r1, #10
 8006a24:	d103      	bne.n	8006a2e <__sfputc_r+0x1e>
 8006a26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a2a:	f7ff bdba 	b.w	80065a2 <__swbuf_r>
 8006a2e:	6813      	ldr	r3, [r2, #0]
 8006a30:	1c58      	adds	r0, r3, #1
 8006a32:	6010      	str	r0, [r2, #0]
 8006a34:	7019      	strb	r1, [r3, #0]
 8006a36:	4608      	mov	r0, r1
 8006a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <__sfputs_r>:
 8006a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a40:	4606      	mov	r6, r0
 8006a42:	460f      	mov	r7, r1
 8006a44:	4614      	mov	r4, r2
 8006a46:	18d5      	adds	r5, r2, r3
 8006a48:	42ac      	cmp	r4, r5
 8006a4a:	d101      	bne.n	8006a50 <__sfputs_r+0x12>
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	e007      	b.n	8006a60 <__sfputs_r+0x22>
 8006a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a54:	463a      	mov	r2, r7
 8006a56:	4630      	mov	r0, r6
 8006a58:	f7ff ffda 	bl	8006a10 <__sfputc_r>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d1f3      	bne.n	8006a48 <__sfputs_r+0xa>
 8006a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a64 <_vfiprintf_r>:
 8006a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a68:	460d      	mov	r5, r1
 8006a6a:	b09d      	sub	sp, #116	@ 0x74
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	4698      	mov	r8, r3
 8006a70:	4606      	mov	r6, r0
 8006a72:	b118      	cbz	r0, 8006a7c <_vfiprintf_r+0x18>
 8006a74:	6a03      	ldr	r3, [r0, #32]
 8006a76:	b90b      	cbnz	r3, 8006a7c <_vfiprintf_r+0x18>
 8006a78:	f7ff fca2 	bl	80063c0 <__sinit>
 8006a7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a7e:	07d9      	lsls	r1, r3, #31
 8006a80:	d405      	bmi.n	8006a8e <_vfiprintf_r+0x2a>
 8006a82:	89ab      	ldrh	r3, [r5, #12]
 8006a84:	059a      	lsls	r2, r3, #22
 8006a86:	d402      	bmi.n	8006a8e <_vfiprintf_r+0x2a>
 8006a88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a8a:	f7ff feb8 	bl	80067fe <__retarget_lock_acquire_recursive>
 8006a8e:	89ab      	ldrh	r3, [r5, #12]
 8006a90:	071b      	lsls	r3, r3, #28
 8006a92:	d501      	bpl.n	8006a98 <_vfiprintf_r+0x34>
 8006a94:	692b      	ldr	r3, [r5, #16]
 8006a96:	b99b      	cbnz	r3, 8006ac0 <_vfiprintf_r+0x5c>
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f7ff fdc0 	bl	8006620 <__swsetup_r>
 8006aa0:	b170      	cbz	r0, 8006ac0 <_vfiprintf_r+0x5c>
 8006aa2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006aa4:	07dc      	lsls	r4, r3, #31
 8006aa6:	d504      	bpl.n	8006ab2 <_vfiprintf_r+0x4e>
 8006aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aac:	b01d      	add	sp, #116	@ 0x74
 8006aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab2:	89ab      	ldrh	r3, [r5, #12]
 8006ab4:	0598      	lsls	r0, r3, #22
 8006ab6:	d4f7      	bmi.n	8006aa8 <_vfiprintf_r+0x44>
 8006ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006aba:	f7ff fea1 	bl	8006800 <__retarget_lock_release_recursive>
 8006abe:	e7f3      	b.n	8006aa8 <_vfiprintf_r+0x44>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ac4:	2320      	movs	r3, #32
 8006ac6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006aca:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ace:	2330      	movs	r3, #48	@ 0x30
 8006ad0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006c80 <_vfiprintf_r+0x21c>
 8006ad4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ad8:	f04f 0901 	mov.w	r9, #1
 8006adc:	4623      	mov	r3, r4
 8006ade:	469a      	mov	sl, r3
 8006ae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ae4:	b10a      	cbz	r2, 8006aea <_vfiprintf_r+0x86>
 8006ae6:	2a25      	cmp	r2, #37	@ 0x25
 8006ae8:	d1f9      	bne.n	8006ade <_vfiprintf_r+0x7a>
 8006aea:	ebba 0b04 	subs.w	fp, sl, r4
 8006aee:	d00b      	beq.n	8006b08 <_vfiprintf_r+0xa4>
 8006af0:	465b      	mov	r3, fp
 8006af2:	4622      	mov	r2, r4
 8006af4:	4629      	mov	r1, r5
 8006af6:	4630      	mov	r0, r6
 8006af8:	f7ff ffa1 	bl	8006a3e <__sfputs_r>
 8006afc:	3001      	adds	r0, #1
 8006afe:	f000 80a7 	beq.w	8006c50 <_vfiprintf_r+0x1ec>
 8006b02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b04:	445a      	add	r2, fp
 8006b06:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b08:	f89a 3000 	ldrb.w	r3, [sl]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 809f 	beq.w	8006c50 <_vfiprintf_r+0x1ec>
 8006b12:	2300      	movs	r3, #0
 8006b14:	f04f 32ff 	mov.w	r2, #4294967295
 8006b18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b1c:	f10a 0a01 	add.w	sl, sl, #1
 8006b20:	9304      	str	r3, [sp, #16]
 8006b22:	9307      	str	r3, [sp, #28]
 8006b24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b28:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b2a:	4654      	mov	r4, sl
 8006b2c:	2205      	movs	r2, #5
 8006b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b32:	4853      	ldr	r0, [pc, #332]	@ (8006c80 <_vfiprintf_r+0x21c>)
 8006b34:	f7f9 fb4c 	bl	80001d0 <memchr>
 8006b38:	9a04      	ldr	r2, [sp, #16]
 8006b3a:	b9d8      	cbnz	r0, 8006b74 <_vfiprintf_r+0x110>
 8006b3c:	06d1      	lsls	r1, r2, #27
 8006b3e:	bf44      	itt	mi
 8006b40:	2320      	movmi	r3, #32
 8006b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b46:	0713      	lsls	r3, r2, #28
 8006b48:	bf44      	itt	mi
 8006b4a:	232b      	movmi	r3, #43	@ 0x2b
 8006b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b50:	f89a 3000 	ldrb.w	r3, [sl]
 8006b54:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b56:	d015      	beq.n	8006b84 <_vfiprintf_r+0x120>
 8006b58:	9a07      	ldr	r2, [sp, #28]
 8006b5a:	4654      	mov	r4, sl
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	f04f 0c0a 	mov.w	ip, #10
 8006b62:	4621      	mov	r1, r4
 8006b64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b68:	3b30      	subs	r3, #48	@ 0x30
 8006b6a:	2b09      	cmp	r3, #9
 8006b6c:	d94b      	bls.n	8006c06 <_vfiprintf_r+0x1a2>
 8006b6e:	b1b0      	cbz	r0, 8006b9e <_vfiprintf_r+0x13a>
 8006b70:	9207      	str	r2, [sp, #28]
 8006b72:	e014      	b.n	8006b9e <_vfiprintf_r+0x13a>
 8006b74:	eba0 0308 	sub.w	r3, r0, r8
 8006b78:	fa09 f303 	lsl.w	r3, r9, r3
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	9304      	str	r3, [sp, #16]
 8006b80:	46a2      	mov	sl, r4
 8006b82:	e7d2      	b.n	8006b2a <_vfiprintf_r+0xc6>
 8006b84:	9b03      	ldr	r3, [sp, #12]
 8006b86:	1d19      	adds	r1, r3, #4
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	9103      	str	r1, [sp, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	bfbb      	ittet	lt
 8006b90:	425b      	neglt	r3, r3
 8006b92:	f042 0202 	orrlt.w	r2, r2, #2
 8006b96:	9307      	strge	r3, [sp, #28]
 8006b98:	9307      	strlt	r3, [sp, #28]
 8006b9a:	bfb8      	it	lt
 8006b9c:	9204      	strlt	r2, [sp, #16]
 8006b9e:	7823      	ldrb	r3, [r4, #0]
 8006ba0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ba2:	d10a      	bne.n	8006bba <_vfiprintf_r+0x156>
 8006ba4:	7863      	ldrb	r3, [r4, #1]
 8006ba6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ba8:	d132      	bne.n	8006c10 <_vfiprintf_r+0x1ac>
 8006baa:	9b03      	ldr	r3, [sp, #12]
 8006bac:	1d1a      	adds	r2, r3, #4
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	9203      	str	r2, [sp, #12]
 8006bb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bb6:	3402      	adds	r4, #2
 8006bb8:	9305      	str	r3, [sp, #20]
 8006bba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006c90 <_vfiprintf_r+0x22c>
 8006bbe:	7821      	ldrb	r1, [r4, #0]
 8006bc0:	2203      	movs	r2, #3
 8006bc2:	4650      	mov	r0, sl
 8006bc4:	f7f9 fb04 	bl	80001d0 <memchr>
 8006bc8:	b138      	cbz	r0, 8006bda <_vfiprintf_r+0x176>
 8006bca:	9b04      	ldr	r3, [sp, #16]
 8006bcc:	eba0 000a 	sub.w	r0, r0, sl
 8006bd0:	2240      	movs	r2, #64	@ 0x40
 8006bd2:	4082      	lsls	r2, r0
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	3401      	adds	r4, #1
 8006bd8:	9304      	str	r3, [sp, #16]
 8006bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bde:	4829      	ldr	r0, [pc, #164]	@ (8006c84 <_vfiprintf_r+0x220>)
 8006be0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006be4:	2206      	movs	r2, #6
 8006be6:	f7f9 faf3 	bl	80001d0 <memchr>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d03f      	beq.n	8006c6e <_vfiprintf_r+0x20a>
 8006bee:	4b26      	ldr	r3, [pc, #152]	@ (8006c88 <_vfiprintf_r+0x224>)
 8006bf0:	bb1b      	cbnz	r3, 8006c3a <_vfiprintf_r+0x1d6>
 8006bf2:	9b03      	ldr	r3, [sp, #12]
 8006bf4:	3307      	adds	r3, #7
 8006bf6:	f023 0307 	bic.w	r3, r3, #7
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	9303      	str	r3, [sp, #12]
 8006bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c00:	443b      	add	r3, r7
 8006c02:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c04:	e76a      	b.n	8006adc <_vfiprintf_r+0x78>
 8006c06:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	2001      	movs	r0, #1
 8006c0e:	e7a8      	b.n	8006b62 <_vfiprintf_r+0xfe>
 8006c10:	2300      	movs	r3, #0
 8006c12:	3401      	adds	r4, #1
 8006c14:	9305      	str	r3, [sp, #20]
 8006c16:	4619      	mov	r1, r3
 8006c18:	f04f 0c0a 	mov.w	ip, #10
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c22:	3a30      	subs	r2, #48	@ 0x30
 8006c24:	2a09      	cmp	r2, #9
 8006c26:	d903      	bls.n	8006c30 <_vfiprintf_r+0x1cc>
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0c6      	beq.n	8006bba <_vfiprintf_r+0x156>
 8006c2c:	9105      	str	r1, [sp, #20]
 8006c2e:	e7c4      	b.n	8006bba <_vfiprintf_r+0x156>
 8006c30:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c34:	4604      	mov	r4, r0
 8006c36:	2301      	movs	r3, #1
 8006c38:	e7f0      	b.n	8006c1c <_vfiprintf_r+0x1b8>
 8006c3a:	ab03      	add	r3, sp, #12
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	462a      	mov	r2, r5
 8006c40:	4b12      	ldr	r3, [pc, #72]	@ (8006c8c <_vfiprintf_r+0x228>)
 8006c42:	a904      	add	r1, sp, #16
 8006c44:	4630      	mov	r0, r6
 8006c46:	f3af 8000 	nop.w
 8006c4a:	4607      	mov	r7, r0
 8006c4c:	1c78      	adds	r0, r7, #1
 8006c4e:	d1d6      	bne.n	8006bfe <_vfiprintf_r+0x19a>
 8006c50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c52:	07d9      	lsls	r1, r3, #31
 8006c54:	d405      	bmi.n	8006c62 <_vfiprintf_r+0x1fe>
 8006c56:	89ab      	ldrh	r3, [r5, #12]
 8006c58:	059a      	lsls	r2, r3, #22
 8006c5a:	d402      	bmi.n	8006c62 <_vfiprintf_r+0x1fe>
 8006c5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c5e:	f7ff fdcf 	bl	8006800 <__retarget_lock_release_recursive>
 8006c62:	89ab      	ldrh	r3, [r5, #12]
 8006c64:	065b      	lsls	r3, r3, #25
 8006c66:	f53f af1f 	bmi.w	8006aa8 <_vfiprintf_r+0x44>
 8006c6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c6c:	e71e      	b.n	8006aac <_vfiprintf_r+0x48>
 8006c6e:	ab03      	add	r3, sp, #12
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	462a      	mov	r2, r5
 8006c74:	4b05      	ldr	r3, [pc, #20]	@ (8006c8c <_vfiprintf_r+0x228>)
 8006c76:	a904      	add	r1, sp, #16
 8006c78:	4630      	mov	r0, r6
 8006c7a:	f000 f879 	bl	8006d70 <_printf_i>
 8006c7e:	e7e4      	b.n	8006c4a <_vfiprintf_r+0x1e6>
 8006c80:	080074e0 	.word	0x080074e0
 8006c84:	080074ea 	.word	0x080074ea
 8006c88:	00000000 	.word	0x00000000
 8006c8c:	08006a3f 	.word	0x08006a3f
 8006c90:	080074e6 	.word	0x080074e6

08006c94 <_printf_common>:
 8006c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c98:	4616      	mov	r6, r2
 8006c9a:	4698      	mov	r8, r3
 8006c9c:	688a      	ldr	r2, [r1, #8]
 8006c9e:	690b      	ldr	r3, [r1, #16]
 8006ca0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	bfb8      	it	lt
 8006ca8:	4613      	movlt	r3, r2
 8006caa:	6033      	str	r3, [r6, #0]
 8006cac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	b10a      	cbz	r2, 8006cba <_printf_common+0x26>
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	6033      	str	r3, [r6, #0]
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	0699      	lsls	r1, r3, #26
 8006cbe:	bf42      	ittt	mi
 8006cc0:	6833      	ldrmi	r3, [r6, #0]
 8006cc2:	3302      	addmi	r3, #2
 8006cc4:	6033      	strmi	r3, [r6, #0]
 8006cc6:	6825      	ldr	r5, [r4, #0]
 8006cc8:	f015 0506 	ands.w	r5, r5, #6
 8006ccc:	d106      	bne.n	8006cdc <_printf_common+0x48>
 8006cce:	f104 0a19 	add.w	sl, r4, #25
 8006cd2:	68e3      	ldr	r3, [r4, #12]
 8006cd4:	6832      	ldr	r2, [r6, #0]
 8006cd6:	1a9b      	subs	r3, r3, r2
 8006cd8:	42ab      	cmp	r3, r5
 8006cda:	dc26      	bgt.n	8006d2a <_printf_common+0x96>
 8006cdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ce0:	6822      	ldr	r2, [r4, #0]
 8006ce2:	3b00      	subs	r3, #0
 8006ce4:	bf18      	it	ne
 8006ce6:	2301      	movne	r3, #1
 8006ce8:	0692      	lsls	r2, r2, #26
 8006cea:	d42b      	bmi.n	8006d44 <_printf_common+0xb0>
 8006cec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006cf0:	4641      	mov	r1, r8
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	47c8      	blx	r9
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	d01e      	beq.n	8006d38 <_printf_common+0xa4>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	6922      	ldr	r2, [r4, #16]
 8006cfe:	f003 0306 	and.w	r3, r3, #6
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	bf02      	ittt	eq
 8006d06:	68e5      	ldreq	r5, [r4, #12]
 8006d08:	6833      	ldreq	r3, [r6, #0]
 8006d0a:	1aed      	subeq	r5, r5, r3
 8006d0c:	68a3      	ldr	r3, [r4, #8]
 8006d0e:	bf0c      	ite	eq
 8006d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d14:	2500      	movne	r5, #0
 8006d16:	4293      	cmp	r3, r2
 8006d18:	bfc4      	itt	gt
 8006d1a:	1a9b      	subgt	r3, r3, r2
 8006d1c:	18ed      	addgt	r5, r5, r3
 8006d1e:	2600      	movs	r6, #0
 8006d20:	341a      	adds	r4, #26
 8006d22:	42b5      	cmp	r5, r6
 8006d24:	d11a      	bne.n	8006d5c <_printf_common+0xc8>
 8006d26:	2000      	movs	r0, #0
 8006d28:	e008      	b.n	8006d3c <_printf_common+0xa8>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4652      	mov	r2, sl
 8006d2e:	4641      	mov	r1, r8
 8006d30:	4638      	mov	r0, r7
 8006d32:	47c8      	blx	r9
 8006d34:	3001      	adds	r0, #1
 8006d36:	d103      	bne.n	8006d40 <_printf_common+0xac>
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d40:	3501      	adds	r5, #1
 8006d42:	e7c6      	b.n	8006cd2 <_printf_common+0x3e>
 8006d44:	18e1      	adds	r1, r4, r3
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	2030      	movs	r0, #48	@ 0x30
 8006d4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d4e:	4422      	add	r2, r4
 8006d50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d58:	3302      	adds	r3, #2
 8006d5a:	e7c7      	b.n	8006cec <_printf_common+0x58>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	4622      	mov	r2, r4
 8006d60:	4641      	mov	r1, r8
 8006d62:	4638      	mov	r0, r7
 8006d64:	47c8      	blx	r9
 8006d66:	3001      	adds	r0, #1
 8006d68:	d0e6      	beq.n	8006d38 <_printf_common+0xa4>
 8006d6a:	3601      	adds	r6, #1
 8006d6c:	e7d9      	b.n	8006d22 <_printf_common+0x8e>
	...

08006d70 <_printf_i>:
 8006d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d74:	7e0f      	ldrb	r7, [r1, #24]
 8006d76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d78:	2f78      	cmp	r7, #120	@ 0x78
 8006d7a:	4691      	mov	r9, r2
 8006d7c:	4680      	mov	r8, r0
 8006d7e:	460c      	mov	r4, r1
 8006d80:	469a      	mov	sl, r3
 8006d82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d86:	d807      	bhi.n	8006d98 <_printf_i+0x28>
 8006d88:	2f62      	cmp	r7, #98	@ 0x62
 8006d8a:	d80a      	bhi.n	8006da2 <_printf_i+0x32>
 8006d8c:	2f00      	cmp	r7, #0
 8006d8e:	f000 80d2 	beq.w	8006f36 <_printf_i+0x1c6>
 8006d92:	2f58      	cmp	r7, #88	@ 0x58
 8006d94:	f000 80b9 	beq.w	8006f0a <_printf_i+0x19a>
 8006d98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006da0:	e03a      	b.n	8006e18 <_printf_i+0xa8>
 8006da2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006da6:	2b15      	cmp	r3, #21
 8006da8:	d8f6      	bhi.n	8006d98 <_printf_i+0x28>
 8006daa:	a101      	add	r1, pc, #4	@ (adr r1, 8006db0 <_printf_i+0x40>)
 8006dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006db0:	08006e09 	.word	0x08006e09
 8006db4:	08006e1d 	.word	0x08006e1d
 8006db8:	08006d99 	.word	0x08006d99
 8006dbc:	08006d99 	.word	0x08006d99
 8006dc0:	08006d99 	.word	0x08006d99
 8006dc4:	08006d99 	.word	0x08006d99
 8006dc8:	08006e1d 	.word	0x08006e1d
 8006dcc:	08006d99 	.word	0x08006d99
 8006dd0:	08006d99 	.word	0x08006d99
 8006dd4:	08006d99 	.word	0x08006d99
 8006dd8:	08006d99 	.word	0x08006d99
 8006ddc:	08006f1d 	.word	0x08006f1d
 8006de0:	08006e47 	.word	0x08006e47
 8006de4:	08006ed7 	.word	0x08006ed7
 8006de8:	08006d99 	.word	0x08006d99
 8006dec:	08006d99 	.word	0x08006d99
 8006df0:	08006f3f 	.word	0x08006f3f
 8006df4:	08006d99 	.word	0x08006d99
 8006df8:	08006e47 	.word	0x08006e47
 8006dfc:	08006d99 	.word	0x08006d99
 8006e00:	08006d99 	.word	0x08006d99
 8006e04:	08006edf 	.word	0x08006edf
 8006e08:	6833      	ldr	r3, [r6, #0]
 8006e0a:	1d1a      	adds	r2, r3, #4
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6032      	str	r2, [r6, #0]
 8006e10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e09d      	b.n	8006f58 <_printf_i+0x1e8>
 8006e1c:	6833      	ldr	r3, [r6, #0]
 8006e1e:	6820      	ldr	r0, [r4, #0]
 8006e20:	1d19      	adds	r1, r3, #4
 8006e22:	6031      	str	r1, [r6, #0]
 8006e24:	0606      	lsls	r6, r0, #24
 8006e26:	d501      	bpl.n	8006e2c <_printf_i+0xbc>
 8006e28:	681d      	ldr	r5, [r3, #0]
 8006e2a:	e003      	b.n	8006e34 <_printf_i+0xc4>
 8006e2c:	0645      	lsls	r5, r0, #25
 8006e2e:	d5fb      	bpl.n	8006e28 <_printf_i+0xb8>
 8006e30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e34:	2d00      	cmp	r5, #0
 8006e36:	da03      	bge.n	8006e40 <_printf_i+0xd0>
 8006e38:	232d      	movs	r3, #45	@ 0x2d
 8006e3a:	426d      	negs	r5, r5
 8006e3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e40:	4859      	ldr	r0, [pc, #356]	@ (8006fa8 <_printf_i+0x238>)
 8006e42:	230a      	movs	r3, #10
 8006e44:	e011      	b.n	8006e6a <_printf_i+0xfa>
 8006e46:	6821      	ldr	r1, [r4, #0]
 8006e48:	6833      	ldr	r3, [r6, #0]
 8006e4a:	0608      	lsls	r0, r1, #24
 8006e4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e50:	d402      	bmi.n	8006e58 <_printf_i+0xe8>
 8006e52:	0649      	lsls	r1, r1, #25
 8006e54:	bf48      	it	mi
 8006e56:	b2ad      	uxthmi	r5, r5
 8006e58:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e5a:	4853      	ldr	r0, [pc, #332]	@ (8006fa8 <_printf_i+0x238>)
 8006e5c:	6033      	str	r3, [r6, #0]
 8006e5e:	bf14      	ite	ne
 8006e60:	230a      	movne	r3, #10
 8006e62:	2308      	moveq	r3, #8
 8006e64:	2100      	movs	r1, #0
 8006e66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e6a:	6866      	ldr	r6, [r4, #4]
 8006e6c:	60a6      	str	r6, [r4, #8]
 8006e6e:	2e00      	cmp	r6, #0
 8006e70:	bfa2      	ittt	ge
 8006e72:	6821      	ldrge	r1, [r4, #0]
 8006e74:	f021 0104 	bicge.w	r1, r1, #4
 8006e78:	6021      	strge	r1, [r4, #0]
 8006e7a:	b90d      	cbnz	r5, 8006e80 <_printf_i+0x110>
 8006e7c:	2e00      	cmp	r6, #0
 8006e7e:	d04b      	beq.n	8006f18 <_printf_i+0x1a8>
 8006e80:	4616      	mov	r6, r2
 8006e82:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e86:	fb03 5711 	mls	r7, r3, r1, r5
 8006e8a:	5dc7      	ldrb	r7, [r0, r7]
 8006e8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e90:	462f      	mov	r7, r5
 8006e92:	42bb      	cmp	r3, r7
 8006e94:	460d      	mov	r5, r1
 8006e96:	d9f4      	bls.n	8006e82 <_printf_i+0x112>
 8006e98:	2b08      	cmp	r3, #8
 8006e9a:	d10b      	bne.n	8006eb4 <_printf_i+0x144>
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	07df      	lsls	r7, r3, #31
 8006ea0:	d508      	bpl.n	8006eb4 <_printf_i+0x144>
 8006ea2:	6923      	ldr	r3, [r4, #16]
 8006ea4:	6861      	ldr	r1, [r4, #4]
 8006ea6:	4299      	cmp	r1, r3
 8006ea8:	bfde      	ittt	le
 8006eaa:	2330      	movle	r3, #48	@ 0x30
 8006eac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006eb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006eb4:	1b92      	subs	r2, r2, r6
 8006eb6:	6122      	str	r2, [r4, #16]
 8006eb8:	f8cd a000 	str.w	sl, [sp]
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	aa03      	add	r2, sp, #12
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	f7ff fee6 	bl	8006c94 <_printf_common>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d14a      	bne.n	8006f62 <_printf_i+0x1f2>
 8006ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed0:	b004      	add	sp, #16
 8006ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	f043 0320 	orr.w	r3, r3, #32
 8006edc:	6023      	str	r3, [r4, #0]
 8006ede:	4833      	ldr	r0, [pc, #204]	@ (8006fac <_printf_i+0x23c>)
 8006ee0:	2778      	movs	r7, #120	@ 0x78
 8006ee2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	6831      	ldr	r1, [r6, #0]
 8006eea:	061f      	lsls	r7, r3, #24
 8006eec:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ef0:	d402      	bmi.n	8006ef8 <_printf_i+0x188>
 8006ef2:	065f      	lsls	r7, r3, #25
 8006ef4:	bf48      	it	mi
 8006ef6:	b2ad      	uxthmi	r5, r5
 8006ef8:	6031      	str	r1, [r6, #0]
 8006efa:	07d9      	lsls	r1, r3, #31
 8006efc:	bf44      	itt	mi
 8006efe:	f043 0320 	orrmi.w	r3, r3, #32
 8006f02:	6023      	strmi	r3, [r4, #0]
 8006f04:	b11d      	cbz	r5, 8006f0e <_printf_i+0x19e>
 8006f06:	2310      	movs	r3, #16
 8006f08:	e7ac      	b.n	8006e64 <_printf_i+0xf4>
 8006f0a:	4827      	ldr	r0, [pc, #156]	@ (8006fa8 <_printf_i+0x238>)
 8006f0c:	e7e9      	b.n	8006ee2 <_printf_i+0x172>
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	f023 0320 	bic.w	r3, r3, #32
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	e7f6      	b.n	8006f06 <_printf_i+0x196>
 8006f18:	4616      	mov	r6, r2
 8006f1a:	e7bd      	b.n	8006e98 <_printf_i+0x128>
 8006f1c:	6833      	ldr	r3, [r6, #0]
 8006f1e:	6825      	ldr	r5, [r4, #0]
 8006f20:	6961      	ldr	r1, [r4, #20]
 8006f22:	1d18      	adds	r0, r3, #4
 8006f24:	6030      	str	r0, [r6, #0]
 8006f26:	062e      	lsls	r6, r5, #24
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	d501      	bpl.n	8006f30 <_printf_i+0x1c0>
 8006f2c:	6019      	str	r1, [r3, #0]
 8006f2e:	e002      	b.n	8006f36 <_printf_i+0x1c6>
 8006f30:	0668      	lsls	r0, r5, #25
 8006f32:	d5fb      	bpl.n	8006f2c <_printf_i+0x1bc>
 8006f34:	8019      	strh	r1, [r3, #0]
 8006f36:	2300      	movs	r3, #0
 8006f38:	6123      	str	r3, [r4, #16]
 8006f3a:	4616      	mov	r6, r2
 8006f3c:	e7bc      	b.n	8006eb8 <_printf_i+0x148>
 8006f3e:	6833      	ldr	r3, [r6, #0]
 8006f40:	1d1a      	adds	r2, r3, #4
 8006f42:	6032      	str	r2, [r6, #0]
 8006f44:	681e      	ldr	r6, [r3, #0]
 8006f46:	6862      	ldr	r2, [r4, #4]
 8006f48:	2100      	movs	r1, #0
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f7f9 f940 	bl	80001d0 <memchr>
 8006f50:	b108      	cbz	r0, 8006f56 <_printf_i+0x1e6>
 8006f52:	1b80      	subs	r0, r0, r6
 8006f54:	6060      	str	r0, [r4, #4]
 8006f56:	6863      	ldr	r3, [r4, #4]
 8006f58:	6123      	str	r3, [r4, #16]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f60:	e7aa      	b.n	8006eb8 <_printf_i+0x148>
 8006f62:	6923      	ldr	r3, [r4, #16]
 8006f64:	4632      	mov	r2, r6
 8006f66:	4649      	mov	r1, r9
 8006f68:	4640      	mov	r0, r8
 8006f6a:	47d0      	blx	sl
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d0ad      	beq.n	8006ecc <_printf_i+0x15c>
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	079b      	lsls	r3, r3, #30
 8006f74:	d413      	bmi.n	8006f9e <_printf_i+0x22e>
 8006f76:	68e0      	ldr	r0, [r4, #12]
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	4298      	cmp	r0, r3
 8006f7c:	bfb8      	it	lt
 8006f7e:	4618      	movlt	r0, r3
 8006f80:	e7a6      	b.n	8006ed0 <_printf_i+0x160>
 8006f82:	2301      	movs	r3, #1
 8006f84:	4632      	mov	r2, r6
 8006f86:	4649      	mov	r1, r9
 8006f88:	4640      	mov	r0, r8
 8006f8a:	47d0      	blx	sl
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	d09d      	beq.n	8006ecc <_printf_i+0x15c>
 8006f90:	3501      	adds	r5, #1
 8006f92:	68e3      	ldr	r3, [r4, #12]
 8006f94:	9903      	ldr	r1, [sp, #12]
 8006f96:	1a5b      	subs	r3, r3, r1
 8006f98:	42ab      	cmp	r3, r5
 8006f9a:	dcf2      	bgt.n	8006f82 <_printf_i+0x212>
 8006f9c:	e7eb      	b.n	8006f76 <_printf_i+0x206>
 8006f9e:	2500      	movs	r5, #0
 8006fa0:	f104 0619 	add.w	r6, r4, #25
 8006fa4:	e7f5      	b.n	8006f92 <_printf_i+0x222>
 8006fa6:	bf00      	nop
 8006fa8:	080074f1 	.word	0x080074f1
 8006fac:	08007502 	.word	0x08007502

08006fb0 <__sflush_r>:
 8006fb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb8:	0716      	lsls	r6, r2, #28
 8006fba:	4605      	mov	r5, r0
 8006fbc:	460c      	mov	r4, r1
 8006fbe:	d454      	bmi.n	800706a <__sflush_r+0xba>
 8006fc0:	684b      	ldr	r3, [r1, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	dc02      	bgt.n	8006fcc <__sflush_r+0x1c>
 8006fc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	dd48      	ble.n	800705e <__sflush_r+0xae>
 8006fcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006fce:	2e00      	cmp	r6, #0
 8006fd0:	d045      	beq.n	800705e <__sflush_r+0xae>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006fd8:	682f      	ldr	r7, [r5, #0]
 8006fda:	6a21      	ldr	r1, [r4, #32]
 8006fdc:	602b      	str	r3, [r5, #0]
 8006fde:	d030      	beq.n	8007042 <__sflush_r+0x92>
 8006fe0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	0759      	lsls	r1, r3, #29
 8006fe6:	d505      	bpl.n	8006ff4 <__sflush_r+0x44>
 8006fe8:	6863      	ldr	r3, [r4, #4]
 8006fea:	1ad2      	subs	r2, r2, r3
 8006fec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006fee:	b10b      	cbz	r3, 8006ff4 <__sflush_r+0x44>
 8006ff0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ff2:	1ad2      	subs	r2, r2, r3
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ff8:	6a21      	ldr	r1, [r4, #32]
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	47b0      	blx	r6
 8006ffe:	1c43      	adds	r3, r0, #1
 8007000:	89a3      	ldrh	r3, [r4, #12]
 8007002:	d106      	bne.n	8007012 <__sflush_r+0x62>
 8007004:	6829      	ldr	r1, [r5, #0]
 8007006:	291d      	cmp	r1, #29
 8007008:	d82b      	bhi.n	8007062 <__sflush_r+0xb2>
 800700a:	4a2a      	ldr	r2, [pc, #168]	@ (80070b4 <__sflush_r+0x104>)
 800700c:	410a      	asrs	r2, r1
 800700e:	07d6      	lsls	r6, r2, #31
 8007010:	d427      	bmi.n	8007062 <__sflush_r+0xb2>
 8007012:	2200      	movs	r2, #0
 8007014:	6062      	str	r2, [r4, #4]
 8007016:	04d9      	lsls	r1, r3, #19
 8007018:	6922      	ldr	r2, [r4, #16]
 800701a:	6022      	str	r2, [r4, #0]
 800701c:	d504      	bpl.n	8007028 <__sflush_r+0x78>
 800701e:	1c42      	adds	r2, r0, #1
 8007020:	d101      	bne.n	8007026 <__sflush_r+0x76>
 8007022:	682b      	ldr	r3, [r5, #0]
 8007024:	b903      	cbnz	r3, 8007028 <__sflush_r+0x78>
 8007026:	6560      	str	r0, [r4, #84]	@ 0x54
 8007028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800702a:	602f      	str	r7, [r5, #0]
 800702c:	b1b9      	cbz	r1, 800705e <__sflush_r+0xae>
 800702e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007032:	4299      	cmp	r1, r3
 8007034:	d002      	beq.n	800703c <__sflush_r+0x8c>
 8007036:	4628      	mov	r0, r5
 8007038:	f7ff fbf2 	bl	8006820 <_free_r>
 800703c:	2300      	movs	r3, #0
 800703e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007040:	e00d      	b.n	800705e <__sflush_r+0xae>
 8007042:	2301      	movs	r3, #1
 8007044:	4628      	mov	r0, r5
 8007046:	47b0      	blx	r6
 8007048:	4602      	mov	r2, r0
 800704a:	1c50      	adds	r0, r2, #1
 800704c:	d1c9      	bne.n	8006fe2 <__sflush_r+0x32>
 800704e:	682b      	ldr	r3, [r5, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d0c6      	beq.n	8006fe2 <__sflush_r+0x32>
 8007054:	2b1d      	cmp	r3, #29
 8007056:	d001      	beq.n	800705c <__sflush_r+0xac>
 8007058:	2b16      	cmp	r3, #22
 800705a:	d11e      	bne.n	800709a <__sflush_r+0xea>
 800705c:	602f      	str	r7, [r5, #0]
 800705e:	2000      	movs	r0, #0
 8007060:	e022      	b.n	80070a8 <__sflush_r+0xf8>
 8007062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007066:	b21b      	sxth	r3, r3
 8007068:	e01b      	b.n	80070a2 <__sflush_r+0xf2>
 800706a:	690f      	ldr	r7, [r1, #16]
 800706c:	2f00      	cmp	r7, #0
 800706e:	d0f6      	beq.n	800705e <__sflush_r+0xae>
 8007070:	0793      	lsls	r3, r2, #30
 8007072:	680e      	ldr	r6, [r1, #0]
 8007074:	bf08      	it	eq
 8007076:	694b      	ldreq	r3, [r1, #20]
 8007078:	600f      	str	r7, [r1, #0]
 800707a:	bf18      	it	ne
 800707c:	2300      	movne	r3, #0
 800707e:	eba6 0807 	sub.w	r8, r6, r7
 8007082:	608b      	str	r3, [r1, #8]
 8007084:	f1b8 0f00 	cmp.w	r8, #0
 8007088:	dde9      	ble.n	800705e <__sflush_r+0xae>
 800708a:	6a21      	ldr	r1, [r4, #32]
 800708c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800708e:	4643      	mov	r3, r8
 8007090:	463a      	mov	r2, r7
 8007092:	4628      	mov	r0, r5
 8007094:	47b0      	blx	r6
 8007096:	2800      	cmp	r0, #0
 8007098:	dc08      	bgt.n	80070ac <__sflush_r+0xfc>
 800709a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800709e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070a2:	81a3      	strh	r3, [r4, #12]
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295
 80070a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070ac:	4407      	add	r7, r0
 80070ae:	eba8 0800 	sub.w	r8, r8, r0
 80070b2:	e7e7      	b.n	8007084 <__sflush_r+0xd4>
 80070b4:	dfbffffe 	.word	0xdfbffffe

080070b8 <_fflush_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	690b      	ldr	r3, [r1, #16]
 80070bc:	4605      	mov	r5, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	b913      	cbnz	r3, 80070c8 <_fflush_r+0x10>
 80070c2:	2500      	movs	r5, #0
 80070c4:	4628      	mov	r0, r5
 80070c6:	bd38      	pop	{r3, r4, r5, pc}
 80070c8:	b118      	cbz	r0, 80070d2 <_fflush_r+0x1a>
 80070ca:	6a03      	ldr	r3, [r0, #32]
 80070cc:	b90b      	cbnz	r3, 80070d2 <_fflush_r+0x1a>
 80070ce:	f7ff f977 	bl	80063c0 <__sinit>
 80070d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0f3      	beq.n	80070c2 <_fflush_r+0xa>
 80070da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80070dc:	07d0      	lsls	r0, r2, #31
 80070de:	d404      	bmi.n	80070ea <_fflush_r+0x32>
 80070e0:	0599      	lsls	r1, r3, #22
 80070e2:	d402      	bmi.n	80070ea <_fflush_r+0x32>
 80070e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070e6:	f7ff fb8a 	bl	80067fe <__retarget_lock_acquire_recursive>
 80070ea:	4628      	mov	r0, r5
 80070ec:	4621      	mov	r1, r4
 80070ee:	f7ff ff5f 	bl	8006fb0 <__sflush_r>
 80070f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070f4:	07da      	lsls	r2, r3, #31
 80070f6:	4605      	mov	r5, r0
 80070f8:	d4e4      	bmi.n	80070c4 <_fflush_r+0xc>
 80070fa:	89a3      	ldrh	r3, [r4, #12]
 80070fc:	059b      	lsls	r3, r3, #22
 80070fe:	d4e1      	bmi.n	80070c4 <_fflush_r+0xc>
 8007100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007102:	f7ff fb7d 	bl	8006800 <__retarget_lock_release_recursive>
 8007106:	e7dd      	b.n	80070c4 <_fflush_r+0xc>

08007108 <__swhatbuf_r>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	460c      	mov	r4, r1
 800710c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007110:	2900      	cmp	r1, #0
 8007112:	b096      	sub	sp, #88	@ 0x58
 8007114:	4615      	mov	r5, r2
 8007116:	461e      	mov	r6, r3
 8007118:	da0d      	bge.n	8007136 <__swhatbuf_r+0x2e>
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007120:	f04f 0100 	mov.w	r1, #0
 8007124:	bf14      	ite	ne
 8007126:	2340      	movne	r3, #64	@ 0x40
 8007128:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800712c:	2000      	movs	r0, #0
 800712e:	6031      	str	r1, [r6, #0]
 8007130:	602b      	str	r3, [r5, #0]
 8007132:	b016      	add	sp, #88	@ 0x58
 8007134:	bd70      	pop	{r4, r5, r6, pc}
 8007136:	466a      	mov	r2, sp
 8007138:	f000 f87c 	bl	8007234 <_fstat_r>
 800713c:	2800      	cmp	r0, #0
 800713e:	dbec      	blt.n	800711a <__swhatbuf_r+0x12>
 8007140:	9901      	ldr	r1, [sp, #4]
 8007142:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007146:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800714a:	4259      	negs	r1, r3
 800714c:	4159      	adcs	r1, r3
 800714e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007152:	e7eb      	b.n	800712c <__swhatbuf_r+0x24>

08007154 <__smakebuf_r>:
 8007154:	898b      	ldrh	r3, [r1, #12]
 8007156:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007158:	079d      	lsls	r5, r3, #30
 800715a:	4606      	mov	r6, r0
 800715c:	460c      	mov	r4, r1
 800715e:	d507      	bpl.n	8007170 <__smakebuf_r+0x1c>
 8007160:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	6123      	str	r3, [r4, #16]
 8007168:	2301      	movs	r3, #1
 800716a:	6163      	str	r3, [r4, #20]
 800716c:	b003      	add	sp, #12
 800716e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007170:	ab01      	add	r3, sp, #4
 8007172:	466a      	mov	r2, sp
 8007174:	f7ff ffc8 	bl	8007108 <__swhatbuf_r>
 8007178:	9f00      	ldr	r7, [sp, #0]
 800717a:	4605      	mov	r5, r0
 800717c:	4639      	mov	r1, r7
 800717e:	4630      	mov	r0, r6
 8007180:	f7ff fbba 	bl	80068f8 <_malloc_r>
 8007184:	b948      	cbnz	r0, 800719a <__smakebuf_r+0x46>
 8007186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800718a:	059a      	lsls	r2, r3, #22
 800718c:	d4ee      	bmi.n	800716c <__smakebuf_r+0x18>
 800718e:	f023 0303 	bic.w	r3, r3, #3
 8007192:	f043 0302 	orr.w	r3, r3, #2
 8007196:	81a3      	strh	r3, [r4, #12]
 8007198:	e7e2      	b.n	8007160 <__smakebuf_r+0xc>
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	6020      	str	r0, [r4, #0]
 800719e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071a2:	81a3      	strh	r3, [r4, #12]
 80071a4:	9b01      	ldr	r3, [sp, #4]
 80071a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80071aa:	b15b      	cbz	r3, 80071c4 <__smakebuf_r+0x70>
 80071ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071b0:	4630      	mov	r0, r6
 80071b2:	f000 f851 	bl	8007258 <_isatty_r>
 80071b6:	b128      	cbz	r0, 80071c4 <__smakebuf_r+0x70>
 80071b8:	89a3      	ldrh	r3, [r4, #12]
 80071ba:	f023 0303 	bic.w	r3, r3, #3
 80071be:	f043 0301 	orr.w	r3, r3, #1
 80071c2:	81a3      	strh	r3, [r4, #12]
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	431d      	orrs	r5, r3
 80071c8:	81a5      	strh	r5, [r4, #12]
 80071ca:	e7cf      	b.n	800716c <__smakebuf_r+0x18>

080071cc <_putc_r>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	460d      	mov	r5, r1
 80071d0:	4614      	mov	r4, r2
 80071d2:	4606      	mov	r6, r0
 80071d4:	b118      	cbz	r0, 80071de <_putc_r+0x12>
 80071d6:	6a03      	ldr	r3, [r0, #32]
 80071d8:	b90b      	cbnz	r3, 80071de <_putc_r+0x12>
 80071da:	f7ff f8f1 	bl	80063c0 <__sinit>
 80071de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071e0:	07d8      	lsls	r0, r3, #31
 80071e2:	d405      	bmi.n	80071f0 <_putc_r+0x24>
 80071e4:	89a3      	ldrh	r3, [r4, #12]
 80071e6:	0599      	lsls	r1, r3, #22
 80071e8:	d402      	bmi.n	80071f0 <_putc_r+0x24>
 80071ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071ec:	f7ff fb07 	bl	80067fe <__retarget_lock_acquire_recursive>
 80071f0:	68a3      	ldr	r3, [r4, #8]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	60a3      	str	r3, [r4, #8]
 80071f8:	da05      	bge.n	8007206 <_putc_r+0x3a>
 80071fa:	69a2      	ldr	r2, [r4, #24]
 80071fc:	4293      	cmp	r3, r2
 80071fe:	db12      	blt.n	8007226 <_putc_r+0x5a>
 8007200:	b2eb      	uxtb	r3, r5
 8007202:	2b0a      	cmp	r3, #10
 8007204:	d00f      	beq.n	8007226 <_putc_r+0x5a>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	1c5a      	adds	r2, r3, #1
 800720a:	6022      	str	r2, [r4, #0]
 800720c:	701d      	strb	r5, [r3, #0]
 800720e:	b2ed      	uxtb	r5, r5
 8007210:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007212:	07da      	lsls	r2, r3, #31
 8007214:	d405      	bmi.n	8007222 <_putc_r+0x56>
 8007216:	89a3      	ldrh	r3, [r4, #12]
 8007218:	059b      	lsls	r3, r3, #22
 800721a:	d402      	bmi.n	8007222 <_putc_r+0x56>
 800721c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800721e:	f7ff faef 	bl	8006800 <__retarget_lock_release_recursive>
 8007222:	4628      	mov	r0, r5
 8007224:	bd70      	pop	{r4, r5, r6, pc}
 8007226:	4629      	mov	r1, r5
 8007228:	4622      	mov	r2, r4
 800722a:	4630      	mov	r0, r6
 800722c:	f7ff f9b9 	bl	80065a2 <__swbuf_r>
 8007230:	4605      	mov	r5, r0
 8007232:	e7ed      	b.n	8007210 <_putc_r+0x44>

08007234 <_fstat_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4d07      	ldr	r5, [pc, #28]	@ (8007254 <_fstat_r+0x20>)
 8007238:	2300      	movs	r3, #0
 800723a:	4604      	mov	r4, r0
 800723c:	4608      	mov	r0, r1
 800723e:	4611      	mov	r1, r2
 8007240:	602b      	str	r3, [r5, #0]
 8007242:	f7fb fc06 	bl	8002a52 <_fstat>
 8007246:	1c43      	adds	r3, r0, #1
 8007248:	d102      	bne.n	8007250 <_fstat_r+0x1c>
 800724a:	682b      	ldr	r3, [r5, #0]
 800724c:	b103      	cbz	r3, 8007250 <_fstat_r+0x1c>
 800724e:	6023      	str	r3, [r4, #0]
 8007250:	bd38      	pop	{r3, r4, r5, pc}
 8007252:	bf00      	nop
 8007254:	2000070c 	.word	0x2000070c

08007258 <_isatty_r>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	4d06      	ldr	r5, [pc, #24]	@ (8007274 <_isatty_r+0x1c>)
 800725c:	2300      	movs	r3, #0
 800725e:	4604      	mov	r4, r0
 8007260:	4608      	mov	r0, r1
 8007262:	602b      	str	r3, [r5, #0]
 8007264:	f7fb fc05 	bl	8002a72 <_isatty>
 8007268:	1c43      	adds	r3, r0, #1
 800726a:	d102      	bne.n	8007272 <_isatty_r+0x1a>
 800726c:	682b      	ldr	r3, [r5, #0]
 800726e:	b103      	cbz	r3, 8007272 <_isatty_r+0x1a>
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	bd38      	pop	{r3, r4, r5, pc}
 8007274:	2000070c 	.word	0x2000070c

08007278 <_sbrk_r>:
 8007278:	b538      	push	{r3, r4, r5, lr}
 800727a:	4d06      	ldr	r5, [pc, #24]	@ (8007294 <_sbrk_r+0x1c>)
 800727c:	2300      	movs	r3, #0
 800727e:	4604      	mov	r4, r0
 8007280:	4608      	mov	r0, r1
 8007282:	602b      	str	r3, [r5, #0]
 8007284:	f7fb fc0e 	bl	8002aa4 <_sbrk>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d102      	bne.n	8007292 <_sbrk_r+0x1a>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	b103      	cbz	r3, 8007292 <_sbrk_r+0x1a>
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	2000070c 	.word	0x2000070c

08007298 <_init>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	bf00      	nop
 800729c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729e:	bc08      	pop	{r3}
 80072a0:	469e      	mov	lr, r3
 80072a2:	4770      	bx	lr

080072a4 <_fini>:
 80072a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a6:	bf00      	nop
 80072a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072aa:	bc08      	pop	{r3}
 80072ac:	469e      	mov	lr, r3
 80072ae:	4770      	bx	lr
